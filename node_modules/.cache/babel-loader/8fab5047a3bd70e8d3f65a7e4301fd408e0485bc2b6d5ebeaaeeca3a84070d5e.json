{"ast":null,"code":"\n// // import React, { useEffect, useState } from 'react';\n// // import { listProjects, addProject } from '../../services/mockApi';\n// // import { Link } from 'react-router-dom';\n// // import { v4 as uuidv4 } from 'uuid';\n// // import { FiPlus } from 'react-icons/fi';\n\n// // export default function ProjectList() {\n// //   const [projects, setProjects] = useState([]);\n// //   const [name, setName] = useState('');\n// //   const [key, setKey] = useState('');\n\n// //   useEffect(()=>{ listProjects().then(setProjects); },[]);\n\n// //   const create = async () => {\n// //     const p = { id: uuidv4(), key: key.toUpperCase()||'PRJ', name, description:'', leads:[] };\n// //     await addProject(p);\n// //     setProjects(await listProjects());\n// //     setName(''); setKey('');\n// //   };\n\n// //   return (\n// //     <div className=\"grid\">\n// //       <div className=\"card\" aria-labelledby=\"proj-create\">\n// //         <h2 id=\"proj-create\">Create Project</h2>\n// //         <div className=\"form-row\"><label>Project Name<input value={name} onChange={e=>setName(e.target.value)} /></label></div>\n// //         <div className=\"form-row\"><label>Project Key<input value={key} onChange={e=>setKey(e.target.value)} /></label></div>\n// //         <button className=\"btn\" onClick={create}><FiPlus /> Create</button>\n// //       </div>\n// //       <div className=\"card\" aria-labelledby=\"proj-list\">\n// //         <h2 id=\"proj-list\">Projects</h2>\n// //         <ul>{projects.map(p=>(<li key={p.id}><Link to={'/projects/'+p.id}><strong>{p.name}</strong> <span className=\"small\">({p.key})</span></Link></li>))}</ul>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // import React, { useEffect, useState } from 'react';\n// // import { listProjects, addProject } from '../../services/mockApi';\n// // import { Link } from 'react-router-dom';\n// // import { v4 as uuidv4 } from 'uuid';\n// // import { FiPlus } from 'react-icons/fi';\n\n// // export default function ProjectList() {\n// //   const [projects, setProjects] = useState([]);\n// //   const [name, setName] = useState('');\n// //   const [key, setKey] = useState('');\n\n// //   useEffect(() => {\n// //     listProjects().then(setProjects);\n// //   }, []);\n\n// //   const create = async () => {\n// //     const p = { id: uuidv4(), key: key.toUpperCase() || 'PRJ', name, description: '', leads: [] };\n// //     await addProject(p);\n// //     setProjects(await listProjects());\n// //     setName('');\n// //     setKey('');\n// //   };\n\n// //   return (\n// //     <div className=\"grid\">\n// //       <div className=\"card\" aria-labelledby=\"proj-create\">\n// //         <h2 id=\"proj-create\">Create Project</h2>\n// //         <div className=\"form-row\">\n// //           <label>\n// //             Project Name\n// //             <input value={name} onChange={e => setName(e.target.value)} />\n// //           </label>\n// //         </div>\n// //         <div className=\"form-row\">\n// //           <label>\n// //             Project Key\n// //             <input value={key} onChange={e => setKey(e.target.value)} />\n// //           </label>\n// //         </div>\n// //         <button className=\"btn\" onClick={create}>\n// //           <FiPlus /> Create\n// //         </button>\n// //       </div>\n// //       <div className=\"card\" aria-labelledby=\"proj-list\">\n// //         <h2 id=\"proj-list\">Projects</h2>\n// //         <ul>\n// //           {projects.map(p => (\n// //             <li key={p.id}>\n// //               <Link to={'/projects/' + p.id}>\n// //                 <strong>{p.name}</strong> <span className=\"small\">({p.key})</span>\n// //               </Link>\n// //             </li>\n// //           ))}\n// //         </ul>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n//  //////////////////////\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject } from '../../services/mockApi';\n// import { Link } from 'react-router-dom';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus } from 'react-icons/fi';\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n\n//   useEffect(() => {\n//     listProjects().then(setProjects);\n//   }, []);\n\n//   const create = async () => {\n//     const p = { id: uuidv4(), key: key.toUpperCase() || 'PRJ', name, description: '', leads: [] };\n//     await addProject(p);\n//     setProjects(await listProjects());\n//     setName('');\n//     setKey('');\n//   };\n\n//   return (\n//     <div className=\"grid\">\n//       <div className=\"card\" aria-labelledby=\"proj-create\">\n//         <h2 id=\"proj-create\">Create Project</h2>\n//         <div className=\"form-row\">\n//           <label>\n//             Project Name\n//             <input value={name} onChange={e => setName(e.target.value)} />\n//           </label>\n//         </div>\n//         <div className=\"form-row\">\n//           <label>\n//             Project Key\n//             <input value={key} onChange={e => setKey(e.target.value)} />\n//           </label>\n//         </div>\n//         <button className=\"btn\" onClick={create}>\n//           <FiPlus /> Create\n//         </button>\n//       </div>\n//       <div className=\"card\" aria-labelledby=\"proj-list\">\n//         <h2 id=\"proj-list\">Projects</h2>\n//         <ul>\n//           {projects.map(p => (\n//             <li key={p.id}>\n//               <Link to={'/projects/' + p.id}>\n//                 <strong>{p.name}</strong> <span className=\"small\">({p.key})</span>\n//               </Link>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject, deleteProject, updateProject } from '../../services/mockApi';\n// import { Link } from 'react-router-dom';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus, FiTrash2, FiEdit2, FiCheck, FiX, FiChevronUp, FiChevronDown } from 'react-icons/fi';\n// import { formatDistanceToNow } from 'date-fns';\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n//   const [lead, setLead] = useState('');\n//   const [type, setType] = useState('Software');\n//   const [editingId, setEditingId] = useState(null);\n//   const [editName, setEditName] = useState('');\n//   const [editKey, setEditKey] = useState('');\n//   const [editLead, setEditLead] = useState('');\n//   const [editType, setEditType] = useState('');\n//   const [search, setSearch] = useState('');\n//   const [sortConfig, setSortConfig] = useState({ key: 'name', direction: 'asc' });\n\n//   useEffect(() => {\n//     loadProjects();\n//   }, []);\n\n//   const loadProjects = async () => {\n//     setProjects(await listProjects());\n//   };\n\n//   const create = async () => {\n//     if (!name.trim()) return;\n//     const now = new Date().toISOString();\n//     const p = {\n//       id: uuidv4(),\n//       key: key.toUpperCase() || 'PRJ',\n//       name,\n//       type,\n//       lead: lead || 'Unassigned',\n//       description: '',\n//       leads: [],\n//       lastUpdated: now\n//     };\n//     await addProject(p);\n//     await loadProjects();\n//     setName('');\n//     setKey('');\n//     setLead('');\n//     setType('Software');\n//   };\n\n//   const remove = async (id) => {\n//     if (window.confirm(\"Are you sure you want to delete this project?\")) {\n//       await deleteProject(id);\n//       await loadProjects();\n//     }\n//   };\n\n//   const startEdit = (p) => {\n//     setEditingId(p.id);\n//     setEditName(p.name);\n//     setEditKey(p.key);\n//     setEditLead(p.lead || '');\n//     setEditType(p.type || 'Software');\n//   };\n\n//   const cancelEdit = () => {\n//     setEditingId(null);\n//     setEditName('');\n//     setEditKey('');\n//     setEditLead('');\n//     setEditType('');\n//   };\n\n//   const saveEdit = async (id) => {\n//     const now = new Date().toISOString();\n//     await updateProject(id, {\n//       name: editName,\n//       key: editKey.toUpperCase(),\n//       lead: editLead,\n//       type: editType,\n//       lastUpdated: now\n//     });\n//     setEditingId(null);\n//     await loadProjects();\n//   };\n\n//   const avatarStyle = {\n//     width: '28px',\n//     height: '28px',\n//     borderRadius: '50%',\n//     background: '#0052cc',\n//     color: 'white',\n//     display: 'inline-flex',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     fontWeight: '600',\n//     marginRight: '8px',\n//     fontSize: '12px'\n//   };\n\n//   const typeBadgeStyle = (t) => {\n//     const colors = {\n//       Software: { bg: '#e3fcef', color: '#006644' },\n//       Business: { bg: '#deebff', color: '#0747a6' },\n//       Service: { bg: '#ffebe6', color: '#de350b' }\n//     };\n//     const c = colors[t] || { bg: '#f4f5f7', color: '#172b4d' };\n//     return {\n//       background: c.bg,\n//       color: c.color,\n//       padding: '0.25rem 0.6rem',\n//       borderRadius: '4px',\n//       fontSize: '12px',\n//       fontWeight: 600\n//     };\n//   };\n\n//   const getProjectColor = (id) => {\n//     const colors = ['#0052cc', '#2684ff', '#00a3bf', '#36b37e', '#ff991f', '#de350b', '#6554c0'];\n//     const index = id.charCodeAt(0) % colors.length;\n//     return colors[index];\n//   };\n\n//   const projectIconStyle = (id) => ({\n//     width: '28px',\n//     height: '28px',\n//     borderRadius: '4px',\n//     background: getProjectColor(id),\n//     color: 'white',\n//     display: 'inline-flex',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     fontWeight: 600,\n//     marginRight: '8px',\n//     fontSize: '12px',\n//     textTransform: 'uppercase'\n//   });\n\n//   // Filtering\n//   const filteredProjects = projects.filter(p =>\n//     p.name.toLowerCase().includes(search.toLowerCase()) ||\n//     p.key.toLowerCase().includes(search.toLowerCase()) ||\n//     (p.lead && p.lead.toLowerCase().includes(search.toLowerCase())) ||\n//     (p.type && p.type.toLowerCase().includes(search.toLowerCase()))\n//   );\n\n//   // Sorting\n//   const sortedProjects = [...filteredProjects].sort((a, b) => {\n//     const aVal = a[sortConfig.key]?.toString().toLowerCase() || '';\n//     const bVal = b[sortConfig.key]?.toString().toLowerCase() || '';\n//     if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1;\n//     if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1;\n//     return 0;\n//   });\n\n//   const toggleSort = (key) => {\n//     setSortConfig((prev) =>\n//       prev.key === key\n//         ? { key, direction: prev.direction === 'asc' ? 'desc' : 'asc' }\n//         : { key, direction: 'asc' }\n//     );\n//   };\n\n//   const sortIcon = (col) => {\n//     if (sortConfig.key !== col) return null;\n//     return sortConfig.direction === 'asc' ? <FiChevronUp /> : <FiChevronDown />;\n//   };\n\n//   return (\n//     <div style={{ display: 'grid', gridTemplateColumns: '1fr 3fr', gap: '2rem' }}>\n//       {/* Create Project */}\n//       {/* ... (same as before, keeping form part unchanged) ... */}\n\n//       {/* Project Table */}\n//       <div style={{ background: '#fff', borderRadius: '6px', padding: '1.5rem', boxShadow: '0 1px 4px rgba(0,0,0,0.1)' }}>\n//         <h2 style={{ marginBottom: '1rem' }}>Projects</h2>\n\n//         <input\n//           type=\"text\"\n//           value={search}\n//           onChange={e => setSearch(e.target.value)}\n//           placeholder=\"Search projects...\"\n//           style={{\n//             width: '100%',\n//             padding: '0.6rem',\n//             marginBottom: '1rem',\n//             border: '1px solid #dfe1e6',\n//             borderRadius: '4px'\n//           }}\n//         />\n\n//         {sortedProjects.length === 0 ? (\n//           <p>No projects found.</p>\n//         ) : (\n//           <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n//             <thead>\n//               <tr>\n//                 <th onClick={() => toggleSort('key')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Key {sortIcon('key')}\n//                 </th>\n//                 <th onClick={() => toggleSort('name')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Name {sortIcon('name')}\n//                 </th>\n//                 <th onClick={() => toggleSort('type')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Type {sortIcon('type')}\n//                 </th>\n//                 <th onClick={() => toggleSort('lead')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Lead {sortIcon('lead')}\n//                 </th>\n//                 <th onClick={() => toggleSort('lastUpdated')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Last Updated {sortIcon('lastUpdated')}\n//                 </th>\n//                 <th style={{ padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7', textAlign: 'right' }}>\n//                   Actions\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {sortedProjects.map(p => (\n//                 <tr key={p.id} style={{ borderBottom: '1px solid #f0f0f0' }}>\n//                   <td style={{ padding: '0.75rem 1rem' }}>{p.key}</td>\n//                   <td style={{ padding: '0.75rem 1rem', display: 'flex', alignItems: 'center' }}>\n//                     <span style={projectIconStyle(p.id)}>{p.key.slice(0, 2)}</span>\n//                     {editingId === p.id ? (\n//                       <input value={editName} onChange={e => setEditName(e.target.value)} />\n//                     ) : (\n//                       <Link to={'/projects/' + p.id} style={{ fontWeight: 600, color: '#0052cc', textDecoration: 'none' }}>\n//                         {p.name}\n//                       </Link>\n//                     )}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem' }}>\n//                     {editingId === p.id ? (\n//                       <select value={editType} onChange={e => setEditType(e.target.value)}>\n//                         <option value=\"Software\">Software</option>\n//                         <option value=\"Business\">Business</option>\n//                         <option value=\"Service\">Service</option>\n//                       </select>\n//                     ) : (\n//                       <span style={typeBadgeStyle(p.type)}>{p.type}</span>\n//                     )}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem' }}>\n//                     {editingId === p.id ? (\n//                       <input value={editLead} onChange={e => setEditLead(e.target.value)} />\n//                     ) : (\n//                       <div style={{ display: 'flex', alignItems: 'center' }}>\n//                         <span style={avatarStyle}>{p.lead ? p.lead.charAt(0).toUpperCase() : '?'}</span>\n//                         {p.lead || 'Unassigned'}\n//                       </div>\n//                     )}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem', color: '#6b778c' }}>\n//                     {p.lastUpdated ? formatDistanceToNow(new Date(p.lastUpdated), { addSuffix: true }) : '—'}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem', textAlign: 'right' }}>\n//                     {editingId === p.id ? (\n//                       <>\n//                         <button onClick={() => saveEdit(p.id)}><FiCheck /></button>\n//                         <button onClick={cancelEdit}><FiX /></button>\n//                       </>\n//                     ) : (\n//                       <>\n//                         <button onClick={() => startEdit(p)}><FiEdit2 /></button>\n//                         <button onClick={() => remove(p.id)}><FiTrash2 /></button>\n//                       </>\n//                     )}\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject, deleteProject, updateProject } from '../../services/mockApi';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus, FiTrash2, FiEdit2, FiCheck, FiX } from 'react-icons/fi';\n// import { formatDistanceToNow } from 'date-fns';\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n//   const [leads, setLeads] = useState([]);\n//   const [type, setType] = useState('Software');\n//   const [editingId, setEditingId] = useState(null);\n//   const [editName, setEditName] = useState('');\n//   const [editKey, setEditKey] = useState('');\n//   const [editLeads, setEditLeads] = useState([]);\n//   const [editType, setEditType] = useState('');\n\n//   useEffect(() => { loadProjects(); }, []);\n//   const loadProjects = async () => setProjects(await listProjects());\n\n//   const createProject = async () => {\n//     if (!name.trim()) return;\n//     const now = new Date().toISOString();\n//     const p = {\n//       id: uuidv4(),\n//       key: key.toUpperCase() || 'PRJ',\n//       name,\n//       type,\n//       leads: leads.length ? leads : ['Unassigned'],\n//       description: '',\n//       lastUpdated: now,\n//       createdAt: now\n//     };\n//     await addProject(p);\n//     setName(''); setKey(''); setLeads([]); setType('Software');\n//     loadProjects();\n//   };\n\n//   const removeProject = async (id) => {\n//     if (window.confirm(\"Are you sure you want to delete this project?\")) {\n//       await deleteProject(id);\n//       loadProjects();\n//     }\n//   };\n\n//   const startEdit = (p) => {\n//     setEditingId(p.id);\n//     setEditName(p.name);\n//     setEditKey(p.key);\n//     setEditLeads(p.leads || []);\n//     setEditType(p.type || 'Software');\n//   };\n//   const cancelEdit = () => { setEditingId(null); setEditName(''); setEditKey(''); setEditLeads([]); setEditType(''); };\n//   const saveEdit = async (id) => {\n//     await updateProject(id, {\n//       name: editName,\n//       key: editKey.toUpperCase(),\n//       leads: editLeads.length ? editLeads : ['Unassigned'],\n//       type: editType,\n//       lastUpdated: new Date().toISOString()\n//     });\n//     cancelEdit();\n//     loadProjects();\n//   };\n\n//   const leadColor = (name) => {\n//     const colors = ['#0052CC', '#36B37E', '#FF5630', '#FFAB00', '#6554C0', '#00A3BF'];\n//     if (!name) return '#6B778C';\n//     const index = name.charCodeAt(0) % colors.length;\n//     return colors[index];\n//   };\n\n//   const typeBadgeStyle = t => {\n//     const colors = {\n//       Software: { bg: '#E3FCF7', color: '#006644' },\n//       Business: { bg: '#DEEBFF', color: '#0747A6' },\n//       Service: { bg: '#FFEBE6', color: '#DE350B' }\n//     };\n//     const c = colors[t] || { bg: '#F4F5F7', color: '#172B4D' };\n//     return { background: c.bg, color: c.color, padding:'0.25rem 0.6rem', borderRadius:'4px', fontSize:'12px', fontWeight:600 };\n//   };\n\n//   const renderLeads = (leadsArr) => (\n//     <div style={{ display:'flex', alignItems:'center' }}>\n//       {leadsArr.map((l,i) => (\n//         <div key={i} title={l} style={{\n//           width:'28px', height:'28px', borderRadius:'50%', background:leadColor(l), color:'#fff',\n//           display:'flex', alignItems:'center', justifyContent:'center',\n//           fontSize:'12px', fontWeight:600, marginLeft:i>0?-8:0, border:'2px solid #fff'\n//         }}>{l.charAt(0).toUpperCase()}</div>\n//       ))}\n//     </div>\n//   );\n\n//   return (\n//     <div style={{ display:'grid', gridTemplateColumns:'1fr 3fr', gap:'2rem', padding:'2rem', fontFamily:'Arial,sans-serif' }}>\n//       {/* Create Project Form */}\n//       <div style={{ background:'#fff', padding:'1.5rem', borderRadius:'8px', boxShadow:'0 2px 6px rgba(0,0,0,0.1)' }}>\n//         <h2 style={{ marginBottom:'1rem', fontSize:'18px', color:'#172b4d' }}>Create Project</h2>\n//         <div style={{ marginBottom:'1rem' }}><label>Project Name</label><input value={name} onChange={e=>setName(e.target.value)} style={{ width:'100%', padding:'8px', borderRadius:'4px', border:'1px solid #ccc' }} /></div>\n//         <div style={{ marginBottom:'1rem' }}><label>Project Key</label><input value={key} onChange={e=>setKey(e.target.value)} style={{ width:'100%', padding:'8px', borderRadius:'4px', border:'1px solid #ccc' }} /></div>\n//         <div style={{ marginBottom:'1rem' }}><label>Leads (comma separated)</label><input value={leads.join(',')} onChange={e=>setLeads(e.target.value.split(',').map(l=>l.trim()))} style={{ width:'100%', padding:'8px', borderRadius:'4px', border:'1px solid #ccc' }} /></div>\n//         <div style={{ marginBottom:'1rem' }}><label>Type</label><select value={type} onChange={e=>setType(e.target.value)} style={{ width:'100%', padding:'8px', borderRadius:'4px', border:'1px solid #ccc' }}><option>Software</option><option>Business</option><option>Service</option></select></div>\n//         <button onClick={createProject} style={{ display:'flex', alignItems:'center', gap:'6px', background:'#0052CC', color:'#fff', border:'none', padding:'10px 16px', borderRadius:'4px', cursor:'pointer' }}><FiPlus /> Create</button>\n//       </div>\n\n//       {/* Jira-style Project Cards */}\n//       <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fill,minmax(300px,1fr))', gap:'1rem' }}>\n//         {projects.map(p => (\n//           <div key={p.id} style={{\n//             display:'flex', flexDirection:'column', padding:'1rem', borderRadius:'6px',\n//             boxShadow:'0 1px 3px rgba(0,0,0,0.1)', position:'relative',\n//             borderLeft:`6px solid ${leadColor(p.leads[0])}`, transition:'transform 0.2s',\n//           }}\n//           onMouseEnter={e=>e.currentTarget.style.transform='translateY(-3px)'}\n//           onMouseLeave={e=>e.currentTarget.style.transform='translateY(0)'}\n//           >\n//             <div style={{ display:'flex', justifyContent:'space-between', alignItems:'center' }}>\n//               <div style={{ fontWeight:600, fontSize:'16px', color:'#172b4d' }}>{editingId===p.id?<input value={editName} onChange={e=>setEditName(e.target.value)} />:<span>{p.name}</span>}</div>\n//               <div style={{ display:'flex', gap:'6px', opacity:0.7 }}>\n//                 {editingId===p.id?(<>\n//                   <button onClick={()=>saveEdit(p.id)}><FiCheck /></button>\n//                   <button onClick={cancelEdit}><FiX /></button>\n//                 </>):(<>\n//                   <button onClick={()=>startEdit(p)}><FiEdit2 /></button>\n//                   <button onClick={()=>removeProject(p.id)}><FiTrash2 /></button>\n//                 </>)}\n//               </div>\n//             </div>\n//             <div style={{ margin:'0.5rem 0', color:'#6b778c', fontSize:'13px' }}>{p.key}</div>\n//             <div style={{ margin:'0.5rem 0' }}><span style={typeBadgeStyle(p.type)}>{p.type}</span></div>\n//             <div style={{ marginTop:'auto', display:'flex', justifyContent:'space-between', alignItems:'center' }}>\n//               {editingId===p.id?<input value={editLeads.join(',')} onChange={e=>setEditLeads(e.target.value.split(',').map(l=>l.trim()))} />:renderLeads(p.leads)}\n//               <div style={{ fontSize:'12px', color:'#6b778c' }}>{p.lastUpdated?formatDistanceToNow(new Date(p.lastUpdated),{addSuffix:true}):'—'}</div>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// //deepseek\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject, deleteProject, updateProject } from '../../services/mockApi';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus, FiTrash2, FiEdit2, FiCheck, FiX, FiUsers, FiLayers, FiKey, FiCalendar } from 'react-icons/fi';\n// import { formatDistanceToNow } from 'date-fns';\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n//   const [leads, setLeads] = useState([]);\n//   const [type, setType] = useState('Software');\n//   const [editingId, setEditingId] = useState(null);\n//   const [editName, setEditName] = useState('');\n//   const [editKey, setEditKey] = useState('');\n//   const [editLeads, setEditLeads] = useState([]);\n//   const [editType, setEditType] = useState('');\n\n//   useEffect(() => { loadProjects(); }, []);\n//   const loadProjects = async () => setProjects(await listProjects());\n\n//   const createProject = async () => {\n//     if (!name.trim()) return;\n//     const now = new Date().toISOString();\n//     const p = {\n//       id: uuidv4(),\n//       key: key.toUpperCase() || 'PRJ',\n//       name,\n//       type,\n//       leads: leads.length ? leads : ['Unassigned'],\n//       description: '',\n//       lastUpdated: now,\n//       createdAt: now\n//     };\n//     await addProject(p);\n//     setName(''); setKey(''); setLeads([]); setType('Software');\n//     loadProjects();\n//   };\n\n//   const removeProject = async (id) => {\n//     if (window.confirm(\"Are you sure you want to delete this project?\")) {\n//       await deleteProject(id);\n//       loadProjects();\n//     }\n//   };\n\n//   const startEdit = (p) => {\n//     setEditingId(p.id);\n//     setEditName(p.name);\n//     setEditKey(p.key);\n//     setEditLeads(p.leads || []);\n//     setEditType(p.type || 'Software');\n//   };\n\n//   const cancelEdit = () => { \n//     setEditingId(null); \n//     setEditName(''); \n//     setEditKey(''); \n//     setEditLeads([]); \n//     setEditType(''); \n//   };\n\n//   const saveEdit = async (id) => {\n//     await updateProject(id, {\n//       name: editName,\n//       key: editKey.toUpperCase(),\n//       leads: editLeads.length ? editLeads : ['Unassigned'],\n//       type: editType,\n//       lastUpdated: new Date().toISOString()\n//     });\n//     cancelEdit();\n//     loadProjects();\n//   };\n\n//   const leadColor = (name) => {\n//     const colors = ['#0052CC', '#36B37E', '#FF5630', '#FFAB00', '#6554C0', '#00A3BF'];\n//     if (!name) return '#6B778C';\n//     const index = name.charCodeAt(0) % colors.length;\n//     return colors[index];\n//   };\n\n//   const typeBadgeStyle = t => {\n//     const colors = {\n//       Software: { bg: '#E3FCF7', color: '#006644', icon: '💻' },\n//       Business: { bg: '#DEEBFF', color: '#0747A6', icon: '📊' },\n//       Service: { bg: '#FFEBE6', color: '#DE350B', icon: '🔧' }\n//     };\n//     const c = colors[t] || { bg: '#F4F5F7', color: '#172B4D', icon: '📁' };\n//     return c;\n//   };\n\n//   const renderLeads = (leadsArr) => (\n//     <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n//       <FiUsers size={14} color=\"#6B778C\" />\n//       {leadsArr.map((l, i) => (\n//         <div key={i} title={l} style={{\n//           width: '28px', \n//           height: '28px', \n//           borderRadius: '50%', \n//           background: leadColor(l), \n//           color: '#fff',\n//           display: 'flex', \n//           alignItems: 'center', \n//           justifyContent: 'center',\n//           fontSize: '12px', \n//           fontWeight: 600, \n//           marginLeft: i > 0 ? -8 : 0, \n//           border: '2px solid #fff',\n//           boxShadow: '0 1px 3px rgba(0,0,0,0.1)'\n//         }}>\n//           {l.charAt(0).toUpperCase()}\n//         </div>\n//       ))}\n//     </div>\n//   );\n\n//   const InputField = ({ label, value, onChange, icon: Icon, ...props }) => (\n//     <div style={{ marginBottom: '1rem' }}>\n//       <label style={{ \n//         display: 'block', \n//         marginBottom: '4px', \n//         fontSize: '14px', \n//         fontWeight: 600, \n//         color: '#172B4D' \n//       }}>\n//         {Icon && <Icon size={14} style={{ marginRight: '6px' }} />}\n//         {label}\n//       </label>\n//       <input \n//         value={value} \n//         onChange={onChange}\n//         style={{ \n//           width: '100%', \n//           padding: '10px 12px', \n//           borderRadius: '4px', \n//           border: '1px solid #DFE1E6',\n//           fontSize: '14px',\n//           transition: 'all 0.2s'\n//         }}\n//         onFocus={(e) => e.target.style.borderColor = '#0052CC'}\n//         onBlur={(e) => e.target.style.borderColor = '#DFE1E6'}\n//         {...props}\n//       />\n//     </div>\n//   );\n\n//   return (\n//     <div style={{ \n//       minHeight: '100vh', \n//       background: '#F4F5F7', \n//       padding: '2rem',\n//       fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", sans-serif'\n//     }}>\n//       <div style={{ maxWidth: '1400px', margin: '0 auto' }}>\n//         {/* Header */}\n//         <div style={{ marginBottom: '2rem' }}>\n//           <h1 style={{ \n//             fontSize: '24px', \n//             fontWeight: 600, \n//             color: '#172B4D',\n//             marginBottom: '4px'\n//           }}>\n//             Projects\n//           </h1>\n//           <p style={{ color: '#6B778C', fontSize: '14px' }}>\n//             Manage your team's projects and settings\n//           </p>\n//         </div>\n\n//         <div style={{ display: 'grid', gridTemplateColumns: '320px 1fr', gap: '2rem' }}>\n//           {/* Create Project Form */}\n//           <div style={{ \n//             background: '#fff', \n//             padding: '1.5rem', \n//             borderRadius: '8px', \n//             boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n//             border: '1px solid #DFE1E6',\n//             height: 'fit-content',\n//             position: 'sticky',\n//             top: '2rem'\n//           }}>\n//             <h2 style={{ \n//               marginBottom: '1.5rem', \n//               fontSize: '16px', \n//               fontWeight: 600,\n//               color: '#172B4D',\n//               display: 'flex',\n//               alignItems: 'center',\n//               gap: '8px'\n//             }}>\n//               <FiPlus size={18} /> Create New Project\n//             </h2>\n\n//             <InputField \n//               label=\"Project Name\" \n//               value={name} \n//               onChange={e => setName(e.target.value)}\n//               icon={FiLayers}\n//               placeholder=\"Enter project name\"\n//             />\n\n//             <InputField \n//               label=\"Project Key\" \n//               value={key} \n//               onChange={e => setKey(e.target.value)}\n//               icon={FiKey}\n//               placeholder=\"PRJ\"\n//               style={{ textTransform: 'uppercase' }}\n//             />\n\n//             <InputField \n//               label=\"Leads (comma separated)\" \n//               value={leads.join(',')} \n//               onChange={e => setLeads(e.target.value.split(',').map(l => l.trim()))}\n//               icon={FiUsers}\n//               placeholder=\"John Doe, Jane Smith\"\n//             />\n\n//             <div style={{ marginBottom: '1.5rem' }}>\n//               <label style={{ \n//                 display: 'block', \n//                 marginBottom: '4px', \n//                 fontSize: '14px', \n//                 fontWeight: 600, \n//                 color: '#172B4D' \n//               }}>\n//                 <FiLayers size={14} style={{ marginRight: '6px' }} />\n//                 Type\n//               </label>\n//               <select \n//                 value={type} \n//                 onChange={e => setType(e.target.value)} \n//                 style={{ \n//                   width: '100%', \n//                   padding: '10px 12px', \n//                   borderRadius: '4px', \n//                   border: '1px solid #DFE1E6',\n//                   fontSize: '14px',\n//                   background: '#fff'\n//                 }}\n//               >\n//                 <option value=\"Software\">💻 Software</option>\n//                 <option value=\"Business\">📊 Business</option>\n//                 <option value=\"Service\">🔧 Service</option>\n//               </select>\n//             </div>\n\n//             <button \n//               onClick={createProject} \n//               style={{ \n//                 display: 'flex', \n//                 alignItems: 'center', \n//                 justifyContent: 'center',\n//                 gap: '8px', \n//                 background: '#0052CC', \n//                 color: '#fff', \n//                 border: 'none', \n//                 padding: '12px 20px', \n//                 borderRadius: '4px', \n//                 cursor: 'pointer',\n//                 fontSize: '14px',\n//                 fontWeight: 600,\n//                 width: '100%',\n//                 transition: 'all 0.2s'\n//               }}\n//               onMouseEnter={(e) => e.target.style.background = '#0747A6'}\n//               onMouseLeave={(e) => e.target.style.background = '#0052CC'}\n//             >\n//               <FiPlus size={16} /> Create Project\n//             </button>\n//           </div>\n\n//           {/* Project Grid */}\n//           <div>\n//             <div style={{ \n//               display: 'flex', \n//               justifyContent: 'space-between', \n//               alignItems: 'center',\n//               marginBottom: '1rem'\n//             }}>\n//               <h3 style={{ fontSize: '16px', fontWeight: 600, color: '#172B4D' }}>\n//                 All Projects ({projects.length})\n//               </h3>\n//             </div>\n\n//             <div style={{ \n//               display: 'grid', \n//               gridTemplateColumns: 'repeat(auto-fill, minmax(320px, 1fr))', \n//               gap: '1rem' \n//             }}>\n//               {projects.map(p => (\n//                 <div key={p.id} style={{\n//                   display: 'flex', \n//                   flexDirection: 'column', \n//                   padding: '1.25rem',\n//                   borderRadius: '8px',\n//                   background: '#fff',\n//                   boxShadow: '0 2px 4px rgba(0,0,0,0.1)', \n//                   border: '1px solid #DFE1E6',\n//                   transition: 'all 0.2s ease',\n//                   position: 'relative',\n//                   overflow: 'hidden'\n//                 }}\n//                 onMouseEnter={e => {\n//                   e.currentTarget.style.transform = 'translateY(-2px)';\n//                   e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';\n//                 }}\n//                 onMouseLeave={e => {\n//                   e.currentTarget.style.transform = 'translateY(0)';\n//                   e.currentTarget.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';\n//                 }}\n//                 >\n//                   {/* Project Key Badge */}\n//                   <div style={{ \n//                     position: 'absolute',\n//                     top: '0',\n//                     right: '0',\n//                     background: '#DFE1E6',\n//                     color: '#172B4D',\n//                     padding: '4px 8px',\n//                     fontSize: '12px',\n//                     fontWeight: 600,\n//                     borderBottomLeftRadius: '4px'\n//                   }}>\n//                     {p.key}\n//                   </div>\n\n//                   {/* Project Header */}\n//                   <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '0.75rem' }}>\n//                     <div style={{ flex: 1, marginRight: '1rem' }}>\n//                       {editingId === p.id ? (\n//                         <input \n//                           value={editName} \n//                           onChange={e => setEditName(e.target.value)}\n//                           style={{ \n//                             width: '100%', \n//                             padding: '6px 8px', \n//                             border: '1px solid #DFE1E6',\n//                             borderRadius: '4px',\n//                             fontSize: '14px'\n//                           }}\n//                         />\n//                       ) : (\n//                         <h4 style={{ \n//                           fontWeight: 600, \n//                           fontSize: '16px', \n//                           color: '#172B4D',\n//                           margin: 0,\n//                           lineHeight: 1.3\n//                         }}>\n//                           {p.name}\n//                         </h4>\n//                       )}\n//                     </div>\n\n//                     <div style={{ display: 'flex', gap: '4px' }}>\n//                       {editingId === p.id ? (\n//                         <>\n//                           <button \n//                             onClick={() => saveEdit(p.id)}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: '#36B37E',\n//                               color: 'white',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer'\n//                             }}\n//                           >\n//                             <FiCheck size={14} />\n//                           </button>\n//                           <button \n//                             onClick={cancelEdit}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: '#FF5630',\n//                               color: 'white',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer'\n//                             }}\n//                           >\n//                             <FiX size={14} />\n//                           </button>\n//                         </>\n//                       ) : (\n//                         <>\n//                           <button \n//                             onClick={() => startEdit(p)}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#6B778C',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer',\n//                               transition: 'all 0.2s'\n//                             }}\n//                             onMouseEnter={(e) => {\n//                               e.target.style.background = '#EBECF0';\n//                               e.target.style.color = '#172B4D';\n//                             }}\n//                             onMouseLeave={(e) => {\n//                               e.target.style.background = 'transparent';\n//                               e.target.style.color = '#6B778C';\n//                             }}\n//                           >\n//                             <FiEdit2 size={14} />\n//                           </button>\n//                           <button \n//                             onClick={() => removeProject(p.id)}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#6B778C',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer',\n//                               transition: 'all 0.2s'\n//                             }}\n//                             onMouseEnter={(e) => {\n//                               e.target.style.background = '#FFEBE6';\n//                               e.target.style.color = '#DE350B';\n//                             }}\n//                             onMouseLeave={(e) => {\n//                               e.target.style.background = 'transparent';\n//                               e.target.style.color = '#6B778C';\n//                             }}\n//                           >\n//                             <FiTrash2 size={14} />\n//                           </button>\n//                         </>\n//                       )}\n//                     </div>\n//                   </div>\n\n//                   {/* Project Type */}\n//                   <div style={{ marginBottom: '1rem' }}>\n//                     <span style={{ \n//                       background: typeBadgeStyle(p.type).bg, \n//                       color: typeBadgeStyle(p.type).color, \n//                       padding: '4px 8px', \n//                       borderRadius: '4px', \n//                       fontSize: '12px', \n//                       fontWeight: 600,\n//                       display: 'inline-flex',\n//                       alignItems: 'center',\n//                       gap: '4px'\n//                     }}>\n//                       {typeBadgeStyle(p.type).icon} {p.type}\n//                     </span>\n//                   </div>\n\n//                   {/* Project Leads */}\n//                   <div style={{ marginBottom: '1rem' }}>\n//                     {editingId === p.id ? (\n//                       <input \n//                         value={editLeads.join(',')} \n//                         onChange={e => setEditLeads(e.target.value.split(',').map(l => l.trim()))}\n//                         style={{ \n//                           width: '100%', \n//                           padding: '6px 8px', \n//                           border: '1px solid #DFE1E6',\n//                           borderRadius: '4px',\n//                           fontSize: '14px'\n//                         }}\n//                         placeholder=\"Enter leads separated by commas\"\n//                       />\n//                     ) : renderLeads(p.leads)}\n//                   </div>\n\n//                   {/* Last Updated */}\n//                   <div style={{ \n//                     display: 'flex', \n//                     alignItems: 'center', \n//                     gap: '6px',\n//                     fontSize: '12px', \n//                     color: '#6B778C',\n//                     marginTop: 'auto',\n//                     paddingTop: '0.75rem',\n//                     borderTop: '1px solid #F4F5F7'\n//                   }}>\n//                     <FiCalendar size={12} />\n//                     Updated {p.lastUpdated ? formatDistanceToNow(new Date(p.lastUpdated), { addSuffix: true }) : '—'}\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject, deleteProject, updateProject } from '../../services/mockApi';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus, FiTrash2, FiEdit2, FiCheck, FiX, FiUsers, FiLayers, FiKey, FiCalendar } from 'react-icons/fi';\n// import { formatDistanceToNow } from 'date-fns';\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n//   const [leads, setLeads] = useState([]);\n//   const [type, setType] = useState('Software');\n//   const [editingId, setEditingId] = useState(null);\n//   const [editName, setEditName] = useState('');\n//   const [editKey, setEditKey] = useState('');\n//   const [editLeads, setEditLeads] = useState([]);\n//   const [editType, setEditType] = useState('');\n\n//   useEffect(() => { loadProjects(); }, []);\n//   const loadProjects = async () => setProjects(await listProjects());\n\n//   const createProject = async () => {\n//     if (!name.trim()) return;\n//     const now = new Date().toISOString();\n//     const p = {\n//       id: uuidv4(),\n//       key: key.toUpperCase() || 'PRJ',\n//       name,\n//       type,\n//       leads: leads.length ? leads : ['Unassigned'],\n//       description: '',\n//       lastUpdated: now,\n//       createdAt: now\n//     };\n//     await addProject(p);\n//     setName(''); setKey(''); setLeads([]); setType('Software');\n//     loadProjects();\n//   };\n\n//   const removeProject = async (id) => {\n//     if (window.confirm(\"Are you sure you want to delete this project?\")) {\n//       await deleteProject(id);\n//       loadProjects();\n//     }\n//   };\n\n//   const startEdit = (p) => {\n//     setEditingId(p.id);\n//     setEditName(p.name);\n//     setEditKey(p.key);\n//     setEditLeads(p.leads || []);\n//     setEditType(p.type || 'Software');\n//   };\n\n//   const cancelEdit = () => { \n//     setEditingId(null); \n//     setEditName(''); \n//     setEditKey(''); \n//     setEditLeads([]); \n//     setEditType(''); \n//   };\n\n//   const saveEdit = async (id) => {\n//     await updateProject(id, {\n//       name: editName,\n//       key: editKey.toUpperCase(),\n//       leads: editLeads.length ? editLeads : ['Unassigned'],\n//       type: editType,\n//       lastUpdated: new Date().toISOString()\n//     });\n//     cancelEdit();\n//     loadProjects();\n//   };\n\n//   const leadColor = (name) => {\n//     const colors = ['#0052CC', '#36B37E', '#FF5630', '#FFAB00', '#6554C0', '#00A3BF'];\n//     if (!name) return '#6B778C';\n//     const index = name.charCodeAt(0) % colors.length;\n//     return colors[index];\n//   };\n\n//   const typeBadgeStyle = t => {\n//     const colors = {\n//       Software: { bg: '#E3FCF7', color: '#006644', icon: '💻' },\n//       Business: { bg: '#DEEBFF', color: '#0747A6', icon: '📊' },\n//       Service: { bg: '#FFEBE6', color: '#DE350B', icon: '🔧' }\n//     };\n//     const c = colors[t] || { bg: '#F4F5F7', color: '#172B4D', icon: '📁' };\n//     return c;\n//   };\n\n//   const renderLeads = (leadsArr) => (\n//     <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n//       <FiUsers size={14} color=\"#6B778C\" />\n//       {leadsArr.map((l, i) => (\n//         <div key={i} title={l} style={{\n//           width: '28px', \n//           height: '28px', \n//           borderRadius: '50%', \n//           background: leadColor(l), \n//           color: '#fff',\n//           display: 'flex', \n//           alignItems: 'center', \n//           justifyContent: 'center',\n//           fontSize: '12px', \n//           fontWeight: 600, \n//           marginLeft: i > 0 ? -8 : 0, \n//           border: '2px solid #fff',\n//           boxShadow: '0 1px 3px rgba(0,0,0,0.1)'\n//         }}>\n//           {l.charAt(0).toUpperCase()}\n//         </div>\n//       ))}\n//     </div>\n//   );\n\n//   const InputField = ({ label, value, onChange, icon: Icon, ...props }) => (\n//     <div style={{ marginBottom: '1rem' }}>\n//       <label style={{ \n//         display: 'block', \n//         marginBottom: '4px', \n//         fontSize: '14px', \n//         fontWeight: 600, \n//         color: '#172B4D' \n//       }}>\n//         {Icon && <Icon size={14} style={{ marginRight: '6px' }} />}\n//         {label}\n//       </label>\n//       <input \n//         value={value} \n//         onChange={onChange}\n//         style={{ \n//           width: '100%', \n//           padding: '10px 12px', \n//           borderRadius: '4px', \n//           border: '1px solid #DFE1E6',\n//           fontSize: '14px',\n//           transition: 'all 0.2s',\n//           ...props.style // Merge additional styles\n//         }}\n//         onFocus={(e) => e.target.style.borderColor = '#0052CC'}\n//         onBlur={(e) => e.target.style.borderColor = '#DFE1E6'}\n//         {...props}\n//       />\n//     </div>\n//   );\n\n//   return (\n//     <div style={{ \n//       minHeight: '100vh', \n//       background: '#F4F5F7', \n//       padding: '2rem',\n//       fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", sans-serif'\n//     }}>\n//       <div style={{ maxWidth: '1400px', margin: '0 auto' }}>\n//         {/* Header */}\n//         <div style={{ marginBottom: '2rem' }}>\n//           <h1 style={{ \n//             fontSize: '24px', \n//             fontWeight: 600, \n//             color: '#172B4D',\n//             marginBottom: '4px'\n//           }}>\n//             Projects\n//           </h1>\n//           <p style={{ color: '#6B778C', fontSize: '14px' }}>\n//             Manage your team's projects and settings\n//           </p>\n//         </div>\n\n//         <div style={{ display: 'grid', gridTemplateColumns: '320px 1fr', gap: '2rem' }}>\n//           {/* Create Project Form */}\n//           <div style={{ \n//             background: '#fff', \n//             padding: '1.5rem', \n//             borderRadius: '8px', \n//             boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n//             border: '1px solid #DFE1E6',\n//             height: 'fit-content',\n//             position: 'sticky',\n//             top: '2rem'\n//           }}>\n//             <h2 style={{ \n//               marginBottom: '1.5rem', \n//               fontSize: '16px', \n//               fontWeight: 600,\n//               color: '#172B4D',\n//               display: 'flex',\n//               alignItems: 'center',\n//               gap: '8px'\n//             }}>\n//               <FiPlus size={18} /> Create New Project\n//             </h2>\n\n//             <InputField \n//               label=\"Project Name\" \n//               value={name} \n//               onChange={e => setName(e.target.value)}\n//               icon={FiLayers}\n//               placeholder=\"Enter project name\"\n//             />\n\n//             <InputField \n//               label=\"Project Key\" \n//               value={key} \n//               onChange={e => setKey(e.target.value.toUpperCase())} // Fixed: auto-uppercase on change\n//               icon={FiKey}\n//               placeholder=\"PRJ\"\n//               maxLength={10}\n//             />\n\n//             <InputField \n//               label=\"Leads (comma separated)\" \n//               value={leads.join(',')} \n//               onChange={e => setLeads(e.target.value.split(',').map(l => l.trim()).filter(l => l))}\n//               icon={FiUsers}\n//               placeholder=\"John Doe, Jane Smith\"\n//             />\n\n//             <div style={{ marginBottom: '1.5rem' }}>\n//               <label style={{ \n//                 display: 'block', \n//                 marginBottom: '4px', \n//                 fontSize: '14px', \n//                 fontWeight: 600, \n//                 color: '#172B4D' \n//               }}>\n//                 <FiLayers size={14} style={{ marginRight: '6px' }} />\n//                 Type\n//               </label>\n//               <select \n//                 value={type} \n//                 onChange={e => setType(e.target.value)} \n//                 style={{ \n//                   width: '100%', \n//                   padding: '10px 12px', \n//                   borderRadius: '4px', \n//                   border: '1px solid #DFE1E6',\n//                   fontSize: '14px',\n//                   background: '#fff'\n//                 }}\n//               >\n//                 <option value=\"Software\">💻 Software</option>\n//                 <option value=\"Business\">📊 Business</option>\n//                 <option value=\"Service\">🔧 Service</option>\n//               </select>\n//             </div>\n\n//             <button \n//               onClick={createProject} \n//               style={{ \n//                 display: 'flex', \n//                 alignItems: 'center', \n//                 justifyContent: 'center',\n//                 gap: '8px', \n//                 background: '#0052CC', \n//                 color: '#fff', \n//                 border: 'none', \n//                 padding: '12px 20px', \n//                 borderRadius: '4px', \n//                 cursor: 'pointer',\n//                 fontSize: '14px',\n//                 fontWeight: 600,\n//                 width: '100%',\n//                 transition: 'all 0.2s'\n//               }}\n//               onMouseEnter={(e) => e.target.style.background = '#0747A6'}\n//               onMouseLeave={(e) => e.target.style.background = '#0052CC'}\n//             >\n//               <FiPlus size={16} /> Create Project\n//             </button>\n//           </div>\n\n//           {/* Project Grid */}\n//           <div>\n//             <div style={{ \n//               display: 'flex', \n//               justifyContent: 'space-between', \n//               alignItems: 'center',\n//               marginBottom: '1rem'\n//             }}>\n//               <h3 style={{ fontSize: '16px', fontWeight: 600, color: '#172B4D' }}>\n//                 All Projects ({projects.length})\n//               </h3>\n//             </div>\n\n//             <div style={{ \n//               display: 'grid', \n//               gridTemplateColumns: 'repeat(auto-fill, minmax(320px, 1fr))', \n//               gap: '1rem' \n//             }}>\n//               {projects.map(p => (\n//                 <div key={p.id} style={{\n//                   display: 'flex', \n//                   flexDirection: 'column', \n//                   padding: '1.25rem',\n//                   borderRadius: '8px',\n//                   background: '#fff',\n//                   boxShadow: '0 2px 4px rgba(0,0,0,0.1)', \n//                   border: '1px solid #DFE1E6',\n//                   transition: 'all 0.2s ease',\n//                   position: 'relative',\n//                   overflow: 'hidden'\n//                 }}\n//                 onMouseEnter={e => {\n//                   e.currentTarget.style.transform = 'translateY(-2px)';\n//                   e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';\n//                 }}\n//                 onMouseLeave={e => {\n//                   e.currentTarget.style.transform = 'translateY(0)';\n//                   e.currentTarget.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';\n//                 }}\n//                 >\n//                   {/* Project Key Badge */}\n//                   <div style={{ \n//                     position: 'absolute',\n//                     top: '0',\n//                     right: '0',\n//                     background: '#DFE1E6',\n//                     color: '#172B4D',\n//                     padding: '4px 8px',\n//                     fontSize: '12px',\n//                     fontWeight: 600,\n//                     borderBottomLeftRadius: '4px'\n//                   }}>\n//                     {p.key}\n//                   </div>\n\n//                   {/* Project Header */}\n//                   <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '0.75rem' }}>\n//                     <div style={{ flex: 1, marginRight: '1rem' }}>\n//                       {editingId === p.id ? (\n//                         <input \n//                           value={editName} \n//                           onChange={e => setEditName(e.target.value)}\n//                           style={{ \n//                             width: '100%', \n//                             padding: '6px 8px', \n//                             border: '1px solid #DFE1E6',\n//                             borderRadius: '4px',\n//                             fontSize: '14px'\n//                           }}\n//                         />\n//                       ) : (\n//                         <h4 style={{ \n//                           fontWeight: 600, \n//                           fontSize: '16px', \n//                           color: '#172B4D',\n//                           margin: 0,\n//                           lineHeight: 1.3\n//                         }}>\n//                           {p.name}\n//                         </h4>\n//                       )}\n//                     </div>\n\n//                     <div style={{ display: 'flex', gap: '4px' }}>\n//                       {editingId === p.id ? (\n//                         <>\n//                           <button \n//                             onClick={() => saveEdit(p.id)}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: '#36B37E',\n//                               color: 'white',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer'\n//                             }}\n//                           >\n//                             <FiCheck size={14} />\n//                           </button>\n//                           <button \n//                             onClick={cancelEdit}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: '#FF5630',\n//                               color: 'white',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer'\n//                             }}\n//                           >\n//                             <FiX size={14} />\n//                           </button>\n//                         </>\n//                       ) : (\n//                         <>\n//                           <button \n//                             onClick={() => startEdit(p)}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#6B778C',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer',\n//                               transition: 'all 0.2s'\n//                             }}\n//                             onMouseEnter={(e) => {\n//                               e.target.style.background = '#EBECF0';\n//                               e.target.style.color = '#172B4D';\n//                             }}\n//                             onMouseLeave={(e) => {\n//                               e.target.style.background = 'transparent';\n//                               e.target.style.color = '#6B778C';\n//                             }}\n//                           >\n//                             <FiEdit2 size={14} />\n//                           </button>\n//                           <button \n//                             onClick={() => removeProject(p.id)}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#6B778C',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer',\n//                               transition: 'all 0.2s'\n//                             }}\n//                             onMouseEnter={(e) => {\n//                               e.target.style.background = '#FFEBE6';\n//                               e.target.style.color = '#DE350B';\n//                             }}\n//                             onMouseLeave={(e) => {\n//                               e.target.style.background = 'transparent';\n//                               e.target.style.color = '#6B778C';\n//                             }}\n//                           >\n//                             <FiTrash2 size={14} />\n//                           </button>\n//                         </>\n//                       )}\n//                     </div>\n//                   </div>\n\n//                   {/* Project Type */}\n//                   <div style={{ marginBottom: '1rem' }}>\n//                     {editingId === p.id ? (\n//                       <select \n//                         value={editType} \n//                         onChange={e => setEditType(e.target.value)}\n//                         style={{ \n//                           padding: '6px 8px', \n//                           border: '1px solid #DFE1E6',\n//                           borderRadius: '4px',\n//                           fontSize: '14px'\n//                         }}\n//                       >\n//                         <option value=\"Software\">Software</option>\n//                         <option value=\"Business\">Business</option>\n//                         <option value=\"Service\">Service</option>\n//                       </select>\n//                     ) : (\n//                       <span style={{ \n//                         background: typeBadgeStyle(p.type).bg, \n//                         color: typeBadgeStyle(p.type).color, \n//                         padding: '4px 8px', \n//                         borderRadius: '4px', \n//                         fontSize: '12px', \n//                         fontWeight: 600,\n//                         display: 'inline-flex',\n//                         alignItems: 'center',\n//                         gap: '4px'\n//                       }}>\n//                         {typeBadgeStyle(p.type).icon} {p.type}\n//                       </span>\n//                     )}\n//                   </div>\n\n//                   {/* Project Leads */}\n//                   <div style={{ marginBottom: '1rem' }}>\n//                     {editingId === p.id ? (\n//                       <input \n//                         value={editLeads.join(',')} \n//                         onChange={e => setEditLeads(e.target.value.split(',').map(l => l.trim()).filter(l => l))}\n//                         style={{ \n//                           width: '100%', \n//                           padding: '6px 8px', \n//                           border: '1px solid #DFE1E6',\n//                           borderRadius: '4px',\n//                           fontSize: '14px'\n//                         }}\n//                         placeholder=\"Enter leads separated by commas\"\n//                       />\n//                     ) : renderLeads(p.leads)}\n//                   </div>\n\n//                   {/* Project Key in Edit Mode */}\n//                   {editingId === p.id && (\n//                     <div style={{ marginBottom: '1rem' }}>\n//                       <label style={{ fontSize: '12px', fontWeight: 600, color: '#172B4D', display: 'block', marginBottom: '4px' }}>\n//                         Project Key\n//                       </label>\n//                       <input \n//                         value={editKey} \n//                         onChange={e => setEditKey(e.target.value.toUpperCase())}\n//                         style={{ \n//                           width: '100%', \n//                           padding: '6px 8px', \n//                           border: '1px solid #DFE1E6',\n//                           borderRadius: '4px',\n//                           fontSize: '14px'\n//                         }}\n//                         maxLength={10}\n//                       />\n//                     </div>\n//                   )}\n\n//                   {/* Last Updated */}\n//                   <div style={{ \n//                     display: 'flex', \n//                     alignItems: 'center', \n//                     gap: '6px',\n//                     fontSize: '12px', \n//                     color: '#6B778C',\n//                     marginTop: 'auto',\n//                     paddingTop: '0.75rem',\n//                     borderTop: '1px solid #F4F5F7'\n//                   }}>\n//                     <FiCalendar size={12} />\n//                     Updated {p.lastUpdated ? formatDistanceToNow(new Date(p.lastUpdated), { addSuffix: true }) : '—'}\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject, deleteProject, updateProject } from '../../services/mockApi';\n// import { Link } from 'react-router-dom';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus, FiTrash2, FiEdit2, FiCheck, FiX, FiChevronUp, FiChevronDown, FiUsers, FiCalendar } from 'react-icons/fi';\n// import { formatDistanceToNow } from 'date-fns';\n\n// // Reusable input component\n// function InputField({ label, value, onChange, icon: Icon, placeholder, maxLength }) {\n//   return (\n//     <div style={{ marginBottom: '1rem' }}>\n//       <label style={{ display: 'block', fontSize: '13px', fontWeight: 600, marginBottom: '0.25rem', color: '#172B4D' }}>\n//         {label}\n//       </label>\n//       <div style={{ display: 'flex', alignItems: 'center', border: '1px solid #DFE1E6', borderRadius: '4px', background: '#fff' }}>\n//         {Icon && <Icon style={{ marginLeft: '8px', color: '#6B778C' }} />}\n//         <input\n//           type=\"text\"\n//           value={value}\n//           onChange={onChange}\n//           placeholder={placeholder}\n//           maxLength={maxLength}\n//           style={{\n//             flex: 1,\n//             padding: '8px',\n//             border: 'none',\n//             outline: 'none',\n//             fontSize: '14px',\n//             borderRadius: '4px',\n//           }}\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n//   const [type, setType] = useState('Software');\n//   const [leadsInput, setLeadsInput] = useState(''); // store as plain text\n//   const [expanded, setExpanded] = useState({});\n//   const [editingId, setEditingId] = useState(null);\n//   const [editName, setEditName] = useState('');\n//   const [editKey, setEditKey] = useState('');\n//   const [editType, setEditType] = useState('');\n//   const [editLeadsInput, setEditLeadsInput] = useState('');\n\n//   useEffect(() => {\n//     loadProjects();\n//   }, []);\n\n//   const loadProjects = async () => {\n//     const data = await listProjects();\n//     setProjects(data);\n//   };\n\n//   const createProject = async () => {\n//     if (!name.trim()) return;\n//     const now = new Date().toISOString();\n//     const p = {\n//       id: uuidv4(),\n//       key: key.toUpperCase() || 'PRJ',\n//       name,\n//       type,\n//       leads: leadsInput\n//         ? leadsInput.split(',').map(l => l.trim()).filter(l => l)\n//         : ['Unassigned'],\n//       description: '',\n//       lastUpdated: now,\n//       createdAt: now,\n//     };\n//     await addProject(p);\n//     setName('');\n//     setKey('');\n//     setLeadsInput('');\n//     setType('Software');\n//     loadProjects();\n//   };\n\n//   const removeProject = async (id) => {\n//     await deleteProject(id);\n//     loadProjects();\n//   };\n\n//   const startEdit = (p) => {\n//     setEditingId(p.id);\n//     setEditName(p.name);\n//     setEditKey(p.key);\n//     setEditType(p.type);\n//     setEditLeadsInput(p.leads.join(', '));\n//   };\n\n//   const saveEdit = async (id) => {\n//     const updated = {\n//       ...projects.find(p => p.id === id),\n//       name: editName,\n//       key: editKey,\n//       type: editType,\n//       leads: editLeadsInput\n//         ? editLeadsInput.split(',').map(l => l.trim()).filter(l => l)\n//         : ['Unassigned'],\n//       lastUpdated: new Date().toISOString(),\n//     };\n//     await updateProject(id, updated);\n//     setEditingId(null);\n//     loadProjects();\n//   };\n\n//   return (\n//     <div style={{ display: 'flex', height: '100vh' }}>\n//       {/* Sidebar create project form */}\n//       <div style={{ width: '320px', borderRight: '1px solid #DFE1E6', padding: '1rem', background: '#F4F5F7' }}>\n//         <h2 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '1rem' }}>Create Project</h2>\n\n//         <InputField label=\"Project Name\" value={name} onChange={e => setName(e.target.value)} placeholder=\"Enter project name\" />\n//         <InputField label=\"Project Key\" value={key} onChange={e => setKey(e.target.value)} placeholder=\"e.g. PROJ\" maxLength={10} />\n//         <InputField label=\"Project Type\" value={type} onChange={e => setType(e.target.value)} placeholder=\"Software, Business...\" />\n//         <InputField label=\"Leads (comma separated)\" value={leadsInput} onChange={e => setLeadsInput(e.target.value)} placeholder=\"John Doe, Jane Smith\" icon={FiUsers} />\n\n//         <button\n//           onClick={createProject}\n//           style={{\n//             width: '100%',\n//             background: '#0052CC',\n//             color: 'white',\n//             padding: '8px',\n//             border: 'none',\n//             borderRadius: '4px',\n//             cursor: 'pointer',\n//             display: 'flex',\n//             alignItems: 'center',\n//             justifyContent: 'center',\n//             fontSize: '14px',\n//           }}\n//         >\n//           <FiPlus style={{ marginRight: '6px' }} /> Create Project\n//         </button>\n//       </div>\n\n//       {/* Main project list */}\n//       <div style={{ flex: 1, padding: '2rem', overflowY: 'auto' }}>\n//         <h2 style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '1.5rem' }}>Projects</h2>\n\n//         <div style={{ display: 'grid', gap: '1rem', gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))' }}>\n//           {projects.map(p => (\n//             <div\n//               key={p.id}\n//               style={{\n//                 background: '#fff',\n//                 border: '1px solid #DFE1E6',\n//                 borderRadius: '8px',\n//                 padding: '1rem',\n//                 display: 'flex',\n//                 flexDirection: 'column',\n//               }}\n//             >\n//               {editingId === p.id ? (\n//                 <>\n//                   <InputField label=\"Name\" value={editName} onChange={e => setEditName(e.target.value)} />\n//                   <InputField label=\"Key\" value={editKey} onChange={e => setEditKey(e.target.value)} />\n//                   <InputField label=\"Type\" value={editType} onChange={e => setEditType(e.target.value)} />\n//                   <InputField label=\"Leads\" value={editLeadsInput} onChange={e => setEditLeadsInput(e.target.value)} />\n//                   <div style={{ display: 'flex', gap: '0.5rem', marginTop: '0.5rem' }}>\n//                     <button onClick={() => saveEdit(p.id)} style={{ background: '#36B37E', color: '#fff', border: 'none', padding: '6px 10px', borderRadius: '4px', cursor: 'pointer' }}>\n//                       <FiCheck />\n//                     </button>\n//                     <button onClick={() => setEditingId(null)} style={{ background: '#FF5630', color: '#fff', border: 'none', padding: '6px 10px', borderRadius: '4px', cursor: 'pointer' }}>\n//                       <FiX />\n//                     </button>\n//                   </div>\n//                 </>\n//               ) : (\n//                 <>\n//                   <h3 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '0.5rem' }}>\n//                     <Link to={`/projects/${p.id}`} style={{ color: '#0052CC', textDecoration: 'none' }}>\n//                       {p.name}\n//                     </Link>\n//                   </h3>\n//                   <p style={{ fontSize: '13px', color: '#6B778C', marginBottom: '0.5rem' }}>{p.type} Project</p>\n//                   <p style={{ fontSize: '13px', marginBottom: '0.5rem' }}>Key: {p.key}</p>\n//                   <p style={{ fontSize: '13px', marginBottom: '0.5rem' }}>Leads: {p.leads.join(', ')}</p>\n\n//                   <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '1rem' }}>\n//                     <div style={{ display: 'flex', gap: '0.5rem' }}>\n//                       <button onClick={() => startEdit(p)} style={{ background: '#FFAB00', color: '#fff', border: 'none', padding: '6px 10px', borderRadius: '4px', cursor: 'pointer' }}>\n//                         <FiEdit2 />\n//                       </button>\n//                       <button onClick={() => removeProject(p.id)} style={{ background: '#FF5630', color: '#fff', border: 'none', padding: '6px 10px', borderRadius: '4px', cursor: 'pointer' }}>\n//                         <FiTrash2 />\n//                       </button>\n//                     </div>\n//                     <button onClick={() => setExpanded({ ...expanded, [p.id]: !expanded[p.id] })} style={{ background: 'transparent', border: 'none', cursor: 'pointer', color: '#0052CC' }}>\n//                       {expanded[p.id] ? <FiChevronUp /> : <FiChevronDown />}\n//                     </button>\n//                   </div>\n\n//                   {expanded[p.id] && (\n//                     <div style={{ marginTop: '0.5rem', fontSize: '13px', color: '#172B4D' }}>\n//                       <p>{p.description || 'No description provided.'}</p>\n//                     </div>\n//                   )}\n//                 </>\n//               )}\n\n//               {/* Metadata */}\n//               <div\n//                 style={{\n//                   display: 'flex',\n//                   justifyContent: 'space-between',\n//                   marginTop: 'auto',\n//                   marginTop: '1rem',\n//                   paddingTop: '0.75rem',\n//                   borderTop: '1px solid #EBECF0',\n//                   fontSize: '12px',\n//                   color: '#6B778C',\n//                 }}\n//               >\n//                 <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n//                   <FiCalendar size={12} />\n//                   {p.createdAt ? (\n//                     <>Created {formatDistanceToNow(new Date(p.createdAt), { addSuffix: true })}</>\n//                   ) : (\n//                     <>Created just now</>\n//                   )}\n//                 </div>\n//                 <div>\n//                   {p.lastUpdated ? (\n//                     <>Updated {formatDistanceToNow(new Date(p.lastUpdated), { addSuffix: true })}</>\n//                   ) : (\n//                     <>Updated just now</>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           ))}\n\n//           {projects.length === 0 && (\n//             <div\n//               style={{\n//                 gridColumn: '1 / -1',\n//                 textAlign: 'center',\n//                 padding: '3rem 2rem',\n//                 background: '#fff',\n//                 borderRadius: '8px',\n//                 border: '1px dashed #DFE1E6',\n//                 color: '#6B778C',\n//               }}\n//             >\n//               <p style={{ marginBottom: '1rem' }}>No projects yet.</p>\n//               <p style={{ fontSize: '14px' }}>Create your first project using the form on the left.</p>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/components/projects/ProjectList.js"],"sourcesContent":["\n// // import React, { useEffect, useState } from 'react';\n// // import { listProjects, addProject } from '../../services/mockApi';\n// // import { Link } from 'react-router-dom';\n// // import { v4 as uuidv4 } from 'uuid';\n// // import { FiPlus } from 'react-icons/fi';\n\n// // export default function ProjectList() {\n// //   const [projects, setProjects] = useState([]);\n// //   const [name, setName] = useState('');\n// //   const [key, setKey] = useState('');\n\n// //   useEffect(()=>{ listProjects().then(setProjects); },[]);\n\n// //   const create = async () => {\n// //     const p = { id: uuidv4(), key: key.toUpperCase()||'PRJ', name, description:'', leads:[] };\n// //     await addProject(p);\n// //     setProjects(await listProjects());\n// //     setName(''); setKey('');\n// //   };\n\n// //   return (\n// //     <div className=\"grid\">\n// //       <div className=\"card\" aria-labelledby=\"proj-create\">\n// //         <h2 id=\"proj-create\">Create Project</h2>\n// //         <div className=\"form-row\"><label>Project Name<input value={name} onChange={e=>setName(e.target.value)} /></label></div>\n// //         <div className=\"form-row\"><label>Project Key<input value={key} onChange={e=>setKey(e.target.value)} /></label></div>\n// //         <button className=\"btn\" onClick={create}><FiPlus /> Create</button>\n// //       </div>\n// //       <div className=\"card\" aria-labelledby=\"proj-list\">\n// //         <h2 id=\"proj-list\">Projects</h2>\n// //         <ul>{projects.map(p=>(<li key={p.id}><Link to={'/projects/'+p.id}><strong>{p.name}</strong> <span className=\"small\">({p.key})</span></Link></li>))}</ul>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n\n// // import React, { useEffect, useState } from 'react';\n// // import { listProjects, addProject } from '../../services/mockApi';\n// // import { Link } from 'react-router-dom';\n// // import { v4 as uuidv4 } from 'uuid';\n// // import { FiPlus } from 'react-icons/fi';\n \n// // export default function ProjectList() {\n// //   const [projects, setProjects] = useState([]);\n// //   const [name, setName] = useState('');\n// //   const [key, setKey] = useState('');\n \n// //   useEffect(() => {\n// //     listProjects().then(setProjects);\n// //   }, []);\n \n// //   const create = async () => {\n// //     const p = { id: uuidv4(), key: key.toUpperCase() || 'PRJ', name, description: '', leads: [] };\n// //     await addProject(p);\n// //     setProjects(await listProjects());\n// //     setName('');\n// //     setKey('');\n// //   };\n \n// //   return (\n// //     <div className=\"grid\">\n// //       <div className=\"card\" aria-labelledby=\"proj-create\">\n// //         <h2 id=\"proj-create\">Create Project</h2>\n// //         <div className=\"form-row\">\n// //           <label>\n// //             Project Name\n// //             <input value={name} onChange={e => setName(e.target.value)} />\n// //           </label>\n// //         </div>\n// //         <div className=\"form-row\">\n// //           <label>\n// //             Project Key\n// //             <input value={key} onChange={e => setKey(e.target.value)} />\n// //           </label>\n// //         </div>\n// //         <button className=\"btn\" onClick={create}>\n// //           <FiPlus /> Create\n// //         </button>\n// //       </div>\n// //       <div className=\"card\" aria-labelledby=\"proj-list\">\n// //         <h2 id=\"proj-list\">Projects</h2>\n// //         <ul>\n// //           {projects.map(p => (\n// //             <li key={p.id}>\n// //               <Link to={'/projects/' + p.id}>\n// //                 <strong>{p.name}</strong> <span className=\"small\">({p.key})</span>\n// //               </Link>\n// //             </li>\n// //           ))}\n// //         </ul>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n \n//  //////////////////////\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject } from '../../services/mockApi';\n// import { Link } from 'react-router-dom';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus } from 'react-icons/fi';\n \n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n \n//   useEffect(() => {\n//     listProjects().then(setProjects);\n//   }, []);\n \n//   const create = async () => {\n//     const p = { id: uuidv4(), key: key.toUpperCase() || 'PRJ', name, description: '', leads: [] };\n//     await addProject(p);\n//     setProjects(await listProjects());\n//     setName('');\n//     setKey('');\n//   };\n \n//   return (\n//     <div className=\"grid\">\n//       <div className=\"card\" aria-labelledby=\"proj-create\">\n//         <h2 id=\"proj-create\">Create Project</h2>\n//         <div className=\"form-row\">\n//           <label>\n//             Project Name\n//             <input value={name} onChange={e => setName(e.target.value)} />\n//           </label>\n//         </div>\n//         <div className=\"form-row\">\n//           <label>\n//             Project Key\n//             <input value={key} onChange={e => setKey(e.target.value)} />\n//           </label>\n//         </div>\n//         <button className=\"btn\" onClick={create}>\n//           <FiPlus /> Create\n//         </button>\n//       </div>\n//       <div className=\"card\" aria-labelledby=\"proj-list\">\n//         <h2 id=\"proj-list\">Projects</h2>\n//         <ul>\n//           {projects.map(p => (\n//             <li key={p.id}>\n//               <Link to={'/projects/' + p.id}>\n//                 <strong>{p.name}</strong> <span className=\"small\">({p.key})</span>\n//               </Link>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject, deleteProject, updateProject } from '../../services/mockApi';\n// import { Link } from 'react-router-dom';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus, FiTrash2, FiEdit2, FiCheck, FiX, FiChevronUp, FiChevronDown } from 'react-icons/fi';\n// import { formatDistanceToNow } from 'date-fns';\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n//   const [lead, setLead] = useState('');\n//   const [type, setType] = useState('Software');\n//   const [editingId, setEditingId] = useState(null);\n//   const [editName, setEditName] = useState('');\n//   const [editKey, setEditKey] = useState('');\n//   const [editLead, setEditLead] = useState('');\n//   const [editType, setEditType] = useState('');\n//   const [search, setSearch] = useState('');\n//   const [sortConfig, setSortConfig] = useState({ key: 'name', direction: 'asc' });\n\n//   useEffect(() => {\n//     loadProjects();\n//   }, []);\n\n//   const loadProjects = async () => {\n//     setProjects(await listProjects());\n//   };\n\n//   const create = async () => {\n//     if (!name.trim()) return;\n//     const now = new Date().toISOString();\n//     const p = {\n//       id: uuidv4(),\n//       key: key.toUpperCase() || 'PRJ',\n//       name,\n//       type,\n//       lead: lead || 'Unassigned',\n//       description: '',\n//       leads: [],\n//       lastUpdated: now\n//     };\n//     await addProject(p);\n//     await loadProjects();\n//     setName('');\n//     setKey('');\n//     setLead('');\n//     setType('Software');\n//   };\n\n//   const remove = async (id) => {\n//     if (window.confirm(\"Are you sure you want to delete this project?\")) {\n//       await deleteProject(id);\n//       await loadProjects();\n//     }\n//   };\n\n//   const startEdit = (p) => {\n//     setEditingId(p.id);\n//     setEditName(p.name);\n//     setEditKey(p.key);\n//     setEditLead(p.lead || '');\n//     setEditType(p.type || 'Software');\n//   };\n\n//   const cancelEdit = () => {\n//     setEditingId(null);\n//     setEditName('');\n//     setEditKey('');\n//     setEditLead('');\n//     setEditType('');\n//   };\n\n//   const saveEdit = async (id) => {\n//     const now = new Date().toISOString();\n//     await updateProject(id, {\n//       name: editName,\n//       key: editKey.toUpperCase(),\n//       lead: editLead,\n//       type: editType,\n//       lastUpdated: now\n//     });\n//     setEditingId(null);\n//     await loadProjects();\n//   };\n\n//   const avatarStyle = {\n//     width: '28px',\n//     height: '28px',\n//     borderRadius: '50%',\n//     background: '#0052cc',\n//     color: 'white',\n//     display: 'inline-flex',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     fontWeight: '600',\n//     marginRight: '8px',\n//     fontSize: '12px'\n//   };\n\n//   const typeBadgeStyle = (t) => {\n//     const colors = {\n//       Software: { bg: '#e3fcef', color: '#006644' },\n//       Business: { bg: '#deebff', color: '#0747a6' },\n//       Service: { bg: '#ffebe6', color: '#de350b' }\n//     };\n//     const c = colors[t] || { bg: '#f4f5f7', color: '#172b4d' };\n//     return {\n//       background: c.bg,\n//       color: c.color,\n//       padding: '0.25rem 0.6rem',\n//       borderRadius: '4px',\n//       fontSize: '12px',\n//       fontWeight: 600\n//     };\n//   };\n\n//   const getProjectColor = (id) => {\n//     const colors = ['#0052cc', '#2684ff', '#00a3bf', '#36b37e', '#ff991f', '#de350b', '#6554c0'];\n//     const index = id.charCodeAt(0) % colors.length;\n//     return colors[index];\n//   };\n\n//   const projectIconStyle = (id) => ({\n//     width: '28px',\n//     height: '28px',\n//     borderRadius: '4px',\n//     background: getProjectColor(id),\n//     color: 'white',\n//     display: 'inline-flex',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     fontWeight: 600,\n//     marginRight: '8px',\n//     fontSize: '12px',\n//     textTransform: 'uppercase'\n//   });\n\n//   // Filtering\n//   const filteredProjects = projects.filter(p =>\n//     p.name.toLowerCase().includes(search.toLowerCase()) ||\n//     p.key.toLowerCase().includes(search.toLowerCase()) ||\n//     (p.lead && p.lead.toLowerCase().includes(search.toLowerCase())) ||\n//     (p.type && p.type.toLowerCase().includes(search.toLowerCase()))\n//   );\n\n//   // Sorting\n//   const sortedProjects = [...filteredProjects].sort((a, b) => {\n//     const aVal = a[sortConfig.key]?.toString().toLowerCase() || '';\n//     const bVal = b[sortConfig.key]?.toString().toLowerCase() || '';\n//     if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1;\n//     if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1;\n//     return 0;\n//   });\n\n//   const toggleSort = (key) => {\n//     setSortConfig((prev) =>\n//       prev.key === key\n//         ? { key, direction: prev.direction === 'asc' ? 'desc' : 'asc' }\n//         : { key, direction: 'asc' }\n//     );\n//   };\n\n//   const sortIcon = (col) => {\n//     if (sortConfig.key !== col) return null;\n//     return sortConfig.direction === 'asc' ? <FiChevronUp /> : <FiChevronDown />;\n//   };\n\n//   return (\n//     <div style={{ display: 'grid', gridTemplateColumns: '1fr 3fr', gap: '2rem' }}>\n//       {/* Create Project */}\n//       {/* ... (same as before, keeping form part unchanged) ... */}\n\n//       {/* Project Table */}\n//       <div style={{ background: '#fff', borderRadius: '6px', padding: '1.5rem', boxShadow: '0 1px 4px rgba(0,0,0,0.1)' }}>\n//         <h2 style={{ marginBottom: '1rem' }}>Projects</h2>\n\n//         <input\n//           type=\"text\"\n//           value={search}\n//           onChange={e => setSearch(e.target.value)}\n//           placeholder=\"Search projects...\"\n//           style={{\n//             width: '100%',\n//             padding: '0.6rem',\n//             marginBottom: '1rem',\n//             border: '1px solid #dfe1e6',\n//             borderRadius: '4px'\n//           }}\n//         />\n\n//         {sortedProjects.length === 0 ? (\n//           <p>No projects found.</p>\n//         ) : (\n//           <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n//             <thead>\n//               <tr>\n//                 <th onClick={() => toggleSort('key')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Key {sortIcon('key')}\n//                 </th>\n//                 <th onClick={() => toggleSort('name')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Name {sortIcon('name')}\n//                 </th>\n//                 <th onClick={() => toggleSort('type')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Type {sortIcon('type')}\n//                 </th>\n//                 <th onClick={() => toggleSort('lead')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Lead {sortIcon('lead')}\n//                 </th>\n//                 <th onClick={() => toggleSort('lastUpdated')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Last Updated {sortIcon('lastUpdated')}\n//                 </th>\n//                 <th style={{ padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7', textAlign: 'right' }}>\n//                   Actions\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {sortedProjects.map(p => (\n//                 <tr key={p.id} style={{ borderBottom: '1px solid #f0f0f0' }}>\n//                   <td style={{ padding: '0.75rem 1rem' }}>{p.key}</td>\n//                   <td style={{ padding: '0.75rem 1rem', display: 'flex', alignItems: 'center' }}>\n//                     <span style={projectIconStyle(p.id)}>{p.key.slice(0, 2)}</span>\n//                     {editingId === p.id ? (\n//                       <input value={editName} onChange={e => setEditName(e.target.value)} />\n//                     ) : (\n//                       <Link to={'/projects/' + p.id} style={{ fontWeight: 600, color: '#0052cc', textDecoration: 'none' }}>\n//                         {p.name}\n//                       </Link>\n//                     )}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem' }}>\n//                     {editingId === p.id ? (\n//                       <select value={editType} onChange={e => setEditType(e.target.value)}>\n//                         <option value=\"Software\">Software</option>\n//                         <option value=\"Business\">Business</option>\n//                         <option value=\"Service\">Service</option>\n//                       </select>\n//                     ) : (\n//                       <span style={typeBadgeStyle(p.type)}>{p.type}</span>\n//                     )}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem' }}>\n//                     {editingId === p.id ? (\n//                       <input value={editLead} onChange={e => setEditLead(e.target.value)} />\n//                     ) : (\n//                       <div style={{ display: 'flex', alignItems: 'center' }}>\n//                         <span style={avatarStyle}>{p.lead ? p.lead.charAt(0).toUpperCase() : '?'}</span>\n//                         {p.lead || 'Unassigned'}\n//                       </div>\n//                     )}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem', color: '#6b778c' }}>\n//                     {p.lastUpdated ? formatDistanceToNow(new Date(p.lastUpdated), { addSuffix: true }) : '—'}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem', textAlign: 'right' }}>\n//                     {editingId === p.id ? (\n//                       <>\n//                         <button onClick={() => saveEdit(p.id)}><FiCheck /></button>\n//                         <button onClick={cancelEdit}><FiX /></button>\n//                       </>\n//                     ) : (\n//                       <>\n//                         <button onClick={() => startEdit(p)}><FiEdit2 /></button>\n//                         <button onClick={() => remove(p.id)}><FiTrash2 /></button>\n//                       </>\n//                     )}\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject, deleteProject, updateProject } from '../../services/mockApi';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus, FiTrash2, FiEdit2, FiCheck, FiX } from 'react-icons/fi';\n// import { formatDistanceToNow } from 'date-fns';\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n//   const [leads, setLeads] = useState([]);\n//   const [type, setType] = useState('Software');\n//   const [editingId, setEditingId] = useState(null);\n//   const [editName, setEditName] = useState('');\n//   const [editKey, setEditKey] = useState('');\n//   const [editLeads, setEditLeads] = useState([]);\n//   const [editType, setEditType] = useState('');\n\n//   useEffect(() => { loadProjects(); }, []);\n//   const loadProjects = async () => setProjects(await listProjects());\n\n//   const createProject = async () => {\n//     if (!name.trim()) return;\n//     const now = new Date().toISOString();\n//     const p = {\n//       id: uuidv4(),\n//       key: key.toUpperCase() || 'PRJ',\n//       name,\n//       type,\n//       leads: leads.length ? leads : ['Unassigned'],\n//       description: '',\n//       lastUpdated: now,\n//       createdAt: now\n//     };\n//     await addProject(p);\n//     setName(''); setKey(''); setLeads([]); setType('Software');\n//     loadProjects();\n//   };\n\n//   const removeProject = async (id) => {\n//     if (window.confirm(\"Are you sure you want to delete this project?\")) {\n//       await deleteProject(id);\n//       loadProjects();\n//     }\n//   };\n\n//   const startEdit = (p) => {\n//     setEditingId(p.id);\n//     setEditName(p.name);\n//     setEditKey(p.key);\n//     setEditLeads(p.leads || []);\n//     setEditType(p.type || 'Software');\n//   };\n//   const cancelEdit = () => { setEditingId(null); setEditName(''); setEditKey(''); setEditLeads([]); setEditType(''); };\n//   const saveEdit = async (id) => {\n//     await updateProject(id, {\n//       name: editName,\n//       key: editKey.toUpperCase(),\n//       leads: editLeads.length ? editLeads : ['Unassigned'],\n//       type: editType,\n//       lastUpdated: new Date().toISOString()\n//     });\n//     cancelEdit();\n//     loadProjects();\n//   };\n\n//   const leadColor = (name) => {\n//     const colors = ['#0052CC', '#36B37E', '#FF5630', '#FFAB00', '#6554C0', '#00A3BF'];\n//     if (!name) return '#6B778C';\n//     const index = name.charCodeAt(0) % colors.length;\n//     return colors[index];\n//   };\n\n//   const typeBadgeStyle = t => {\n//     const colors = {\n//       Software: { bg: '#E3FCF7', color: '#006644' },\n//       Business: { bg: '#DEEBFF', color: '#0747A6' },\n//       Service: { bg: '#FFEBE6', color: '#DE350B' }\n//     };\n//     const c = colors[t] || { bg: '#F4F5F7', color: '#172B4D' };\n//     return { background: c.bg, color: c.color, padding:'0.25rem 0.6rem', borderRadius:'4px', fontSize:'12px', fontWeight:600 };\n//   };\n\n//   const renderLeads = (leadsArr) => (\n//     <div style={{ display:'flex', alignItems:'center' }}>\n//       {leadsArr.map((l,i) => (\n//         <div key={i} title={l} style={{\n//           width:'28px', height:'28px', borderRadius:'50%', background:leadColor(l), color:'#fff',\n//           display:'flex', alignItems:'center', justifyContent:'center',\n//           fontSize:'12px', fontWeight:600, marginLeft:i>0?-8:0, border:'2px solid #fff'\n//         }}>{l.charAt(0).toUpperCase()}</div>\n//       ))}\n//     </div>\n//   );\n\n//   return (\n//     <div style={{ display:'grid', gridTemplateColumns:'1fr 3fr', gap:'2rem', padding:'2rem', fontFamily:'Arial,sans-serif' }}>\n//       {/* Create Project Form */}\n//       <div style={{ background:'#fff', padding:'1.5rem', borderRadius:'8px', boxShadow:'0 2px 6px rgba(0,0,0,0.1)' }}>\n//         <h2 style={{ marginBottom:'1rem', fontSize:'18px', color:'#172b4d' }}>Create Project</h2>\n//         <div style={{ marginBottom:'1rem' }}><label>Project Name</label><input value={name} onChange={e=>setName(e.target.value)} style={{ width:'100%', padding:'8px', borderRadius:'4px', border:'1px solid #ccc' }} /></div>\n//         <div style={{ marginBottom:'1rem' }}><label>Project Key</label><input value={key} onChange={e=>setKey(e.target.value)} style={{ width:'100%', padding:'8px', borderRadius:'4px', border:'1px solid #ccc' }} /></div>\n//         <div style={{ marginBottom:'1rem' }}><label>Leads (comma separated)</label><input value={leads.join(',')} onChange={e=>setLeads(e.target.value.split(',').map(l=>l.trim()))} style={{ width:'100%', padding:'8px', borderRadius:'4px', border:'1px solid #ccc' }} /></div>\n//         <div style={{ marginBottom:'1rem' }}><label>Type</label><select value={type} onChange={e=>setType(e.target.value)} style={{ width:'100%', padding:'8px', borderRadius:'4px', border:'1px solid #ccc' }}><option>Software</option><option>Business</option><option>Service</option></select></div>\n//         <button onClick={createProject} style={{ display:'flex', alignItems:'center', gap:'6px', background:'#0052CC', color:'#fff', border:'none', padding:'10px 16px', borderRadius:'4px', cursor:'pointer' }}><FiPlus /> Create</button>\n//       </div>\n\n//       {/* Jira-style Project Cards */}\n//       <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fill,minmax(300px,1fr))', gap:'1rem' }}>\n//         {projects.map(p => (\n//           <div key={p.id} style={{\n//             display:'flex', flexDirection:'column', padding:'1rem', borderRadius:'6px',\n//             boxShadow:'0 1px 3px rgba(0,0,0,0.1)', position:'relative',\n//             borderLeft:`6px solid ${leadColor(p.leads[0])}`, transition:'transform 0.2s',\n//           }}\n//           onMouseEnter={e=>e.currentTarget.style.transform='translateY(-3px)'}\n//           onMouseLeave={e=>e.currentTarget.style.transform='translateY(0)'}\n//           >\n//             <div style={{ display:'flex', justifyContent:'space-between', alignItems:'center' }}>\n//               <div style={{ fontWeight:600, fontSize:'16px', color:'#172b4d' }}>{editingId===p.id?<input value={editName} onChange={e=>setEditName(e.target.value)} />:<span>{p.name}</span>}</div>\n//               <div style={{ display:'flex', gap:'6px', opacity:0.7 }}>\n//                 {editingId===p.id?(<>\n//                   <button onClick={()=>saveEdit(p.id)}><FiCheck /></button>\n//                   <button onClick={cancelEdit}><FiX /></button>\n//                 </>):(<>\n//                   <button onClick={()=>startEdit(p)}><FiEdit2 /></button>\n//                   <button onClick={()=>removeProject(p.id)}><FiTrash2 /></button>\n//                 </>)}\n//               </div>\n//             </div>\n//             <div style={{ margin:'0.5rem 0', color:'#6b778c', fontSize:'13px' }}>{p.key}</div>\n//             <div style={{ margin:'0.5rem 0' }}><span style={typeBadgeStyle(p.type)}>{p.type}</span></div>\n//             <div style={{ marginTop:'auto', display:'flex', justifyContent:'space-between', alignItems:'center' }}>\n//               {editingId===p.id?<input value={editLeads.join(',')} onChange={e=>setEditLeads(e.target.value.split(',').map(l=>l.trim()))} />:renderLeads(p.leads)}\n//               <div style={{ fontSize:'12px', color:'#6b778c' }}>{p.lastUpdated?formatDistanceToNow(new Date(p.lastUpdated),{addSuffix:true}):'—'}</div>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n// //deepseek\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject, deleteProject, updateProject } from '../../services/mockApi';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus, FiTrash2, FiEdit2, FiCheck, FiX, FiUsers, FiLayers, FiKey, FiCalendar } from 'react-icons/fi';\n// import { formatDistanceToNow } from 'date-fns';\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n//   const [leads, setLeads] = useState([]);\n//   const [type, setType] = useState('Software');\n//   const [editingId, setEditingId] = useState(null);\n//   const [editName, setEditName] = useState('');\n//   const [editKey, setEditKey] = useState('');\n//   const [editLeads, setEditLeads] = useState([]);\n//   const [editType, setEditType] = useState('');\n\n//   useEffect(() => { loadProjects(); }, []);\n//   const loadProjects = async () => setProjects(await listProjects());\n\n//   const createProject = async () => {\n//     if (!name.trim()) return;\n//     const now = new Date().toISOString();\n//     const p = {\n//       id: uuidv4(),\n//       key: key.toUpperCase() || 'PRJ',\n//       name,\n//       type,\n//       leads: leads.length ? leads : ['Unassigned'],\n//       description: '',\n//       lastUpdated: now,\n//       createdAt: now\n//     };\n//     await addProject(p);\n//     setName(''); setKey(''); setLeads([]); setType('Software');\n//     loadProjects();\n//   };\n\n//   const removeProject = async (id) => {\n//     if (window.confirm(\"Are you sure you want to delete this project?\")) {\n//       await deleteProject(id);\n//       loadProjects();\n//     }\n//   };\n\n//   const startEdit = (p) => {\n//     setEditingId(p.id);\n//     setEditName(p.name);\n//     setEditKey(p.key);\n//     setEditLeads(p.leads || []);\n//     setEditType(p.type || 'Software');\n//   };\n  \n//   const cancelEdit = () => { \n//     setEditingId(null); \n//     setEditName(''); \n//     setEditKey(''); \n//     setEditLeads([]); \n//     setEditType(''); \n//   };\n  \n//   const saveEdit = async (id) => {\n//     await updateProject(id, {\n//       name: editName,\n//       key: editKey.toUpperCase(),\n//       leads: editLeads.length ? editLeads : ['Unassigned'],\n//       type: editType,\n//       lastUpdated: new Date().toISOString()\n//     });\n//     cancelEdit();\n//     loadProjects();\n//   };\n\n//   const leadColor = (name) => {\n//     const colors = ['#0052CC', '#36B37E', '#FF5630', '#FFAB00', '#6554C0', '#00A3BF'];\n//     if (!name) return '#6B778C';\n//     const index = name.charCodeAt(0) % colors.length;\n//     return colors[index];\n//   };\n\n//   const typeBadgeStyle = t => {\n//     const colors = {\n//       Software: { bg: '#E3FCF7', color: '#006644', icon: '💻' },\n//       Business: { bg: '#DEEBFF', color: '#0747A6', icon: '📊' },\n//       Service: { bg: '#FFEBE6', color: '#DE350B', icon: '🔧' }\n//     };\n//     const c = colors[t] || { bg: '#F4F5F7', color: '#172B4D', icon: '📁' };\n//     return c;\n//   };\n\n//   const renderLeads = (leadsArr) => (\n//     <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n//       <FiUsers size={14} color=\"#6B778C\" />\n//       {leadsArr.map((l, i) => (\n//         <div key={i} title={l} style={{\n//           width: '28px', \n//           height: '28px', \n//           borderRadius: '50%', \n//           background: leadColor(l), \n//           color: '#fff',\n//           display: 'flex', \n//           alignItems: 'center', \n//           justifyContent: 'center',\n//           fontSize: '12px', \n//           fontWeight: 600, \n//           marginLeft: i > 0 ? -8 : 0, \n//           border: '2px solid #fff',\n//           boxShadow: '0 1px 3px rgba(0,0,0,0.1)'\n//         }}>\n//           {l.charAt(0).toUpperCase()}\n//         </div>\n//       ))}\n//     </div>\n//   );\n\n//   const InputField = ({ label, value, onChange, icon: Icon, ...props }) => (\n//     <div style={{ marginBottom: '1rem' }}>\n//       <label style={{ \n//         display: 'block', \n//         marginBottom: '4px', \n//         fontSize: '14px', \n//         fontWeight: 600, \n//         color: '#172B4D' \n//       }}>\n//         {Icon && <Icon size={14} style={{ marginRight: '6px' }} />}\n//         {label}\n//       </label>\n//       <input \n//         value={value} \n//         onChange={onChange}\n//         style={{ \n//           width: '100%', \n//           padding: '10px 12px', \n//           borderRadius: '4px', \n//           border: '1px solid #DFE1E6',\n//           fontSize: '14px',\n//           transition: 'all 0.2s'\n//         }}\n//         onFocus={(e) => e.target.style.borderColor = '#0052CC'}\n//         onBlur={(e) => e.target.style.borderColor = '#DFE1E6'}\n//         {...props}\n//       />\n//     </div>\n//   );\n\n//   return (\n//     <div style={{ \n//       minHeight: '100vh', \n//       background: '#F4F5F7', \n//       padding: '2rem',\n//       fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", sans-serif'\n//     }}>\n//       <div style={{ maxWidth: '1400px', margin: '0 auto' }}>\n//         {/* Header */}\n//         <div style={{ marginBottom: '2rem' }}>\n//           <h1 style={{ \n//             fontSize: '24px', \n//             fontWeight: 600, \n//             color: '#172B4D',\n//             marginBottom: '4px'\n//           }}>\n//             Projects\n//           </h1>\n//           <p style={{ color: '#6B778C', fontSize: '14px' }}>\n//             Manage your team's projects and settings\n//           </p>\n//         </div>\n\n//         <div style={{ display: 'grid', gridTemplateColumns: '320px 1fr', gap: '2rem' }}>\n//           {/* Create Project Form */}\n//           <div style={{ \n//             background: '#fff', \n//             padding: '1.5rem', \n//             borderRadius: '8px', \n//             boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n//             border: '1px solid #DFE1E6',\n//             height: 'fit-content',\n//             position: 'sticky',\n//             top: '2rem'\n//           }}>\n//             <h2 style={{ \n//               marginBottom: '1.5rem', \n//               fontSize: '16px', \n//               fontWeight: 600,\n//               color: '#172B4D',\n//               display: 'flex',\n//               alignItems: 'center',\n//               gap: '8px'\n//             }}>\n//               <FiPlus size={18} /> Create New Project\n//             </h2>\n            \n//             <InputField \n//               label=\"Project Name\" \n//               value={name} \n//               onChange={e => setName(e.target.value)}\n//               icon={FiLayers}\n//               placeholder=\"Enter project name\"\n//             />\n            \n//             <InputField \n//               label=\"Project Key\" \n//               value={key} \n//               onChange={e => setKey(e.target.value)}\n//               icon={FiKey}\n//               placeholder=\"PRJ\"\n//               style={{ textTransform: 'uppercase' }}\n//             />\n            \n//             <InputField \n//               label=\"Leads (comma separated)\" \n//               value={leads.join(',')} \n//               onChange={e => setLeads(e.target.value.split(',').map(l => l.trim()))}\n//               icon={FiUsers}\n//               placeholder=\"John Doe, Jane Smith\"\n//             />\n            \n//             <div style={{ marginBottom: '1.5rem' }}>\n//               <label style={{ \n//                 display: 'block', \n//                 marginBottom: '4px', \n//                 fontSize: '14px', \n//                 fontWeight: 600, \n//                 color: '#172B4D' \n//               }}>\n//                 <FiLayers size={14} style={{ marginRight: '6px' }} />\n//                 Type\n//               </label>\n//               <select \n//                 value={type} \n//                 onChange={e => setType(e.target.value)} \n//                 style={{ \n//                   width: '100%', \n//                   padding: '10px 12px', \n//                   borderRadius: '4px', \n//                   border: '1px solid #DFE1E6',\n//                   fontSize: '14px',\n//                   background: '#fff'\n//                 }}\n//               >\n//                 <option value=\"Software\">💻 Software</option>\n//                 <option value=\"Business\">📊 Business</option>\n//                 <option value=\"Service\">🔧 Service</option>\n//               </select>\n//             </div>\n            \n//             <button \n//               onClick={createProject} \n//               style={{ \n//                 display: 'flex', \n//                 alignItems: 'center', \n//                 justifyContent: 'center',\n//                 gap: '8px', \n//                 background: '#0052CC', \n//                 color: '#fff', \n//                 border: 'none', \n//                 padding: '12px 20px', \n//                 borderRadius: '4px', \n//                 cursor: 'pointer',\n//                 fontSize: '14px',\n//                 fontWeight: 600,\n//                 width: '100%',\n//                 transition: 'all 0.2s'\n//               }}\n//               onMouseEnter={(e) => e.target.style.background = '#0747A6'}\n//               onMouseLeave={(e) => e.target.style.background = '#0052CC'}\n//             >\n//               <FiPlus size={16} /> Create Project\n//             </button>\n//           </div>\n\n//           {/* Project Grid */}\n//           <div>\n//             <div style={{ \n//               display: 'flex', \n//               justifyContent: 'space-between', \n//               alignItems: 'center',\n//               marginBottom: '1rem'\n//             }}>\n//               <h3 style={{ fontSize: '16px', fontWeight: 600, color: '#172B4D' }}>\n//                 All Projects ({projects.length})\n//               </h3>\n//             </div>\n            \n//             <div style={{ \n//               display: 'grid', \n//               gridTemplateColumns: 'repeat(auto-fill, minmax(320px, 1fr))', \n//               gap: '1rem' \n//             }}>\n//               {projects.map(p => (\n//                 <div key={p.id} style={{\n//                   display: 'flex', \n//                   flexDirection: 'column', \n//                   padding: '1.25rem',\n//                   borderRadius: '8px',\n//                   background: '#fff',\n//                   boxShadow: '0 2px 4px rgba(0,0,0,0.1)', \n//                   border: '1px solid #DFE1E6',\n//                   transition: 'all 0.2s ease',\n//                   position: 'relative',\n//                   overflow: 'hidden'\n//                 }}\n//                 onMouseEnter={e => {\n//                   e.currentTarget.style.transform = 'translateY(-2px)';\n//                   e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';\n//                 }}\n//                 onMouseLeave={e => {\n//                   e.currentTarget.style.transform = 'translateY(0)';\n//                   e.currentTarget.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';\n//                 }}\n//                 >\n//                   {/* Project Key Badge */}\n//                   <div style={{ \n//                     position: 'absolute',\n//                     top: '0',\n//                     right: '0',\n//                     background: '#DFE1E6',\n//                     color: '#172B4D',\n//                     padding: '4px 8px',\n//                     fontSize: '12px',\n//                     fontWeight: 600,\n//                     borderBottomLeftRadius: '4px'\n//                   }}>\n//                     {p.key}\n//                   </div>\n\n//                   {/* Project Header */}\n//                   <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '0.75rem' }}>\n//                     <div style={{ flex: 1, marginRight: '1rem' }}>\n//                       {editingId === p.id ? (\n//                         <input \n//                           value={editName} \n//                           onChange={e => setEditName(e.target.value)}\n//                           style={{ \n//                             width: '100%', \n//                             padding: '6px 8px', \n//                             border: '1px solid #DFE1E6',\n//                             borderRadius: '4px',\n//                             fontSize: '14px'\n//                           }}\n//                         />\n//                       ) : (\n//                         <h4 style={{ \n//                           fontWeight: 600, \n//                           fontSize: '16px', \n//                           color: '#172B4D',\n//                           margin: 0,\n//                           lineHeight: 1.3\n//                         }}>\n//                           {p.name}\n//                         </h4>\n//                       )}\n//                     </div>\n                    \n//                     <div style={{ display: 'flex', gap: '4px' }}>\n//                       {editingId === p.id ? (\n//                         <>\n//                           <button \n//                             onClick={() => saveEdit(p.id)}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: '#36B37E',\n//                               color: 'white',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer'\n//                             }}\n//                           >\n//                             <FiCheck size={14} />\n//                           </button>\n//                           <button \n//                             onClick={cancelEdit}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: '#FF5630',\n//                               color: 'white',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer'\n//                             }}\n//                           >\n//                             <FiX size={14} />\n//                           </button>\n//                         </>\n//                       ) : (\n//                         <>\n//                           <button \n//                             onClick={() => startEdit(p)}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#6B778C',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer',\n//                               transition: 'all 0.2s'\n//                             }}\n//                             onMouseEnter={(e) => {\n//                               e.target.style.background = '#EBECF0';\n//                               e.target.style.color = '#172B4D';\n//                             }}\n//                             onMouseLeave={(e) => {\n//                               e.target.style.background = 'transparent';\n//                               e.target.style.color = '#6B778C';\n//                             }}\n//                           >\n//                             <FiEdit2 size={14} />\n//                           </button>\n//                           <button \n//                             onClick={() => removeProject(p.id)}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#6B778C',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer',\n//                               transition: 'all 0.2s'\n//                             }}\n//                             onMouseEnter={(e) => {\n//                               e.target.style.background = '#FFEBE6';\n//                               e.target.style.color = '#DE350B';\n//                             }}\n//                             onMouseLeave={(e) => {\n//                               e.target.style.background = 'transparent';\n//                               e.target.style.color = '#6B778C';\n//                             }}\n//                           >\n//                             <FiTrash2 size={14} />\n//                           </button>\n//                         </>\n//                       )}\n//                     </div>\n//                   </div>\n\n//                   {/* Project Type */}\n//                   <div style={{ marginBottom: '1rem' }}>\n//                     <span style={{ \n//                       background: typeBadgeStyle(p.type).bg, \n//                       color: typeBadgeStyle(p.type).color, \n//                       padding: '4px 8px', \n//                       borderRadius: '4px', \n//                       fontSize: '12px', \n//                       fontWeight: 600,\n//                       display: 'inline-flex',\n//                       alignItems: 'center',\n//                       gap: '4px'\n//                     }}>\n//                       {typeBadgeStyle(p.type).icon} {p.type}\n//                     </span>\n//                   </div>\n\n//                   {/* Project Leads */}\n//                   <div style={{ marginBottom: '1rem' }}>\n//                     {editingId === p.id ? (\n//                       <input \n//                         value={editLeads.join(',')} \n//                         onChange={e => setEditLeads(e.target.value.split(',').map(l => l.trim()))}\n//                         style={{ \n//                           width: '100%', \n//                           padding: '6px 8px', \n//                           border: '1px solid #DFE1E6',\n//                           borderRadius: '4px',\n//                           fontSize: '14px'\n//                         }}\n//                         placeholder=\"Enter leads separated by commas\"\n//                       />\n//                     ) : renderLeads(p.leads)}\n//                   </div>\n\n//                   {/* Last Updated */}\n//                   <div style={{ \n//                     display: 'flex', \n//                     alignItems: 'center', \n//                     gap: '6px',\n//                     fontSize: '12px', \n//                     color: '#6B778C',\n//                     marginTop: 'auto',\n//                     paddingTop: '0.75rem',\n//                     borderTop: '1px solid #F4F5F7'\n//                   }}>\n//                     <FiCalendar size={12} />\n//                     Updated {p.lastUpdated ? formatDistanceToNow(new Date(p.lastUpdated), { addSuffix: true }) : '—'}\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject, deleteProject, updateProject } from '../../services/mockApi';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus, FiTrash2, FiEdit2, FiCheck, FiX, FiUsers, FiLayers, FiKey, FiCalendar } from 'react-icons/fi';\n// import { formatDistanceToNow } from 'date-fns';\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n//   const [leads, setLeads] = useState([]);\n//   const [type, setType] = useState('Software');\n//   const [editingId, setEditingId] = useState(null);\n//   const [editName, setEditName] = useState('');\n//   const [editKey, setEditKey] = useState('');\n//   const [editLeads, setEditLeads] = useState([]);\n//   const [editType, setEditType] = useState('');\n\n//   useEffect(() => { loadProjects(); }, []);\n//   const loadProjects = async () => setProjects(await listProjects());\n\n//   const createProject = async () => {\n//     if (!name.trim()) return;\n//     const now = new Date().toISOString();\n//     const p = {\n//       id: uuidv4(),\n//       key: key.toUpperCase() || 'PRJ',\n//       name,\n//       type,\n//       leads: leads.length ? leads : ['Unassigned'],\n//       description: '',\n//       lastUpdated: now,\n//       createdAt: now\n//     };\n//     await addProject(p);\n//     setName(''); setKey(''); setLeads([]); setType('Software');\n//     loadProjects();\n//   };\n\n//   const removeProject = async (id) => {\n//     if (window.confirm(\"Are you sure you want to delete this project?\")) {\n//       await deleteProject(id);\n//       loadProjects();\n//     }\n//   };\n\n//   const startEdit = (p) => {\n//     setEditingId(p.id);\n//     setEditName(p.name);\n//     setEditKey(p.key);\n//     setEditLeads(p.leads || []);\n//     setEditType(p.type || 'Software');\n//   };\n  \n//   const cancelEdit = () => { \n//     setEditingId(null); \n//     setEditName(''); \n//     setEditKey(''); \n//     setEditLeads([]); \n//     setEditType(''); \n//   };\n  \n//   const saveEdit = async (id) => {\n//     await updateProject(id, {\n//       name: editName,\n//       key: editKey.toUpperCase(),\n//       leads: editLeads.length ? editLeads : ['Unassigned'],\n//       type: editType,\n//       lastUpdated: new Date().toISOString()\n//     });\n//     cancelEdit();\n//     loadProjects();\n//   };\n\n//   const leadColor = (name) => {\n//     const colors = ['#0052CC', '#36B37E', '#FF5630', '#FFAB00', '#6554C0', '#00A3BF'];\n//     if (!name) return '#6B778C';\n//     const index = name.charCodeAt(0) % colors.length;\n//     return colors[index];\n//   };\n\n//   const typeBadgeStyle = t => {\n//     const colors = {\n//       Software: { bg: '#E3FCF7', color: '#006644', icon: '💻' },\n//       Business: { bg: '#DEEBFF', color: '#0747A6', icon: '📊' },\n//       Service: { bg: '#FFEBE6', color: '#DE350B', icon: '🔧' }\n//     };\n//     const c = colors[t] || { bg: '#F4F5F7', color: '#172B4D', icon: '📁' };\n//     return c;\n//   };\n\n//   const renderLeads = (leadsArr) => (\n//     <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n//       <FiUsers size={14} color=\"#6B778C\" />\n//       {leadsArr.map((l, i) => (\n//         <div key={i} title={l} style={{\n//           width: '28px', \n//           height: '28px', \n//           borderRadius: '50%', \n//           background: leadColor(l), \n//           color: '#fff',\n//           display: 'flex', \n//           alignItems: 'center', \n//           justifyContent: 'center',\n//           fontSize: '12px', \n//           fontWeight: 600, \n//           marginLeft: i > 0 ? -8 : 0, \n//           border: '2px solid #fff',\n//           boxShadow: '0 1px 3px rgba(0,0,0,0.1)'\n//         }}>\n//           {l.charAt(0).toUpperCase()}\n//         </div>\n//       ))}\n//     </div>\n//   );\n\n//   const InputField = ({ label, value, onChange, icon: Icon, ...props }) => (\n//     <div style={{ marginBottom: '1rem' }}>\n//       <label style={{ \n//         display: 'block', \n//         marginBottom: '4px', \n//         fontSize: '14px', \n//         fontWeight: 600, \n//         color: '#172B4D' \n//       }}>\n//         {Icon && <Icon size={14} style={{ marginRight: '6px' }} />}\n//         {label}\n//       </label>\n//       <input \n//         value={value} \n//         onChange={onChange}\n//         style={{ \n//           width: '100%', \n//           padding: '10px 12px', \n//           borderRadius: '4px', \n//           border: '1px solid #DFE1E6',\n//           fontSize: '14px',\n//           transition: 'all 0.2s',\n//           ...props.style // Merge additional styles\n//         }}\n//         onFocus={(e) => e.target.style.borderColor = '#0052CC'}\n//         onBlur={(e) => e.target.style.borderColor = '#DFE1E6'}\n//         {...props}\n//       />\n//     </div>\n//   );\n\n//   return (\n//     <div style={{ \n//       minHeight: '100vh', \n//       background: '#F4F5F7', \n//       padding: '2rem',\n//       fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", sans-serif'\n//     }}>\n//       <div style={{ maxWidth: '1400px', margin: '0 auto' }}>\n//         {/* Header */}\n//         <div style={{ marginBottom: '2rem' }}>\n//           <h1 style={{ \n//             fontSize: '24px', \n//             fontWeight: 600, \n//             color: '#172B4D',\n//             marginBottom: '4px'\n//           }}>\n//             Projects\n//           </h1>\n//           <p style={{ color: '#6B778C', fontSize: '14px' }}>\n//             Manage your team's projects and settings\n//           </p>\n//         </div>\n\n//         <div style={{ display: 'grid', gridTemplateColumns: '320px 1fr', gap: '2rem' }}>\n//           {/* Create Project Form */}\n//           <div style={{ \n//             background: '#fff', \n//             padding: '1.5rem', \n//             borderRadius: '8px', \n//             boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n//             border: '1px solid #DFE1E6',\n//             height: 'fit-content',\n//             position: 'sticky',\n//             top: '2rem'\n//           }}>\n//             <h2 style={{ \n//               marginBottom: '1.5rem', \n//               fontSize: '16px', \n//               fontWeight: 600,\n//               color: '#172B4D',\n//               display: 'flex',\n//               alignItems: 'center',\n//               gap: '8px'\n//             }}>\n//               <FiPlus size={18} /> Create New Project\n//             </h2>\n            \n//             <InputField \n//               label=\"Project Name\" \n//               value={name} \n//               onChange={e => setName(e.target.value)}\n//               icon={FiLayers}\n//               placeholder=\"Enter project name\"\n//             />\n            \n//             <InputField \n//               label=\"Project Key\" \n//               value={key} \n//               onChange={e => setKey(e.target.value.toUpperCase())} // Fixed: auto-uppercase on change\n//               icon={FiKey}\n//               placeholder=\"PRJ\"\n//               maxLength={10}\n//             />\n            \n//             <InputField \n//               label=\"Leads (comma separated)\" \n//               value={leads.join(',')} \n//               onChange={e => setLeads(e.target.value.split(',').map(l => l.trim()).filter(l => l))}\n//               icon={FiUsers}\n//               placeholder=\"John Doe, Jane Smith\"\n//             />\n            \n//             <div style={{ marginBottom: '1.5rem' }}>\n//               <label style={{ \n//                 display: 'block', \n//                 marginBottom: '4px', \n//                 fontSize: '14px', \n//                 fontWeight: 600, \n//                 color: '#172B4D' \n//               }}>\n//                 <FiLayers size={14} style={{ marginRight: '6px' }} />\n//                 Type\n//               </label>\n//               <select \n//                 value={type} \n//                 onChange={e => setType(e.target.value)} \n//                 style={{ \n//                   width: '100%', \n//                   padding: '10px 12px', \n//                   borderRadius: '4px', \n//                   border: '1px solid #DFE1E6',\n//                   fontSize: '14px',\n//                   background: '#fff'\n//                 }}\n//               >\n//                 <option value=\"Software\">💻 Software</option>\n//                 <option value=\"Business\">📊 Business</option>\n//                 <option value=\"Service\">🔧 Service</option>\n//               </select>\n//             </div>\n            \n//             <button \n//               onClick={createProject} \n//               style={{ \n//                 display: 'flex', \n//                 alignItems: 'center', \n//                 justifyContent: 'center',\n//                 gap: '8px', \n//                 background: '#0052CC', \n//                 color: '#fff', \n//                 border: 'none', \n//                 padding: '12px 20px', \n//                 borderRadius: '4px', \n//                 cursor: 'pointer',\n//                 fontSize: '14px',\n//                 fontWeight: 600,\n//                 width: '100%',\n//                 transition: 'all 0.2s'\n//               }}\n//               onMouseEnter={(e) => e.target.style.background = '#0747A6'}\n//               onMouseLeave={(e) => e.target.style.background = '#0052CC'}\n//             >\n//               <FiPlus size={16} /> Create Project\n//             </button>\n//           </div>\n\n//           {/* Project Grid */}\n//           <div>\n//             <div style={{ \n//               display: 'flex', \n//               justifyContent: 'space-between', \n//               alignItems: 'center',\n//               marginBottom: '1rem'\n//             }}>\n//               <h3 style={{ fontSize: '16px', fontWeight: 600, color: '#172B4D' }}>\n//                 All Projects ({projects.length})\n//               </h3>\n//             </div>\n            \n//             <div style={{ \n//               display: 'grid', \n//               gridTemplateColumns: 'repeat(auto-fill, minmax(320px, 1fr))', \n//               gap: '1rem' \n//             }}>\n//               {projects.map(p => (\n//                 <div key={p.id} style={{\n//                   display: 'flex', \n//                   flexDirection: 'column', \n//                   padding: '1.25rem',\n//                   borderRadius: '8px',\n//                   background: '#fff',\n//                   boxShadow: '0 2px 4px rgba(0,0,0,0.1)', \n//                   border: '1px solid #DFE1E6',\n//                   transition: 'all 0.2s ease',\n//                   position: 'relative',\n//                   overflow: 'hidden'\n//                 }}\n//                 onMouseEnter={e => {\n//                   e.currentTarget.style.transform = 'translateY(-2px)';\n//                   e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';\n//                 }}\n//                 onMouseLeave={e => {\n//                   e.currentTarget.style.transform = 'translateY(0)';\n//                   e.currentTarget.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';\n//                 }}\n//                 >\n//                   {/* Project Key Badge */}\n//                   <div style={{ \n//                     position: 'absolute',\n//                     top: '0',\n//                     right: '0',\n//                     background: '#DFE1E6',\n//                     color: '#172B4D',\n//                     padding: '4px 8px',\n//                     fontSize: '12px',\n//                     fontWeight: 600,\n//                     borderBottomLeftRadius: '4px'\n//                   }}>\n//                     {p.key}\n//                   </div>\n\n//                   {/* Project Header */}\n//                   <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '0.75rem' }}>\n//                     <div style={{ flex: 1, marginRight: '1rem' }}>\n//                       {editingId === p.id ? (\n//                         <input \n//                           value={editName} \n//                           onChange={e => setEditName(e.target.value)}\n//                           style={{ \n//                             width: '100%', \n//                             padding: '6px 8px', \n//                             border: '1px solid #DFE1E6',\n//                             borderRadius: '4px',\n//                             fontSize: '14px'\n//                           }}\n//                         />\n//                       ) : (\n//                         <h4 style={{ \n//                           fontWeight: 600, \n//                           fontSize: '16px', \n//                           color: '#172B4D',\n//                           margin: 0,\n//                           lineHeight: 1.3\n//                         }}>\n//                           {p.name}\n//                         </h4>\n//                       )}\n//                     </div>\n                    \n//                     <div style={{ display: 'flex', gap: '4px' }}>\n//                       {editingId === p.id ? (\n//                         <>\n//                           <button \n//                             onClick={() => saveEdit(p.id)}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: '#36B37E',\n//                               color: 'white',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer'\n//                             }}\n//                           >\n//                             <FiCheck size={14} />\n//                           </button>\n//                           <button \n//                             onClick={cancelEdit}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: '#FF5630',\n//                               color: 'white',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer'\n//                             }}\n//                           >\n//                             <FiX size={14} />\n//                           </button>\n//                         </>\n//                       ) : (\n//                         <>\n//                           <button \n//                             onClick={() => startEdit(p)}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#6B778C',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer',\n//                               transition: 'all 0.2s'\n//                             }}\n//                             onMouseEnter={(e) => {\n//                               e.target.style.background = '#EBECF0';\n//                               e.target.style.color = '#172B4D';\n//                             }}\n//                             onMouseLeave={(e) => {\n//                               e.target.style.background = 'transparent';\n//                               e.target.style.color = '#6B778C';\n//                             }}\n//                           >\n//                             <FiEdit2 size={14} />\n//                           </button>\n//                           <button \n//                             onClick={() => removeProject(p.id)}\n//                             style={{\n//                               padding: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#6B778C',\n//                               borderRadius: '4px',\n//                               cursor: 'pointer',\n//                               transition: 'all 0.2s'\n//                             }}\n//                             onMouseEnter={(e) => {\n//                               e.target.style.background = '#FFEBE6';\n//                               e.target.style.color = '#DE350B';\n//                             }}\n//                             onMouseLeave={(e) => {\n//                               e.target.style.background = 'transparent';\n//                               e.target.style.color = '#6B778C';\n//                             }}\n//                           >\n//                             <FiTrash2 size={14} />\n//                           </button>\n//                         </>\n//                       )}\n//                     </div>\n//                   </div>\n\n//                   {/* Project Type */}\n//                   <div style={{ marginBottom: '1rem' }}>\n//                     {editingId === p.id ? (\n//                       <select \n//                         value={editType} \n//                         onChange={e => setEditType(e.target.value)}\n//                         style={{ \n//                           padding: '6px 8px', \n//                           border: '1px solid #DFE1E6',\n//                           borderRadius: '4px',\n//                           fontSize: '14px'\n//                         }}\n//                       >\n//                         <option value=\"Software\">Software</option>\n//                         <option value=\"Business\">Business</option>\n//                         <option value=\"Service\">Service</option>\n//                       </select>\n//                     ) : (\n//                       <span style={{ \n//                         background: typeBadgeStyle(p.type).bg, \n//                         color: typeBadgeStyle(p.type).color, \n//                         padding: '4px 8px', \n//                         borderRadius: '4px', \n//                         fontSize: '12px', \n//                         fontWeight: 600,\n//                         display: 'inline-flex',\n//                         alignItems: 'center',\n//                         gap: '4px'\n//                       }}>\n//                         {typeBadgeStyle(p.type).icon} {p.type}\n//                       </span>\n//                     )}\n//                   </div>\n\n//                   {/* Project Leads */}\n//                   <div style={{ marginBottom: '1rem' }}>\n//                     {editingId === p.id ? (\n//                       <input \n//                         value={editLeads.join(',')} \n//                         onChange={e => setEditLeads(e.target.value.split(',').map(l => l.trim()).filter(l => l))}\n//                         style={{ \n//                           width: '100%', \n//                           padding: '6px 8px', \n//                           border: '1px solid #DFE1E6',\n//                           borderRadius: '4px',\n//                           fontSize: '14px'\n//                         }}\n//                         placeholder=\"Enter leads separated by commas\"\n//                       />\n//                     ) : renderLeads(p.leads)}\n//                   </div>\n\n//                   {/* Project Key in Edit Mode */}\n//                   {editingId === p.id && (\n//                     <div style={{ marginBottom: '1rem' }}>\n//                       <label style={{ fontSize: '12px', fontWeight: 600, color: '#172B4D', display: 'block', marginBottom: '4px' }}>\n//                         Project Key\n//                       </label>\n//                       <input \n//                         value={editKey} \n//                         onChange={e => setEditKey(e.target.value.toUpperCase())}\n//                         style={{ \n//                           width: '100%', \n//                           padding: '6px 8px', \n//                           border: '1px solid #DFE1E6',\n//                           borderRadius: '4px',\n//                           fontSize: '14px'\n//                         }}\n//                         maxLength={10}\n//                       />\n//                     </div>\n//                   )}\n\n//                   {/* Last Updated */}\n//                   <div style={{ \n//                     display: 'flex', \n//                     alignItems: 'center', \n//                     gap: '6px',\n//                     fontSize: '12px', \n//                     color: '#6B778C',\n//                     marginTop: 'auto',\n//                     paddingTop: '0.75rem',\n//                     borderTop: '1px solid #F4F5F7'\n//                   }}>\n//                     <FiCalendar size={12} />\n//                     Updated {p.lastUpdated ? formatDistanceToNow(new Date(p.lastUpdated), { addSuffix: true }) : '—'}\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject, deleteProject, updateProject } from '../../services/mockApi';\n// import { Link } from 'react-router-dom';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus, FiTrash2, FiEdit2, FiCheck, FiX, FiChevronUp, FiChevronDown, FiUsers, FiCalendar } from 'react-icons/fi';\n// import { formatDistanceToNow } from 'date-fns';\n\n// // Reusable input component\n// function InputField({ label, value, onChange, icon: Icon, placeholder, maxLength }) {\n//   return (\n//     <div style={{ marginBottom: '1rem' }}>\n//       <label style={{ display: 'block', fontSize: '13px', fontWeight: 600, marginBottom: '0.25rem', color: '#172B4D' }}>\n//         {label}\n//       </label>\n//       <div style={{ display: 'flex', alignItems: 'center', border: '1px solid #DFE1E6', borderRadius: '4px', background: '#fff' }}>\n//         {Icon && <Icon style={{ marginLeft: '8px', color: '#6B778C' }} />}\n//         <input\n//           type=\"text\"\n//           value={value}\n//           onChange={onChange}\n//           placeholder={placeholder}\n//           maxLength={maxLength}\n//           style={{\n//             flex: 1,\n//             padding: '8px',\n//             border: 'none',\n//             outline: 'none',\n//             fontSize: '14px',\n//             borderRadius: '4px',\n//           }}\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n//   const [type, setType] = useState('Software');\n//   const [leadsInput, setLeadsInput] = useState(''); // store as plain text\n//   const [expanded, setExpanded] = useState({});\n//   const [editingId, setEditingId] = useState(null);\n//   const [editName, setEditName] = useState('');\n//   const [editKey, setEditKey] = useState('');\n//   const [editType, setEditType] = useState('');\n//   const [editLeadsInput, setEditLeadsInput] = useState('');\n\n//   useEffect(() => {\n//     loadProjects();\n//   }, []);\n\n//   const loadProjects = async () => {\n//     const data = await listProjects();\n//     setProjects(data);\n//   };\n\n//   const createProject = async () => {\n//     if (!name.trim()) return;\n//     const now = new Date().toISOString();\n//     const p = {\n//       id: uuidv4(),\n//       key: key.toUpperCase() || 'PRJ',\n//       name,\n//       type,\n//       leads: leadsInput\n//         ? leadsInput.split(',').map(l => l.trim()).filter(l => l)\n//         : ['Unassigned'],\n//       description: '',\n//       lastUpdated: now,\n//       createdAt: now,\n//     };\n//     await addProject(p);\n//     setName('');\n//     setKey('');\n//     setLeadsInput('');\n//     setType('Software');\n//     loadProjects();\n//   };\n\n//   const removeProject = async (id) => {\n//     await deleteProject(id);\n//     loadProjects();\n//   };\n\n//   const startEdit = (p) => {\n//     setEditingId(p.id);\n//     setEditName(p.name);\n//     setEditKey(p.key);\n//     setEditType(p.type);\n//     setEditLeadsInput(p.leads.join(', '));\n//   };\n\n//   const saveEdit = async (id) => {\n//     const updated = {\n//       ...projects.find(p => p.id === id),\n//       name: editName,\n//       key: editKey,\n//       type: editType,\n//       leads: editLeadsInput\n//         ? editLeadsInput.split(',').map(l => l.trim()).filter(l => l)\n//         : ['Unassigned'],\n//       lastUpdated: new Date().toISOString(),\n//     };\n//     await updateProject(id, updated);\n//     setEditingId(null);\n//     loadProjects();\n//   };\n\n//   return (\n//     <div style={{ display: 'flex', height: '100vh' }}>\n//       {/* Sidebar create project form */}\n//       <div style={{ width: '320px', borderRight: '1px solid #DFE1E6', padding: '1rem', background: '#F4F5F7' }}>\n//         <h2 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '1rem' }}>Create Project</h2>\n\n//         <InputField label=\"Project Name\" value={name} onChange={e => setName(e.target.value)} placeholder=\"Enter project name\" />\n//         <InputField label=\"Project Key\" value={key} onChange={e => setKey(e.target.value)} placeholder=\"e.g. PROJ\" maxLength={10} />\n//         <InputField label=\"Project Type\" value={type} onChange={e => setType(e.target.value)} placeholder=\"Software, Business...\" />\n//         <InputField label=\"Leads (comma separated)\" value={leadsInput} onChange={e => setLeadsInput(e.target.value)} placeholder=\"John Doe, Jane Smith\" icon={FiUsers} />\n\n//         <button\n//           onClick={createProject}\n//           style={{\n//             width: '100%',\n//             background: '#0052CC',\n//             color: 'white',\n//             padding: '8px',\n//             border: 'none',\n//             borderRadius: '4px',\n//             cursor: 'pointer',\n//             display: 'flex',\n//             alignItems: 'center',\n//             justifyContent: 'center',\n//             fontSize: '14px',\n//           }}\n//         >\n//           <FiPlus style={{ marginRight: '6px' }} /> Create Project\n//         </button>\n//       </div>\n\n//       {/* Main project list */}\n//       <div style={{ flex: 1, padding: '2rem', overflowY: 'auto' }}>\n//         <h2 style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '1.5rem' }}>Projects</h2>\n\n//         <div style={{ display: 'grid', gap: '1rem', gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))' }}>\n//           {projects.map(p => (\n//             <div\n//               key={p.id}\n//               style={{\n//                 background: '#fff',\n//                 border: '1px solid #DFE1E6',\n//                 borderRadius: '8px',\n//                 padding: '1rem',\n//                 display: 'flex',\n//                 flexDirection: 'column',\n//               }}\n//             >\n//               {editingId === p.id ? (\n//                 <>\n//                   <InputField label=\"Name\" value={editName} onChange={e => setEditName(e.target.value)} />\n//                   <InputField label=\"Key\" value={editKey} onChange={e => setEditKey(e.target.value)} />\n//                   <InputField label=\"Type\" value={editType} onChange={e => setEditType(e.target.value)} />\n//                   <InputField label=\"Leads\" value={editLeadsInput} onChange={e => setEditLeadsInput(e.target.value)} />\n//                   <div style={{ display: 'flex', gap: '0.5rem', marginTop: '0.5rem' }}>\n//                     <button onClick={() => saveEdit(p.id)} style={{ background: '#36B37E', color: '#fff', border: 'none', padding: '6px 10px', borderRadius: '4px', cursor: 'pointer' }}>\n//                       <FiCheck />\n//                     </button>\n//                     <button onClick={() => setEditingId(null)} style={{ background: '#FF5630', color: '#fff', border: 'none', padding: '6px 10px', borderRadius: '4px', cursor: 'pointer' }}>\n//                       <FiX />\n//                     </button>\n//                   </div>\n//                 </>\n//               ) : (\n//                 <>\n//                   <h3 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '0.5rem' }}>\n//                     <Link to={`/projects/${p.id}`} style={{ color: '#0052CC', textDecoration: 'none' }}>\n//                       {p.name}\n//                     </Link>\n//                   </h3>\n//                   <p style={{ fontSize: '13px', color: '#6B778C', marginBottom: '0.5rem' }}>{p.type} Project</p>\n//                   <p style={{ fontSize: '13px', marginBottom: '0.5rem' }}>Key: {p.key}</p>\n//                   <p style={{ fontSize: '13px', marginBottom: '0.5rem' }}>Leads: {p.leads.join(', ')}</p>\n\n//                   <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '1rem' }}>\n//                     <div style={{ display: 'flex', gap: '0.5rem' }}>\n//                       <button onClick={() => startEdit(p)} style={{ background: '#FFAB00', color: '#fff', border: 'none', padding: '6px 10px', borderRadius: '4px', cursor: 'pointer' }}>\n//                         <FiEdit2 />\n//                       </button>\n//                       <button onClick={() => removeProject(p.id)} style={{ background: '#FF5630', color: '#fff', border: 'none', padding: '6px 10px', borderRadius: '4px', cursor: 'pointer' }}>\n//                         <FiTrash2 />\n//                       </button>\n//                     </div>\n//                     <button onClick={() => setExpanded({ ...expanded, [p.id]: !expanded[p.id] })} style={{ background: 'transparent', border: 'none', cursor: 'pointer', color: '#0052CC' }}>\n//                       {expanded[p.id] ? <FiChevronUp /> : <FiChevronDown />}\n//                     </button>\n//                   </div>\n\n//                   {expanded[p.id] && (\n//                     <div style={{ marginTop: '0.5rem', fontSize: '13px', color: '#172B4D' }}>\n//                       <p>{p.description || 'No description provided.'}</p>\n//                     </div>\n//                   )}\n//                 </>\n//               )}\n\n//               {/* Metadata */}\n//               <div\n//                 style={{\n//                   display: 'flex',\n//                   justifyContent: 'space-between',\n//                   marginTop: 'auto',\n//                   marginTop: '1rem',\n//                   paddingTop: '0.75rem',\n//                   borderTop: '1px solid #EBECF0',\n//                   fontSize: '12px',\n//                   color: '#6B778C',\n//                 }}\n//               >\n//                 <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n//                   <FiCalendar size={12} />\n//                   {p.createdAt ? (\n//                     <>Created {formatDistanceToNow(new Date(p.createdAt), { addSuffix: true })}</>\n//                   ) : (\n//                     <>Created just now</>\n//                   )}\n//                 </div>\n//                 <div>\n//                   {p.lastUpdated ? (\n//                     <>Updated {formatDistanceToNow(new Date(p.lastUpdated), { addSuffix: true })}</>\n//                   ) : (\n//                     <>Updated just now</>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           ))}\n\n//           {projects.length === 0 && (\n//             <div\n//               style={{\n//                 gridColumn: '1 / -1',\n//                 textAlign: 'center',\n//                 padding: '3rem 2rem',\n//                 background: '#fff',\n//                 borderRadius: '8px',\n//                 border: '1px dashed #DFE1E6',\n//                 color: '#6B778C',\n//               }}\n//             >\n//               <p style={{ marginBottom: '1rem' }}>No projects yet.</p>\n//               <p style={{ fontSize: '14px' }}>Create your first project using the form on the left.</p>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAWA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
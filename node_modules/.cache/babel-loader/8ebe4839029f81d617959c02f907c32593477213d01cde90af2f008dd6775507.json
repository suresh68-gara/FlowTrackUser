{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vmoun\\\\OneDrive\\\\Desktop\\\\newtieckettool\\\\src\\\\components\\\\timeline\\\\Timeline.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from \"react\";\n// import { useDrag, useDrop, DndProvider } from \"react-dnd\";\n// import { HTML5Backend } from \"react-dnd-html5-backend\";\n// import styled from \"styled-components\";\n// import { format, addDays, differenceInDays, parseISO } from \"date-fns\";\n// import Xarrow from \"react-xarrows\";\n// import html2canvas from \"html2canvas\";\n// import jsPDF from \"jspdf\";\n// import * as XLSX from \"xlsx\";\n\n// // Styled components\n// const Container = styled.div`\n//   padding: 20px;\n//   font-family: Arial;\n// `;\n\n// const TimelineContainer = styled.div`\n//   border: 1px solid #ccc;\n//   padding: 10px;\n//   overflow-x: auto;\n//   position: relative;\n//   height: 400px;\n// `;\n\n// const ZoomControls = styled.div`\n//   margin-bottom: 10px;\n// `;\n\n// const FilterControls = styled.div`\n//   margin-bottom: 10px;\n// `;\n\n// const TaskBar = styled.div`\n//   position: absolute;\n//   height: 30px;\n//   border-radius: 4px;\n//   color: white;\n//   padding: 0 5px;\n//   font-size: 12px;\n//   display: flex;\n//   align-items: center;\n//   cursor: grab;\n// `;\n\n// // Task component with dynamic drag\n// function Task({ task, dates, onTaskMove }) {\n//   const startIdx = dates.findIndex((d) => d === task.start);\n//   const endIdx = dates.findIndex((d) => d === task.end);\n//   const width = (endIdx - startIdx + 1) * 100;\n\n//   const [{ isDragging }, drag] = useDrag(() => ({\n//     type: \"TASK\",\n//     item: { id: task.id },\n//     collect: (monitor) => ({\n//       isDragging: !!monitor.isDragging(),\n//     }),\n//   }));\n\n//   const [, drop] = useDrop({\n//     accept: \"TASK\",\n//     hover: (item, monitor) => {\n//       if (!monitor.isOver({ shallow: true })) return;\n//       const delta = monitor.getDifferenceFromInitialOffset();\n//       const daysMoved = Math.round(delta.x / 100); // 100px per day\n//       if (daysMoved !== 0) {\n//         onTaskMove(item.id, daysMoved);\n//       }\n//     },\n//   });\n\n//   return (\n//     <TaskBar\n//       ref={(node) => drag(drop(node))}\n//       style={{\n//         left: startIdx * 100,\n//         width: width,\n//         backgroundColor: task.color,\n//         opacity: isDragging ? 0.5 : 1,\n//         top: task.id * 50,\n//       }}\n//       id={`task-${task.id}`}\n//     >\n//       {task.milestone && \"ðŸŽ¯\"} {task.title} ({task.progress}%)\n//     </TaskBar>\n//   );\n// }\n\n// // Main Timeline component\n// function TimelineInteractive() {\n//   const initialTasks = [\n//     {\n//       id: 1,\n//       title: \"Design UI\",\n//       start: \"2025-09-22\",\n//       end: \"2025-09-25\",\n//       progress: 50,\n//       color: \"#0052CC\",\n//       assignee: \"John\",\n//       dependencies: [2],\n//       milestone: false,\n//     },\n//     {\n//       id: 2,\n//       title: \"Develop Backend\",\n//       start: \"2025-09-23\",\n//       end: \"2025-09-28\",\n//       progress: 20,\n//       color: \"#FF5630\",\n//       assignee: \"Alice\",\n//       dependencies: [],\n//       milestone: true,\n//     },\n//     {\n//       id: 3,\n//       title: \"QA Testing\",\n//       start: \"2025-09-26\",\n//       end: \"2025-10-02\",\n//       progress: 0,\n//       color: \"#36B37E\",\n//       assignee: \"John\",\n//       dependencies: [1, 2],\n//       milestone: false,\n//     },\n//   ];\n\n//   const [tasks, setTasks] = useState(initialTasks);\n//   const [zoom, setZoom] = useState(\"week\");\n//   const [filterAssignee, setFilterAssignee] = useState(\"All\");\n//   const timelineRef = useRef();\n\n//   const startDate = parseISO(\"2025-09-20\");\n//   const endDate = parseISO(\"2025-10-05\");\n//   const totalDays = differenceInDays(endDate, startDate) + 1;\n\n//   const dates = [];\n//   for (let i = 0; i < totalDays; i++) {\n//     dates.push(format(addDays(startDate, i), \"yyyy-MM-dd\"));\n//   }\n\n//   // Move task by delta days\n//   const handleTaskMove = (id, deltaDays) => {\n//     setTasks((prev) =>\n//       prev.map((task) => {\n//         if (task.id === id) {\n//           const oldStart = parseISO(task.start);\n//           const oldEnd = parseISO(task.end);\n//           let newStart = addDays(oldStart, deltaDays);\n//           let newEnd = addDays(oldEnd, deltaDays);\n\n//           // Snap to timeline boundaries\n//           if (newStart < startDate) {\n//             newStart = startDate;\n//             newEnd = addDays(startDate, differenceInDays(oldEnd, oldStart));\n//           }\n//           if (newEnd > endDate) {\n//             newEnd = endDate;\n//             newStart = addDays(endDate, -differenceInDays(oldEnd, oldStart));\n//           }\n\n//           return {\n//             ...task,\n//             start: format(newStart, \"yyyy-MM-dd\"),\n//             end: format(newEnd, \"yyyy-MM-dd\"),\n//           };\n//         }\n//         return task;\n//       })\n//     );\n//   };\n\n//   // Filtering tasks\n//   const filteredTasks =\n//     filterAssignee === \"All\"\n//       ? tasks\n//       : tasks.filter((t) => t.assignee === filterAssignee);\n\n//   const uniqueAssignees = [\"All\", ...new Set(tasks.map((t) => t.assignee))];\n\n//   // Export PDF\n//   const exportPDF = () => {\n//     html2canvas(timelineRef.current).then((canvas) => {\n//       const imgData = canvas.toDataURL(\"image/png\");\n//       const pdf = new jsPDF(\"l\", \"pt\", [canvas.width, canvas.height]);\n//       pdf.addImage(imgData, \"PNG\", 0, 0);\n//       pdf.save(\"timeline.pdf\");\n//     });\n//   };\n\n//   // Export Excel\n//   const exportExcel = () => {\n//     const ws = XLSX.utils.json_to_sheet(\n//       tasks.map((t) => ({\n//         Title: t.title,\n//         Start: t.start,\n//         End: t.end,\n//         Progress: t.progress,\n//         Assignee: t.assignee,\n//       }))\n//     );\n//     const wb = XLSX.utils.book_new();\n//     XLSX.utils.book_append_sheet(wb, ws, \"Timeline\");\n//     XLSX.writeFile(wb, \"timeline.xlsx\");\n//   };\n\n//   return (\n//     <DndProvider backend={HTML5Backend}>\n//       <Container>\n//         <h1>Interactive Jira-like Timeline</h1>\n//         <ZoomControls>\n//           Zoom:\n//           <select value={zoom} onChange={(e) => setZoom(e.target.value)}>\n//             <option value=\"day\">Day</option>\n//             <option value=\"week\">Week</option>\n//             <option value=\"month\">Month</option>\n//             <option value=\"quarter\">Quarter</option>\n//           </select>\n//         </ZoomControls>\n//         <FilterControls>\n//           Filter by Assignee:\n//           <select\n//             value={filterAssignee}\n//             onChange={(e) => setFilterAssignee(e.target.value)}\n//           >\n//             {uniqueAssignees.map((assignee) => (\n//               <option key={assignee} value={assignee}>\n//                 {assignee}\n//               </option>\n//             ))}\n//           </select>\n//         </FilterControls>\n//         <button onClick={exportPDF}>Export PDF</button>\n//         <button onClick={exportExcel} style={{ marginLeft: \"10px\" }}>\n//           Export Excel\n//         </button>\n//         <TimelineContainer ref={timelineRef}>\n//           <div style={{ display: \"flex\", borderBottom: \"1px solid #ccc\" }}>\n//             {dates.map((date) => (\n//               <div\n//                 key={date}\n//                 style={{\n//                   minWidth: \"100px\",\n//                   borderRight: \"1px solid #eee\",\n//                   textAlign: \"center\",\n//                 }}\n//               >\n//                 {date}\n//               </div>\n//             ))}\n//           </div>\n//           {filteredTasks.map((task) => (\n//             <Task\n//               key={task.id}\n//               task={task}\n//               dates={dates}\n//               onTaskMove={handleTaskMove}\n//             />\n//           ))}\n//           {/* Dependency arrows */}\n//           {filteredTasks.map((task) =>\n//             task.dependencies.map((depId) => {\n//               const depTask = tasks.find((t) => t.id === depId);\n//               if (!depTask) return null;\n//               return (\n//                 <Xarrow\n//                   key={`${task.id}-${depId}`}\n//                   start={`task-${depTask.id}`}\n//                   end={`task-${task.id}`}\n//                   color=\"black\"\n//                   strokeWidth={2}\n//                   headSize={4}\n//                 />\n//               );\n//             })\n//           )}\n//         </TimelineContainer>\n//       </Container>\n//     </DndProvider>\n//   );\n// }\n\n// export default TimelineInteractive;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"dhtmlx-gantt/codebase/dhtmlxgantt.css\";\nimport gantt from \"dhtmlx-gantt\";\nimport { useProjects } from \"../../context/ProjectContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Timeline = () => {\n  _s();\n  const ganttContainer = useRef(null);\n  const {\n    projects,\n    addProject\n  } = useProjects();\n  const [newProjectText, setNewProjectText] = useState(\"\");\n  useEffect(() => {\n    gantt.config.xml_date = \"%Y-%m-%d %H:%i\";\n    gantt.config.readonly = false;\n    gantt.config.drag_move = true;\n    gantt.config.drag_resize = true;\n    gantt.config.drag_links = true;\n    gantt.config.auto_scheduling = true;\n    gantt.config.show_errors = false;\n    gantt.config.highlight_critical_path = true;\n    gantt.init(ganttContainer.current);\n    gantt.clearAll();\n    gantt.parse({\n      data: projects,\n      links: [{\n        id: 1,\n        source: 1,\n        target: 2,\n        type: \"0\"\n      }, {\n        id: 2,\n        source: 2,\n        target: 3,\n        type: \"0\"\n      }, {\n        id: 3,\n        source: 3,\n        target: 4,\n        type: \"0\"\n      }, {\n        id: 4,\n        source: 4,\n        target: 5,\n        type: \"0\"\n      }]\n    });\n  }, [projects]);\n  const handleCreateProject = () => {\n    if (!newProjectText.trim()) return;\n    const newProject = {\n      id: Date.now(),\n      text: newProjectText,\n      start_date: \"2025-12-10 00:00\",\n      duration: 10,\n      progress: 0\n    };\n    addProject(newProject);\n    setNewProjectText(\"\");\n  };\n  const containerStyle = {\n    margin: \"30px auto\",\n    maxWidth: \"1200px\",\n    borderRadius: \"12px\",\n    boxShadow: \"0 4px 20px rgba(0,0,0,0.1)\",\n    overflow: \"hidden\",\n    backgroundColor: \"#fff\",\n    fontFamily: \"Segoe UI, sans-serif\"\n  };\n  const headerStyle = {\n    padding: \"20px\",\n    background: \"linear-gradient(to right, #4e54c8, #8f94fb)\",\n    color: \"#fff\",\n    fontSize: \"24px\",\n    fontWeight: \"600\",\n    textAlign: \"center\",\n    letterSpacing: \"0.5px\"\n  };\n  const ganttStyle = {\n    height: \"600px\",\n    width: \"100%\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: headerStyle,\n      children: \"\\uD83D\\uDCC5 Project Timeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"20px\",\n        display: \"flex\",\n        gap: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newProjectText,\n        onChange: e => setNewProjectText(e.target.value),\n        placeholder: \"New project name\",\n        style: {\n          flex: 1,\n          padding: \"8px\",\n          fontSize: \"16px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateProject,\n        style: {\n          padding: \"8px 16px\"\n        },\n        children: \"Add Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ganttContainer,\n      style: ganttStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 5\n  }, this);\n};\n_s(Timeline, \"GMKLfBsgM3xzv4fQIOT07Iq67ss=\", false, function () {\n  return [useProjects];\n});\n_c = Timeline;\nexport default Timeline;\nvar _c;\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"names":["React","useEffect","useRef","useState","gantt","useProjects","jsxDEV","_jsxDEV","Timeline","_s","ganttContainer","projects","addProject","newProjectText","setNewProjectText","config","xml_date","readonly","drag_move","drag_resize","drag_links","auto_scheduling","show_errors","highlight_critical_path","init","current","clearAll","parse","data","links","id","source","target","type","handleCreateProject","trim","newProject","Date","now","text","start_date","duration","progress","containerStyle","margin","maxWidth","borderRadius","boxShadow","overflow","backgroundColor","fontFamily","headerStyle","padding","background","color","fontSize","fontWeight","textAlign","letterSpacing","ganttStyle","height","width","style","children","fileName","_jsxFileName","lineNumber","columnNumber","display","gap","value","onChange","e","placeholder","flex","onClick","ref","_c","$RefreshReg$"],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/components/timeline/Timeline.js"],"sourcesContent":["\n\n\n\n\n\n\n\n\n// import React, { useState, useRef } from \"react\";\n// import { useDrag, useDrop, DndProvider } from \"react-dnd\";\n// import { HTML5Backend } from \"react-dnd-html5-backend\";\n// import styled from \"styled-components\";\n// import { format, addDays, differenceInDays, parseISO } from \"date-fns\";\n// import Xarrow from \"react-xarrows\";\n// import html2canvas from \"html2canvas\";\n// import jsPDF from \"jspdf\";\n// import * as XLSX from \"xlsx\";\n\n// // Styled components\n// const Container = styled.div`\n//   padding: 20px;\n//   font-family: Arial;\n// `;\n\n// const TimelineContainer = styled.div`\n//   border: 1px solid #ccc;\n//   padding: 10px;\n//   overflow-x: auto;\n//   position: relative;\n//   height: 400px;\n// `;\n\n// const ZoomControls = styled.div`\n//   margin-bottom: 10px;\n// `;\n\n// const FilterControls = styled.div`\n//   margin-bottom: 10px;\n// `;\n\n// const TaskBar = styled.div`\n//   position: absolute;\n//   height: 30px;\n//   border-radius: 4px;\n//   color: white;\n//   padding: 0 5px;\n//   font-size: 12px;\n//   display: flex;\n//   align-items: center;\n//   cursor: grab;\n// `;\n\n// // Task component with dynamic drag\n// function Task({ task, dates, onTaskMove }) {\n//   const startIdx = dates.findIndex((d) => d === task.start);\n//   const endIdx = dates.findIndex((d) => d === task.end);\n//   const width = (endIdx - startIdx + 1) * 100;\n\n//   const [{ isDragging }, drag] = useDrag(() => ({\n//     type: \"TASK\",\n//     item: { id: task.id },\n//     collect: (monitor) => ({\n//       isDragging: !!monitor.isDragging(),\n//     }),\n//   }));\n\n//   const [, drop] = useDrop({\n//     accept: \"TASK\",\n//     hover: (item, monitor) => {\n//       if (!monitor.isOver({ shallow: true })) return;\n//       const delta = monitor.getDifferenceFromInitialOffset();\n//       const daysMoved = Math.round(delta.x / 100); // 100px per day\n//       if (daysMoved !== 0) {\n//         onTaskMove(item.id, daysMoved);\n//       }\n//     },\n//   });\n\n//   return (\n//     <TaskBar\n//       ref={(node) => drag(drop(node))}\n//       style={{\n//         left: startIdx * 100,\n//         width: width,\n//         backgroundColor: task.color,\n//         opacity: isDragging ? 0.5 : 1,\n//         top: task.id * 50,\n//       }}\n//       id={`task-${task.id}`}\n//     >\n//       {task.milestone && \"ðŸŽ¯\"} {task.title} ({task.progress}%)\n//     </TaskBar>\n//   );\n// }\n\n// // Main Timeline component\n// function TimelineInteractive() {\n//   const initialTasks = [\n//     {\n//       id: 1,\n//       title: \"Design UI\",\n//       start: \"2025-09-22\",\n//       end: \"2025-09-25\",\n//       progress: 50,\n//       color: \"#0052CC\",\n//       assignee: \"John\",\n//       dependencies: [2],\n//       milestone: false,\n//     },\n//     {\n//       id: 2,\n//       title: \"Develop Backend\",\n//       start: \"2025-09-23\",\n//       end: \"2025-09-28\",\n//       progress: 20,\n//       color: \"#FF5630\",\n//       assignee: \"Alice\",\n//       dependencies: [],\n//       milestone: true,\n//     },\n//     {\n//       id: 3,\n//       title: \"QA Testing\",\n//       start: \"2025-09-26\",\n//       end: \"2025-10-02\",\n//       progress: 0,\n//       color: \"#36B37E\",\n//       assignee: \"John\",\n//       dependencies: [1, 2],\n//       milestone: false,\n//     },\n//   ];\n\n//   const [tasks, setTasks] = useState(initialTasks);\n//   const [zoom, setZoom] = useState(\"week\");\n//   const [filterAssignee, setFilterAssignee] = useState(\"All\");\n//   const timelineRef = useRef();\n\n//   const startDate = parseISO(\"2025-09-20\");\n//   const endDate = parseISO(\"2025-10-05\");\n//   const totalDays = differenceInDays(endDate, startDate) + 1;\n\n//   const dates = [];\n//   for (let i = 0; i < totalDays; i++) {\n//     dates.push(format(addDays(startDate, i), \"yyyy-MM-dd\"));\n//   }\n\n//   // Move task by delta days\n//   const handleTaskMove = (id, deltaDays) => {\n//     setTasks((prev) =>\n//       prev.map((task) => {\n//         if (task.id === id) {\n//           const oldStart = parseISO(task.start);\n//           const oldEnd = parseISO(task.end);\n//           let newStart = addDays(oldStart, deltaDays);\n//           let newEnd = addDays(oldEnd, deltaDays);\n\n//           // Snap to timeline boundaries\n//           if (newStart < startDate) {\n//             newStart = startDate;\n//             newEnd = addDays(startDate, differenceInDays(oldEnd, oldStart));\n//           }\n//           if (newEnd > endDate) {\n//             newEnd = endDate;\n//             newStart = addDays(endDate, -differenceInDays(oldEnd, oldStart));\n//           }\n\n//           return {\n//             ...task,\n//             start: format(newStart, \"yyyy-MM-dd\"),\n//             end: format(newEnd, \"yyyy-MM-dd\"),\n//           };\n//         }\n//         return task;\n//       })\n//     );\n//   };\n\n//   // Filtering tasks\n//   const filteredTasks =\n//     filterAssignee === \"All\"\n//       ? tasks\n//       : tasks.filter((t) => t.assignee === filterAssignee);\n\n//   const uniqueAssignees = [\"All\", ...new Set(tasks.map((t) => t.assignee))];\n\n//   // Export PDF\n//   const exportPDF = () => {\n//     html2canvas(timelineRef.current).then((canvas) => {\n//       const imgData = canvas.toDataURL(\"image/png\");\n//       const pdf = new jsPDF(\"l\", \"pt\", [canvas.width, canvas.height]);\n//       pdf.addImage(imgData, \"PNG\", 0, 0);\n//       pdf.save(\"timeline.pdf\");\n//     });\n//   };\n\n//   // Export Excel\n//   const exportExcel = () => {\n//     const ws = XLSX.utils.json_to_sheet(\n//       tasks.map((t) => ({\n//         Title: t.title,\n//         Start: t.start,\n//         End: t.end,\n//         Progress: t.progress,\n//         Assignee: t.assignee,\n//       }))\n//     );\n//     const wb = XLSX.utils.book_new();\n//     XLSX.utils.book_append_sheet(wb, ws, \"Timeline\");\n//     XLSX.writeFile(wb, \"timeline.xlsx\");\n//   };\n\n//   return (\n//     <DndProvider backend={HTML5Backend}>\n//       <Container>\n//         <h1>Interactive Jira-like Timeline</h1>\n//         <ZoomControls>\n//           Zoom:\n//           <select value={zoom} onChange={(e) => setZoom(e.target.value)}>\n//             <option value=\"day\">Day</option>\n//             <option value=\"week\">Week</option>\n//             <option value=\"month\">Month</option>\n//             <option value=\"quarter\">Quarter</option>\n//           </select>\n//         </ZoomControls>\n//         <FilterControls>\n//           Filter by Assignee:\n//           <select\n//             value={filterAssignee}\n//             onChange={(e) => setFilterAssignee(e.target.value)}\n//           >\n//             {uniqueAssignees.map((assignee) => (\n//               <option key={assignee} value={assignee}>\n//                 {assignee}\n//               </option>\n//             ))}\n//           </select>\n//         </FilterControls>\n//         <button onClick={exportPDF}>Export PDF</button>\n//         <button onClick={exportExcel} style={{ marginLeft: \"10px\" }}>\n//           Export Excel\n//         </button>\n//         <TimelineContainer ref={timelineRef}>\n//           <div style={{ display: \"flex\", borderBottom: \"1px solid #ccc\" }}>\n//             {dates.map((date) => (\n//               <div\n//                 key={date}\n//                 style={{\n//                   minWidth: \"100px\",\n//                   borderRight: \"1px solid #eee\",\n//                   textAlign: \"center\",\n//                 }}\n//               >\n//                 {date}\n//               </div>\n//             ))}\n//           </div>\n//           {filteredTasks.map((task) => (\n//             <Task\n//               key={task.id}\n//               task={task}\n//               dates={dates}\n//               onTaskMove={handleTaskMove}\n//             />\n//           ))}\n//           {/* Dependency arrows */}\n//           {filteredTasks.map((task) =>\n//             task.dependencies.map((depId) => {\n//               const depTask = tasks.find((t) => t.id === depId);\n//               if (!depTask) return null;\n//               return (\n//                 <Xarrow\n//                   key={`${task.id}-${depId}`}\n//                   start={`task-${depTask.id}`}\n//                   end={`task-${task.id}`}\n//                   color=\"black\"\n//                   strokeWidth={2}\n//                   headSize={4}\n//                 />\n//               );\n//             })\n//           )}\n//         </TimelineContainer>\n//       </Container>\n//     </DndProvider>\n//   );\n// }\n\n// export default TimelineInteractive;\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"dhtmlx-gantt/codebase/dhtmlxgantt.css\";\nimport gantt from \"dhtmlx-gantt\";\nimport { useProjects } from \"../../context/ProjectContext\";\n\nconst Timeline = () => {\n  const ganttContainer = useRef(null);\n  const { projects, addProject } = useProjects();\n  const [newProjectText, setNewProjectText] = useState(\"\");\n\n  useEffect(() => {\n    gantt.config.xml_date = \"%Y-%m-%d %H:%i\";\n    gantt.config.readonly = false;\n    gantt.config.drag_move = true;\n    gantt.config.drag_resize = true;\n    gantt.config.drag_links = true;\n    gantt.config.auto_scheduling = true;\n    gantt.config.show_errors = false;\n    gantt.config.highlight_critical_path = true;\n\n    gantt.init(ganttContainer.current);\n\n    gantt.clearAll();\n    gantt.parse({\n      data: projects,\n      links: [\n        { id: 1, source: 1, target: 2, type: \"0\" },\n        { id: 2, source: 2, target: 3, type: \"0\" },\n        { id: 3, source: 3, target: 4, type: \"0\" },\n        { id: 4, source: 4, target: 5, type: \"0\" },\n      ],\n    });\n  }, [projects]);\n\n  const handleCreateProject = () => {\n    if (!newProjectText.trim()) return;\n    const newProject = {\n      id: Date.now(),\n      text: newProjectText,\n      start_date: \"2025-12-10 00:00\",\n      duration: 10,\n      progress: 0,\n    };\n    addProject(newProject);\n    setNewProjectText(\"\");\n  };\n\n  const containerStyle = {\n    margin: \"30px auto\",\n    maxWidth: \"1200px\",\n    borderRadius: \"12px\",\n    boxShadow: \"0 4px 20px rgba(0,0,0,0.1)\",\n    overflow: \"hidden\",\n    backgroundColor: \"#fff\",\n    fontFamily: \"Segoe UI, sans-serif\",\n  };\n\n  const headerStyle = {\n    padding: \"20px\",\n    background: \"linear-gradient(to right, #4e54c8, #8f94fb)\",\n    color: \"#fff\",\n    fontSize: \"24px\",\n    fontWeight: \"600\",\n    textAlign: \"center\",\n    letterSpacing: \"0.5px\",\n  };\n\n  const ganttStyle = {\n    height: \"600px\",\n    width: \"100%\",\n  };\n\n  return (\n    <div style={containerStyle}>\n      <div style={headerStyle}>ðŸ“… Project Timeline</div>\n      <div style={{ padding: \"20px\", display: \"flex\", gap: \"10px\" }}>\n        <input\n          type=\"text\"\n          value={newProjectText}\n          onChange={(e) => setNewProjectText(e.target.value)}\n          placeholder=\"New project name\"\n          style={{ flex: 1, padding: \"8px\", fontSize: \"16px\" }}\n        />\n        <button onClick={handleCreateProject} style={{ padding: \"8px 16px\" }}>\n          Add Project\n        </button>\n      </div>\n      <div ref={ganttContainer} style={ganttStyle}></div>\n    </div>\n  );\n};\n\nexport default Timeline;\n\n\n"],"mappings":";;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAYA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,uCAAuC;AAC9C,OAAOC,KAAK,MAAM,cAAc;AAChC,SAASC,WAAW,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,cAAc,GAAGR,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM;IAAES,QAAQ;IAAEC;EAAW,CAAC,GAAGP,WAAW,CAAC,CAAC;EAC9C,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAExDF,SAAS,CAAC,MAAM;IACdG,KAAK,CAACW,MAAM,CAACC,QAAQ,GAAG,gBAAgB;IACxCZ,KAAK,CAACW,MAAM,CAACE,QAAQ,GAAG,KAAK;IAC7Bb,KAAK,CAACW,MAAM,CAACG,SAAS,GAAG,IAAI;IAC7Bd,KAAK,CAACW,MAAM,CAACI,WAAW,GAAG,IAAI;IAC/Bf,KAAK,CAACW,MAAM,CAACK,UAAU,GAAG,IAAI;IAC9BhB,KAAK,CAACW,MAAM,CAACM,eAAe,GAAG,IAAI;IACnCjB,KAAK,CAACW,MAAM,CAACO,WAAW,GAAG,KAAK;IAChClB,KAAK,CAACW,MAAM,CAACQ,uBAAuB,GAAG,IAAI;IAE3CnB,KAAK,CAACoB,IAAI,CAACd,cAAc,CAACe,OAAO,CAAC;IAElCrB,KAAK,CAACsB,QAAQ,CAAC,CAAC;IAChBtB,KAAK,CAACuB,KAAK,CAAC;MACVC,IAAI,EAAEjB,QAAQ;MACdkB,KAAK,EAAE,CACL;QAAEC,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAI,CAAC,EAC1C;QAAEH,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAI,CAAC,EAC1C;QAAEH,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAI,CAAC,EAC1C;QAAEH,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAI,CAAC;IAE9C,CAAC,CAAC;EACJ,CAAC,EAAE,CAACtB,QAAQ,CAAC,CAAC;EAEd,MAAMuB,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAI,CAACrB,cAAc,CAACsB,IAAI,CAAC,CAAC,EAAE;IAC5B,MAAMC,UAAU,GAAG;MACjBN,EAAE,EAAEO,IAAI,CAACC,GAAG,CAAC,CAAC;MACdC,IAAI,EAAE1B,cAAc;MACpB2B,UAAU,EAAE,kBAAkB;MAC9BC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ,CAAC;IACD9B,UAAU,CAACwB,UAAU,CAAC;IACtBtB,iBAAiB,CAAC,EAAE,CAAC;EACvB,CAAC;EAED,MAAM6B,cAAc,GAAG;IACrBC,MAAM,EAAE,WAAW;IACnBC,QAAQ,EAAE,QAAQ;IAClBC,YAAY,EAAE,MAAM;IACpBC,SAAS,EAAE,4BAA4B;IACvCC,QAAQ,EAAE,QAAQ;IAClBC,eAAe,EAAE,MAAM;IACvBC,UAAU,EAAE;EACd,CAAC;EAED,MAAMC,WAAW,GAAG;IAClBC,OAAO,EAAE,MAAM;IACfC,UAAU,EAAE,6CAA6C;IACzDC,KAAK,EAAE,MAAM;IACbC,QAAQ,EAAE,MAAM;IAChBC,UAAU,EAAE,KAAK;IACjBC,SAAS,EAAE,QAAQ;IACnBC,aAAa,EAAE;EACjB,CAAC;EAED,MAAMC,UAAU,GAAG;IACjBC,MAAM,EAAE,OAAO;IACfC,KAAK,EAAE;EACT,CAAC;EAED,oBACEtD,OAAA;IAAKuD,KAAK,EAAEnB,cAAe;IAAAoB,QAAA,gBACzBxD,OAAA;MAAKuD,KAAK,EAAEX,WAAY;MAAAY,QAAA,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClD5D,OAAA;MAAKuD,KAAK,EAAE;QAAEV,OAAO,EAAE,MAAM;QAAEgB,OAAO,EAAE,MAAM;QAAEC,GAAG,EAAE;MAAO,CAAE;MAAAN,QAAA,gBAC5DxD,OAAA;QACE0B,IAAI,EAAC,MAAM;QACXqC,KAAK,EAAEzD,cAAe;QACtB0D,QAAQ,EAAGC,CAAC,IAAK1D,iBAAiB,CAAC0D,CAAC,CAACxC,MAAM,CAACsC,KAAK,CAAE;QACnDG,WAAW,EAAC,kBAAkB;QAC9BX,KAAK,EAAE;UAAEY,IAAI,EAAE,CAAC;UAAEtB,OAAO,EAAE,KAAK;UAAEG,QAAQ,EAAE;QAAO;MAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC,eACF5D,OAAA;QAAQoE,OAAO,EAAEzC,mBAAoB;QAAC4B,KAAK,EAAE;UAAEV,OAAO,EAAE;QAAW,CAAE;QAAAW,QAAA,EAAC;MAEtE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACN5D,OAAA;MAAKqE,GAAG,EAAElE,cAAe;MAACoD,KAAK,EAAEH;IAAW;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV,CAAC;AAAC1D,EAAA,CArFID,QAAQ;EAAA,QAEqBH,WAAW;AAAA;AAAAwE,EAAA,GAFxCrE,QAAQ;AAuFd,eAAeA,QAAQ;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
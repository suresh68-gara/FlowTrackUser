{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vmoun\\\\OneDrive\\\\Desktop\\\\newtieckettool\\\\src\\\\components\\\\boards\\\\KanbanBoard.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// /*\n//   Enhancements:\n//   - Keyboard-only moves: when a card is focused, user can press ArrowLeft/ArrowRight to move between columns.\n//   - Buttons for accessibility to move left/right.\n//   - Export/Import CSV for issues in the top header.\n// */\n\n// const STATUSES = ['todo','inprogress','review','done'];\n\n// function issuesToCSV(issues) {\n//   const headers = ['id','projectId','title','status','priority','assignee','type','storyPoints','createdAt'];\n//   const rows = issues.map(i => headers.map(h => `\"${(i[h]||'').toString().replace(/\"/g,'\"\"')}\"`).join(','));\n//   return [headers.join(','), ...rows].join('\\n');\n// }\n\n// function csvToIssues(csv) {\n//   const lines = csv.split(/\\r?\\n/).filter(Boolean);\n//   if(lines.length < 2) return [];\n//   const headers = lines[0].split(',').map(h => h.replace(/(^\"|\"$)/g,''));\n//   const res = [];\n//   for(let i=1;i<lines.length;i++){\n//     const cols = lines[i].split(',').map(c => c.replace(/(^\"|\"$)/g,''));\n//     const obj = {};\n//     headers.forEach((h,idx)=> obj[h]=cols[idx]||'');\n//     res.push(obj);\n//   }\n//   return res;\n// }\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const refresh = async ()=> setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n//   const onDragStart = (e,id) => { e.dataTransfer.setData('text/plain', id); };\n\n//   const byStatus = s => issues.filter(i=>i.status===s);\n\n//   // keyboard move handler: ArrowLeft/ArrowRight move between columns\n//   const handleKey = async (e, issue) => {\n//     if(e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n//       e.preventDefault();\n//       const idx = STATUSES.indexOf(issue.status);\n//       let targetIdx = idx + (e.key === 'ArrowRight' ? 1 : -1);\n//       targetIdx = Math.max(0, Math.min(STATUSES.length-1, targetIdx));\n//       const target = STATUSES[targetIdx];\n//       if(target !== issue.status) {\n//         await moveIssue(issue.id, target);\n//         refresh();\n//       }\n//     }\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx-1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length-1, idx+1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n\n//   // Export CSV\n//   const exportCSV = () => {\n//     const csv = issuesToCSV(issues);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url; a.download = `issues_export_${projectId||'all'}.csv`; a.click();\n//     URL.revokeObjectURL(url);\n//   };\n\n//   // Import CSV\n//   const importCSV = (e) => {\n//     const file = e.target.files && e.target.files[0];\n//     if(!file) return;\n//     const reader = new FileReader();\n//     reader.onload = async (ev) => {\n//       try {\n//         const text = ev.target.result;\n//         const imported = csvToIssues(text);\n//         // Merge with existing issues: simple append with new IDs\n//         for(const row of imported){\n//           // only minimal fields handled; createIssue is not imported here to avoid API mismatch\n//           // createIssue would be used for full import; for demo we push to localStorage directly\n//           // but here we attempt to call moveIssue or update if id exists. fallback: ignore.\n//         }\n//         alert('Import parsed ' + imported.length + ' rows. For full import to central DB, use backend import.');\n//       } catch(err) {\n//         alert('CSV parse error: ' + err.message);\n//       }\n//     };\n//     reader.readAsText(file);\n//     // reset file input\n//     e.target.value = '';\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:12}}>\n//         <h2 style={{margin:0}}>Kanban Board {projectId?`- ${projectId}`:''}</h2>\n//         <div style={{display:'flex',gap:8,alignItems:'center'}}>\n//           <button className=\"btn-ghost\" onClick={exportCSV} aria-label=\"Export issues as CSV\">Export CSV</button>\n//           <label className=\"btn-ghost\" style={{cursor:'pointer'}}>\n//             Import CSV\n//             <input ref={fileRef} type=\"file\" accept=\".csv,text/csv\" onChange={importCSV} style={{display:'none'}} aria-hidden=\"true\"/>\n//           </label>\n//           <button className=\"btn\" onClick={()=>window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s=>(\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e=>e.preventDefault()} onDrop={e=>onDrop(e,s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i=>(\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e=>onDragStart(e,i.id)}\n//                 onKeyDown={(e)=>handleKey(e,i)}\n//                 aria-describedby={`desc-${i.id}`}>\n//                 <div style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{display:'flex',gap:6}}>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveLeft(i.id); }} aria-label={`Move ${i.title} left`}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveRight(i.id); }} aria-label={`Move ${i.title} right`}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div id={`desc-${i.id}`} className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { useProjects } from '../../context/ProjectContext';\n\n// const STATUSES = ['todo', 'inprogress', 'review', 'done'];\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const { projects } = useProjects();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const refresh = async () => setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n\n//   const onDragStart = (e, id) => {\n//     e.dataTransfer.setData('text/plain', id);\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx - 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length - 1, idx + 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const byStatus = (s) => issues.filter(i => i.status === s);\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n//         <h2 style={{ margin: 0 }}>Kanban Board {projectId ? `- ${projectId}` : ''}</h2>\n//         <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\n//           <button className=\"btn\" onClick={() => window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s => (\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e => e.preventDefault()} onDrop={e => onDrop(e, s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i => (\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e => onDragStart(e, i.id)}>\n//                 <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{ display: 'flex', gap: 6 }}>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveLeft(i.id); }}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveRight(i.id); }}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n\n//       <div style={{ marginTop: 20 }}>\n//         <h3>📋 Projects from Timeline</h3>\n//         <ul>\n//           {projects.map(p => (\n//             <li key={p.id}>\n//               <strong>{p.text}</strong> — Starts: {p.start_date}, Duration: {p.duration} days\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STATUSES = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\n\n// Mock issues with two epics swimlanes for demo\nconst mockIssues = [{\n  id: 'i1',\n  epic: 'p1',\n  epicName: 'Frontend',\n  status: 'todo',\n  type: 'Task',\n  title: 'Setup repo',\n  assignee: 'u2',\n  storyPoints: 3,\n  labels: [],\n  dueDate: ''\n}, {\n  id: 'i2',\n  epic: 'p1',\n  epicName: 'Frontend',\n  status: 'inprogress',\n  type: 'Bug',\n  title: 'Login bug',\n  assignee: 'u2',\n  storyPoints: 1,\n  labels: [],\n  dueDate: ''\n}, {\n  id: 'i3',\n  epic: 'p2',\n  epicName: 'Middleware',\n  status: 'todo',\n  type: 'Subtask',\n  title: 'API integration',\n  assignee: 'u4',\n  storyPoints: 2,\n  labels: [],\n  dueDate: ''\n}];\nconst simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\nconst listIssues = async projectId => {\n  await simulateApiDelay();\n  return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n};\nconst moveIssue = async (issueId, status) => {\n  await simulateApiDelay();\n  const issue = mockIssues.find(i => i.id === issueId);\n  if (!issue) throw new Error('Issue not found');\n  issue.status = status;\n};\nconst createIssueAPI = async issue => {\n  await simulateApiDelay();\n  mockIssues.push(issue);\n};\nconst getSwimlanes = issues => [...new Set(issues.map(i => i.epic || i.projectId))].map(id => {\n  var _epicIssues$find;\n  const epicIssues = issues.filter(i => (i.epic || i.projectId) === id);\n  const epicTitle = ((_epicIssues$find = epicIssues.find(i => i.epicName)) === null || _epicIssues$find === void 0 ? void 0 : _epicIssues$find.epicName) || id;\n  return {\n    id,\n    title: epicTitle,\n    issues: epicIssues\n  };\n});\nexport default function KanbanBoard() {\n  _s();\n  const {\n    projectId\n  } = useParams();\n  const [issues, setIssues] = useState([]);\n  const [openSwimlanes, setOpenSwimlanes] = useState({});\n  const [customTitles, setCustomTitles] = useState({});\n  const [createLaneId, setCreateLaneId] = useState(null);\n  const [newTaskText, setNewTaskText] = useState('');\n  const [newTaskType, setNewTaskType] = useState('Task');\n  useEffect(() => {\n    const fetchIssues = async () => {\n      try {\n        const data = await listIssues(projectId);\n        setIssues(data);\n        const lanes = getSwimlanes(data);\n        const initialOpen = {};\n        const initialTitles = {};\n        lanes.forEach(lane => {\n          initialOpen[lane.id] = true;\n          initialTitles[lane.id] = lane.title;\n        });\n        setOpenSwimlanes(initialOpen);\n        setCustomTitles(initialTitles);\n      } catch (err) {\n        console.error('Failed to load issues:', err);\n      }\n    };\n    fetchIssues();\n  }, [projectId]);\n  const toggleSwimlane = id => {\n    setOpenSwimlanes(prev => ({\n      ...prev,\n      [id]: !prev[id]\n    }));\n  };\n  const onTitleChange = (id, value) => {\n    setCustomTitles(prev => ({\n      ...prev,\n      [id]: value\n    }));\n  };\n  const byStatus = (collection, status) => collection.filter(i => i.status === status);\n  const onDragStart = (e, issueId) => {\n    e.dataTransfer.setData('text/plain', issueId);\n  };\n  const onDrop = async (e, targetStatus, swimlaneId) => {\n    e.preventDefault();\n    try {\n      const issueId = e.dataTransfer.getData('text/plain');\n      const issue = issues.find(i => i.id === issueId);\n      const srcLaneId = issue.epic || issue.projectId;\n      if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n        await moveIssue(issueId, targetStatus);\n        const refreshed = await listIssues(projectId);\n        setIssues(refreshed);\n      }\n    } catch (err) {\n      console.error('Error moving issue:', err);\n    }\n  };\n  const onDragOver = e => e.preventDefault();\n  const handleCreateClick = laneId => {\n    setCreateLaneId(laneId);\n    setNewTaskText('');\n    setNewTaskType('Task');\n  };\n  const handleCreateSubmit = async lane => {\n    if (!newTaskText.trim()) {\n      alert('Task title is required');\n      return;\n    }\n    const newIssue = {\n      id: Math.random().toString(36).slice(2),\n      epic: lane.id,\n      projectId: lane.id,\n      epicName: lane.title,\n      title: newTaskText,\n      status: 'backlog',\n      assignee: '',\n      type: newTaskType,\n      storyPoints: '',\n      labels: [],\n      dueDate: ''\n    };\n    try {\n      await createIssueAPI(newIssue);\n      const refreshed = await listIssues(projectId);\n      setIssues(refreshed);\n      setCreateLaneId(null);\n      setNewTaskText('');\n      setNewTaskType('Task');\n    } catch (err) {\n      console.error('Error creating issue:', err);\n    }\n  };\n  const handleCreateCancel = () => {\n    setCreateLaneId(null);\n    setNewTaskText('');\n    setNewTaskType('Task');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-wrap\",\n    children: [getSwimlanes(issues).map(lane => {\n      const isOpen = openSwimlanes[lane.id];\n      return /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"swimlane\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"swimlane-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"swimlane-toggle\",\n            \"aria-label\": isOpen ? `Collapse swimlane` : `Expand swimlane`,\n            \"aria-expanded\": isOpen,\n            onClick: () => toggleSwimlane(lane.id),\n            children: isOpen ? '▼' : '▶'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"swimlane-icon\",\n            \"aria-hidden\": \"true\",\n            style: {\n              marginRight: 6\n            },\n            children: \"\\u26A1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"swimlane-title-input\",\n            value: customTitles[lane.id] || '',\n            onChange: e => onTitleChange(lane.id, e.target.value),\n            \"aria-label\": `Edit epic title for swimlane ${lane.id}`,\n            spellCheck: \"false\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"swimlane-count\",\n            children: [lane.issues.length, \" work items\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 13\n        }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"kanban-row\",\n          id: `swimlane-content-${lane.id}`,\n          children: STATUSES.map(status => {\n            const issuesForStatus = byStatus(lane.issues, status);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"kanban-column\",\n              onDragOver: onDragOver,\n              onDrop: e => onDrop(e, status, lane.id),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: status.replace(/_/g, ' ').toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 25\n                }, this), issuesForStatus.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"col-count\",\n                  children: issuesForStatus.length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 452,\n                  columnNumber: 56\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-create\",\n                children: status === 'backlog' && (createLaneId === lane.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                    rows: 2,\n                    className: \"create-input\",\n                    placeholder: \"What needs to be done?\",\n                    value: newTaskText,\n                    onChange: e => setNewTaskText(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 458,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-actions\",\n                    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                      value: newTaskType,\n                      onChange: e => setNewTaskType(e.target.value),\n                      className: \"create-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Task\",\n                        children: \"Task\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 471,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Subtask\",\n                        children: \"Subtask\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 472,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"Bug\",\n                        children: \"Bug\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 473,\n                        columnNumber: 35\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 466,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"create-btn\",\n                      onClick: () => handleCreateSubmit(lane),\n                      children: \"\\u2714\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 475,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"create-btn\",\n                      onClick: handleCreateCancel,\n                      children: \"\\u2716\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 476,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 465,\n                    columnNumber: 31\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 457,\n                  columnNumber: 29\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  onClick: () => handleCreateClick(lane.id),\n                  style: {\n                    cursor: 'pointer'\n                  },\n                  children: \"+ Create\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 480,\n                  columnNumber: 29\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 23\n              }, this), issuesForStatus.map(issue => {\n                var _issue$labels;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-item\",\n                  tabIndex: 0,\n                  draggable: true,\n                  onDragStart: e => onDragStart(e, issue.id),\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"card-top\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"card-tag\",\n                      children: issue.type\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 493,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"card-id\",\n                      children: issue.id\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 494,\n                      columnNumber: 29\n                    }, this), (_issue$labels = issue.labels) === null || _issue$labels === void 0 ? void 0 : _issue$labels.map(l => /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"card-label\",\n                      children: l\n                    }, l, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 496,\n                      columnNumber: 31\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 492,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"card-title\",\n                    children: issue.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 499,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"card-details\",\n                    children: [issue.assignee && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"card-assignee\",\n                      children: issue.assignee\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 501,\n                      columnNumber: 48\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"card-storypoints\",\n                      children: [issue.storyPoints, \" pts\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 502,\n                      columnNumber: 29\n                    }, this), issue.dueDate && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"card-due\",\n                      children: issue.dueDate\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 503,\n                      columnNumber: 47\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 500,\n                    columnNumber: 27\n                  }, this)]\n                }, issue.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 25\n                }, this);\n              })]\n            }, status, true, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 15\n        }, this)]\n      }, lane.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        .board-wrap { padding: 0 12px; }\n        .swimlane { margin-bottom: 16px; }\n        .swimlane-header {\n          display: flex; align-items: center; gap: 8px; font-size: 1.2em;\n          font-weight: 500; border-bottom: 1px solid #ececec; padding: 8px 0;\n        }\n        .swimlane-toggle {\n          cursor: pointer;\n          background: transparent;\n          border: none;\n          font-size: 1.2em;\n          line-height: 1;\n          padding: 0 6px 0 0;\n        }\n        .swimlane-icon { color: #b39ddb; }\n        .swimlane-title-input {\n          font-size: 1.2em;\n          font-weight: 600;\n          border: none;\n          background: transparent;\n          max-width: 300px;\n          outline: none;\n        }\n        .swimlane-count {\n          color: #888;\n          margin-left: auto;\n        }\n        .kanban-row {\n          display: flex;\n          gap: 8px;\n          min-height: 100px;\n        }\n        .kanban-column {\n          background: #fafafe;\n          flex: 1;\n          min-width: 150px;\n          padding: 10px;\n          border-radius: 6px;\n          height: 260px;\n          box-shadow: 0 1px 3px #efefef;\n        }\n        .col-header {\n          font-weight: 500;\n          color: #555;\n          margin-bottom: 10px;\n          display: flex;\n          align-items: center;\n          gap: 8px;\n        }\n        .col-count {\n          background: #e0e0e0;\n          border-radius: 6px;\n          padding: 1px 7px;\n          font-size: 0.9em;\n          color: #555;\n        }\n        .col-create {\n          color: #499ef8;\n          font-weight: bold;\n          margin-bottom: 10px;\n        }\n        .create-card {\n          box-sizing: border-box;\n          background: #fff;\n          border: 2px solid #57aaff;\n          border-radius: 6px;\n          padding: 12px;\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n        }\n        .create-input {\n          border: none;\n          outline: none;\n          resize: none;\n          font-size: 1rem;\n          width: 100%;\n        }\n        .create-actions {\n          display: flex;\n          align-items: center;\n          gap: 12px;\n        }\n        .create-select {\n          display: inline-block;\n          font-size: 1rem;\n          border-radius: 4px;\n          border: 1px solid #bbb;\n        }\n        .create-btn {\n          background: #57aaff;\n          color: #fff;\n          border: none;\n          border-radius: 4px;\n          font-size: 1.2em;\n          padding: 5px 12px;\n          cursor: pointer;\n        }\n        .create-btn:hover {\n          background: #3183c2;\n        }\n        .card-item {\n          background: #fff;\n          border-radius: 6px;\n          margin-bottom: 8px;\n          padding: 10px 12px;\n          box-shadow: 0 1px 4px #e3e3e3;\n          border-left: 5px solid #b39ddb;\n        }\n        .card-top {\n          display: flex;\n          gap: 8px;\n          align-items: center;\n        }\n        .card-tag {\n          background: #e5d8fb;\n          color: #9371db;\n          padding: 2px 6px;\n          border-radius: 6px;\n          font-size: 0.8em;\n        }\n        .card-id {\n          margin-left: 6px;\n          color: #888;\n          font-size: 0.9em;\n        }\n        .card-label {\n          background: #f8d7da;\n          color: #b71c1c;\n          margin-left: 4px;\n          padding: 1px 6px;\n          border-radius: 6px;\n          font-size: 0.8em;\n        }\n        .card-title {\n          font-weight: 600;\n          margin: 8px 0;\n        }\n        .card-details {\n          display: flex;\n          gap: 8px;\n          font-size: 0.85em;\n          color: #555;\n        }\n        .card-assignee {\n          background: #e3f2fd;\n          color: #1565c0;\n          padding: 1px 7px;\n          border-radius: 6px;\n        }\n        .card-storypoints {\n          background: #ffe0b2;\n          color: #f57c00;\n          border-radius: 6px;\n          padding: 1px 7px;\n        }\n        .card-due {\n          background: #fce4ec;\n          color: #d81b60;\n          border-radius: 6px;\n          padding: 1px 7px;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 5\n  }, this);\n}\n_s(KanbanBoard, \"LnmiX0VpbU2EOBx4B8L+INHu1m8=\", false, function () {\n  return [useParams];\n});\n_c = KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","STATUSES","mockIssues","id","epic","epicName","status","type","title","assignee","storyPoints","labels","dueDate","simulateApiDelay","Promise","resolve","setTimeout","listIssues","projectId","filter","i","moveIssue","issueId","issue","find","Error","createIssueAPI","push","getSwimlanes","issues","Set","map","_epicIssues$find","epicIssues","epicTitle","KanbanBoard","_s","setIssues","openSwimlanes","setOpenSwimlanes","customTitles","setCustomTitles","createLaneId","setCreateLaneId","newTaskText","setNewTaskText","newTaskType","setNewTaskType","fetchIssues","data","lanes","initialOpen","initialTitles","forEach","lane","err","console","error","toggleSwimlane","prev","onTitleChange","value","byStatus","collection","onDragStart","e","dataTransfer","setData","onDrop","targetStatus","swimlaneId","preventDefault","getData","srcLaneId","refreshed","onDragOver","handleCreateClick","laneId","handleCreateSubmit","trim","alert","newIssue","Math","random","toString","slice","handleCreateCancel","className","children","isOpen","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","marginRight","onChange","target","spellCheck","length","issuesForStatus","replace","toUpperCase","rows","placeholder","cursor","_issue$labels","tabIndex","draggable","l","_c","$RefreshReg$"],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/components/boards/KanbanBoard.js"],"sourcesContent":["\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// /*\n//   Enhancements:\n//   - Keyboard-only moves: when a card is focused, user can press ArrowLeft/ArrowRight to move between columns.\n//   - Buttons for accessibility to move left/right.\n//   - Export/Import CSV for issues in the top header.\n// */\n\n// const STATUSES = ['todo','inprogress','review','done'];\n\n// function issuesToCSV(issues) {\n//   const headers = ['id','projectId','title','status','priority','assignee','type','storyPoints','createdAt'];\n//   const rows = issues.map(i => headers.map(h => `\"${(i[h]||'').toString().replace(/\"/g,'\"\"')}\"`).join(','));\n//   return [headers.join(','), ...rows].join('\\n');\n// }\n\n// function csvToIssues(csv) {\n//   const lines = csv.split(/\\r?\\n/).filter(Boolean);\n//   if(lines.length < 2) return [];\n//   const headers = lines[0].split(',').map(h => h.replace(/(^\"|\"$)/g,''));\n//   const res = [];\n//   for(let i=1;i<lines.length;i++){\n//     const cols = lines[i].split(',').map(c => c.replace(/(^\"|\"$)/g,''));\n//     const obj = {};\n//     headers.forEach((h,idx)=> obj[h]=cols[idx]||'');\n//     res.push(obj);\n//   }\n//   return res;\n// }\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const refresh = async ()=> setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n//   const onDragStart = (e,id) => { e.dataTransfer.setData('text/plain', id); };\n\n//   const byStatus = s => issues.filter(i=>i.status===s);\n\n//   // keyboard move handler: ArrowLeft/ArrowRight move between columns\n//   const handleKey = async (e, issue) => {\n//     if(e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n//       e.preventDefault();\n//       const idx = STATUSES.indexOf(issue.status);\n//       let targetIdx = idx + (e.key === 'ArrowRight' ? 1 : -1);\n//       targetIdx = Math.max(0, Math.min(STATUSES.length-1, targetIdx));\n//       const target = STATUSES[targetIdx];\n//       if(target !== issue.status) {\n//         await moveIssue(issue.id, target);\n//         refresh();\n//       }\n//     }\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx-1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length-1, idx+1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n\n//   // Export CSV\n//   const exportCSV = () => {\n//     const csv = issuesToCSV(issues);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url; a.download = `issues_export_${projectId||'all'}.csv`; a.click();\n//     URL.revokeObjectURL(url);\n//   };\n\n//   // Import CSV\n//   const importCSV = (e) => {\n//     const file = e.target.files && e.target.files[0];\n//     if(!file) return;\n//     const reader = new FileReader();\n//     reader.onload = async (ev) => {\n//       try {\n//         const text = ev.target.result;\n//         const imported = csvToIssues(text);\n//         // Merge with existing issues: simple append with new IDs\n//         for(const row of imported){\n//           // only minimal fields handled; createIssue is not imported here to avoid API mismatch\n//           // createIssue would be used for full import; for demo we push to localStorage directly\n//           // but here we attempt to call moveIssue or update if id exists. fallback: ignore.\n//         }\n//         alert('Import parsed ' + imported.length + ' rows. For full import to central DB, use backend import.');\n//       } catch(err) {\n//         alert('CSV parse error: ' + err.message);\n//       }\n//     };\n//     reader.readAsText(file);\n//     // reset file input\n//     e.target.value = '';\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:12}}>\n//         <h2 style={{margin:0}}>Kanban Board {projectId?`- ${projectId}`:''}</h2>\n//         <div style={{display:'flex',gap:8,alignItems:'center'}}>\n//           <button className=\"btn-ghost\" onClick={exportCSV} aria-label=\"Export issues as CSV\">Export CSV</button>\n//           <label className=\"btn-ghost\" style={{cursor:'pointer'}}>\n//             Import CSV\n//             <input ref={fileRef} type=\"file\" accept=\".csv,text/csv\" onChange={importCSV} style={{display:'none'}} aria-hidden=\"true\"/>\n//           </label>\n//           <button className=\"btn\" onClick={()=>window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s=>(\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e=>e.preventDefault()} onDrop={e=>onDrop(e,s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i=>(\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e=>onDragStart(e,i.id)}\n//                 onKeyDown={(e)=>handleKey(e,i)}\n//                 aria-describedby={`desc-${i.id}`}>\n//                 <div style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{display:'flex',gap:6}}>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveLeft(i.id); }} aria-label={`Move ${i.title} left`}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveRight(i.id); }} aria-label={`Move ${i.title} right`}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div id={`desc-${i.id}`} className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { useProjects } from '../../context/ProjectContext';\n\n// const STATUSES = ['todo', 'inprogress', 'review', 'done'];\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const { projects } = useProjects();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const refresh = async () => setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n\n//   const onDragStart = (e, id) => {\n//     e.dataTransfer.setData('text/plain', id);\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx - 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length - 1, idx + 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const byStatus = (s) => issues.filter(i => i.status === s);\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n//         <h2 style={{ margin: 0 }}>Kanban Board {projectId ? `- ${projectId}` : ''}</h2>\n//         <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\n//           <button className=\"btn\" onClick={() => window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s => (\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e => e.preventDefault()} onDrop={e => onDrop(e, s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i => (\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e => onDragStart(e, i.id)}>\n//                 <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{ display: 'flex', gap: 6 }}>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveLeft(i.id); }}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveRight(i.id); }}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n\n//       <div style={{ marginTop: 20 }}>\n//         <h3>📋 Projects from Timeline</h3>\n//         <ul>\n//           {projects.map(p => (\n//             <li key={p.id}>\n//               <strong>{p.text}</strong> — Starts: {p.start_date}, Duration: {p.duration} days\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n \nconst STATUSES = [\n  'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n];\n \n// Mock issues with two epics swimlanes for demo\nconst mockIssues = [\n  { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '' },\n  { id: 'i2', epic: 'p1', epicName: 'Frontend', status: 'inprogress', type: 'Bug', title: 'Login bug', assignee: 'u2', storyPoints: 1, labels: [], dueDate: '' },\n  { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '' }\n];\n \nconst simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n \nconst listIssues = async (projectId) => {\n  await simulateApiDelay();\n  return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n};\n \nconst moveIssue = async (issueId, status) => {\n  await simulateApiDelay();\n  const issue = mockIssues.find(i => i.id === issueId);\n  if (!issue) throw new Error('Issue not found');\n  issue.status = status;\n};\n \nconst createIssueAPI = async (issue) => {\n  await simulateApiDelay();\n  mockIssues.push(issue);\n};\n \nconst getSwimlanes = issues =>\n  [...new Set(issues.map(i => i.epic || i.projectId))].map(id => {\n    const epicIssues = issues.filter(i => (i.epic || i.projectId) === id);\n    const epicTitle = epicIssues.find(i => i.epicName)?.epicName || id;\n    return {\n      id,\n      title: epicTitle,\n      issues: epicIssues\n    };\n  });\n \nexport default function KanbanBoard() {\n  const { projectId } = useParams();\n  const [issues, setIssues] = useState([]);\n  const [openSwimlanes, setOpenSwimlanes] = useState({});\n  const [customTitles, setCustomTitles] = useState({});\n  const [createLaneId, setCreateLaneId] = useState(null);\n  const [newTaskText, setNewTaskText] = useState('');\n  const [newTaskType, setNewTaskType] = useState('Task');\n \n  useEffect(() => {\n    const fetchIssues = async () => {\n      try {\n        const data = await listIssues(projectId);\n        setIssues(data);\n        const lanes = getSwimlanes(data);\n        const initialOpen = {};\n        const initialTitles = {};\n        lanes.forEach(lane => {\n          initialOpen[lane.id] = true;\n          initialTitles[lane.id] = lane.title;\n        });\n        setOpenSwimlanes(initialOpen);\n        setCustomTitles(initialTitles);\n      } catch (err) {\n        console.error('Failed to load issues:', err);\n      }\n    };\n    fetchIssues();\n  }, [projectId]);\n \n  const toggleSwimlane = (id) => {\n    setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n  };\n \n  const onTitleChange = (id, value) => {\n    setCustomTitles(prev => ({ ...prev, [id]: value }));\n  };\n \n  const byStatus = (collection, status) => collection.filter(i => i.status === status);\n \n  const onDragStart = (e, issueId) => {\n    e.dataTransfer.setData('text/plain', issueId);\n  };\n \n  const onDrop = async (e, targetStatus, swimlaneId) => {\n    e.preventDefault();\n    try {\n      const issueId = e.dataTransfer.getData('text/plain');\n      const issue = issues.find(i => i.id === issueId);\n      const srcLaneId = issue.epic || issue.projectId;\n      if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n        await moveIssue(issueId, targetStatus);\n        const refreshed = await listIssues(projectId);\n        setIssues(refreshed);\n      }\n    } catch (err) {\n      console.error('Error moving issue:', err);\n    }\n  };\n \n  const onDragOver = e => e.preventDefault();\n \n  const handleCreateClick = laneId => {\n    setCreateLaneId(laneId);\n    setNewTaskText('');\n    setNewTaskType('Task');\n  };\n \n  const handleCreateSubmit = async lane => {\n    if (!newTaskText.trim()) {\n      alert('Task title is required');\n      return;\n    }\n    const newIssue = {\n      id: Math.random().toString(36).slice(2),\n      epic: lane.id,\n      projectId: lane.id,\n      epicName: lane.title,\n      title: newTaskText,\n      status: 'backlog',\n      assignee: '',\n      type: newTaskType,\n      storyPoints: '',\n      labels: [],\n      dueDate: ''\n    };\n    try {\n      await createIssueAPI(newIssue);\n      const refreshed = await listIssues(projectId);\n      setIssues(refreshed);\n      setCreateLaneId(null);\n      setNewTaskText('');\n      setNewTaskType('Task');\n    } catch (err) {\n      console.error('Error creating issue:', err);\n    }\n  };\n \n  const handleCreateCancel = () => {\n    setCreateLaneId(null);\n    setNewTaskText('');\n    setNewTaskType('Task');\n  };\n \n  return (\n    <div className=\"board-wrap\">\n      {getSwimlanes(issues).map(lane => {\n        const isOpen = openSwimlanes[lane.id];\n        return (\n          <section className=\"swimlane\" key={lane.id}>\n            <header className=\"swimlane-header\">\n              <button\n                className=\"swimlane-toggle\"\n                aria-label={isOpen ? `Collapse swimlane` : `Expand swimlane`}\n                aria-expanded={isOpen}\n                onClick={() => toggleSwimlane(lane.id)}\n              >\n                {isOpen ? '▼' : '▶'}\n              </button>\n              <span className=\"swimlane-icon\" aria-hidden=\"true\" style={{ marginRight: 6 }}>⚡</span>\n              <input\n                className=\"swimlane-title-input\"\n                value={customTitles[lane.id] || ''}\n                onChange={e => onTitleChange(lane.id, e.target.value)}\n                aria-label={`Edit epic title for swimlane ${lane.id}`}\n                spellCheck=\"false\"\n              />\n              <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n            </header>\n            {isOpen && (\n              <div className=\"kanban-row\" id={`swimlane-content-${lane.id}`}>\n                {STATUSES.map(status => {\n                  const issuesForStatus = byStatus(lane.issues, status);\n                  return (\n                    <div\n                      className=\"kanban-column\"\n                      key={status}\n                      onDragOver={onDragOver}\n                      onDrop={e => onDrop(e, status, lane.id)}\n                    >\n                      <div className=\"col-header\">\n                        <span>{status.replace(/_/g, ' ').toUpperCase()}</span>\n                        {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n                      </div>\n                      <div className=\"col-create\">\n                        {status === 'backlog' && (\n                          createLaneId === lane.id ? (\n                            <div className=\"create-card\">\n                              <textarea\n                                rows={2}\n                                className=\"create-input\"\n                                placeholder=\"What needs to be done?\"\n                                value={newTaskText}\n                                onChange={e => setNewTaskText(e.target.value)}\n                              />\n                              <div className=\"create-actions\">\n                                <select\n                                  value={newTaskType}\n                                  onChange={e => setNewTaskType(e.target.value)}\n                                  className=\"create-select\"\n                                >\n                                  <option value=\"Task\">Task</option>\n                                  <option value=\"Subtask\">Subtask</option>\n                                  <option value=\"Bug\">Bug</option>\n                                </select>\n                                <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n                                <button className=\"create-btn\" onClick={handleCreateCancel}>✖</button>\n                              </div>\n                            </div>\n                          ) : (\n                            <span onClick={() => handleCreateClick(lane.id)} style={{ cursor: 'pointer' }}>+ Create</span>\n                          )\n                        )}\n                      </div>\n                      {issuesForStatus.map(issue => (\n                        <div\n                          className=\"card-item\"\n                          tabIndex={0}\n                          key={issue.id}\n                          draggable\n                          onDragStart={e => onDragStart(e, issue.id)}\n                        >\n                          <div className=\"card-top\">\n                            <span className=\"card-tag\">{issue.type}</span>\n                            <span className=\"card-id\">{issue.id}</span>\n                            {issue.labels?.map(l => (\n                              <span key={l} className=\"card-label\">{l}</span>\n                            ))}\n                          </div>\n                          <div className=\"card-title\">{issue.title}</div>\n                          <div className=\"card-details\">\n                            {issue.assignee && <span className=\"card-assignee\">{issue.assignee}</span>}\n                            <span className=\"card-storypoints\">{issue.storyPoints} pts</span>\n                            {issue.dueDate && <span className=\"card-due\">{issue.dueDate}</span>}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </section>\n        );\n      })}\n      <style>{`\n        .board-wrap { padding: 0 12px; }\n        .swimlane { margin-bottom: 16px; }\n        .swimlane-header {\n          display: flex; align-items: center; gap: 8px; font-size: 1.2em;\n          font-weight: 500; border-bottom: 1px solid #ececec; padding: 8px 0;\n        }\n        .swimlane-toggle {\n          cursor: pointer;\n          background: transparent;\n          border: none;\n          font-size: 1.2em;\n          line-height: 1;\n          padding: 0 6px 0 0;\n        }\n        .swimlane-icon { color: #b39ddb; }\n        .swimlane-title-input {\n          font-size: 1.2em;\n          font-weight: 600;\n          border: none;\n          background: transparent;\n          max-width: 300px;\n          outline: none;\n        }\n        .swimlane-count {\n          color: #888;\n          margin-left: auto;\n        }\n        .kanban-row {\n          display: flex;\n          gap: 8px;\n          min-height: 100px;\n        }\n        .kanban-column {\n          background: #fafafe;\n          flex: 1;\n          min-width: 150px;\n          padding: 10px;\n          border-radius: 6px;\n          height: 260px;\n          box-shadow: 0 1px 3px #efefef;\n        }\n        .col-header {\n          font-weight: 500;\n          color: #555;\n          margin-bottom: 10px;\n          display: flex;\n          align-items: center;\n          gap: 8px;\n        }\n        .col-count {\n          background: #e0e0e0;\n          border-radius: 6px;\n          padding: 1px 7px;\n          font-size: 0.9em;\n          color: #555;\n        }\n        .col-create {\n          color: #499ef8;\n          font-weight: bold;\n          margin-bottom: 10px;\n        }\n        .create-card {\n          box-sizing: border-box;\n          background: #fff;\n          border: 2px solid #57aaff;\n          border-radius: 6px;\n          padding: 12px;\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n        }\n        .create-input {\n          border: none;\n          outline: none;\n          resize: none;\n          font-size: 1rem;\n          width: 100%;\n        }\n        .create-actions {\n          display: flex;\n          align-items: center;\n          gap: 12px;\n        }\n        .create-select {\n          display: inline-block;\n          font-size: 1rem;\n          border-radius: 4px;\n          border: 1px solid #bbb;\n        }\n        .create-btn {\n          background: #57aaff;\n          color: #fff;\n          border: none;\n          border-radius: 4px;\n          font-size: 1.2em;\n          padding: 5px 12px;\n          cursor: pointer;\n        }\n        .create-btn:hover {\n          background: #3183c2;\n        }\n        .card-item {\n          background: #fff;\n          border-radius: 6px;\n          margin-bottom: 8px;\n          padding: 10px 12px;\n          box-shadow: 0 1px 4px #e3e3e3;\n          border-left: 5px solid #b39ddb;\n        }\n        .card-top {\n          display: flex;\n          gap: 8px;\n          align-items: center;\n        }\n        .card-tag {\n          background: #e5d8fb;\n          color: #9371db;\n          padding: 2px 6px;\n          border-radius: 6px;\n          font-size: 0.8em;\n        }\n        .card-id {\n          margin-left: 6px;\n          color: #888;\n          font-size: 0.9em;\n        }\n        .card-label {\n          background: #f8d7da;\n          color: #b71c1c;\n          margin-left: 4px;\n          padding: 1px 6px;\n          border-radius: 6px;\n          font-size: 0.8em;\n        }\n        .card-title {\n          font-weight: 600;\n          margin: 8px 0;\n        }\n        .card-details {\n          display: flex;\n          gap: 8px;\n          font-size: 0.85em;\n          color: #555;\n        }\n        .card-assignee {\n          background: #e3f2fd;\n          color: #1565c0;\n          padding: 1px 7px;\n          border-radius: 6px;\n        }\n        .card-storypoints {\n          background: #ffe0b2;\n          color: #f57c00;\n          border-radius: 6px;\n          padding: 1px 7px;\n        }\n        .card-due {\n          background: #fce4ec;\n          color: #d81b60;\n          border-radius: 6px;\n          padding: 1px 7px;\n        }\n      `}</style>\n    </div>\n  );\n}\n \n "],"mappings":";;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAcA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
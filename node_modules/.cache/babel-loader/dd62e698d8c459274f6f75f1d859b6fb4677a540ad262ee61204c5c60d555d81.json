{"ast":null,"code":"\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// /*\n//   Enhancements:\n//   - Keyboard-only moves: when a card is focused, user can press ArrowLeft/ArrowRight to move between columns.\n//   - Buttons for accessibility to move left/right.\n//   - Export/Import CSV for issues in the top header.\n// */\n\n// const STATUSES = ['todo','inprogress','review','done'];\n\n// function issuesToCSV(issues) {\n//   const headers = ['id','projectId','title','status','priority','assignee','type','storyPoints','createdAt'];\n//   const rows = issues.map(i => headers.map(h => `\"${(i[h]||'').toString().replace(/\"/g,'\"\"')}\"`).join(','));\n//   return [headers.join(','), ...rows].join('\\n');\n// }\n\n// function csvToIssues(csv) {\n//   const lines = csv.split(/\\r?\\n/).filter(Boolean);\n//   if(lines.length < 2) return [];\n//   const headers = lines[0].split(',').map(h => h.replace(/(^\"|\"$)/g,''));\n//   const res = [];\n//   for(let i=1;i<lines.length;i++){\n//     const cols = lines[i].split(',').map(c => c.replace(/(^\"|\"$)/g,''));\n//     const obj = {};\n//     headers.forEach((h,idx)=> obj[h]=cols[idx]||'');\n//     res.push(obj);\n//   }\n//   return res;\n// }\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const refresh = async ()=> setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n//   const onDragStart = (e,id) => { e.dataTransfer.setData('text/plain', id); };\n\n//   const byStatus = s => issues.filter(i=>i.status===s);\n\n//   // keyboard move handler: ArrowLeft/ArrowRight move between columns\n//   const handleKey = async (e, issue) => {\n//     if(e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n//       e.preventDefault();\n//       const idx = STATUSES.indexOf(issue.status);\n//       let targetIdx = idx + (e.key === 'ArrowRight' ? 1 : -1);\n//       targetIdx = Math.max(0, Math.min(STATUSES.length-1, targetIdx));\n//       const target = STATUSES[targetIdx];\n//       if(target !== issue.status) {\n//         await moveIssue(issue.id, target);\n//         refresh();\n//       }\n//     }\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx-1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length-1, idx+1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n\n//   // Export CSV\n//   const exportCSV = () => {\n//     const csv = issuesToCSV(issues);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url; a.download = `issues_export_${projectId||'all'}.csv`; a.click();\n//     URL.revokeObjectURL(url);\n//   };\n\n//   // Import CSV\n//   const importCSV = (e) => {\n//     const file = e.target.files && e.target.files[0];\n//     if(!file) return;\n//     const reader = new FileReader();\n//     reader.onload = async (ev) => {\n//       try {\n//         const text = ev.target.result;\n//         const imported = csvToIssues(text);\n//         // Merge with existing issues: simple append with new IDs\n//         for(const row of imported){\n//           // only minimal fields handled; createIssue is not imported here to avoid API mismatch\n//           // createIssue would be used for full import; for demo we push to localStorage directly\n//           // but here we attempt to call moveIssue or update if id exists. fallback: ignore.\n//         }\n//         alert('Import parsed ' + imported.length + ' rows. For full import to central DB, use backend import.');\n//       } catch(err) {\n//         alert('CSV parse error: ' + err.message);\n//       }\n//     };\n//     reader.readAsText(file);\n//     // reset file input\n//     e.target.value = '';\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:12}}>\n//         <h2 style={{margin:0}}>Kanban Board {projectId?`- ${projectId}`:''}</h2>\n//         <div style={{display:'flex',gap:8,alignItems:'center'}}>\n//           <button className=\"btn-ghost\" onClick={exportCSV} aria-label=\"Export issues as CSV\">Export CSV</button>\n//           <label className=\"btn-ghost\" style={{cursor:'pointer'}}>\n//             Import CSV\n//             <input ref={fileRef} type=\"file\" accept=\".csv,text/csv\" onChange={importCSV} style={{display:'none'}} aria-hidden=\"true\"/>\n//           </label>\n//           <button className=\"btn\" onClick={()=>window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s=>(\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e=>e.preventDefault()} onDrop={e=>onDrop(e,s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i=>(\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e=>onDragStart(e,i.id)}\n//                 onKeyDown={(e)=>handleKey(e,i)}\n//                 aria-describedby={`desc-${i.id}`}>\n//                 <div style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{display:'flex',gap:6}}>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveLeft(i.id); }} aria-label={`Move ${i.title} left`}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveRight(i.id); }} aria-label={`Move ${i.title} right`}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div id={`desc-${i.id}`} className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { useProjects } from '../../context/ProjectContext';\n\n// const STATUSES = ['todo', 'inprogress', 'review', 'done'];\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const { projects } = useProjects();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const refresh = async () => setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n\n//   const onDragStart = (e, id) => {\n//     e.dataTransfer.setData('text/plain', id);\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx - 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length - 1, idx + 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const byStatus = (s) => issues.filter(i => i.status === s);\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n//         <h2 style={{ margin: 0 }}>Kanban Board {projectId ? `- ${projectId}` : ''}</h2>\n//         <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\n//           <button className=\"btn\" onClick={() => window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s => (\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e => e.preventDefault()} onDrop={e => onDrop(e, s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i => (\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e => onDragStart(e, i.id)}>\n//                 <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{ display: 'flex', gap: 6 }}>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveLeft(i.id); }}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveRight(i.id); }}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n\n//       <div style={{ marginTop: 20 }}>\n//         <h3>📋 Projects from Timeline</h3>\n//         <ul>\n//           {projects.map(p => (\n//             <li key={p.id}>\n//               <strong>{p.text}</strong> — Starts: {p.start_date}, Duration: {p.duration} days\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const STATUSES = [\n//   'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n// ];\n\n// // Mock issues with two epics swimlanes for demo\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '' },\n//   { id: 'i2', epic: 'p1', epicName: 'Frontend', status: 'inprogress', type: 'Bug', title: 'Login bug', assignee: 'u2', storyPoints: 1, labels: [], dueDate: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n\n// const createIssueAPI = async (issue) => {\n//   await simulateApiDelay();\n//   mockIssues.push(issue);\n// };\n\n// const getSwimlanes = issues =>\n//   [...new Set(issues.map(i => i.epic || i.projectId))].map(id => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === id);\n//     const epicTitle = epicIssues.find(i => i.epicName)?.epicName || id;\n//     return {\n//       id,\n//       title: epicTitle,\n//       issues: epicIssues\n//     };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n\n//   useEffect(() => {\n//     const fetchIssues = async () => {\n//       try {\n//         const data = await listIssues(projectId);\n//         setIssues(data);\n//         const lanes = getSwimlanes(data);\n//         const initialOpen = {};\n//         const initialTitles = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//       } catch (err) {\n//         console.error('Failed to load issues:', err);\n//       }\n//     };\n//     fetchIssues();\n//   }, [projectId]);\n\n//   const toggleSwimlane = (id) => {\n//     setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   };\n\n//   const onTitleChange = (id, value) => {\n//     setCustomTitles(prev => ({ ...prev, [id]: value }));\n//   };\n\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => {\n//     e.dataTransfer.setData('text/plain', issueId);\n//   };\n\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) {\n//       console.error('Error moving issue:', err);\n//     }\n//   };\n\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => {\n//     setCreateLaneId(laneId);\n//     setNewTaskText('');\n//     setNewTaskType('Task');\n//   };\n\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) {\n//       alert('Task title is required');\n//       return;\n//     }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//       setNewTaskText('');\n//       setNewTaskType('Task');\n//     } catch (err) {\n//       console.error('Error creating issue:', err);\n//     }\n//   };\n\n//   const handleCreateCancel = () => {\n//     setCreateLaneId(null);\n//     setNewTaskText('');\n//     setNewTaskType('Task');\n//   };\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {getSwimlanes(issues).map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button\n//                 className=\"swimlane-toggle\"\n//                 aria-label={isOpen ? `Collapse swimlane` : `Expand swimlane`}\n//                 aria-expanded={isOpen}\n//                 onClick={() => toggleSwimlane(lane.id)}\n//               >\n//                 {isOpen ? '▼' : '▶'}\n//               </button>\n//               <span className=\"swimlane-icon\" aria-hidden=\"true\" style={{ marginRight: 6 }}>⚡</span>\n//               <input\n//                 className=\"swimlane-title-input\"\n//                 value={customTitles[lane.id] || ''}\n//                 onChange={e => onTitleChange(lane.id, e.target.value)}\n//                 aria-label={`Edit epic title for swimlane ${lane.id}`}\n//                 spellCheck=\"false\"\n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\" id={`swimlane-content-${lane.id}`}>\n//                 {STATUSES.map(status => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div\n//                       className=\"kanban-column\"\n//                       key={status}\n//                       onDragOver={onDragOver}\n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span>{status.replace(/_/g, ' ').toUpperCase()}</span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea\n//                                 rows={2}\n//                                 className=\"create-input\"\n//                                 placeholder=\"What needs to be done?\"\n//                                 value={newTaskText}\n//                                 onChange={e => setNewTaskText(e.target.value)}\n//                               />\n//                               <div className=\"create-actions\">\n//                                 <select\n//                                   value={newTaskType}\n//                                   onChange={e => setNewTaskType(e.target.value)}\n//                                   className=\"create-select\"\n//                                 >\n//                                   <option value=\"Task\">Task</option>\n//                                   <option value=\"Subtask\">Subtask</option>\n//                                   <option value=\"Bug\">Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={handleCreateCancel}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (\n//                             <span onClick={() => handleCreateClick(lane.id)} style={{ cursor: 'pointer' }}>+ Create</span>\n//                           )\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => (\n//                         <div\n//                           className=\"card-item\"\n//                           tabIndex={0}\n//                           key={issue.id}\n//                           draggable\n//                           onDragStart={e => onDragStart(e, issue.id)}\n//                         >\n//                           <div className=\"card-top\">\n//                             <span className=\"card-tag\">{issue.type}</span>\n//                             <span className=\"card-id\">{issue.id}</span>\n//                             {issue.labels?.map(l => (\n//                               <span key={l} className=\"card-label\">{l}</span>\n//                             ))}\n//                           </div>\n//                           <div className=\"card-title\">{issue.title}</div>\n//                           <div className=\"card-details\">\n//                             {issue.assignee && <span className=\"card-assignee\">{issue.assignee}</span>}\n//                             <span className=\"card-storypoints\">{issue.storyPoints} pts</span>\n//                             {issue.dueDate && <span className=\"card-due\">{issue.dueDate}</span>}\n//                           </div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n//       <style>{`\n//         .board-wrap { padding: 0 12px; }\n//         .swimlane { margin-bottom: 16px; }\n//         .swimlane-header {\n//           display: flex; align-items: center; gap: 8px; font-size: 1.2em;\n//           font-weight: 500; border-bottom: 1px solid #ececec; padding: 8px 0;\n//         }\n//         .swimlane-toggle {\n//           cursor: pointer;\n//           background: transparent;\n//           border: none;\n//           font-size: 1.2em;\n//           line-height: 1;\n//           padding: 0 6px 0 0;\n//         }\n//         .swimlane-icon { color: #b39ddb; }\n//         .swimlane-title-input {\n//           font-size: 1.2em;\n//           font-weight: 600;\n//           border: none;\n//           background: transparent;\n//           max-width: 300px;\n//           outline: none;\n//         }\n//         .swimlane-count {\n//           color: #888;\n//           margin-left: auto;\n//         }\n//         .kanban-row {\n//           display: flex;\n//           gap: 8px;\n//           min-height: 100px;\n//         }\n//         .kanban-column {\n//           background: #fafafe;\n//           flex: 1;\n//           min-width: 150px;\n//           padding: 10px;\n//           border-radius: 6px;\n//           height: 260px;\n//           box-shadow: 0 1px 3px #efefef;\n//         }\n//         .col-header {\n//           font-weight: 500;\n//           color: #555;\n//           margin-bottom: 10px;\n//           display: flex;\n//           align-items: center;\n//           gap: 8px;\n//         }\n//         .col-count {\n//           background: #e0e0e0;\n//           border-radius: 6px;\n//           padding: 1px 7px;\n//           font-size: 0.9em;\n//           color: #555;\n//         }\n//         .col-create {\n//           color: #499ef8;\n//           font-weight: bold;\n//           margin-bottom: 10px;\n//         }\n//         .create-card {\n//           box-sizing: border-box;\n//           background: #fff;\n//           border: 2px solid #57aaff;\n//           border-radius: 6px;\n//           padding: 12px;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 8px;\n//         }\n//         .create-input {\n//           border: none;\n//           outline: none;\n//           resize: none;\n//           font-size: 1rem;\n//           width: 100%;\n//         }\n//         .create-actions {\n//           display: flex;\n//           align-items: center;\n//           gap: 12px;\n//         }\n//         .create-select {\n//           display: inline-block;\n//           font-size: 1rem;\n//           border-radius: 4px;\n//           border: 1px solid #bbb;\n//         }\n//         .create-btn {\n//           background: #57aaff;\n//           color: #fff;\n//           border: none;\n//           border-radius: 4px;\n//           font-size: 1.2em;\n//           padding: 5px 12px;\n//           cursor: pointer;\n//         }\n//         .create-btn:hover {\n//           background: #3183c2;\n//         }\n//         .card-item {\n//           background: #fff;\n//           border-radius: 6px;\n//           margin-bottom: 8px;\n//           padding: 10px 12px;\n//           box-shadow: 0 1px 4px #e3e3e3;\n//           border-left: 5px solid #b39ddb;\n//         }\n//         .card-top {\n//           display: flex;\n//           gap: 8px;\n//           align-items: center;\n//         }\n//         .card-tag {\n//           background: #e5d8fb;\n//           color: #9371db;\n//           padding: 2px 6px;\n//           border-radius: 6px;\n//           font-size: 0.8em;\n//         }\n//         .card-id {\n//           margin-left: 6px;\n//           color: #888;\n//           font-size: 0.9em;\n//         }\n//         .card-label {\n//           background: #f8d7da;\n//           color: #b71c1c;\n//           margin-left: 4px;\n//           padding: 1px 6px;\n//           border-radius: 6px;\n//           font-size: 0.8em;\n//         }\n//         .card-title {\n//           font-weight: 600;\n//           margin: 8px 0;\n//         }\n//         .card-details {\n//           display: flex;\n//           gap: 8px;\n//           font-size: 0.85em;\n//           color: #555;\n//         }\n//         .card-assignee {\n//           background: #e3f2fd;\n//           color: #1565c0;\n//           padding: 1px 7px;\n//           border-radius: 6px;\n//         }\n//         .card-storypoints {\n//           background: #ffe0b2;\n//           color: #f57c00;\n//           border-radius: 6px;\n//           padding: 1px 7px;\n//         }\n//         .card-due {\n//           background: #fce4ec;\n//           color: #d81b60;\n//           border-radius: 6px;\n//           padding: 1px 7px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n\n//new one \n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const STATUSES = [\n//   'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n// ];\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i2', epic: 'p1', epicName: 'Frontend', status: 'inprogress', type: 'Bug', title: 'Login bug', assignee: 'u3', storyPoints: 1, labels: [], dueDate: '2025-09-28', reporter: 'qa-team', priority: 'Medium', startDate: '2025-09-16', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n\n// const createIssueAPI = async (issue) => {\n//   await simulateApiDelay();\n//   mockIssues.push(issue);\n// };\n\n// const deleteIssueAPI = async (issueId) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === issueId);\n//   if (idx > -1) mockIssues.splice(idx, 1);\n// };\n\n// const updateIssueAPI = async (updatedIssue) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === updatedIssue.id);\n//   if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue };\n// };\n\n// const getSwimlanes = issues =>\n//   [...new Set(issues.map(i => i.epic || i.projectId))].map(id => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === id);\n//     const epicTitle = epicIssues.find(i => i.epicName)?.epicName || id;\n//     return { id, title: epicTitle, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n\n//   useEffect(() => {\n//     const fetchIssues = async () => {\n//       try {\n//         const data = await listIssues(projectId);\n//         setIssues(data);\n//         const lanes = getSwimlanes(data);\n//         const initialOpen = {};\n//         const initialTitles = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//       } catch (err) {\n//         console.error('Failed to load issues:', err);\n//       }\n//     };\n//     fetchIssues();\n//   }, [projectId]);\n\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const onTitleChange = (id, value) => setCustomTitles(prev => ({ ...prev, [id]: value }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) {\n//       console.error('Error moving issue:', err);\n//     }\n//   };\n\n//   const onDragOver = e => e.preventDefault();\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error('Error creating issue:', err); }\n//   };\n\n//   const handleDelete = async () => {\n//     if (!selectedIssue) return;\n//     await deleteIssueAPI(selectedIssue.id);\n//     const refreshed = await listIssues(projectId);\n//     setIssues(refreshed);\n//     setSelectedIssue(null);\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {getSwimlanes(issues).map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                 {isOpen ? '▼' : '▶'}\n//               </button>\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input className=\"swimlane-title-input\" value={customTitles[lane.id] || ''} onChange={e => onTitleChange(lane.id, e.target.value)} />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\">\n//                 {STATUSES.map(status => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div className=\"kanban-column\" key={status} onDragOver={onDragOver} onDrop={e => onDrop(e, status, lane.id)}>\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => (\n//                         <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                           <div className=\"card-top\">\n//                             <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                             <span className=\"card-id\">{issue.id}</span>\n//                           </div>\n//                           <div className=\"card-title\">{issue.title}</div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className=\"modal\" onClick={e => e.stopPropagation()}>\n//             <h2 style={{ gridColumn: \"span 3\" }}>{editIssue.epicName}\n//               <button className=\"modal-delete-btn\" onClick={handleDelete}>🗑</button>\n//             </h2>\n\n//             <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Status</label><input disabled value={editIssue.status} /></div>\n//             <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//             <div className=\"modal-field\"><label>Priority</label>\n//               <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                 <option>Low</option><option>Medium</option><option>High</option>\n//               </select>\n//             </div>\n//             <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\" }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       <style>{`\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f8f9fa;\n//           margin: 0;\n//           padding: 20px;\n//         }\n\n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n\n//         .swimlane {\n//           background: white;\n//           border-radius: 12px;\n//           margin-bottom: 24px;\n//           box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n//           overflow: hidden;\n//         }\n\n//         .swimlane-header {\n//           display: flex;\n//           align-items: center;\n//           padding: 16px 20px;\n//           background: #f8f9fa;\n//           border-bottom: 1px solid #e9ecef;\n//           font-weight: 600;\n//           font-size: 16px;\n//         }\n\n//         .swimlane-toggle {\n//           background: none;\n//           border: none;\n//           font-size: 14px;\n//           margin-right: 12px;\n//           cursor: pointer;\n//           color: #6c757d;\n//         }\n\n//         .swimlane-icon {\n//           margin-right: 12px;\n//           font-size: 18px;\n//         }\n\n//         .swimlane-title-input {\n//           border: 1px solid #e9ecef;\n//           border-radius: 6px;\n//           padding: 6px 12px;\n//           font-size: 16px;\n//           font-weight: 600;\n//           background: white;\n//           margin-right: 12px;\n//           min-width: 200px;\n//         }\n\n//         .swimlane-count {\n//           color: #6c757d;\n//           font-size: 14px;\n//           font-weight: normal;\n//         }\n\n//         .kanban-row {\n//           display: flex;\n//           padding: 20px;\n//           gap: 16px;\n//           overflow-x: auto;\n//           min-height: 400px;\n//         }\n\n//         .kanban-column {\n//           flex: 0 0 280px;\n//           background: #f8f9fa;\n//           border-radius: 8px;\n//           padding: 16px;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 12px;\n//         }\n\n//         .col-header {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 8px;\n//         }\n\n//         .col-title {\n//           font-weight: 600;\n//           font-size: 14px;\n//           color: #495057;\n//           text-transform: uppercase;\n//           letter-spacing: 0.5px;\n//         }\n\n//         .col-count {\n//           background: #e9ecef;\n//           color: #495057;\n//           border-radius: 12px;\n//           padding: 2px 8px;\n//           font-size: 12px;\n//           font-weight: 600;\n//         }\n\n//         .col-create {\n//           margin-bottom: 8px;\n//         }\n\n//         .create-link {\n//           color: #6c757d;\n//           cursor: pointer;\n//           font-size: 14px;\n//           padding: 8px;\n//           display: block;\n//           border-radius: 4px;\n//           transition: background-color 0.2s;\n//         }\n\n//         .create-link:hover {\n//           background: #e9ecef;\n//         }\n\n//         .create-card {\n//           background: white;\n//           border: 1px solid #e9ecef;\n//           border-radius: 6px;\n//           padding: 12px;\n//         }\n\n//         .create-input {\n//           width: 100%;\n//           border: 1px solid #e9ecef;\n//           border-radius: 4px;\n//           padding: 8px;\n//           font-size: 14px;\n//           resize: vertical;\n//           margin-bottom: 8px;\n//         }\n\n//         .create-actions {\n//           display: flex;\n//           gap: 8px;\n//           align-items: center;\n//         }\n\n//         .create-select {\n//           flex: 1;\n//           border: 1px solid #e9ecef;\n//           border-radius: 4px;\n//           padding: 6px;\n//           font-size: 12px;\n//         }\n\n//         .create-btn {\n//           background: #f8f9fa;\n//           border: 1px solid #e9ecef;\n//           border-radius: 4px;\n//           padding: 6px;\n//           cursor: pointer;\n//           font-size: 12px;\n//         }\n\n//         .card-item {\n//           background: white;\n//           border: 1px solid #e9ecef;\n//           border-radius: 8px;\n//           padding: 16px;\n//           cursor: pointer;\n//           transition: all 0.2s;\n//           box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n//         }\n\n//         .card-item:hover {\n//           box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n//           transform: translateY(-1px);\n//         }\n\n//         .card-item:active {\n//           transform: translateY(0);\n//         }\n\n//         .card-top {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 8px;\n//         }\n\n//         .card-tag {\n//           font-size: 11px;\n//           font-weight: 600;\n//           padding: 2px 6px;\n//           border-radius: 4px;\n//           text-transform: uppercase;\n//         }\n\n//         .card-tag-task {\n//           background: #e3f2fd;\n//           color: #1976d2;\n//         }\n\n//         .card-tag-bug {\n//           background: #ffebee;\n//           color: #d32f2f;\n//         }\n\n//         .card-tag-subtask {\n//           background: #f3e5f5;\n//           color: #7b1fa2;\n//         }\n\n//         .card-id {\n//           color: #6c757d;\n//           font-size: 11px;\n//           font-family: monospace;\n//         }\n\n//         .card-title {\n//           font-size: 14px;\n//           line-height: 1.4;\n//           color: #495057;\n//           font-weight: 500;\n//         }\n\n//         .modal-overlay {\n//           position: fixed;\n//           top: 0;\n//           left: 0;\n//           right: 0;\n//           bottom: 0;\n//           background: rgba(0, 0, 0, 0.6);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//           padding: 20px;\n//         }\n\n//         .modal {\n//           background: white;\n//           border-radius: 12px;\n//           padding: 32px;\n//           display: grid;\n//           grid-template-columns: repeat(3, 1fr);\n//           gap: 20px;\n//           max-width: 1000px;\n//           width: 100%;\n//           max-height: 90vh;\n//           overflow-y: auto;\n//           box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n//         }\n\n//         .modal h2 {\n//           margin: 0 0 20px 0;\n//           font-size: 24px;\n//           font-weight: 700;\n//           color: #495057;\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//         }\n\n//         .modal-delete-btn {\n//           background: #dc3545;\n//           border: none;\n//           border-radius: 6px;\n//           padding: 8px 12px;\n//           color: white;\n//           cursor: pointer;\n//           font-size: 14px;\n//         }\n\n//         .modal-field {\n//           display: flex;\n//           flex-direction: column;\n//           gap: 6px;\n//         }\n\n//         .modal-field label {\n//           font-size: 14px;\n//           font-weight: 600;\n//           color: #495057;\n//         }\n\n//         .modal-field input, .modal-field textarea, .modal-field select {\n//           border: 1px solid #e9ecef;\n//           border-radius: 6px;\n//           padding: 10px;\n//           font-size: 14px;\n//           background: white;\n//           transition: border-color 0.2s;\n//         }\n\n//         .modal-field input:focus, .modal-field textarea:focus, .modal-field select:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n\n//         .modal-field input:disabled {\n//           background: #f8f9fa;\n//           color: #6c757d;\n//         }\n\n//         .modal-actions {\n//           display: flex;\n//           justify-content: flex-end;\n//           gap: 12px;\n//           margin-top: 20px;\n//         }\n\n//         .btn-reset {\n//           background: #6c757d;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//         }\n\n//         .btn-reset:hover {\n//           background: #5a6268;\n//         }\n\n//         .btn-save {\n//           background: #1976d2;\n//           border: none;\n//           color: white;\n//           padding: 10px 20px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//         }\n\n//         .btn-save:hover {\n//           background: #1565c0;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/components/boards/KanbanBoard.js"],"sourcesContent":["\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// /*\n//   Enhancements:\n//   - Keyboard-only moves: when a card is focused, user can press ArrowLeft/ArrowRight to move between columns.\n//   - Buttons for accessibility to move left/right.\n//   - Export/Import CSV for issues in the top header.\n// */\n\n// const STATUSES = ['todo','inprogress','review','done'];\n\n// function issuesToCSV(issues) {\n//   const headers = ['id','projectId','title','status','priority','assignee','type','storyPoints','createdAt'];\n//   const rows = issues.map(i => headers.map(h => `\"${(i[h]||'').toString().replace(/\"/g,'\"\"')}\"`).join(','));\n//   return [headers.join(','), ...rows].join('\\n');\n// }\n\n// function csvToIssues(csv) {\n//   const lines = csv.split(/\\r?\\n/).filter(Boolean);\n//   if(lines.length < 2) return [];\n//   const headers = lines[0].split(',').map(h => h.replace(/(^\"|\"$)/g,''));\n//   const res = [];\n//   for(let i=1;i<lines.length;i++){\n//     const cols = lines[i].split(',').map(c => c.replace(/(^\"|\"$)/g,''));\n//     const obj = {};\n//     headers.forEach((h,idx)=> obj[h]=cols[idx]||'');\n//     res.push(obj);\n//   }\n//   return res;\n// }\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const refresh = async ()=> setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n//   const onDragStart = (e,id) => { e.dataTransfer.setData('text/plain', id); };\n\n//   const byStatus = s => issues.filter(i=>i.status===s);\n\n//   // keyboard move handler: ArrowLeft/ArrowRight move between columns\n//   const handleKey = async (e, issue) => {\n//     if(e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n//       e.preventDefault();\n//       const idx = STATUSES.indexOf(issue.status);\n//       let targetIdx = idx + (e.key === 'ArrowRight' ? 1 : -1);\n//       targetIdx = Math.max(0, Math.min(STATUSES.length-1, targetIdx));\n//       const target = STATUSES[targetIdx];\n//       if(target !== issue.status) {\n//         await moveIssue(issue.id, target);\n//         refresh();\n//       }\n//     }\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx-1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length-1, idx+1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n\n//   // Export CSV\n//   const exportCSV = () => {\n//     const csv = issuesToCSV(issues);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url; a.download = `issues_export_${projectId||'all'}.csv`; a.click();\n//     URL.revokeObjectURL(url);\n//   };\n\n//   // Import CSV\n//   const importCSV = (e) => {\n//     const file = e.target.files && e.target.files[0];\n//     if(!file) return;\n//     const reader = new FileReader();\n//     reader.onload = async (ev) => {\n//       try {\n//         const text = ev.target.result;\n//         const imported = csvToIssues(text);\n//         // Merge with existing issues: simple append with new IDs\n//         for(const row of imported){\n//           // only minimal fields handled; createIssue is not imported here to avoid API mismatch\n//           // createIssue would be used for full import; for demo we push to localStorage directly\n//           // but here we attempt to call moveIssue or update if id exists. fallback: ignore.\n//         }\n//         alert('Import parsed ' + imported.length + ' rows. For full import to central DB, use backend import.');\n//       } catch(err) {\n//         alert('CSV parse error: ' + err.message);\n//       }\n//     };\n//     reader.readAsText(file);\n//     // reset file input\n//     e.target.value = '';\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:12}}>\n//         <h2 style={{margin:0}}>Kanban Board {projectId?`- ${projectId}`:''}</h2>\n//         <div style={{display:'flex',gap:8,alignItems:'center'}}>\n//           <button className=\"btn-ghost\" onClick={exportCSV} aria-label=\"Export issues as CSV\">Export CSV</button>\n//           <label className=\"btn-ghost\" style={{cursor:'pointer'}}>\n//             Import CSV\n//             <input ref={fileRef} type=\"file\" accept=\".csv,text/csv\" onChange={importCSV} style={{display:'none'}} aria-hidden=\"true\"/>\n//           </label>\n//           <button className=\"btn\" onClick={()=>window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s=>(\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e=>e.preventDefault()} onDrop={e=>onDrop(e,s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i=>(\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e=>onDragStart(e,i.id)}\n//                 onKeyDown={(e)=>handleKey(e,i)}\n//                 aria-describedby={`desc-${i.id}`}>\n//                 <div style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{display:'flex',gap:6}}>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveLeft(i.id); }} aria-label={`Move ${i.title} left`}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveRight(i.id); }} aria-label={`Move ${i.title} right`}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div id={`desc-${i.id}`} className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { useProjects } from '../../context/ProjectContext';\n\n// const STATUSES = ['todo', 'inprogress', 'review', 'done'];\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const { projects } = useProjects();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const refresh = async () => setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n\n//   const onDragStart = (e, id) => {\n//     e.dataTransfer.setData('text/plain', id);\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx - 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length - 1, idx + 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const byStatus = (s) => issues.filter(i => i.status === s);\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n//         <h2 style={{ margin: 0 }}>Kanban Board {projectId ? `- ${projectId}` : ''}</h2>\n//         <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\n//           <button className=\"btn\" onClick={() => window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s => (\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e => e.preventDefault()} onDrop={e => onDrop(e, s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i => (\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e => onDragStart(e, i.id)}>\n//                 <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{ display: 'flex', gap: 6 }}>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveLeft(i.id); }}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveRight(i.id); }}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n\n//       <div style={{ marginTop: 20 }}>\n//         <h3>📋 Projects from Timeline</h3>\n//         <ul>\n//           {projects.map(p => (\n//             <li key={p.id}>\n//               <strong>{p.text}</strong> — Starts: {p.start_date}, Duration: {p.duration} days\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n \n// const STATUSES = [\n//   'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n// ];\n \n// // Mock issues with two epics swimlanes for demo\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '' },\n//   { id: 'i2', epic: 'p1', epicName: 'Frontend', status: 'inprogress', type: 'Bug', title: 'Login bug', assignee: 'u2', storyPoints: 1, labels: [], dueDate: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '' }\n// ];\n \n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n \n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n \n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n \n// const createIssueAPI = async (issue) => {\n//   await simulateApiDelay();\n//   mockIssues.push(issue);\n// };\n \n// const getSwimlanes = issues =>\n//   [...new Set(issues.map(i => i.epic || i.projectId))].map(id => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === id);\n//     const epicTitle = epicIssues.find(i => i.epicName)?.epicName || id;\n//     return {\n//       id,\n//       title: epicTitle,\n//       issues: epicIssues\n//     };\n//   });\n \n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n \n//   useEffect(() => {\n//     const fetchIssues = async () => {\n//       try {\n//         const data = await listIssues(projectId);\n//         setIssues(data);\n//         const lanes = getSwimlanes(data);\n//         const initialOpen = {};\n//         const initialTitles = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//       } catch (err) {\n//         console.error('Failed to load issues:', err);\n//       }\n//     };\n//     fetchIssues();\n//   }, [projectId]);\n \n//   const toggleSwimlane = (id) => {\n//     setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   };\n \n//   const onTitleChange = (id, value) => {\n//     setCustomTitles(prev => ({ ...prev, [id]: value }));\n//   };\n \n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n \n//   const onDragStart = (e, issueId) => {\n//     e.dataTransfer.setData('text/plain', issueId);\n//   };\n \n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) {\n//       console.error('Error moving issue:', err);\n//     }\n//   };\n \n//   const onDragOver = e => e.preventDefault();\n \n//   const handleCreateClick = laneId => {\n//     setCreateLaneId(laneId);\n//     setNewTaskText('');\n//     setNewTaskType('Task');\n//   };\n \n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) {\n//       alert('Task title is required');\n//       return;\n//     }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//       setNewTaskText('');\n//       setNewTaskType('Task');\n//     } catch (err) {\n//       console.error('Error creating issue:', err);\n//     }\n//   };\n \n//   const handleCreateCancel = () => {\n//     setCreateLaneId(null);\n//     setNewTaskText('');\n//     setNewTaskType('Task');\n//   };\n \n//   return (\n//     <div className=\"board-wrap\">\n//       {getSwimlanes(issues).map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button\n//                 className=\"swimlane-toggle\"\n//                 aria-label={isOpen ? `Collapse swimlane` : `Expand swimlane`}\n//                 aria-expanded={isOpen}\n//                 onClick={() => toggleSwimlane(lane.id)}\n//               >\n//                 {isOpen ? '▼' : '▶'}\n//               </button>\n//               <span className=\"swimlane-icon\" aria-hidden=\"true\" style={{ marginRight: 6 }}>⚡</span>\n//               <input\n//                 className=\"swimlane-title-input\"\n//                 value={customTitles[lane.id] || ''}\n//                 onChange={e => onTitleChange(lane.id, e.target.value)}\n//                 aria-label={`Edit epic title for swimlane ${lane.id}`}\n//                 spellCheck=\"false\"\n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\" id={`swimlane-content-${lane.id}`}>\n//                 {STATUSES.map(status => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div\n//                       className=\"kanban-column\"\n//                       key={status}\n//                       onDragOver={onDragOver}\n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span>{status.replace(/_/g, ' ').toUpperCase()}</span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea\n//                                 rows={2}\n//                                 className=\"create-input\"\n//                                 placeholder=\"What needs to be done?\"\n//                                 value={newTaskText}\n//                                 onChange={e => setNewTaskText(e.target.value)}\n//                               />\n//                               <div className=\"create-actions\">\n//                                 <select\n//                                   value={newTaskType}\n//                                   onChange={e => setNewTaskType(e.target.value)}\n//                                   className=\"create-select\"\n//                                 >\n//                                   <option value=\"Task\">Task</option>\n//                                   <option value=\"Subtask\">Subtask</option>\n//                                   <option value=\"Bug\">Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={handleCreateCancel}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (\n//                             <span onClick={() => handleCreateClick(lane.id)} style={{ cursor: 'pointer' }}>+ Create</span>\n//                           )\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => (\n//                         <div\n//                           className=\"card-item\"\n//                           tabIndex={0}\n//                           key={issue.id}\n//                           draggable\n//                           onDragStart={e => onDragStart(e, issue.id)}\n//                         >\n//                           <div className=\"card-top\">\n//                             <span className=\"card-tag\">{issue.type}</span>\n//                             <span className=\"card-id\">{issue.id}</span>\n//                             {issue.labels?.map(l => (\n//                               <span key={l} className=\"card-label\">{l}</span>\n//                             ))}\n//                           </div>\n//                           <div className=\"card-title\">{issue.title}</div>\n//                           <div className=\"card-details\">\n//                             {issue.assignee && <span className=\"card-assignee\">{issue.assignee}</span>}\n//                             <span className=\"card-storypoints\">{issue.storyPoints} pts</span>\n//                             {issue.dueDate && <span className=\"card-due\">{issue.dueDate}</span>}\n//                           </div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n//       <style>{`\n//         .board-wrap { padding: 0 12px; }\n//         .swimlane { margin-bottom: 16px; }\n//         .swimlane-header {\n//           display: flex; align-items: center; gap: 8px; font-size: 1.2em;\n//           font-weight: 500; border-bottom: 1px solid #ececec; padding: 8px 0;\n//         }\n//         .swimlane-toggle {\n//           cursor: pointer;\n//           background: transparent;\n//           border: none;\n//           font-size: 1.2em;\n//           line-height: 1;\n//           padding: 0 6px 0 0;\n//         }\n//         .swimlane-icon { color: #b39ddb; }\n//         .swimlane-title-input {\n//           font-size: 1.2em;\n//           font-weight: 600;\n//           border: none;\n//           background: transparent;\n//           max-width: 300px;\n//           outline: none;\n//         }\n//         .swimlane-count {\n//           color: #888;\n//           margin-left: auto;\n//         }\n//         .kanban-row {\n//           display: flex;\n//           gap: 8px;\n//           min-height: 100px;\n//         }\n//         .kanban-column {\n//           background: #fafafe;\n//           flex: 1;\n//           min-width: 150px;\n//           padding: 10px;\n//           border-radius: 6px;\n//           height: 260px;\n//           box-shadow: 0 1px 3px #efefef;\n//         }\n//         .col-header {\n//           font-weight: 500;\n//           color: #555;\n//           margin-bottom: 10px;\n//           display: flex;\n//           align-items: center;\n//           gap: 8px;\n//         }\n//         .col-count {\n//           background: #e0e0e0;\n//           border-radius: 6px;\n//           padding: 1px 7px;\n//           font-size: 0.9em;\n//           color: #555;\n//         }\n//         .col-create {\n//           color: #499ef8;\n//           font-weight: bold;\n//           margin-bottom: 10px;\n//         }\n//         .create-card {\n//           box-sizing: border-box;\n//           background: #fff;\n//           border: 2px solid #57aaff;\n//           border-radius: 6px;\n//           padding: 12px;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 8px;\n//         }\n//         .create-input {\n//           border: none;\n//           outline: none;\n//           resize: none;\n//           font-size: 1rem;\n//           width: 100%;\n//         }\n//         .create-actions {\n//           display: flex;\n//           align-items: center;\n//           gap: 12px;\n//         }\n//         .create-select {\n//           display: inline-block;\n//           font-size: 1rem;\n//           border-radius: 4px;\n//           border: 1px solid #bbb;\n//         }\n//         .create-btn {\n//           background: #57aaff;\n//           color: #fff;\n//           border: none;\n//           border-radius: 4px;\n//           font-size: 1.2em;\n//           padding: 5px 12px;\n//           cursor: pointer;\n//         }\n//         .create-btn:hover {\n//           background: #3183c2;\n//         }\n//         .card-item {\n//           background: #fff;\n//           border-radius: 6px;\n//           margin-bottom: 8px;\n//           padding: 10px 12px;\n//           box-shadow: 0 1px 4px #e3e3e3;\n//           border-left: 5px solid #b39ddb;\n//         }\n//         .card-top {\n//           display: flex;\n//           gap: 8px;\n//           align-items: center;\n//         }\n//         .card-tag {\n//           background: #e5d8fb;\n//           color: #9371db;\n//           padding: 2px 6px;\n//           border-radius: 6px;\n//           font-size: 0.8em;\n//         }\n//         .card-id {\n//           margin-left: 6px;\n//           color: #888;\n//           font-size: 0.9em;\n//         }\n//         .card-label {\n//           background: #f8d7da;\n//           color: #b71c1c;\n//           margin-left: 4px;\n//           padding: 1px 6px;\n//           border-radius: 6px;\n//           font-size: 0.8em;\n//         }\n//         .card-title {\n//           font-weight: 600;\n//           margin: 8px 0;\n//         }\n//         .card-details {\n//           display: flex;\n//           gap: 8px;\n//           font-size: 0.85em;\n//           color: #555;\n//         }\n//         .card-assignee {\n//           background: #e3f2fd;\n//           color: #1565c0;\n//           padding: 1px 7px;\n//           border-radius: 6px;\n//         }\n//         .card-storypoints {\n//           background: #ffe0b2;\n//           color: #f57c00;\n//           border-radius: 6px;\n//           padding: 1px 7px;\n//         }\n//         .card-due {\n//           background: #fce4ec;\n//           color: #d81b60;\n//           border-radius: 6px;\n//           padding: 1px 7px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n \n \n\n\n\n\n\n\n\n\n\n//new one \n\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const STATUSES = [\n//   'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n// ];\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i2', epic: 'p1', epicName: 'Frontend', status: 'inprogress', type: 'Bug', title: 'Login bug', assignee: 'u3', storyPoints: 1, labels: [], dueDate: '2025-09-28', reporter: 'qa-team', priority: 'Medium', startDate: '2025-09-16', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n\n// const createIssueAPI = async (issue) => {\n//   await simulateApiDelay();\n//   mockIssues.push(issue);\n// };\n\n// const deleteIssueAPI = async (issueId) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === issueId);\n//   if (idx > -1) mockIssues.splice(idx, 1);\n// };\n\n// const updateIssueAPI = async (updatedIssue) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === updatedIssue.id);\n//   if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue };\n// };\n\n// const getSwimlanes = issues =>\n//   [...new Set(issues.map(i => i.epic || i.projectId))].map(id => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === id);\n//     const epicTitle = epicIssues.find(i => i.epicName)?.epicName || id;\n//     return { id, title: epicTitle, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n\n//   useEffect(() => {\n//     const fetchIssues = async () => {\n//       try {\n//         const data = await listIssues(projectId);\n//         setIssues(data);\n//         const lanes = getSwimlanes(data);\n//         const initialOpen = {};\n//         const initialTitles = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//       } catch (err) {\n//         console.error('Failed to load issues:', err);\n//       }\n//     };\n//     fetchIssues();\n//   }, [projectId]);\n\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const onTitleChange = (id, value) => setCustomTitles(prev => ({ ...prev, [id]: value }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) {\n//       console.error('Error moving issue:', err);\n//     }\n//   };\n\n//   const onDragOver = e => e.preventDefault();\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error('Error creating issue:', err); }\n//   };\n\n//   const handleDelete = async () => {\n//     if (!selectedIssue) return;\n//     await deleteIssueAPI(selectedIssue.id);\n//     const refreshed = await listIssues(projectId);\n//     setIssues(refreshed);\n//     setSelectedIssue(null);\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {getSwimlanes(issues).map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                 {isOpen ? '▼' : '▶'}\n//               </button>\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input className=\"swimlane-title-input\" value={customTitles[lane.id] || ''} onChange={e => onTitleChange(lane.id, e.target.value)} />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\">\n//                 {STATUSES.map(status => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div className=\"kanban-column\" key={status} onDragOver={onDragOver} onDrop={e => onDrop(e, status, lane.id)}>\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => (\n//                         <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                           <div className=\"card-top\">\n//                             <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                             <span className=\"card-id\">{issue.id}</span>\n//                           </div>\n//                           <div className=\"card-title\">{issue.title}</div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className=\"modal\" onClick={e => e.stopPropagation()}>\n//             <h2 style={{ gridColumn: \"span 3\" }}>{editIssue.epicName}\n//               <button className=\"modal-delete-btn\" onClick={handleDelete}>🗑</button>\n//             </h2>\n\n//             <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Status</label><input disabled value={editIssue.status} /></div>\n//             <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//             <div className=\"modal-field\"><label>Priority</label>\n//               <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                 <option>Low</option><option>Medium</option><option>High</option>\n//               </select>\n//             </div>\n//             <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\" }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       <style>{`\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f8f9fa;\n//           margin: 0;\n//           padding: 20px;\n//         }\n        \n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n        \n//         .swimlane {\n//           background: white;\n//           border-radius: 12px;\n//           margin-bottom: 24px;\n//           box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n//           overflow: hidden;\n//         }\n        \n//         .swimlane-header {\n//           display: flex;\n//           align-items: center;\n//           padding: 16px 20px;\n//           background: #f8f9fa;\n//           border-bottom: 1px solid #e9ecef;\n//           font-weight: 600;\n//           font-size: 16px;\n//         }\n        \n//         .swimlane-toggle {\n//           background: none;\n//           border: none;\n//           font-size: 14px;\n//           margin-right: 12px;\n//           cursor: pointer;\n//           color: #6c757d;\n//         }\n        \n//         .swimlane-icon {\n//           margin-right: 12px;\n//           font-size: 18px;\n//         }\n        \n//         .swimlane-title-input {\n//           border: 1px solid #e9ecef;\n//           border-radius: 6px;\n//           padding: 6px 12px;\n//           font-size: 16px;\n//           font-weight: 600;\n//           background: white;\n//           margin-right: 12px;\n//           min-width: 200px;\n//         }\n        \n//         .swimlane-count {\n//           color: #6c757d;\n//           font-size: 14px;\n//           font-weight: normal;\n//         }\n        \n//         .kanban-row {\n//           display: flex;\n//           padding: 20px;\n//           gap: 16px;\n//           overflow-x: auto;\n//           min-height: 400px;\n//         }\n        \n//         .kanban-column {\n//           flex: 0 0 280px;\n//           background: #f8f9fa;\n//           border-radius: 8px;\n//           padding: 16px;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 12px;\n//         }\n        \n//         .col-header {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 8px;\n//         }\n        \n//         .col-title {\n//           font-weight: 600;\n//           font-size: 14px;\n//           color: #495057;\n//           text-transform: uppercase;\n//           letter-spacing: 0.5px;\n//         }\n        \n//         .col-count {\n//           background: #e9ecef;\n//           color: #495057;\n//           border-radius: 12px;\n//           padding: 2px 8px;\n//           font-size: 12px;\n//           font-weight: 600;\n//         }\n        \n//         .col-create {\n//           margin-bottom: 8px;\n//         }\n        \n//         .create-link {\n//           color: #6c757d;\n//           cursor: pointer;\n//           font-size: 14px;\n//           padding: 8px;\n//           display: block;\n//           border-radius: 4px;\n//           transition: background-color 0.2s;\n//         }\n        \n//         .create-link:hover {\n//           background: #e9ecef;\n//         }\n        \n//         .create-card {\n//           background: white;\n//           border: 1px solid #e9ecef;\n//           border-radius: 6px;\n//           padding: 12px;\n//         }\n        \n//         .create-input {\n//           width: 100%;\n//           border: 1px solid #e9ecef;\n//           border-radius: 4px;\n//           padding: 8px;\n//           font-size: 14px;\n//           resize: vertical;\n//           margin-bottom: 8px;\n//         }\n        \n//         .create-actions {\n//           display: flex;\n//           gap: 8px;\n//           align-items: center;\n//         }\n        \n//         .create-select {\n//           flex: 1;\n//           border: 1px solid #e9ecef;\n//           border-radius: 4px;\n//           padding: 6px;\n//           font-size: 12px;\n//         }\n        \n//         .create-btn {\n//           background: #f8f9fa;\n//           border: 1px solid #e9ecef;\n//           border-radius: 4px;\n//           padding: 6px;\n//           cursor: pointer;\n//           font-size: 12px;\n//         }\n        \n//         .card-item {\n//           background: white;\n//           border: 1px solid #e9ecef;\n//           border-radius: 8px;\n//           padding: 16px;\n//           cursor: pointer;\n//           transition: all 0.2s;\n//           box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n//         }\n        \n//         .card-item:hover {\n//           box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n//           transform: translateY(-1px);\n//         }\n        \n//         .card-item:active {\n//           transform: translateY(0);\n//         }\n        \n//         .card-top {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 8px;\n//         }\n        \n//         .card-tag {\n//           font-size: 11px;\n//           font-weight: 600;\n//           padding: 2px 6px;\n//           border-radius: 4px;\n//           text-transform: uppercase;\n//         }\n        \n//         .card-tag-task {\n//           background: #e3f2fd;\n//           color: #1976d2;\n//         }\n        \n//         .card-tag-bug {\n//           background: #ffebee;\n//           color: #d32f2f;\n//         }\n        \n//         .card-tag-subtask {\n//           background: #f3e5f5;\n//           color: #7b1fa2;\n//         }\n        \n//         .card-id {\n//           color: #6c757d;\n//           font-size: 11px;\n//           font-family: monospace;\n//         }\n        \n//         .card-title {\n//           font-size: 14px;\n//           line-height: 1.4;\n//           color: #495057;\n//           font-weight: 500;\n//         }\n        \n//         .modal-overlay {\n//           position: fixed;\n//           top: 0;\n//           left: 0;\n//           right: 0;\n//           bottom: 0;\n//           background: rgba(0, 0, 0, 0.6);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//           padding: 20px;\n//         }\n        \n//         .modal {\n//           background: white;\n//           border-radius: 12px;\n//           padding: 32px;\n//           display: grid;\n//           grid-template-columns: repeat(3, 1fr);\n//           gap: 20px;\n//           max-width: 1000px;\n//           width: 100%;\n//           max-height: 90vh;\n//           overflow-y: auto;\n//           box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n//         }\n        \n//         .modal h2 {\n//           margin: 0 0 20px 0;\n//           font-size: 24px;\n//           font-weight: 700;\n//           color: #495057;\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//         }\n        \n//         .modal-delete-btn {\n//           background: #dc3545;\n//           border: none;\n//           border-radius: 6px;\n//           padding: 8px 12px;\n//           color: white;\n//           cursor: pointer;\n//           font-size: 14px;\n//         }\n        \n//         .modal-field {\n//           display: flex;\n//           flex-direction: column;\n//           gap: 6px;\n//         }\n        \n//         .modal-field label {\n//           font-size: 14px;\n//           font-weight: 600;\n//           color: #495057;\n//         }\n        \n//         .modal-field input, .modal-field textarea, .modal-field select {\n//           border: 1px solid #e9ecef;\n//           border-radius: 6px;\n//           padding: 10px;\n//           font-size: 14px;\n//           background: white;\n//           transition: border-color 0.2s;\n//         }\n        \n//         .modal-field input:focus, .modal-field textarea:focus, .modal-field select:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n        \n//         .modal-field input:disabled {\n//           background: #f8f9fa;\n//           color: #6c757d;\n//         }\n        \n//         .modal-actions {\n//           display: flex;\n//           justify-content: flex-end;\n//           gap: 12px;\n//           margin-top: 20px;\n//         }\n        \n//         .btn-reset {\n//           background: #6c757d;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//         }\n        \n//         .btn-reset:hover {\n//           background: #5a6268;\n//         }\n        \n//         .btn-save {\n//           background: #1976d2;\n//           border: none;\n//           color: white;\n//           padding: 10px 20px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//         }\n        \n//         .btn-save:hover {\n//           background: #1565c0;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }"],"mappingscignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\n// /*\n//   Same mock API as before but kept compact. Uses localStorage.\n//   Data shapes include accessibility-friendly fields (labels, timestamps).\n// */\n// import { v4 as uuidv4 } from 'uuid';\n// const KEY = { USER: 'tf_user_v3', USERS:'tf_users_v3', PROJECTS:'tf_projects_v3', ISSUES:'tf_issues_v3', ASSETS:'tf_assets_v3', NOTIFS:'tf_notifs_v3' };\n\n// function ensure(){\n//   if(!localStorage.getItem(KEY.USERS)){\n//     const users = [{id:'u1',name:'Admin User',email:'admin@demo.com',role:'Admin'},{id:'u2',name:'Dev Alice',email:'alice@demo.com',role:'Developer'},{id:'u3',name:'Manager Bob',email:'bob@demo.com',role:'Manager'}];\n//     localStorage.setItem(KEY.USERS,JSON.stringify(users));\n//   }\n//   if(!localStorage.getItem(KEY.PROJECTS)){\n//     const projects=[{id:'p1',key:'ALPHA',name:'Alpha',description:'Alpha project',leads:['u3']},{id:'p2',key:'BETA',name:'Beta',description:'Beta project',leads:['u2']}];\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(projects));\n//   }\n//   if(!localStorage.getItem(KEY.ISSUES)){\n//     const issues=[{id:'i1',projectId:'p1',title:'Setup repo',status:'todo',priority:'P2',assignee:'u2',type:'Task',storyPoints:3,createdAt:Date.now()},{id:'i2',projectId:'p1',title:'Login bug',status:'inprogress',priority:'P1',assignee:'u2',type:'Bug',storyPoints:1,createdAt:Date.now()},{id:'i3',projectId:'p2',title:'OAuth',status:'done',priority:'P3',assignee:'u3',type:'Story',storyPoints:5,createdAt:Date.now()}];\n//     localStorage.setItem(KEY.ISSUES,JSON.stringify(issues));\n//   }\n//   if(!localStorage.getItem(KEY.ASSETS)){ localStorage.setItem(KEY.ASSETS,JSON.stringify([{id:'a1',name:'Dev Laptop',type:'Laptop',owner:'u2',status:'active'}])); }\n//   if(!localStorage.getItem(KEY.NOTIFS)){ localStorage.setItem(KEY.NOTIFS,JSON.stringify([{id:uuidv4(),userId:'u2',text:'Assigned i1',read:false,ts:Date.now()}])); }\n// }\n\n// export function mockLogin(email,password){ ensure(); const users=JSON.parse(localStorage.getItem(KEY.USERS)); const user=users.find(u=>u.email===email)||users[0]; localStorage.setItem(KEY.USER,JSON.stringify(user)); return Promise.resolve(user); }\n// export function logout(){ localStorage.removeItem(KEY.USER); return Promise.resolve(); }\n// export function getCurrentUser(){ const s=localStorage.getItem(KEY.USER); return s?JSON.parse(s):null; }\n\n// export function listUsers(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\n// export function addUser(u){ const arr=JSON.parse(localStorage.getItem(KEY.USERS)||'[]'); arr.push(u); localStorage.setItem(KEY.USERS,JSON.stringify(arr)); return Promise.resolve(u); }\n\n// export function listProjects(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\n// export function getProject(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x=>x.id===id)); }\n// export function addProject(p){ const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]'); arr.push(p); localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr)); return Promise.resolve(p); }\n\n// export function listIssues(projectId){ ensure(); let arr=JSON.parse(localStorage.getItem(KEY.ISSUES)); if(projectId) arr=arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\n// export function getIssue(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x=>x.id===id)); }\n// export function createIssue(data){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const id='i'+Math.floor(Math.random()*100000); const issue={...data,id,createdAt:Date.now()}; arr.push(issue); localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(issue); }\n// export function updateIssue(id,patch){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(x=>x.id===id); if(idx>=0){ arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(arr[idx]); } return Promise.reject('not found'); }\n// export function moveIssue(id,status){ return updateIssue(id,{status}); }\n\n// export function listAssets(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS))); }\n// export function addAsset(a){ const arr=JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS,JSON.stringify(arr)); return Promise.resolve(a); }\n\n// export function listNotifs(userId){ ensure(); const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId?arr.filter(n=>n.userId===userId):arr); }\n// export function markNotif(id){ const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx=arr.findIndex(n=>n.id===id); if(idx>=0){ arr[idx].read=true; localStorage.setItem(KEY.NOTIFS,JSON.stringify(arr)); } return Promise.resolve(); }\n\n// import { v4 as uuidv4 } from 'uuid';\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS:'tf_users_v3',\n//   PROJECTS:'tf_projects_v3',\n//   ISSUES:'tf_issues_v3',\n//   ASSETS:'tf_assets_v3',\n//   NOTIFS:'tf_notifs_v3'\n// };\n\n// function ensure(){\n//   if(!localStorage.getItem(KEY.USERS)){\n//     const users = [\n//       {id:'u1',name:'Admin User',email:'admin@demo.com',role:'Admin'},\n//       {id:'u2',name:'Dev Alice',email:'alice@demo.com',role:'Developer'},\n//       {id:'u3',name:'Manager Bob',email:'bob@demo.com',role:'Manager'}\n//     ];\n//     localStorage.setItem(KEY.USERS,JSON.stringify(users));\n//   }\n//   if(!localStorage.getItem(KEY.PROJECTS)){\n//     const projects=[\n//       {id:'p1',key:'ALPHA',name:'Alpha',description:'Alpha project',leads:['u3'], createdAt:Date.now(), lastUpdated:Date.now()},\n//       {id:'p2',key:'BETA',name:'Beta',description:'Beta project',leads:['u2'], createdAt:Date.now(), lastUpdated:Date.now()}\n//     ];\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(projects));\n//   }\n//   if(!localStorage.getItem(KEY.ISSUES)){\n//     const issues=[\n//       {id:'i1',projectId:'p1',title:'Setup repo',status:'todo',priority:'P2',assignee:'u2',type:'Task',storyPoints:3,createdAt:Date.now()},\n//       {id:'i2',projectId:'p1',title:'Login bug',status:'inprogress',priority:'P1',assignee:'u2',type:'Bug',storyPoints:1,createdAt:Date.now()},\n//       {id:'i3',projectId:'p2',title:'OAuth',status:'done',priority:'P3',assignee:'u3',type:'Story',storyPoints:5,createdAt:Date.now()}\n//     ];\n//     localStorage.setItem(KEY.ISSUES,JSON.stringify(issues));\n//   }\n//   if(!localStorage.getItem(KEY.ASSETS)){ localStorage.setItem(KEY.ASSETS,JSON.stringify([{id:'a1',name:'Dev Laptop',type:'Laptop',owner:'u2',status:'active'}])); }\n//   if(!localStorage.getItem(KEY.NOTIFS)){ localStorage.setItem(KEY.NOTIFS,JSON.stringify([{id:uuidv4(),userId:'u2',text:'Assigned i1',read:false,ts:Date.now()}])); }\n// }\n\n// export function mockLogin(email,password){ ensure(); const users=JSON.parse(localStorage.getItem(KEY.USERS)); const user=users.find(u=>u.email===email)||users[0]; localStorage.setItem(KEY.USER,JSON.stringify(user)); return Promise.resolve(user); }\n// export function logout(){ localStorage.removeItem(KEY.USER); return Promise.resolve(); }\n// export function getCurrentUser(){ const s=localStorage.getItem(KEY.USER); return s?JSON.parse(s):null; }\n\n// export function listUsers(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\n// export function addUser(u){ const arr=JSON.parse(localStorage.getItem(KEY.USERS)||'[]'); arr.push(u); localStorage.setItem(KEY.USERS,JSON.stringify(arr)); return Promise.resolve(u); }\n\n// export function listProjects(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\n// export function getProject(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x=>x.id===id)); }\n// export function addProject(p){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// // ✅ New: delete project\n// export function deleteProject(id){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS,JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ✅ New: update project\n// export function updateProject(id, patch){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const idx=arr.findIndex(p => p.id===id);\n//   if(idx>=0){\n//     arr[idx] = {...arr[idx], ...patch, lastUpdated: Date.now()};\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function listIssues(projectId){ ensure(); let arr=JSON.parse(localStorage.getItem(KEY.ISSUES)); if(projectId) arr=arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\n// export function getIssue(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x=>x.id===id)); }\n// export function createIssue(data){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const id='i'+Math.floor(Math.random()*100000); const issue={...data,id,createdAt:Date.now()}; arr.push(issue); localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(issue); }\n// export function updateIssue(id,patch){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(x=>x.id===id); if(idx>=0){ arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES,JSON.stringify(arr[idx])); return Promise.resolve(arr[idx]); } return Promise.reject('not found'); }\n// export function moveIssue(id,status){ return updateIssue(id,{status}); }\n\n// export function listAssets(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS))); }\n// export function addAsset(a){ const arr=JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS,JSON.stringify(arr)); return Promise.resolve(a); }\n\n// export function listNotifs(userId){ ensure(); const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId?arr.filter(n=>n.userId===userId):arr); }\n// export function markNotif(id){ const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx=arr.findIndex(n=>n.id===id); if(idx>=0){ arr[idx].read=true; localStorage.setItem(KEY.NOTIFS,JSON.stringify(arr)); } return Promise.resolve(); }\n\n// for mounika\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       { id: 'p1', key: 'ALPHA', name: 'Alpha', description: 'Alpha project', leads: ['u3'], createdAt: Date.now(), lastUpdated: Date.now() },\n//       { id: 'p2', key: 'BETA', name: 'Beta', description: 'Beta project', leads: ['u2'], createdAt: Date.now(), lastUpdated: Date.now() }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       { id: 'i1', projectId: 'p1', title: 'Setup repo', status: 'todo', priority: 'P2', assignee: 'u2', type: 'Task', storyPoints: 3, createdAt: Date.now() },\n//       { id: 'i2', projectId: 'p1', title: 'Login bug', status: 'inprogress', priority: 'P1', assignee: 'u2', type: 'Bug', storyPoints: 1, createdAt: Date.now() },\n//       { id: 'i3', projectId: 'p2', title: 'OAuth', status: 'done', priority: 'P3', assignee: 'u3', type: 'Story', storyPoints: 5, createdAt: Date.now() }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(KEY.ASSETS, JSON.stringify([{ id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }]));\n//   }\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify([{ id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }]));\n//   }\n// }\n\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = JSON.parse(localStorage.getItem(KEY.USERS));\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)));\n// }\n\n// export function addUser(u) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   arr.push(u);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const filtered = arr.filter(u => u.id !== id);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)));\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x => x.id === id));\n// }\n\n// export function addProject(p) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// export function deleteProject(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = JSON.parse(localStorage.getItem(KEY.ISSUES));\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x => x.id === id));\n// }\n\n// export function createIssue(data) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)));\n// }\n\n// export function addAsset(a) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n//   arr.push(a);\n//   localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n//   return Promise.resolve(a);\n// }\n\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n//   }\n//   return Promise.resolve();\n// }\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       {\n//         id: 'p1',\n//         key: 'ALPHA',\n//         name: 'Alpha',\n//         description: 'Alpha project',\n//         leads: ['u3'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       },\n//       {\n//         id: 'p2',\n//         key: 'BETA',\n//         name: 'Beta',\n//         description: 'Beta project',\n//         leads: ['u2'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       {\n//         id: 'i1',\n//         projectId: 'p1',\n//         title: 'Setup repo',\n//         status: 'todo',\n//         priority: 'P2',\n//         assignee: 'u2',\n//         type: 'Task',\n//         storyPoints: 3,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i2',\n//         projectId: 'p1',\n//         title: 'Login bug',\n//         status: 'inprogress',\n//         priority: 'P1',\n//         assignee: 'u2',\n//         type: 'Bug',\n//         storyPoints: 1,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i3',\n//         projectId: 'p2',\n//         title: 'OAuth',\n//         status: 'done',\n//         priority: 'P3',\n//         assignee: 'u3',\n//         type: 'Story',\n//         storyPoints: 5,\n//         createdAt: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(\n//       KEY.ASSETS,\n//       JSON.stringify([\n//         { id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }\n//       ])\n//     );\n//   }\n\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(\n//       KEY.NOTIFS,\n//       JSON.stringify([\n//         { id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }\n//       ])\n//     );\n//   }\n// }\n\n// // ---------- AUTH ----------\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = JSON.parse(localStorage.getItem(KEY.USERS)) || [];\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// // ---------- USERS ----------\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)) || []);\n// }\n\n// export function addUser(u) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   arr.push(u);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const filtered = arr.filter(u => u.id !== id);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ---------- PROJECTS ----------\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)) || []);\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(\n//     (JSON.parse(localStorage.getItem(KEY.PROJECTS)) || []).find(x => x.id === id)\n//   );\n// }\n\n// export function addProject(p) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function deleteProject(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ---------- ISSUES ----------\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = JSON.parse(localStorage.getItem(KEY.ISSUES)) || [];\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(\n//     (JSON.parse(localStorage.getItem(KEY.ISSUES)) || []).find(x => x.id === id)\n//   );\n// }\n\n// export function createIssue(data) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// // ---------- ASSETS ----------\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)) || []);\n// }\n\n// export function addAsset(a) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n//   arr.push(a);\n//   localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n//   return Promise.resolve(a);\n// }\n\n// // ---------- NOTIFS ----------\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n//   }\n//   return Promise.resolve();\n// }\n\n// //today\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       {\n//         id: 'p1',\n//         key: 'ALPHA',\n//         name: 'Alpha',\n//         description: 'Alpha project',\n//         leads: ['u3'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       },\n//       {\n//         id: 'p2',\n//         key: 'BETA',\n//         name: 'Beta',\n//         description: 'Beta project',\n//         leads: ['u2'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       {\n//         id: 'i1',\n//         projectId: 'p1',\n//         title: 'Setup repo',\n//         status: 'todo',\n//         priority: 'P2',\n//         assignee: 'u2',\n//         type: 'Task',\n//         storyPoints: 3,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i2',\n//         projectId: 'p1',\n//         title: 'Login bug',\n//         status: 'inprogress',\n//         priority: 'P1',\n//         assignee: 'u2',\n//         type: 'Bug',\n//         storyPoints: 1,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i3',\n//         projectId: 'p2',\n//         title: 'OAuth',\n//         status: 'done',\n//         priority: 'P3',\n//         assignee: 'u3',\n//         type: 'Story',\n//         storyPoints: 5,\n//         createdAt: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(\n//       KEY.ASSETS,\n//       JSON.stringify([\n//         { id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }\n//       ])\n//     );\n//   }\n\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(\n//       KEY.NOTIFS,\n//       JSON.stringify([\n//         { id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }\n//       ])\n//     );\n//   }\n// }\n\n// // ---------- HELPERS ----------\n// function safeParse(key) {\n//   try {\n//     const raw = localStorage.getItem(key);\n//     const parsed = raw ? JSON.parse(raw) : [];\n//     return Array.isArray(parsed) ? parsed : [];\n//   } catch {\n//     return [];\n//   }\n// }\n\n// function save(key, arr) {\n//   localStorage.setItem(key, JSON.stringify(arr));\n// }\n\n// // ---------- AUTH ----------\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = safeParse(KEY.USERS);\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// // ---------- USERS ----------\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.USERS));\n// }\n\n// export function addUser(u) {\n//   const arr = safeParse(KEY.USERS);\n//   arr.push(u);\n//   save(KEY.USERS, arr);\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = safeParse(KEY.USERS);\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     save(KEY.USERS, arr);\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = safeParse(KEY.USERS).filter(u => u.id !== id);\n//   save(KEY.USERS, arr);\n//   return Promise.resolve(true);\n// }\n\n// // ---------- PROJECTS ----------\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.PROJECTS));\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.PROJECTS).find(x => x.id === id));\n// }\n\n// export function addProject(p) {\n//   const arr = safeParse(KEY.PROJECTS);\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   save(KEY.PROJECTS, arr);\n//   return Promise.resolve(p);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = safeParse(KEY.PROJECTS);\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     save(KEY.PROJECTS, arr);\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function deleteProject(id) {\n//   const arr = safeParse(KEY.PROJECTS).filter(p => p.id !== id);\n//   save(KEY.PROJECTS, arr);\n//   return Promise.resolve(true);\n// }\n\n// // ---------- ISSUES ----------\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = safeParse(KEY.ISSUES);\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.ISSUES).find(x => x.id === id));\n// }\n\n// export function createIssue(data) {\n//   const arr = safeParse(KEY.ISSUES);\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   save(KEY.ISSUES, arr);\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = safeParse(KEY.ISSUES);\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     save(KEY.ISSUES, arr);\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// // ---------- ASSETS ----------\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.ASSETS));\n// }\n\n// export function addAsset(a) {\n//   const arr = safeParse(KEY.ASSETS);\n//   arr.push(a);\n//   save(KEY.ASSETS, arr);\n//   return Promise.resolve(a);\n// }\n\n// // ---------- NOTIFS ----------\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = safeParse(KEY.NOTIFS);\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = safeParse(KEY.NOTIFS);\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     save(KEY.NOTIFS, arr);\n//   }\n//   return Promise.resolve();\n// }","map":{"version":3,"names":[],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/services/mockApi.js"],"sourcesContent":["\n// /*\n//   Same mock API as before but kept compact. Uses localStorage.\n//   Data shapes include accessibility-friendly fields (labels, timestamps).\n// */\n// import { v4 as uuidv4 } from 'uuid';\n// const KEY = { USER: 'tf_user_v3', USERS:'tf_users_v3', PROJECTS:'tf_projects_v3', ISSUES:'tf_issues_v3', ASSETS:'tf_assets_v3', NOTIFS:'tf_notifs_v3' };\n\n// function ensure(){\n//   if(!localStorage.getItem(KEY.USERS)){\n//     const users = [{id:'u1',name:'Admin User',email:'admin@demo.com',role:'Admin'},{id:'u2',name:'Dev Alice',email:'alice@demo.com',role:'Developer'},{id:'u3',name:'Manager Bob',email:'bob@demo.com',role:'Manager'}];\n//     localStorage.setItem(KEY.USERS,JSON.stringify(users));\n//   }\n//   if(!localStorage.getItem(KEY.PROJECTS)){\n//     const projects=[{id:'p1',key:'ALPHA',name:'Alpha',description:'Alpha project',leads:['u3']},{id:'p2',key:'BETA',name:'Beta',description:'Beta project',leads:['u2']}];\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(projects));\n//   }\n//   if(!localStorage.getItem(KEY.ISSUES)){\n//     const issues=[{id:'i1',projectId:'p1',title:'Setup repo',status:'todo',priority:'P2',assignee:'u2',type:'Task',storyPoints:3,createdAt:Date.now()},{id:'i2',projectId:'p1',title:'Login bug',status:'inprogress',priority:'P1',assignee:'u2',type:'Bug',storyPoints:1,createdAt:Date.now()},{id:'i3',projectId:'p2',title:'OAuth',status:'done',priority:'P3',assignee:'u3',type:'Story',storyPoints:5,createdAt:Date.now()}];\n//     localStorage.setItem(KEY.ISSUES,JSON.stringify(issues));\n//   }\n//   if(!localStorage.getItem(KEY.ASSETS)){ localStorage.setItem(KEY.ASSETS,JSON.stringify([{id:'a1',name:'Dev Laptop',type:'Laptop',owner:'u2',status:'active'}])); }\n//   if(!localStorage.getItem(KEY.NOTIFS)){ localStorage.setItem(KEY.NOTIFS,JSON.stringify([{id:uuidv4(),userId:'u2',text:'Assigned i1',read:false,ts:Date.now()}])); }\n// }\n\n// export function mockLogin(email,password){ ensure(); const users=JSON.parse(localStorage.getItem(KEY.USERS)); const user=users.find(u=>u.email===email)||users[0]; localStorage.setItem(KEY.USER,JSON.stringify(user)); return Promise.resolve(user); }\n// export function logout(){ localStorage.removeItem(KEY.USER); return Promise.resolve(); }\n// export function getCurrentUser(){ const s=localStorage.getItem(KEY.USER); return s?JSON.parse(s):null; }\n\n// export function listUsers(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\n// export function addUser(u){ const arr=JSON.parse(localStorage.getItem(KEY.USERS)||'[]'); arr.push(u); localStorage.setItem(KEY.USERS,JSON.stringify(arr)); return Promise.resolve(u); }\n\n// export function listProjects(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\n// export function getProject(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x=>x.id===id)); }\n// export function addProject(p){ const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]'); arr.push(p); localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr)); return Promise.resolve(p); }\n\n// export function listIssues(projectId){ ensure(); let arr=JSON.parse(localStorage.getItem(KEY.ISSUES)); if(projectId) arr=arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\n// export function getIssue(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x=>x.id===id)); }\n// export function createIssue(data){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const id='i'+Math.floor(Math.random()*100000); const issue={...data,id,createdAt:Date.now()}; arr.push(issue); localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(issue); }\n// export function updateIssue(id,patch){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(x=>x.id===id); if(idx>=0){ arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(arr[idx]); } return Promise.reject('not found'); }\n// export function moveIssue(id,status){ return updateIssue(id,{status}); }\n\n// export function listAssets(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS))); }\n// export function addAsset(a){ const arr=JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS,JSON.stringify(arr)); return Promise.resolve(a); }\n\n// export function listNotifs(userId){ ensure(); const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId?arr.filter(n=>n.userId===userId):arr); }\n// export function markNotif(id){ const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx=arr.findIndex(n=>n.id===id); if(idx>=0){ arr[idx].read=true; localStorage.setItem(KEY.NOTIFS,JSON.stringify(arr)); } return Promise.resolve(); }\n\n\n\n\n\n\n\n\n\n// import { v4 as uuidv4 } from 'uuid';\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS:'tf_users_v3',\n//   PROJECTS:'tf_projects_v3',\n//   ISSUES:'tf_issues_v3',\n//   ASSETS:'tf_assets_v3',\n//   NOTIFS:'tf_notifs_v3'\n// };\n\n// function ensure(){\n//   if(!localStorage.getItem(KEY.USERS)){\n//     const users = [\n//       {id:'u1',name:'Admin User',email:'admin@demo.com',role:'Admin'},\n//       {id:'u2',name:'Dev Alice',email:'alice@demo.com',role:'Developer'},\n//       {id:'u3',name:'Manager Bob',email:'bob@demo.com',role:'Manager'}\n//     ];\n//     localStorage.setItem(KEY.USERS,JSON.stringify(users));\n//   }\n//   if(!localStorage.getItem(KEY.PROJECTS)){\n//     const projects=[\n//       {id:'p1',key:'ALPHA',name:'Alpha',description:'Alpha project',leads:['u3'], createdAt:Date.now(), lastUpdated:Date.now()},\n//       {id:'p2',key:'BETA',name:'Beta',description:'Beta project',leads:['u2'], createdAt:Date.now(), lastUpdated:Date.now()}\n//     ];\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(projects));\n//   }\n//   if(!localStorage.getItem(KEY.ISSUES)){\n//     const issues=[\n//       {id:'i1',projectId:'p1',title:'Setup repo',status:'todo',priority:'P2',assignee:'u2',type:'Task',storyPoints:3,createdAt:Date.now()},\n//       {id:'i2',projectId:'p1',title:'Login bug',status:'inprogress',priority:'P1',assignee:'u2',type:'Bug',storyPoints:1,createdAt:Date.now()},\n//       {id:'i3',projectId:'p2',title:'OAuth',status:'done',priority:'P3',assignee:'u3',type:'Story',storyPoints:5,createdAt:Date.now()}\n//     ];\n//     localStorage.setItem(KEY.ISSUES,JSON.stringify(issues));\n//   }\n//   if(!localStorage.getItem(KEY.ASSETS)){ localStorage.setItem(KEY.ASSETS,JSON.stringify([{id:'a1',name:'Dev Laptop',type:'Laptop',owner:'u2',status:'active'}])); }\n//   if(!localStorage.getItem(KEY.NOTIFS)){ localStorage.setItem(KEY.NOTIFS,JSON.stringify([{id:uuidv4(),userId:'u2',text:'Assigned i1',read:false,ts:Date.now()}])); }\n// }\n\n// export function mockLogin(email,password){ ensure(); const users=JSON.parse(localStorage.getItem(KEY.USERS)); const user=users.find(u=>u.email===email)||users[0]; localStorage.setItem(KEY.USER,JSON.stringify(user)); return Promise.resolve(user); }\n// export function logout(){ localStorage.removeItem(KEY.USER); return Promise.resolve(); }\n// export function getCurrentUser(){ const s=localStorage.getItem(KEY.USER); return s?JSON.parse(s):null; }\n\n// export function listUsers(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\n// export function addUser(u){ const arr=JSON.parse(localStorage.getItem(KEY.USERS)||'[]'); arr.push(u); localStorage.setItem(KEY.USERS,JSON.stringify(arr)); return Promise.resolve(u); }\n\n// export function listProjects(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\n// export function getProject(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x=>x.id===id)); }\n// export function addProject(p){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// // ✅ New: delete project\n// export function deleteProject(id){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS,JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ✅ New: update project\n// export function updateProject(id, patch){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const idx=arr.findIndex(p => p.id===id);\n//   if(idx>=0){\n//     arr[idx] = {...arr[idx], ...patch, lastUpdated: Date.now()};\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function listIssues(projectId){ ensure(); let arr=JSON.parse(localStorage.getItem(KEY.ISSUES)); if(projectId) arr=arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\n// export function getIssue(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x=>x.id===id)); }\n// export function createIssue(data){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const id='i'+Math.floor(Math.random()*100000); const issue={...data,id,createdAt:Date.now()}; arr.push(issue); localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(issue); }\n// export function updateIssue(id,patch){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(x=>x.id===id); if(idx>=0){ arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES,JSON.stringify(arr[idx])); return Promise.resolve(arr[idx]); } return Promise.reject('not found'); }\n// export function moveIssue(id,status){ return updateIssue(id,{status}); }\n\n// export function listAssets(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS))); }\n// export function addAsset(a){ const arr=JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS,JSON.stringify(arr)); return Promise.resolve(a); }\n\n// export function listNotifs(userId){ ensure(); const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId?arr.filter(n=>n.userId===userId):arr); }\n// export function markNotif(id){ const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx=arr.findIndex(n=>n.id===id); if(idx>=0){ arr[idx].read=true; localStorage.setItem(KEY.NOTIFS,JSON.stringify(arr)); } return Promise.resolve(); }\n\n\n\n\n\n\n\n\n\n\n\n\n// for mounika\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       { id: 'p1', key: 'ALPHA', name: 'Alpha', description: 'Alpha project', leads: ['u3'], createdAt: Date.now(), lastUpdated: Date.now() },\n//       { id: 'p2', key: 'BETA', name: 'Beta', description: 'Beta project', leads: ['u2'], createdAt: Date.now(), lastUpdated: Date.now() }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       { id: 'i1', projectId: 'p1', title: 'Setup repo', status: 'todo', priority: 'P2', assignee: 'u2', type: 'Task', storyPoints: 3, createdAt: Date.now() },\n//       { id: 'i2', projectId: 'p1', title: 'Login bug', status: 'inprogress', priority: 'P1', assignee: 'u2', type: 'Bug', storyPoints: 1, createdAt: Date.now() },\n//       { id: 'i3', projectId: 'p2', title: 'OAuth', status: 'done', priority: 'P3', assignee: 'u3', type: 'Story', storyPoints: 5, createdAt: Date.now() }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(KEY.ASSETS, JSON.stringify([{ id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }]));\n//   }\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify([{ id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }]));\n//   }\n// }\n\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = JSON.parse(localStorage.getItem(KEY.USERS));\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)));\n// }\n\n// export function addUser(u) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   arr.push(u);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const filtered = arr.filter(u => u.id !== id);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)));\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x => x.id === id));\n// }\n\n// export function addProject(p) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// export function deleteProject(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = JSON.parse(localStorage.getItem(KEY.ISSUES));\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x => x.id === id));\n// }\n\n// export function createIssue(data) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)));\n// }\n\n// export function addAsset(a) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n//   arr.push(a);\n//   localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n//   return Promise.resolve(a);\n// }\n\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n//   }\n//   return Promise.resolve();\n// }\n\n\n\n\n\n\n\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       {\n//         id: 'p1',\n//         key: 'ALPHA',\n//         name: 'Alpha',\n//         description: 'Alpha project',\n//         leads: ['u3'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       },\n//       {\n//         id: 'p2',\n//         key: 'BETA',\n//         name: 'Beta',\n//         description: 'Beta project',\n//         leads: ['u2'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       {\n//         id: 'i1',\n//         projectId: 'p1',\n//         title: 'Setup repo',\n//         status: 'todo',\n//         priority: 'P2',\n//         assignee: 'u2',\n//         type: 'Task',\n//         storyPoints: 3,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i2',\n//         projectId: 'p1',\n//         title: 'Login bug',\n//         status: 'inprogress',\n//         priority: 'P1',\n//         assignee: 'u2',\n//         type: 'Bug',\n//         storyPoints: 1,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i3',\n//         projectId: 'p2',\n//         title: 'OAuth',\n//         status: 'done',\n//         priority: 'P3',\n//         assignee: 'u3',\n//         type: 'Story',\n//         storyPoints: 5,\n//         createdAt: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(\n//       KEY.ASSETS,\n//       JSON.stringify([\n//         { id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }\n//       ])\n//     );\n//   }\n\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(\n//       KEY.NOTIFS,\n//       JSON.stringify([\n//         { id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }\n//       ])\n//     );\n//   }\n// }\n\n// // ---------- AUTH ----------\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = JSON.parse(localStorage.getItem(KEY.USERS)) || [];\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// // ---------- USERS ----------\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)) || []);\n// }\n\n// export function addUser(u) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   arr.push(u);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const filtered = arr.filter(u => u.id !== id);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ---------- PROJECTS ----------\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)) || []);\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(\n//     (JSON.parse(localStorage.getItem(KEY.PROJECTS)) || []).find(x => x.id === id)\n//   );\n// }\n\n// export function addProject(p) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function deleteProject(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ---------- ISSUES ----------\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = JSON.parse(localStorage.getItem(KEY.ISSUES)) || [];\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(\n//     (JSON.parse(localStorage.getItem(KEY.ISSUES)) || []).find(x => x.id === id)\n//   );\n// }\n\n// export function createIssue(data) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// // ---------- ASSETS ----------\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)) || []);\n// }\n\n// export function addAsset(a) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n//   arr.push(a);\n//   localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n//   return Promise.resolve(a);\n// }\n\n// // ---------- NOTIFS ----------\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n//   }\n//   return Promise.resolve();\n// }\n\n\n\n\n\n\n\n// //today\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       {\n//         id: 'p1',\n//         key: 'ALPHA',\n//         name: 'Alpha',\n//         description: 'Alpha project',\n//         leads: ['u3'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       },\n//       {\n//         id: 'p2',\n//         key: 'BETA',\n//         name: 'Beta',\n//         description: 'Beta project',\n//         leads: ['u2'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       {\n//         id: 'i1',\n//         projectId: 'p1',\n//         title: 'Setup repo',\n//         status: 'todo',\n//         priority: 'P2',\n//         assignee: 'u2',\n//         type: 'Task',\n//         storyPoints: 3,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i2',\n//         projectId: 'p1',\n//         title: 'Login bug',\n//         status: 'inprogress',\n//         priority: 'P1',\n//         assignee: 'u2',\n//         type: 'Bug',\n//         storyPoints: 1,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i3',\n//         projectId: 'p2',\n//         title: 'OAuth',\n//         status: 'done',\n//         priority: 'P3',\n//         assignee: 'u3',\n//         type: 'Story',\n//         storyPoints: 5,\n//         createdAt: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(\n//       KEY.ASSETS,\n//       JSON.stringify([\n//         { id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }\n//       ])\n//     );\n//   }\n\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(\n//       KEY.NOTIFS,\n//       JSON.stringify([\n//         { id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }\n//       ])\n//     );\n//   }\n// }\n\n// // ---------- HELPERS ----------\n// function safeParse(key) {\n//   try {\n//     const raw = localStorage.getItem(key);\n//     const parsed = raw ? JSON.parse(raw) : [];\n//     return Array.isArray(parsed) ? parsed : [];\n//   } catch {\n//     return [];\n//   }\n// }\n\n// function save(key, arr) {\n//   localStorage.setItem(key, JSON.stringify(arr));\n// }\n\n// // ---------- AUTH ----------\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = safeParse(KEY.USERS);\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// // ---------- USERS ----------\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.USERS));\n// }\n\n// export function addUser(u) {\n//   const arr = safeParse(KEY.USERS);\n//   arr.push(u);\n//   save(KEY.USERS, arr);\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = safeParse(KEY.USERS);\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     save(KEY.USERS, arr);\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = safeParse(KEY.USERS).filter(u => u.id !== id);\n//   save(KEY.USERS, arr);\n//   return Promise.resolve(true);\n// }\n\n// // ---------- PROJECTS ----------\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.PROJECTS));\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.PROJECTS).find(x => x.id === id));\n// }\n\n// export function addProject(p) {\n//   const arr = safeParse(KEY.PROJECTS);\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   save(KEY.PROJECTS, arr);\n//   return Promise.resolve(p);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = safeParse(KEY.PROJECTS);\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     save(KEY.PROJECTS, arr);\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function deleteProject(id) {\n//   const arr = safeParse(KEY.PROJECTS).filter(p => p.id !== id);\n//   save(KEY.PROJECTS, arr);\n//   return Promise.resolve(true);\n// }\n\n// // ---------- ISSUES ----------\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = safeParse(KEY.ISSUES);\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.ISSUES).find(x => x.id === id));\n// }\n\n// export function createIssue(data) {\n//   const arr = safeParse(KEY.ISSUES);\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   save(KEY.ISSUES, arr);\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = safeParse(KEY.ISSUES);\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     save(KEY.ISSUES, arr);\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// // ---------- ASSETS ----------\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.ASSETS));\n// }\n\n// export function addAsset(a) {\n//   const arr = safeParse(KEY.ASSETS);\n//   arr.push(a);\n//   save(KEY.ASSETS, arr);\n//   return Promise.resolve(a);\n// }\n\n// // ---------- NOTIFS ----------\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = safeParse(KEY.NOTIFS);\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = safeParse(KEY.NOTIFS);\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     save(KEY.NOTIFS, arr);\n//   }\n//   return Promise.resolve();\n// }\n\n\n\n\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAaignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vmoun\\\\OneDrive\\\\Desktop\\\\newtieckettool\\\\src\\\\components\\\\boards\\\\KanbanBoard.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// /*\n//   Enhancements:\n//   - Keyboard-only moves: when a card is focused, user can press ArrowLeft/ArrowRight to move between columns.\n//   - Buttons for accessibility to move left/right.\n//   - Export/Import CSV for issues in the top header.\n// */\n\n// const STATUSES = ['todo','inprogress','review','done'];\n\n// function issuesToCSV(issues) {\n//   const headers = ['id','projectId','title','status','priority','assignee','type','storyPoints','createdAt'];\n//   const rows = issues.map(i => headers.map(h => `\"${(i[h]||'').toString().replace(/\"/g,'\"\"')}\"`).join(','));\n//   return [headers.join(','), ...rows].join('\\n');\n// }\n\n// function csvToIssues(csv) {\n//   const lines = csv.split(/\\r?\\n/).filter(Boolean);\n//   if(lines.length < 2) return [];\n//   const headers = lines[0].split(',').map(h => h.replace(/(^\"|\"$)/g,''));\n//   const res = [];\n//   for(let i=1;i<lines.length;i++){\n//     const cols = lines[i].split(',').map(c => c.replace(/(^\"|\"$)/g,''));\n//     const obj = {};\n//     headers.forEach((h,idx)=> obj[h]=cols[idx]||'');\n//     res.push(obj);\n//   }\n//   return res;\n// }\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const refresh = async ()=> setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n//   const onDragStart = (e,id) => { e.dataTransfer.setData('text/plain', id); };\n\n//   const byStatus = s => issues.filter(i=>i.status===s);\n\n//   // keyboard move handler: ArrowLeft/ArrowRight move between columns\n//   const handleKey = async (e, issue) => {\n//     if(e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n//       e.preventDefault();\n//       const idx = STATUSES.indexOf(issue.status);\n//       let targetIdx = idx + (e.key === 'ArrowRight' ? 1 : -1);\n//       targetIdx = Math.max(0, Math.min(STATUSES.length-1, targetIdx));\n//       const target = STATUSES[targetIdx];\n//       if(target !== issue.status) {\n//         await moveIssue(issue.id, target);\n//         refresh();\n//       }\n//     }\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx-1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length-1, idx+1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n\n//   // Export CSV\n//   const exportCSV = () => {\n//     const csv = issuesToCSV(issues);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url; a.download = `issues_export_${projectId||'all'}.csv`; a.click();\n//     URL.revokeObjectURL(url);\n//   };\n\n//   // Import CSV\n//   const importCSV = (e) => {\n//     const file = e.target.files && e.target.files[0];\n//     if(!file) return;\n//     const reader = new FileReader();\n//     reader.onload = async (ev) => {\n//       try {\n//         const text = ev.target.result;\n//         const imported = csvToIssues(text);\n//         // Merge with existing issues: simple append with new IDs\n//         for(const row of imported){\n//           // only minimal fields handled; createIssue is not imported here to avoid API mismatch\n//           // createIssue would be used for full import; for demo we push to localStorage directly\n//           // but here we attempt to call moveIssue or update if id exists. fallback: ignore.\n//         }\n//         alert('Import parsed ' + imported.length + ' rows. For full import to central DB, use backend import.');\n//       } catch(err) {\n//         alert('CSV parse error: ' + err.message);\n//       }\n//     };\n//     reader.readAsText(file);\n//     // reset file input\n//     e.target.value = '';\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:12}}>\n//         <h2 style={{margin:0}}>Kanban Board {projectId?`- ${projectId}`:''}</h2>\n//         <div style={{display:'flex',gap:8,alignItems:'center'}}>\n//           <button className=\"btn-ghost\" onClick={exportCSV} aria-label=\"Export issues as CSV\">Export CSV</button>\n//           <label className=\"btn-ghost\" style={{cursor:'pointer'}}>\n//             Import CSV\n//             <input ref={fileRef} type=\"file\" accept=\".csv,text/csv\" onChange={importCSV} style={{display:'none'}} aria-hidden=\"true\"/>\n//           </label>\n//           <button className=\"btn\" onClick={()=>window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s=>(\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e=>e.preventDefault()} onDrop={e=>onDrop(e,s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i=>(\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e=>onDragStart(e,i.id)}\n//                 onKeyDown={(e)=>handleKey(e,i)}\n//                 aria-describedby={`desc-${i.id}`}>\n//                 <div style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{display:'flex',gap:6}}>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveLeft(i.id); }} aria-label={`Move ${i.title} left`}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveRight(i.id); }} aria-label={`Move ${i.title} right`}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div id={`desc-${i.id}`} className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { useProjects } from '../../context/ProjectContext';\n\n// const STATUSES = ['todo', 'inprogress', 'review', 'done'];\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const { projects } = useProjects();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const refresh = async () => setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n\n//   const onDragStart = (e, id) => {\n//     e.dataTransfer.setData('text/plain', id);\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx - 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length - 1, idx + 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const byStatus = (s) => issues.filter(i => i.status === s);\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n//         <h2 style={{ margin: 0 }}>Kanban Board {projectId ? `- ${projectId}` : ''}</h2>\n//         <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\n//           <button className=\"btn\" onClick={() => window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s => (\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e => e.preventDefault()} onDrop={e => onDrop(e, s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i => (\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e => onDragStart(e, i.id)}>\n//                 <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{ display: 'flex', gap: 6 }}>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveLeft(i.id); }}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveRight(i.id); }}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n\n//       <div style={{ marginTop: 20 }}>\n//         <h3>📋 Projects from Timeline</h3>\n//         <ul>\n//           {projects.map(p => (\n//             <li key={p.id}>\n//               <strong>{p.text}</strong> — Starts: {p.start_date}, Duration: {p.duration} days\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const STATUSES = [\n//   'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n// ];\n\n// // Mock issues with two epics swimlanes for demo\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '' },\n//   { id: 'i2', epic: 'p1', epicName: 'Frontend', status: 'inprogress', type: 'Bug', title: 'Login bug', assignee: 'u2', storyPoints: 1, labels: [], dueDate: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n\n// const createIssueAPI = async (issue) => {\n//   await simulateApiDelay();\n//   mockIssues.push(issue);\n// };\n\n// const getSwimlanes = issues =>\n//   [...new Set(issues.map(i => i.epic || i.projectId))].map(id => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === id);\n//     const epicTitle = epicIssues.find(i => i.epicName)?.epicName || id;\n//     return {\n//       id,\n//       title: epicTitle,\n//       issues: epicIssues\n//     };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n\n//   useEffect(() => {\n//     const fetchIssues = async () => {\n//       try {\n//         const data = await listIssues(projectId);\n//         setIssues(data);\n//         const lanes = getSwimlanes(data);\n//         const initialOpen = {};\n//         const initialTitles = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//       } catch (err) {\n//         console.error('Failed to load issues:', err);\n//       }\n//     };\n//     fetchIssues();\n//   }, [projectId]);\n\n//   const toggleSwimlane = (id) => {\n//     setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   };\n\n//   const onTitleChange = (id, value) => {\n//     setCustomTitles(prev => ({ ...prev, [id]: value }));\n//   };\n\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => {\n//     e.dataTransfer.setData('text/plain', issueId);\n//   };\n\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) {\n//       console.error('Error moving issue:', err);\n//     }\n//   };\n\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => {\n//     setCreateLaneId(laneId);\n//     setNewTaskText('');\n//     setNewTaskType('Task');\n//   };\n\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) {\n//       alert('Task title is required');\n//       return;\n//     }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//       setNewTaskText('');\n//       setNewTaskType('Task');\n//     } catch (err) {\n//       console.error('Error creating issue:', err);\n//     }\n//   };\n\n//   const handleCreateCancel = () => {\n//     setCreateLaneId(null);\n//     setNewTaskText('');\n//     setNewTaskType('Task');\n//   };\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {getSwimlanes(issues).map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button\n//                 className=\"swimlane-toggle\"\n//                 aria-label={isOpen ? `Collapse swimlane` : `Expand swimlane`}\n//                 aria-expanded={isOpen}\n//                 onClick={() => toggleSwimlane(lane.id)}\n//               >\n//                 {isOpen ? '▼' : '▶'}\n//               </button>\n//               <span className=\"swimlane-icon\" aria-hidden=\"true\" style={{ marginRight: 6 }}>⚡</span>\n//               <input\n//                 className=\"swimlane-title-input\"\n//                 value={customTitles[lane.id] || ''}\n//                 onChange={e => onTitleChange(lane.id, e.target.value)}\n//                 aria-label={`Edit epic title for swimlane ${lane.id}`}\n//                 spellCheck=\"false\"\n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\" id={`swimlane-content-${lane.id}`}>\n//                 {STATUSES.map(status => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div\n//                       className=\"kanban-column\"\n//                       key={status}\n//                       onDragOver={onDragOver}\n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span>{status.replace(/_/g, ' ').toUpperCase()}</span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea\n//                                 rows={2}\n//                                 className=\"create-input\"\n//                                 placeholder=\"What needs to be done?\"\n//                                 value={newTaskText}\n//                                 onChange={e => setNewTaskText(e.target.value)}\n//                               />\n//                               <div className=\"create-actions\">\n//                                 <select\n//                                   value={newTaskType}\n//                                   onChange={e => setNewTaskType(e.target.value)}\n//                                   className=\"create-select\"\n//                                 >\n//                                   <option value=\"Task\">Task</option>\n//                                   <option value=\"Subtask\">Subtask</option>\n//                                   <option value=\"Bug\">Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={handleCreateCancel}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (\n//                             <span onClick={() => handleCreateClick(lane.id)} style={{ cursor: 'pointer' }}>+ Create</span>\n//                           )\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => (\n//                         <div\n//                           className=\"card-item\"\n//                           tabIndex={0}\n//                           key={issue.id}\n//                           draggable\n//                           onDragStart={e => onDragStart(e, issue.id)}\n//                         >\n//                           <div className=\"card-top\">\n//                             <span className=\"card-tag\">{issue.type}</span>\n//                             <span className=\"card-id\">{issue.id}</span>\n//                             {issue.labels?.map(l => (\n//                               <span key={l} className=\"card-label\">{l}</span>\n//                             ))}\n//                           </div>\n//                           <div className=\"card-title\">{issue.title}</div>\n//                           <div className=\"card-details\">\n//                             {issue.assignee && <span className=\"card-assignee\">{issue.assignee}</span>}\n//                             <span className=\"card-storypoints\">{issue.storyPoints} pts</span>\n//                             {issue.dueDate && <span className=\"card-due\">{issue.dueDate}</span>}\n//                           </div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n//       <style>{`\n//         .board-wrap { padding: 0 12px; }\n//         .swimlane { margin-bottom: 16px; }\n//         .swimlane-header {\n//           display: flex; align-items: center; gap: 8px; font-size: 1.2em;\n//           font-weight: 500; border-bottom: 1px solid #ececec; padding: 8px 0;\n//         }\n//         .swimlane-toggle {\n//           cursor: pointer;\n//           background: transparent;\n//           border: none;\n//           font-size: 1.2em;\n//           line-height: 1;\n//           padding: 0 6px 0 0;\n//         }\n//         .swimlane-icon { color: #b39ddb; }\n//         .swimlane-title-input {\n//           font-size: 1.2em;\n//           font-weight: 600;\n//           border: none;\n//           background: transparent;\n//           max-width: 300px;\n//           outline: none;\n//         }\n//         .swimlane-count {\n//           color: #888;\n//           margin-left: auto;\n//         }\n//         .kanban-row {\n//           display: flex;\n//           gap: 8px;\n//           min-height: 100px;\n//         }\n//         .kanban-column {\n//           background: #fafafe;\n//           flex: 1;\n//           min-width: 150px;\n//           padding: 10px;\n//           border-radius: 6px;\n//           height: 260px;\n//           box-shadow: 0 1px 3px #efefef;\n//         }\n//         .col-header {\n//           font-weight: 500;\n//           color: #555;\n//           margin-bottom: 10px;\n//           display: flex;\n//           align-items: center;\n//           gap: 8px;\n//         }\n//         .col-count {\n//           background: #e0e0e0;\n//           border-radius: 6px;\n//           padding: 1px 7px;\n//           font-size: 0.9em;\n//           color: #555;\n//         }\n//         .col-create {\n//           color: #499ef8;\n//           font-weight: bold;\n//           margin-bottom: 10px;\n//         }\n//         .create-card {\n//           box-sizing: border-box;\n//           background: #fff;\n//           border: 2px solid #57aaff;\n//           border-radius: 6px;\n//           padding: 12px;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 8px;\n//         }\n//         .create-input {\n//           border: none;\n//           outline: none;\n//           resize: none;\n//           font-size: 1rem;\n//           width: 100%;\n//         }\n//         .create-actions {\n//           display: flex;\n//           align-items: center;\n//           gap: 12px;\n//         }\n//         .create-select {\n//           display: inline-block;\n//           font-size: 1rem;\n//           border-radius: 4px;\n//           border: 1px solid #bbb;\n//         }\n//         .create-btn {\n//           background: #57aaff;\n//           color: #fff;\n//           border: none;\n//           border-radius: 4px;\n//           font-size: 1.2em;\n//           padding: 5px 12px;\n//           cursor: pointer;\n//         }\n//         .create-btn:hover {\n//           background: #3183c2;\n//         }\n//         .card-item {\n//           background: #fff;\n//           border-radius: 6px;\n//           margin-bottom: 8px;\n//           padding: 10px 12px;\n//           box-shadow: 0 1px 4px #e3e3e3;\n//           border-left: 5px solid #b39ddb;\n//         }\n//         .card-top {\n//           display: flex;\n//           gap: 8px;\n//           align-items: center;\n//         }\n//         .card-tag {\n//           background: #e5d8fb;\n//           color: #9371db;\n//           padding: 2px 6px;\n//           border-radius: 6px;\n//           font-size: 0.8em;\n//         }\n//         .card-id {\n//           margin-left: 6px;\n//           color: #888;\n//           font-size: 0.9em;\n//         }\n//         .card-label {\n//           background: #f8d7da;\n//           color: #b71c1c;\n//           margin-left: 4px;\n//           padding: 1px 6px;\n//           border-radius: 6px;\n//           font-size: 0.8em;\n//         }\n//         .card-title {\n//           font-weight: 600;\n//           margin: 8px 0;\n//         }\n//         .card-details {\n//           display: flex;\n//           gap: 8px;\n//           font-size: 0.85em;\n//           color: #555;\n//         }\n//         .card-assignee {\n//           background: #e3f2fd;\n//           color: #1565c0;\n//           padding: 1px 7px;\n//           border-radius: 6px;\n//         }\n//         .card-storypoints {\n//           background: #ffe0b2;\n//           color: #f57c00;\n//           border-radius: 6px;\n//           padding: 1px 7px;\n//         }\n//         .card-due {\n//           background: #fce4ec;\n//           color: #d81b60;\n//           border-radius: 6px;\n//           padding: 1px 7px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n\n//new one \n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const STATUSES = [\n//   'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n// ];\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i2', epic: 'p1', epicName: 'Frontend', status: 'inprogress', type: 'Bug', title: 'Login bug', assignee: 'u3', storyPoints: 1, labels: [], dueDate: '2025-09-28', reporter: 'qa-team', priority: 'Medium', startDate: '2025-09-16', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n\n// const createIssueAPI = async (issue) => {\n//   await simulateApiDelay();\n//   mockIssues.push(issue);\n// };\n\n// const deleteIssueAPI = async (issueId) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === issueId);\n//   if (idx > -1) mockIssues.splice(idx, 1);\n// };\n\n// const updateIssueAPI = async (updatedIssue) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === updatedIssue.id);\n//   if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue };\n// };\n\n// const getSwimlanes = issues =>\n//   [...new Set(issues.map(i => i.epic || i.projectId))].map(id => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === id);\n//     const epicTitle = epicIssues.find(i => i.epicName)?.epicName || id;\n//     return { id, title: epicTitle, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n\n//   useEffect(() => {\n//     const fetchIssues = async () => {\n//       try {\n//         const data = await listIssues(projectId);\n//         setIssues(data);\n//         const lanes = getSwimlanes(data);\n//         const initialOpen = {};\n//         const initialTitles = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//       } catch (err) {\n//         console.error('Failed to load issues:', err);\n//       }\n//     };\n//     fetchIssues();\n//   }, [projectId]);\n\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const onTitleChange = (id, value) => setCustomTitles(prev => ({ ...prev, [id]: value }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) {\n//       console.error('Error moving issue:', err);\n//     }\n//   };\n\n//   const onDragOver = e => e.preventDefault();\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error('Error creating issue:', err); }\n//   };\n\n//   const handleDelete = async () => {\n//     if (!selectedIssue) return;\n//     await deleteIssueAPI(selectedIssue.id);\n//     const refreshed = await listIssues(projectId);\n//     setIssues(refreshed);\n//     setSelectedIssue(null);\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {getSwimlanes(issues).map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                 {isOpen ? '▼' : '▶'}\n//               </button>\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input className=\"swimlane-title-input\" value={customTitles[lane.id] || ''} onChange={e => onTitleChange(lane.id, e.target.value)} />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\">\n//                 {STATUSES.map(status => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div className=\"kanban-column\" key={status} onDragOver={onDragOver} onDrop={e => onDrop(e, status, lane.id)}>\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => (\n//                         <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                           <div className=\"card-top\">\n//                             <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                             <span className=\"card-id\">{issue.id}</span>\n//                           </div>\n//                           <div className=\"card-title\">{issue.title}</div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className=\"modal\" onClick={e => e.stopPropagation()}>\n//             <h2 style={{ gridColumn: \"span 3\" }}>{editIssue.epicName}\n//               <button className=\"modal-delete-btn\" onClick={handleDelete}>🗑</button>\n//             </h2>\n\n//             <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Status</label><input disabled value={editIssue.status} /></div>\n//             <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//             <div className=\"modal-field\"><label>Priority</label>\n//               <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                 <option>Low</option><option>Medium</option><option>High</option>\n//               </select>\n//             </div>\n//             <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\" }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       <style>{`\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f8f9fa;\n//           margin: 0;\n//           padding: 20px;\n//         }\n\n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n\n//         .swimlane {\n//           background: white;\n//           border-radius: 12px;\n//           margin-bottom: 24px;\n//           box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n//           overflow: hidden;\n//         }\n\n//         .swimlane-header {\n//           display: flex;\n//           align-items: center;\n//           padding: 16px 20px;\n//           background: #f8f9fa;\n//           border-bottom: 1px solid #e9ecef;\n//           font-weight: 600;\n//           font-size: 16px;\n//         }\n\n//         .swimlane-toggle {\n//           background: none;\n//           border: none;\n//           font-size: 14px;\n//           margin-right: 12px;\n//           cursor: pointer;\n//           color: #6c757d;\n//         }\n\n//         .swimlane-icon {\n//           margin-right: 12px;\n//           font-size: 18px;\n//         }\n\n//         .swimlane-title-input {\n//           border: 1px solid #e9ecef;\n//           border-radius: 6px;\n//           padding: 6px 12px;\n//           font-size: 16px;\n//           font-weight: 600;\n//           background: white;\n//           margin-right: 12px;\n//           min-width: 200px;\n//         }\n\n//         .swimlane-count {\n//           color: #6c757d;\n//           font-size: 14px;\n//           font-weight: normal;\n//         }\n\n//         .kanban-row {\n//           display: flex;\n//           padding: 20px;\n//           gap: 16px;\n//           overflow-x: auto;\n//           min-height: 400px;\n//         }\n\n//         .kanban-column {\n//           flex: 0 0 280px;\n//           background: #f8f9fa;\n//           border-radius: 8px;\n//           padding: 16px;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 12px;\n//         }\n\n//         .col-header {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 8px;\n//         }\n\n//         .col-title {\n//           font-weight: 600;\n//           font-size: 14px;\n//           color: #495057;\n//           text-transform: uppercase;\n//           letter-spacing: 0.5px;\n//         }\n\n//         .col-count {\n//           background: #e9ecef;\n//           color: #495057;\n//           border-radius: 12px;\n//           padding: 2px 8px;\n//           font-size: 12px;\n//           font-weight: 600;\n//         }\n\n//         .col-create {\n//           margin-bottom: 8px;\n//         }\n\n//         .create-link {\n//           color: #6c757d;\n//           cursor: pointer;\n//           font-size: 14px;\n//           padding: 8px;\n//           display: block;\n//           border-radius: 4px;\n//           transition: background-color 0.2s;\n//         }\n\n//         .create-link:hover {\n//           background: #e9ecef;\n//         }\n\n//         .create-card {\n//           background: white;\n//           border: 1px solid #e9ecef;\n//           border-radius: 6px;\n//           padding: 12px;\n//         }\n\n//         .create-input {\n//           width: 100%;\n//           border: 1px solid #e9ecef;\n//           border-radius: 4px;\n//           padding: 8px;\n//           font-size: 14px;\n//           resize: vertical;\n//           margin-bottom: 8px;\n//         }\n\n//         .create-actions {\n//           display: flex;\n//           gap: 8px;\n//           align-items: center;\n//         }\n\n//         .create-select {\n//           flex: 1;\n//           border: 1px solid #e9ecef;\n//           border-radius: 4px;\n//           padding: 6px;\n//           font-size: 12px;\n//         }\n\n//         .create-btn {\n//           background: #f8f9fa;\n//           border: 1px solid #e9ecef;\n//           border-radius: 4px;\n//           padding: 6px;\n//           cursor: pointer;\n//           font-size: 12px;\n//         }\n\n//         .card-item {\n//           background: white;\n//           border: 1px solid #e9ecef;\n//           border-radius: 8px;\n//           padding: 16px;\n//           cursor: pointer;\n//           transition: all 0.2s;\n//           box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n//         }\n\n//         .card-item:hover {\n//           box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n//           transform: translateY(-1px);\n//         }\n\n//         .card-item:active {\n//           transform: translateY(0);\n//         }\n\n//         .card-top {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 8px;\n//         }\n\n//         .card-tag {\n//           font-size: 11px;\n//           font-weight: 600;\n//           padding: 2px 6px;\n//           border-radius: 4px;\n//           text-transform: uppercase;\n//         }\n\n//         .card-tag-task {\n//           background: #e3f2fd;\n//           color: #1976d2;\n//         }\n\n//         .card-tag-bug {\n//           background: #ffebee;\n//           color: #d32f2f;\n//         }\n\n//         .card-tag-subtask {\n//           background: #f3e5f5;\n//           color: #7b1fa2;\n//         }\n\n//         .card-id {\n//           color: #6c757d;\n//           font-size: 11px;\n//           font-family: monospace;\n//         }\n\n//         .card-title {\n//           font-size: 14px;\n//           line-height: 1.4;\n//           color: #495057;\n//           font-weight: 500;\n//         }\n\n//         .modal-overlay {\n//           position: fixed;\n//           top: 0;\n//           left: 0;\n//           right: 0;\n//           bottom: 0;\n//           background: rgba(0, 0, 0, 0.6);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//           padding: 20px;\n//         }\n\n//         .modal {\n//           background: white;\n//           border-radius: 12px;\n//           padding: 32px;\n//           display: grid;\n//           grid-template-columns: repeat(3, 1fr);\n//           gap: 20px;\n//           max-width: 1000px;\n//           width: 100%;\n//           max-height: 90vh;\n//           overflow-y: auto;\n//           box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n//         }\n\n//         .modal h2 {\n//           margin: 0 0 20px 0;\n//           font-size: 24px;\n//           font-weight: 700;\n//           color: #495057;\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//         }\n\n//         .modal-delete-btn {\n//           background: #dc3545;\n//           border: none;\n//           border-radius: 6px;\n//           padding: 8px 12px;\n//           color: white;\n//           cursor: pointer;\n//           font-size: 14px;\n//         }\n\n//         .modal-field {\n//           display: flex;\n//           flex-direction: column;\n//           gap: 6px;\n//         }\n\n//         .modal-field label {\n//           font-size: 14px;\n//           font-weight: 600;\n//           color: #495057;\n//         }\n\n//         .modal-field input, .modal-field textarea, .modal-field select {\n//           border: 1px solid #e9ecef;\n//           border-radius: 6px;\n//           padding: 10px;\n//           font-size: 14px;\n//           background: white;\n//           transition: border-color 0.2s;\n//         }\n\n//         .modal-field input:focus, .modal-field textarea:focus, .modal-field select:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n\n//         .modal-field input:disabled {\n//           background: #f8f9fa;\n//           color: #6c757d;\n//         }\n\n//         .modal-actions {\n//           display: flex;\n//           justify-content: flex-end;\n//           gap: 12px;\n//           margin-top: 20px;\n//         }\n\n//         .btn-reset {\n//           background: #6c757d;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//         }\n\n//         .btn-reset:hover {\n//           background: #5a6268;\n//         }\n\n//         .btn-save {\n//           background: #1976d2;\n//           border: none;\n//           color: white;\n//           padding: 10px 20px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//         }\n\n//         .btn-save:hover {\n//           background: #1565c0;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n\n//perfect one\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STATUSES = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\nconst mockIssues = [{\n  id: 'i1',\n  epic: 'p1',\n  epicName: 'Frontend',\n  status: 'todo',\n  type: 'Task',\n  title: 'Setup repo',\n  assignee: 'u2',\n  storyPoints: 3,\n  labels: [],\n  dueDate: '2025-09-30',\n  reporter: 'admin',\n  priority: 'High',\n  startDate: '2025-09-15',\n  description: '',\n  subtasks: '',\n  comments: ''\n}, {\n  id: 'i2',\n  epic: 'p1',\n  epicName: 'Frontend',\n  status: 'inprogress',\n  type: 'Bug',\n  title: 'Login bug',\n  assignee: 'u3',\n  storyPoints: 1,\n  labels: [],\n  dueDate: '2025-09-28',\n  reporter: 'qa-team',\n  priority: 'Medium',\n  startDate: '2025-09-16',\n  description: '',\n  subtasks: '',\n  comments: ''\n}, {\n  id: 'i3',\n  epic: 'p2',\n  epicName: 'Middleware',\n  status: 'todo',\n  type: 'Subtask',\n  title: 'API integration',\n  assignee: 'u4',\n  storyPoints: 2,\n  labels: [],\n  dueDate: '',\n  reporter: 'lead-dev',\n  priority: 'Low',\n  startDate: '2025-09-18',\n  description: '',\n  subtasks: '',\n  comments: ''\n}];\nconst simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\nconst listIssues = async projectId => {\n  await simulateApiDelay();\n  return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n};\nconst moveIssue = async (issueId, status) => {\n  await simulateApiDelay();\n  const issue = mockIssues.find(i => i.id === issueId);\n  if (!issue) throw new Error('Issue not found');\n  issue.status = status;\n};\nconst createIssueAPI = async issue => {\n  await simulateApiDelay();\n  mockIssues.push(issue);\n};\nconst deleteIssueAPI = async issueId => {\n  await simulateApiDelay();\n  const idx = mockIssues.findIndex(i => i.id === issueId);\n  if (idx > -1) mockIssues.splice(idx, 1);\n};\nconst updateIssueAPI = async updatedIssue => {\n  await simulateApiDelay();\n  const idx = mockIssues.findIndex(i => i.id === updatedIssue.id);\n  if (idx > -1) mockIssues[idx] = {\n    ...mockIssues[idx],\n    ...updatedIssue\n  };\n};\nconst getSwimlanes = issues => [...new Set(issues.map(i => i.epic || i.projectId))].map(id => {\n  var _epicIssues$find;\n  const epicIssues = issues.filter(i => (i.epic || i.projectId) === id);\n  const epicTitle = ((_epicIssues$find = epicIssues.find(i => i.epicName)) === null || _epicIssues$find === void 0 ? void 0 : _epicIssues$find.epicName) || id;\n  return {\n    id,\n    title: epicTitle,\n    issues: epicIssues\n  };\n});\nexport default function KanbanBoard() {\n  _s();\n  const {\n    projectId\n  } = useParams();\n  const [issues, setIssues] = useState([]);\n  const [openSwimlanes, setOpenSwimlanes] = useState({});\n  const [customTitles, setCustomTitles] = useState({});\n  const [createLaneId, setCreateLaneId] = useState(null);\n  const [newTaskText, setNewTaskText] = useState('');\n  const [newTaskType, setNewTaskType] = useState('Task');\n  const [selectedIssue, setSelectedIssue] = useState(null);\n  const [editIssue, setEditIssue] = useState(null);\n  useEffect(() => {\n    const fetchIssues = async () => {\n      try {\n        const data = await listIssues(projectId);\n        setIssues(data);\n        const lanes = getSwimlanes(data);\n        const initialOpen = {};\n        const initialTitles = {};\n        lanes.forEach(lane => {\n          initialOpen[lane.id] = true;\n          initialTitles[lane.id] = lane.title;\n        });\n        setOpenSwimlanes(initialOpen);\n        setCustomTitles(initialTitles);\n      } catch (err) {\n        console.error('Failed to load issues:', err);\n      }\n    };\n    fetchIssues();\n  }, [projectId]);\n  const toggleSwimlane = id => setOpenSwimlanes(prev => ({\n    ...prev,\n    [id]: !prev[id]\n  }));\n  const onTitleChange = (id, value) => setCustomTitles(prev => ({\n    ...prev,\n    [id]: value\n  }));\n  const byStatus = (collection, status) => collection.filter(i => i.status === status);\n  const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n  const onDrop = async (e, targetStatus, swimlaneId) => {\n    e.preventDefault();\n    try {\n      const issueId = e.dataTransfer.getData('text/plain');\n      const issue = issues.find(i => i.id === issueId);\n      const srcLaneId = issue.epic || issue.projectId;\n      if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n        await moveIssue(issueId, targetStatus);\n        const refreshed = await listIssues(projectId);\n        setIssues(refreshed);\n      }\n    } catch (err) {\n      console.error('Error moving issue:', err);\n    }\n  };\n  const onDragOver = e => e.preventDefault();\n  const handleCreateClick = laneId => {\n    setCreateLaneId(laneId);\n    setNewTaskText('');\n    setNewTaskType('Task');\n  };\n  const handleCreateSubmit = async lane => {\n    if (!newTaskText.trim()) {\n      alert('Task title is required');\n      return;\n    }\n    const newIssue = {\n      id: Math.random().toString(36).slice(2),\n      epic: lane.id,\n      projectId: lane.id,\n      epicName: lane.title,\n      title: newTaskText,\n      status: 'backlog',\n      assignee: '',\n      type: newTaskType,\n      storyPoints: '',\n      labels: [],\n      dueDate: '',\n      reporter: 'system',\n      priority: 'Medium',\n      startDate: new Date().toISOString().split('T')[0],\n      description: '',\n      subtasks: '',\n      comments: ''\n    };\n    try {\n      await createIssueAPI(newIssue);\n      const refreshed = await listIssues(projectId);\n      setIssues(refreshed);\n      setCreateLaneId(null);\n    } catch (err) {\n      console.error('Error creating issue:', err);\n    }\n  };\n  const handleDelete = async () => {\n    if (!selectedIssue) return;\n    await deleteIssueAPI(selectedIssue.id);\n    const refreshed = await listIssues(projectId);\n    setIssues(refreshed);\n    setSelectedIssue(null);\n  };\n  const handleOpenModal = issue => {\n    setSelectedIssue(issue);\n    setEditIssue({\n      ...issue\n    });\n  };\n  const handleUpdateField = (field, value) => {\n    setEditIssue(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  const handleSave = async () => {\n    await updateIssueAPI(editIssue);\n    const refreshed = await listIssues(projectId);\n    setIssues(refreshed);\n    setSelectedIssue(null);\n    setEditIssue(null);\n  };\n  const handleReset = () => {\n    setEditIssue({\n      ...selectedIssue\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-wrap\",\n    children: [getSwimlanes(issues).map(lane => {\n      const isOpen = openSwimlanes[lane.id];\n      return /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"swimlane\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"swimlane-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"swimlane-toggle\",\n            onClick: () => toggleSwimlane(lane.id),\n            children: isOpen ? '▼' : '▶'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1445,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"swimlane-icon\",\n            children: \"\\u26A1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1448,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"swimlane-title-input\",\n            value: customTitles[lane.id] || '',\n            onChange: e => onTitleChange(lane.id, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1449,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"swimlane-count\",\n            children: [lane.issues.length, \" work items\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1450,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1444,\n          columnNumber: 13\n        }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"kanban-row\",\n          children: STATUSES.map(status => {\n            const issuesForStatus = byStatus(lane.issues, status);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"kanban-column\",\n              onDragOver: onDragOver,\n              onDrop: e => onDrop(e, status, lane.id),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"col-title\",\n                  children: status.toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1459,\n                  columnNumber: 25\n                }, this), issuesForStatus.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"col-count\",\n                  children: issuesForStatus.length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1460,\n                  columnNumber: 56\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1458,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-create\",\n                children: status === 'backlog' && (createLaneId === lane.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                    rows: 2,\n                    className: \"create-input\",\n                    placeholder: \"What needs to be done?\",\n                    value: newTaskText,\n                    onChange: e => setNewTaskText(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1466,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-actions\",\n                    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                      value: newTaskType,\n                      onChange: e => setNewTaskType(e.target.value),\n                      className: \"create-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Task\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1469,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Subtask\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1469,\n                        columnNumber: 56\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Bug\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1469,\n                        columnNumber: 80\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1468,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"create-btn\",\n                      onClick: () => handleCreateSubmit(lane),\n                      children: \"\\u2714\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1471,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"create-btn\",\n                      onClick: () => setCreateLaneId(null),\n                      children: \"\\u2716\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1472,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1467,\n                    columnNumber: 31\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1465,\n                  columnNumber: 29\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"create-link\",\n                  onClick: () => handleCreateClick(lane.id),\n                  children: \"+ Create\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1475,\n                  columnNumber: 32\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1462,\n                columnNumber: 23\n              }, this), issuesForStatus.map(issue => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-item\",\n                draggable: true,\n                onDragStart: e => onDragStart(e, issue.id),\n                onClick: () => handleOpenModal(issue),\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-top\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `card-tag card-tag-${issue.type.toLowerCase()}`,\n                    children: issue.type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1481,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"card-id\",\n                    children: issue.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1482,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1480,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-title\",\n                  children: issue.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1484,\n                  columnNumber: 27\n                }, this)]\n              }, issue.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1479,\n                columnNumber: 25\n              }, this))]\n            }, status, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1457,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1453,\n          columnNumber: 15\n        }, this)]\n      }, lane.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1443,\n        columnNumber: 11\n      }, this);\n    }), selectedIssue && editIssue && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      onClick: () => setSelectedIssue(null),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            gridColumn: \"span 3\"\n          },\n          children: [editIssue.epicName, /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modal-delete-btn\",\n            onClick: handleDelete,\n            children: \"\\uD83D\\uDDD1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1501,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1500,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1504,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: editIssue.title,\n            onChange: e => handleUpdateField('title', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1504,\n            columnNumber: 62\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1504,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1505,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: editIssue.description,\n            onChange: e => handleUpdateField('description', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1505,\n            columnNumber: 68\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1505,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Subtasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1506,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: editIssue.subtasks,\n            onChange: e => handleUpdateField('subtasks', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1506,\n            columnNumber: 65\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1506,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1507,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: editIssue.comments,\n            onChange: e => handleUpdateField('comments', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1507,\n            columnNumber: 65\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1507,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1508,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            disabled: true,\n            value: editIssue.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1508,\n            columnNumber: 63\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1508,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Assignee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1509,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: editIssue.assignee,\n            onChange: e => handleUpdateField('assignee', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1509,\n            columnNumber: 65\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1509,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Reporter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1510,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            disabled: true,\n            value: editIssue.reporter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1510,\n            columnNumber: 65\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1510,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Priority\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1511,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: editIssue.priority,\n            onChange: e => handleUpdateField('priority', e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Low\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1513,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1513,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"High\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1513,\n              columnNumber: 60\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1512,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1511,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Due Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1516,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: editIssue.dueDate,\n            onChange: e => handleUpdateField('dueDate', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1516,\n            columnNumber: 65\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1516,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Start Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1517,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: editIssue.startDate,\n            onChange: e => handleUpdateField('startDate', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1517,\n            columnNumber: 67\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1517,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          style: {\n            gridColumn: \"span 3\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-reset\",\n            onClick: handleReset,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1520,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-save\",\n            onClick: handleSave,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1521,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1519,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1499,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1498,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        body {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n          background-color: #f5f6f8;\n          margin: 0;\n          padding: 16px;\n        }\n        \n        .board-wrap {\n          max-width: 100%;\n          overflow-x: auto;\n        }\n        \n        .swimlane {\n          background: white;\n          border-radius: 8px;\n          margin-bottom: 16px;\n          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n          overflow: hidden;\n        }\n        \n        .swimlane-header {\n          display: flex;\n          align-items: center;\n          padding: 12px 16px;\n          background: #fafbfc;\n          border-bottom: 1px solid #dfe1e5;\n          font-weight: 600;\n          font-size: 14px;\n          color: #172b4d;\n        }\n        \n        .swimlane-toggle {\n          background: none;\n          border: none;\n          font-size: 12px;\n          margin-right: 8px;\n          cursor: pointer;\n          color: #5e6c84;\n        }\n        \n        .swimlane-icon {\n          margin-right: 8px;\n          font-size: 16px;\n          color: #5e6c84;\n        }\n        \n        .swimlane-title-input {\n          border: 1px solid #dfe1e5;\n          border-radius: 4px;\n          padding: 4px 8px;\n          font-size: 14px;\n          font-weight: 600;\n          background: white;\n          margin-right: 8px;\n          min-width: 150px;\n          color: #172b4d;\n        }\n        \n        .swimlane-count {\n          color: #5e6c84;\n          font-size: 12px;\n          font-weight: normal;\n        }\n        \n        .kanban-row {\n          display: flex;\n          padding: 16px;\n          gap: 12px;\n          overflow-x: auto;\n          min-height: 300px;\n        }\n        \n        .kanban-column {\n          flex: 0 0 260px;\n          background: #f5f6f8;\n          border-radius: 6px;\n          padding: 12px;\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n          border: 1px solid #dfe1e5;\n        }\n        \n        .col-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 4px;\n        }\n        \n        .col-title {\n          font-weight: 600;\n          font-size: 12px;\n          color: #5e6c84;\n          text-transform: uppercase;\n          letter-spacing: 0.5px;\n        }\n        \n        .col-count {\n          background: #dfe1e5;\n          color: #5e6c84;\n          border-radius: 10px;\n          padding: 1px 6px;\n          font-size: 11px;\n          font-weight: 600;\n        }\n        \n        .col-create {\n          margin-bottom: 4px;\n        }\n        \n        .create-link {\n          color: #5e6c84;\n          cursor: pointer;\n          font-size: 12px;\n          padding: 6px;\n          display: block;\n          border-radius: 3px;\n          transition: background-color 0.2s;\n        }\n        \n        .create-link:hover {\n          background: #ebecf0;\n        }\n        \n        .create-card {\n          background: white;\n          border: 1px solid #dfe1e5;\n          border-radius: 4px;\n          padding: 8px;\n        }\n        \n        .create-input {\n          width: 100%;\n          border: 1px solid #dfe1e5;\n          border-radius: 3px;\n          padding: 6px;\n          font-size: 12px;\n          resize: vertical;\n          margin-bottom: 6px;\n          color: #172b4d;\n        }\n        \n        .create-actions {\n          display: flex;\n          gap: 6px;\n          align-items: center;\n        }\n        \n        .create-select {\n          flex: 1;\n          border: 1px solid #dfe1e5;\n          border-radius: 3px;\n          padding: 4px;\n          font-size: 11px;\n          color: #172b4d;\n        }\n        \n        .create-btn {\n          background: #f5f6f8;\n          border: 1px solid #dfe1e5;\n          border-radius: 3px;\n          padding: 4px;\n          cursor: pointer;\n          font-size: 11px;\n          color: #5e6c84;\n        }\n        \n        .card-item {\n          background: white;\n          border: 1px solid #dfe1e5;\n          border-radius: 6px;\n          padding: 12px;\n          cursor: pointer;\n          transition: all 0.2s;\n          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n        }\n        \n        .card-item:hover {\n          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n          border-color: #c1c7d0;\n        }\n        \n        .card-top {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 6px;\n        }\n        \n        .card-tag {\n          font-size: 10px;\n          font-weight: 600;\n          padding: 2px 4px;\n          border-radius: 3px;\n          text-transform: uppercase;\n        }\n        \n        .card-tag-task {\n          background: #e3f2fd;\n          color: #1976d2;\n        }\n        \n        .card-tag-bug {\n          background: #ffebee;\n          color: #d32f2f;\n        }\n        \n        .card-tag-subtask {\n          background: #f3e5f5;\n          color: #7b1fa2;\n        }\n        \n        .card-id {\n          color: #5e6c84;\n          font-size: 10px;\n          font-family: monospace;\n        }\n        \n        .card-title {\n          font-size: 13px;\n          line-height: 1.3;\n          color: #172b4d;\n          font-weight: 500;\n        }\n        \n        .modal-overlay {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: rgba(0, 0, 0, 0.5);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .modal {\n          background: white;\n          border-radius: 8px;\n          padding: 24px;\n          display: grid;\n          grid-template-columns: repeat(3, 1fr);\n          gap: 16px;\n          max-width: 900px;\n          width: 100%;\n          max-height: 80vh;\n          overflow-y: auto;\n          box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n        }\n        \n        .modal h2 {\n          margin: 0 0 16px 0;\n          font-size: 20px;\n          font-weight: 600;\n          color: #172b4d;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        .modal-delete-btn {\n          background: #d32f2f;\n          border: none;\n          border-radius: 4px;\n          padding: 6px 10px;\n          color: white;\n          cursor: pointer;\n          font-size: 12px;\n        }\n        \n        .modal-field {\n          display: flex;\n          flex-direction: column;\n          gap: 4px;\n        }\n        \n        .modal-field label {\n          font-size: 12px;\n          font-weight: 600;\n          color: #5e6c84;\n        }\n        \n        .modal-field input, .modal-field textarea, .modal-field select {\n          border: 1px solid #dfe1e5;\n          border-radius: 4px;\n          padding: 8px;\n          font-size: 13px;\n          background: white;\n          transition: border-color 0.2s;\n          color: #172b4d;\n        }\n        \n        .modal-field input:focus, .modal-field textarea:focus, .modal-field select:focus {\n          outline: none;\n          border-color: #1976d2;\n        }\n        \n        .modal-field input:disabled {\n          background: #f5f6f8;\n          color: #5e6c84;\n        }\n        \n        .modal-actions {\n          display: flex;\n          justify-content: flex-end;\n          gap: 8px;\n          margin-top: 16px;\n        }\n        \n        .btn-reset {\n          background: #5e6c84;\n          border: none;\n          padding: 8px 16px;\n          border-radius: 4px;\n          cursor: pointer;\n          color: white;\n          font-size: 12px;\n          font-weight: 600;\n        }\n        \n        .btn-save {\n          background: #1976d2;\n          border: none;\n          color: white;\n          padding: 8px 16px;\n          border-radius: 4px;\n          cursor: pointer;\n          font-size: 12px;\n          font-weight: 600;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1527,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1439,\n    columnNumber: 5\n  }, this);\n}\n_s(KanbanBoard, \"QXRxIQDMAEmEX8Oc56N2yrnW42o=\", false, function () {\n  return [useParams];\n});\n_c = KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","STATUSES","mockIssues","id","epic","epicName","status","type","title","assignee","storyPoints","labels","dueDate","reporter","priority","startDate","description","subtasks","comments","simulateApiDelay","Promise","resolve","setTimeout","listIssues","projectId","filter","i","moveIssue","issueId","issue","find","Error","createIssueAPI","push","deleteIssueAPI","idx","findIndex","splice","updateIssueAPI","updatedIssue","getSwimlanes","issues","Set","map","_epicIssues$find","epicIssues","epicTitle","KanbanBoard","_s","setIssues","openSwimlanes","setOpenSwimlanes","customTitles","setCustomTitles","createLaneId","setCreateLaneId","newTaskText","setNewTaskText","newTaskType","setNewTaskType","selectedIssue","setSelectedIssue","editIssue","setEditIssue","fetchIssues","data","lanes","initialOpen","initialTitles","forEach","lane","err","console","error","toggleSwimlane","prev","onTitleChange","value","byStatus","collection","onDragStart","e","dataTransfer","setData","onDrop","targetStatus","swimlaneId","preventDefault","getData","srcLaneId","refreshed","onDragOver","handleCreateClick","laneId","handleCreateSubmit","trim","alert","newIssue","Math","random","toString","slice","Date","toISOString","split","handleDelete","handleOpenModal","handleUpdateField","field","handleSave","handleReset","className","children","isOpen","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","target","length","issuesForStatus","toUpperCase","rows","placeholder","draggable","toLowerCase","stopPropagation","style","gridColumn","disabled","_c","$RefreshReg$"],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/components/boards/KanbanBoard.js"],"sourcesContent":["\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// /*\n//   Enhancements:\n//   - Keyboard-only moves: when a card is focused, user can press ArrowLeft/ArrowRight to move between columns.\n//   - Buttons for accessibility to move left/right.\n//   - Export/Import CSV for issues in the top header.\n// */\n\n// const STATUSES = ['todo','inprogress','review','done'];\n\n// function issuesToCSV(issues) {\n//   const headers = ['id','projectId','title','status','priority','assignee','type','storyPoints','createdAt'];\n//   const rows = issues.map(i => headers.map(h => `\"${(i[h]||'').toString().replace(/\"/g,'\"\"')}\"`).join(','));\n//   return [headers.join(','), ...rows].join('\\n');\n// }\n\n// function csvToIssues(csv) {\n//   const lines = csv.split(/\\r?\\n/).filter(Boolean);\n//   if(lines.length < 2) return [];\n//   const headers = lines[0].split(',').map(h => h.replace(/(^\"|\"$)/g,''));\n//   const res = [];\n//   for(let i=1;i<lines.length;i++){\n//     const cols = lines[i].split(',').map(c => c.replace(/(^\"|\"$)/g,''));\n//     const obj = {};\n//     headers.forEach((h,idx)=> obj[h]=cols[idx]||'');\n//     res.push(obj);\n//   }\n//   return res;\n// }\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const refresh = async ()=> setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n//   const onDragStart = (e,id) => { e.dataTransfer.setData('text/plain', id); };\n\n//   const byStatus = s => issues.filter(i=>i.status===s);\n\n//   // keyboard move handler: ArrowLeft/ArrowRight move between columns\n//   const handleKey = async (e, issue) => {\n//     if(e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n//       e.preventDefault();\n//       const idx = STATUSES.indexOf(issue.status);\n//       let targetIdx = idx + (e.key === 'ArrowRight' ? 1 : -1);\n//       targetIdx = Math.max(0, Math.min(STATUSES.length-1, targetIdx));\n//       const target = STATUSES[targetIdx];\n//       if(target !== issue.status) {\n//         await moveIssue(issue.id, target);\n//         refresh();\n//       }\n//     }\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx-1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length-1, idx+1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n\n//   // Export CSV\n//   const exportCSV = () => {\n//     const csv = issuesToCSV(issues);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url; a.download = `issues_export_${projectId||'all'}.csv`; a.click();\n//     URL.revokeObjectURL(url);\n//   };\n\n//   // Import CSV\n//   const importCSV = (e) => {\n//     const file = e.target.files && e.target.files[0];\n//     if(!file) return;\n//     const reader = new FileReader();\n//     reader.onload = async (ev) => {\n//       try {\n//         const text = ev.target.result;\n//         const imported = csvToIssues(text);\n//         // Merge with existing issues: simple append with new IDs\n//         for(const row of imported){\n//           // only minimal fields handled; createIssue is not imported here to avoid API mismatch\n//           // createIssue would be used for full import; for demo we push to localStorage directly\n//           // but here we attempt to call moveIssue or update if id exists. fallback: ignore.\n//         }\n//         alert('Import parsed ' + imported.length + ' rows. For full import to central DB, use backend import.');\n//       } catch(err) {\n//         alert('CSV parse error: ' + err.message);\n//       }\n//     };\n//     reader.readAsText(file);\n//     // reset file input\n//     e.target.value = '';\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:12}}>\n//         <h2 style={{margin:0}}>Kanban Board {projectId?`- ${projectId}`:''}</h2>\n//         <div style={{display:'flex',gap:8,alignItems:'center'}}>\n//           <button className=\"btn-ghost\" onClick={exportCSV} aria-label=\"Export issues as CSV\">Export CSV</button>\n//           <label className=\"btn-ghost\" style={{cursor:'pointer'}}>\n//             Import CSV\n//             <input ref={fileRef} type=\"file\" accept=\".csv,text/csv\" onChange={importCSV} style={{display:'none'}} aria-hidden=\"true\"/>\n//           </label>\n//           <button className=\"btn\" onClick={()=>window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s=>(\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e=>e.preventDefault()} onDrop={e=>onDrop(e,s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i=>(\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e=>onDragStart(e,i.id)}\n//                 onKeyDown={(e)=>handleKey(e,i)}\n//                 aria-describedby={`desc-${i.id}`}>\n//                 <div style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{display:'flex',gap:6}}>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveLeft(i.id); }} aria-label={`Move ${i.title} left`}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveRight(i.id); }} aria-label={`Move ${i.title} right`}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div id={`desc-${i.id}`} className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { useProjects } from '../../context/ProjectContext';\n\n// const STATUSES = ['todo', 'inprogress', 'review', 'done'];\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const { projects } = useProjects();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const refresh = async () => setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n\n//   const onDragStart = (e, id) => {\n//     e.dataTransfer.setData('text/plain', id);\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx - 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length - 1, idx + 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const byStatus = (s) => issues.filter(i => i.status === s);\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n//         <h2 style={{ margin: 0 }}>Kanban Board {projectId ? `- ${projectId}` : ''}</h2>\n//         <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\n//           <button className=\"btn\" onClick={() => window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s => (\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e => e.preventDefault()} onDrop={e => onDrop(e, s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i => (\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e => onDragStart(e, i.id)}>\n//                 <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{ display: 'flex', gap: 6 }}>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveLeft(i.id); }}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveRight(i.id); }}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n\n//       <div style={{ marginTop: 20 }}>\n//         <h3>📋 Projects from Timeline</h3>\n//         <ul>\n//           {projects.map(p => (\n//             <li key={p.id}>\n//               <strong>{p.text}</strong> — Starts: {p.start_date}, Duration: {p.duration} days\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n \n// const STATUSES = [\n//   'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n// ];\n \n// // Mock issues with two epics swimlanes for demo\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '' },\n//   { id: 'i2', epic: 'p1', epicName: 'Frontend', status: 'inprogress', type: 'Bug', title: 'Login bug', assignee: 'u2', storyPoints: 1, labels: [], dueDate: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '' }\n// ];\n \n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n \n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n \n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n \n// const createIssueAPI = async (issue) => {\n//   await simulateApiDelay();\n//   mockIssues.push(issue);\n// };\n \n// const getSwimlanes = issues =>\n//   [...new Set(issues.map(i => i.epic || i.projectId))].map(id => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === id);\n//     const epicTitle = epicIssues.find(i => i.epicName)?.epicName || id;\n//     return {\n//       id,\n//       title: epicTitle,\n//       issues: epicIssues\n//     };\n//   });\n \n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n \n//   useEffect(() => {\n//     const fetchIssues = async () => {\n//       try {\n//         const data = await listIssues(projectId);\n//         setIssues(data);\n//         const lanes = getSwimlanes(data);\n//         const initialOpen = {};\n//         const initialTitles = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//       } catch (err) {\n//         console.error('Failed to load issues:', err);\n//       }\n//     };\n//     fetchIssues();\n//   }, [projectId]);\n \n//   const toggleSwimlane = (id) => {\n//     setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   };\n \n//   const onTitleChange = (id, value) => {\n//     setCustomTitles(prev => ({ ...prev, [id]: value }));\n//   };\n \n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n \n//   const onDragStart = (e, issueId) => {\n//     e.dataTransfer.setData('text/plain', issueId);\n//   };\n \n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) {\n//       console.error('Error moving issue:', err);\n//     }\n//   };\n \n//   const onDragOver = e => e.preventDefault();\n \n//   const handleCreateClick = laneId => {\n//     setCreateLaneId(laneId);\n//     setNewTaskText('');\n//     setNewTaskType('Task');\n//   };\n \n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) {\n//       alert('Task title is required');\n//       return;\n//     }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//       setNewTaskText('');\n//       setNewTaskType('Task');\n//     } catch (err) {\n//       console.error('Error creating issue:', err);\n//     }\n//   };\n \n//   const handleCreateCancel = () => {\n//     setCreateLaneId(null);\n//     setNewTaskText('');\n//     setNewTaskType('Task');\n//   };\n \n//   return (\n//     <div className=\"board-wrap\">\n//       {getSwimlanes(issues).map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button\n//                 className=\"swimlane-toggle\"\n//                 aria-label={isOpen ? `Collapse swimlane` : `Expand swimlane`}\n//                 aria-expanded={isOpen}\n//                 onClick={() => toggleSwimlane(lane.id)}\n//               >\n//                 {isOpen ? '▼' : '▶'}\n//               </button>\n//               <span className=\"swimlane-icon\" aria-hidden=\"true\" style={{ marginRight: 6 }}>⚡</span>\n//               <input\n//                 className=\"swimlane-title-input\"\n//                 value={customTitles[lane.id] || ''}\n//                 onChange={e => onTitleChange(lane.id, e.target.value)}\n//                 aria-label={`Edit epic title for swimlane ${lane.id}`}\n//                 spellCheck=\"false\"\n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\" id={`swimlane-content-${lane.id}`}>\n//                 {STATUSES.map(status => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div\n//                       className=\"kanban-column\"\n//                       key={status}\n//                       onDragOver={onDragOver}\n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span>{status.replace(/_/g, ' ').toUpperCase()}</span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea\n//                                 rows={2}\n//                                 className=\"create-input\"\n//                                 placeholder=\"What needs to be done?\"\n//                                 value={newTaskText}\n//                                 onChange={e => setNewTaskText(e.target.value)}\n//                               />\n//                               <div className=\"create-actions\">\n//                                 <select\n//                                   value={newTaskType}\n//                                   onChange={e => setNewTaskType(e.target.value)}\n//                                   className=\"create-select\"\n//                                 >\n//                                   <option value=\"Task\">Task</option>\n//                                   <option value=\"Subtask\">Subtask</option>\n//                                   <option value=\"Bug\">Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={handleCreateCancel}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (\n//                             <span onClick={() => handleCreateClick(lane.id)} style={{ cursor: 'pointer' }}>+ Create</span>\n//                           )\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => (\n//                         <div\n//                           className=\"card-item\"\n//                           tabIndex={0}\n//                           key={issue.id}\n//                           draggable\n//                           onDragStart={e => onDragStart(e, issue.id)}\n//                         >\n//                           <div className=\"card-top\">\n//                             <span className=\"card-tag\">{issue.type}</span>\n//                             <span className=\"card-id\">{issue.id}</span>\n//                             {issue.labels?.map(l => (\n//                               <span key={l} className=\"card-label\">{l}</span>\n//                             ))}\n//                           </div>\n//                           <div className=\"card-title\">{issue.title}</div>\n//                           <div className=\"card-details\">\n//                             {issue.assignee && <span className=\"card-assignee\">{issue.assignee}</span>}\n//                             <span className=\"card-storypoints\">{issue.storyPoints} pts</span>\n//                             {issue.dueDate && <span className=\"card-due\">{issue.dueDate}</span>}\n//                           </div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n//       <style>{`\n//         .board-wrap { padding: 0 12px; }\n//         .swimlane { margin-bottom: 16px; }\n//         .swimlane-header {\n//           display: flex; align-items: center; gap: 8px; font-size: 1.2em;\n//           font-weight: 500; border-bottom: 1px solid #ececec; padding: 8px 0;\n//         }\n//         .swimlane-toggle {\n//           cursor: pointer;\n//           background: transparent;\n//           border: none;\n//           font-size: 1.2em;\n//           line-height: 1;\n//           padding: 0 6px 0 0;\n//         }\n//         .swimlane-icon { color: #b39ddb; }\n//         .swimlane-title-input {\n//           font-size: 1.2em;\n//           font-weight: 600;\n//           border: none;\n//           background: transparent;\n//           max-width: 300px;\n//           outline: none;\n//         }\n//         .swimlane-count {\n//           color: #888;\n//           margin-left: auto;\n//         }\n//         .kanban-row {\n//           display: flex;\n//           gap: 8px;\n//           min-height: 100px;\n//         }\n//         .kanban-column {\n//           background: #fafafe;\n//           flex: 1;\n//           min-width: 150px;\n//           padding: 10px;\n//           border-radius: 6px;\n//           height: 260px;\n//           box-shadow: 0 1px 3px #efefef;\n//         }\n//         .col-header {\n//           font-weight: 500;\n//           color: #555;\n//           margin-bottom: 10px;\n//           display: flex;\n//           align-items: center;\n//           gap: 8px;\n//         }\n//         .col-count {\n//           background: #e0e0e0;\n//           border-radius: 6px;\n//           padding: 1px 7px;\n//           font-size: 0.9em;\n//           color: #555;\n//         }\n//         .col-create {\n//           color: #499ef8;\n//           font-weight: bold;\n//           margin-bottom: 10px;\n//         }\n//         .create-card {\n//           box-sizing: border-box;\n//           background: #fff;\n//           border: 2px solid #57aaff;\n//           border-radius: 6px;\n//           padding: 12px;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 8px;\n//         }\n//         .create-input {\n//           border: none;\n//           outline: none;\n//           resize: none;\n//           font-size: 1rem;\n//           width: 100%;\n//         }\n//         .create-actions {\n//           display: flex;\n//           align-items: center;\n//           gap: 12px;\n//         }\n//         .create-select {\n//           display: inline-block;\n//           font-size: 1rem;\n//           border-radius: 4px;\n//           border: 1px solid #bbb;\n//         }\n//         .create-btn {\n//           background: #57aaff;\n//           color: #fff;\n//           border: none;\n//           border-radius: 4px;\n//           font-size: 1.2em;\n//           padding: 5px 12px;\n//           cursor: pointer;\n//         }\n//         .create-btn:hover {\n//           background: #3183c2;\n//         }\n//         .card-item {\n//           background: #fff;\n//           border-radius: 6px;\n//           margin-bottom: 8px;\n//           padding: 10px 12px;\n//           box-shadow: 0 1px 4px #e3e3e3;\n//           border-left: 5px solid #b39ddb;\n//         }\n//         .card-top {\n//           display: flex;\n//           gap: 8px;\n//           align-items: center;\n//         }\n//         .card-tag {\n//           background: #e5d8fb;\n//           color: #9371db;\n//           padding: 2px 6px;\n//           border-radius: 6px;\n//           font-size: 0.8em;\n//         }\n//         .card-id {\n//           margin-left: 6px;\n//           color: #888;\n//           font-size: 0.9em;\n//         }\n//         .card-label {\n//           background: #f8d7da;\n//           color: #b71c1c;\n//           margin-left: 4px;\n//           padding: 1px 6px;\n//           border-radius: 6px;\n//           font-size: 0.8em;\n//         }\n//         .card-title {\n//           font-weight: 600;\n//           margin: 8px 0;\n//         }\n//         .card-details {\n//           display: flex;\n//           gap: 8px;\n//           font-size: 0.85em;\n//           color: #555;\n//         }\n//         .card-assignee {\n//           background: #e3f2fd;\n//           color: #1565c0;\n//           padding: 1px 7px;\n//           border-radius: 6px;\n//         }\n//         .card-storypoints {\n//           background: #ffe0b2;\n//           color: #f57c00;\n//           border-radius: 6px;\n//           padding: 1px 7px;\n//         }\n//         .card-due {\n//           background: #fce4ec;\n//           color: #d81b60;\n//           border-radius: 6px;\n//           padding: 1px 7px;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n \n \n\n\n\n\n\n\n\n\n\n//new one \n\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const STATUSES = [\n//   'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n// ];\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i2', epic: 'p1', epicName: 'Frontend', status: 'inprogress', type: 'Bug', title: 'Login bug', assignee: 'u3', storyPoints: 1, labels: [], dueDate: '2025-09-28', reporter: 'qa-team', priority: 'Medium', startDate: '2025-09-16', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n\n// const createIssueAPI = async (issue) => {\n//   await simulateApiDelay();\n//   mockIssues.push(issue);\n// };\n\n// const deleteIssueAPI = async (issueId) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === issueId);\n//   if (idx > -1) mockIssues.splice(idx, 1);\n// };\n\n// const updateIssueAPI = async (updatedIssue) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === updatedIssue.id);\n//   if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue };\n// };\n\n// const getSwimlanes = issues =>\n//   [...new Set(issues.map(i => i.epic || i.projectId))].map(id => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === id);\n//     const epicTitle = epicIssues.find(i => i.epicName)?.epicName || id;\n//     return { id, title: epicTitle, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n\n//   useEffect(() => {\n//     const fetchIssues = async () => {\n//       try {\n//         const data = await listIssues(projectId);\n//         setIssues(data);\n//         const lanes = getSwimlanes(data);\n//         const initialOpen = {};\n//         const initialTitles = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//       } catch (err) {\n//         console.error('Failed to load issues:', err);\n//       }\n//     };\n//     fetchIssues();\n//   }, [projectId]);\n\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const onTitleChange = (id, value) => setCustomTitles(prev => ({ ...prev, [id]: value }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) {\n//       console.error('Error moving issue:', err);\n//     }\n//   };\n\n//   const onDragOver = e => e.preventDefault();\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error('Error creating issue:', err); }\n//   };\n\n//   const handleDelete = async () => {\n//     if (!selectedIssue) return;\n//     await deleteIssueAPI(selectedIssue.id);\n//     const refreshed = await listIssues(projectId);\n//     setIssues(refreshed);\n//     setSelectedIssue(null);\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {getSwimlanes(issues).map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                 {isOpen ? '▼' : '▶'}\n//               </button>\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input className=\"swimlane-title-input\" value={customTitles[lane.id] || ''} onChange={e => onTitleChange(lane.id, e.target.value)} />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\">\n//                 {STATUSES.map(status => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div className=\"kanban-column\" key={status} onDragOver={onDragOver} onDrop={e => onDrop(e, status, lane.id)}>\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => (\n//                         <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                           <div className=\"card-top\">\n//                             <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                             <span className=\"card-id\">{issue.id}</span>\n//                           </div>\n//                           <div className=\"card-title\">{issue.title}</div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className=\"modal\" onClick={e => e.stopPropagation()}>\n//             <h2 style={{ gridColumn: \"span 3\" }}>{editIssue.epicName}\n//               <button className=\"modal-delete-btn\" onClick={handleDelete}>🗑</button>\n//             </h2>\n\n//             <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Status</label><input disabled value={editIssue.status} /></div>\n//             <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//             <div className=\"modal-field\"><label>Priority</label>\n//               <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                 <option>Low</option><option>Medium</option><option>High</option>\n//               </select>\n//             </div>\n//             <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\" }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       <style>{`\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f8f9fa;\n//           margin: 0;\n//           padding: 20px;\n//         }\n        \n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n        \n//         .swimlane {\n//           background: white;\n//           border-radius: 12px;\n//           margin-bottom: 24px;\n//           box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n//           overflow: hidden;\n//         }\n        \n//         .swimlane-header {\n//           display: flex;\n//           align-items: center;\n//           padding: 16px 20px;\n//           background: #f8f9fa;\n//           border-bottom: 1px solid #e9ecef;\n//           font-weight: 600;\n//           font-size: 16px;\n//         }\n        \n//         .swimlane-toggle {\n//           background: none;\n//           border: none;\n//           font-size: 14px;\n//           margin-right: 12px;\n//           cursor: pointer;\n//           color: #6c757d;\n//         }\n        \n//         .swimlane-icon {\n//           margin-right: 12px;\n//           font-size: 18px;\n//         }\n        \n//         .swimlane-title-input {\n//           border: 1px solid #e9ecef;\n//           border-radius: 6px;\n//           padding: 6px 12px;\n//           font-size: 16px;\n//           font-weight: 600;\n//           background: white;\n//           margin-right: 12px;\n//           min-width: 200px;\n//         }\n        \n//         .swimlane-count {\n//           color: #6c757d;\n//           font-size: 14px;\n//           font-weight: normal;\n//         }\n        \n//         .kanban-row {\n//           display: flex;\n//           padding: 20px;\n//           gap: 16px;\n//           overflow-x: auto;\n//           min-height: 400px;\n//         }\n        \n//         .kanban-column {\n//           flex: 0 0 280px;\n//           background: #f8f9fa;\n//           border-radius: 8px;\n//           padding: 16px;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 12px;\n//         }\n        \n//         .col-header {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 8px;\n//         }\n        \n//         .col-title {\n//           font-weight: 600;\n//           font-size: 14px;\n//           color: #495057;\n//           text-transform: uppercase;\n//           letter-spacing: 0.5px;\n//         }\n        \n//         .col-count {\n//           background: #e9ecef;\n//           color: #495057;\n//           border-radius: 12px;\n//           padding: 2px 8px;\n//           font-size: 12px;\n//           font-weight: 600;\n//         }\n        \n//         .col-create {\n//           margin-bottom: 8px;\n//         }\n        \n//         .create-link {\n//           color: #6c757d;\n//           cursor: pointer;\n//           font-size: 14px;\n//           padding: 8px;\n//           display: block;\n//           border-radius: 4px;\n//           transition: background-color 0.2s;\n//         }\n        \n//         .create-link:hover {\n//           background: #e9ecef;\n//         }\n        \n//         .create-card {\n//           background: white;\n//           border: 1px solid #e9ecef;\n//           border-radius: 6px;\n//           padding: 12px;\n//         }\n        \n//         .create-input {\n//           width: 100%;\n//           border: 1px solid #e9ecef;\n//           border-radius: 4px;\n//           padding: 8px;\n//           font-size: 14px;\n//           resize: vertical;\n//           margin-bottom: 8px;\n//         }\n        \n//         .create-actions {\n//           display: flex;\n//           gap: 8px;\n//           align-items: center;\n//         }\n        \n//         .create-select {\n//           flex: 1;\n//           border: 1px solid #e9ecef;\n//           border-radius: 4px;\n//           padding: 6px;\n//           font-size: 12px;\n//         }\n        \n//         .create-btn {\n//           background: #f8f9fa;\n//           border: 1px solid #e9ecef;\n//           border-radius: 4px;\n//           padding: 6px;\n//           cursor: pointer;\n//           font-size: 12px;\n//         }\n        \n//         .card-item {\n//           background: white;\n//           border: 1px solid #e9ecef;\n//           border-radius: 8px;\n//           padding: 16px;\n//           cursor: pointer;\n//           transition: all 0.2s;\n//           box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n//         }\n        \n//         .card-item:hover {\n//           box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n//           transform: translateY(-1px);\n//         }\n        \n//         .card-item:active {\n//           transform: translateY(0);\n//         }\n        \n//         .card-top {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 8px;\n//         }\n        \n//         .card-tag {\n//           font-size: 11px;\n//           font-weight: 600;\n//           padding: 2px 6px;\n//           border-radius: 4px;\n//           text-transform: uppercase;\n//         }\n        \n//         .card-tag-task {\n//           background: #e3f2fd;\n//           color: #1976d2;\n//         }\n        \n//         .card-tag-bug {\n//           background: #ffebee;\n//           color: #d32f2f;\n//         }\n        \n//         .card-tag-subtask {\n//           background: #f3e5f5;\n//           color: #7b1fa2;\n//         }\n        \n//         .card-id {\n//           color: #6c757d;\n//           font-size: 11px;\n//           font-family: monospace;\n//         }\n        \n//         .card-title {\n//           font-size: 14px;\n//           line-height: 1.4;\n//           color: #495057;\n//           font-weight: 500;\n//         }\n        \n//         .modal-overlay {\n//           position: fixed;\n//           top: 0;\n//           left: 0;\n//           right: 0;\n//           bottom: 0;\n//           background: rgba(0, 0, 0, 0.6);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//           padding: 20px;\n//         }\n        \n//         .modal {\n//           background: white;\n//           border-radius: 12px;\n//           padding: 32px;\n//           display: grid;\n//           grid-template-columns: repeat(3, 1fr);\n//           gap: 20px;\n//           max-width: 1000px;\n//           width: 100%;\n//           max-height: 90vh;\n//           overflow-y: auto;\n//           box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n//         }\n        \n//         .modal h2 {\n//           margin: 0 0 20px 0;\n//           font-size: 24px;\n//           font-weight: 700;\n//           color: #495057;\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//         }\n        \n//         .modal-delete-btn {\n//           background: #dc3545;\n//           border: none;\n//           border-radius: 6px;\n//           padding: 8px 12px;\n//           color: white;\n//           cursor: pointer;\n//           font-size: 14px;\n//         }\n        \n//         .modal-field {\n//           display: flex;\n//           flex-direction: column;\n//           gap: 6px;\n//         }\n        \n//         .modal-field label {\n//           font-size: 14px;\n//           font-weight: 600;\n//           color: #495057;\n//         }\n        \n//         .modal-field input, .modal-field textarea, .modal-field select {\n//           border: 1px solid #e9ecef;\n//           border-radius: 6px;\n//           padding: 10px;\n//           font-size: 14px;\n//           background: white;\n//           transition: border-color 0.2s;\n//         }\n        \n//         .modal-field input:focus, .modal-field textarea:focus, .modal-field select:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n        \n//         .modal-field input:disabled {\n//           background: #f8f9fa;\n//           color: #6c757d;\n//         }\n        \n//         .modal-actions {\n//           display: flex;\n//           justify-content: flex-end;\n//           gap: 12px;\n//           margin-top: 20px;\n//         }\n        \n//         .btn-reset {\n//           background: #6c757d;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//         }\n        \n//         .btn-reset:hover {\n//           background: #5a6268;\n//         }\n        \n//         .btn-save {\n//           background: #1976d2;\n//           border: none;\n//           color: white;\n//           padding: 10px 20px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//         }\n        \n//         .btn-save:hover {\n//           background: #1565c0;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n//perfect one\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst STATUSES = [\n  'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n];\n\nconst mockIssues = [\n  { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n  { id: 'i2', epic: 'p1', epicName: 'Frontend', status: 'inprogress', type: 'Bug', title: 'Login bug', assignee: 'u3', storyPoints: 1, labels: [], dueDate: '2025-09-28', reporter: 'qa-team', priority: 'Medium', startDate: '2025-09-16', description: '', subtasks: '', comments: '' },\n  { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n];\n\nconst simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\nconst listIssues = async (projectId) => {\n  await simulateApiDelay();\n  return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n};\n\nconst moveIssue = async (issueId, status) => {\n  await simulateApiDelay();\n  const issue = mockIssues.find(i => i.id === issueId);\n  if (!issue) throw new Error('Issue not found');\n  issue.status = status;\n};\n\nconst createIssueAPI = async (issue) => {\n  await simulateApiDelay();\n  mockIssues.push(issue);\n};\n\nconst deleteIssueAPI = async (issueId) => {\n  await simulateApiDelay();\n  const idx = mockIssues.findIndex(i => i.id === issueId);\n  if (idx > -1) mockIssues.splice(idx, 1);\n};\n\nconst updateIssueAPI = async (updatedIssue) => {\n  await simulateApiDelay();\n  const idx = mockIssues.findIndex(i => i.id === updatedIssue.id);\n  if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue };\n};\n\nconst getSwimlanes = issues =>\n  [...new Set(issues.map(i => i.epic || i.projectId))].map(id => {\n    const epicIssues = issues.filter(i => (i.epic || i.projectId) === id);\n    const epicTitle = epicIssues.find(i => i.epicName)?.epicName || id;\n    return { id, title: epicTitle, issues: epicIssues };\n  });\n\nexport default function KanbanBoard() {\n  const { projectId } = useParams();\n  const [issues, setIssues] = useState([]);\n  const [openSwimlanes, setOpenSwimlanes] = useState({});\n  const [customTitles, setCustomTitles] = useState({});\n  const [createLaneId, setCreateLaneId] = useState(null);\n  const [newTaskText, setNewTaskText] = useState('');\n  const [newTaskType, setNewTaskType] = useState('Task');\n  const [selectedIssue, setSelectedIssue] = useState(null);\n  const [editIssue, setEditIssue] = useState(null);\n\n  useEffect(() => {\n    const fetchIssues = async () => {\n      try {\n        const data = await listIssues(projectId);\n        setIssues(data);\n        const lanes = getSwimlanes(data);\n        const initialOpen = {};\n        const initialTitles = {};\n        lanes.forEach(lane => {\n          initialOpen[lane.id] = true;\n          initialTitles[lane.id] = lane.title;\n        });\n        setOpenSwimlanes(initialOpen);\n        setCustomTitles(initialTitles);\n      } catch (err) {\n        console.error('Failed to load issues:', err);\n      }\n    };\n    fetchIssues();\n  }, [projectId]);\n\n  const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n  const onTitleChange = (id, value) => setCustomTitles(prev => ({ ...prev, [id]: value }));\n  const byStatus = (collection, status) => collection.filter(i => i.status === status);\n  const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n\n  const onDrop = async (e, targetStatus, swimlaneId) => {\n    e.preventDefault();\n    try {\n      const issueId = e.dataTransfer.getData('text/plain');\n      const issue = issues.find(i => i.id === issueId);\n      const srcLaneId = issue.epic || issue.projectId;\n      if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n        await moveIssue(issueId, targetStatus);\n        const refreshed = await listIssues(projectId);\n        setIssues(refreshed);\n      }\n    } catch (err) {\n      console.error('Error moving issue:', err);\n    }\n  };\n\n  const onDragOver = e => e.preventDefault();\n  const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n  const handleCreateSubmit = async lane => {\n    if (!newTaskText.trim()) { alert('Task title is required'); return; }\n    const newIssue = {\n      id: Math.random().toString(36).slice(2),\n      epic: lane.id,\n      projectId: lane.id,\n      epicName: lane.title,\n      title: newTaskText,\n      status: 'backlog',\n      assignee: '',\n      type: newTaskType,\n      storyPoints: '',\n      labels: [],\n      dueDate: '',\n      reporter: 'system',\n      priority: 'Medium',\n      startDate: new Date().toISOString().split('T')[0],\n      description: '',\n      subtasks: '',\n      comments: ''\n    };\n    try {\n      await createIssueAPI(newIssue);\n      const refreshed = await listIssues(projectId);\n      setIssues(refreshed);\n      setCreateLaneId(null);\n    } catch (err) { console.error('Error creating issue:', err); }\n  };\n\n  const handleDelete = async () => {\n    if (!selectedIssue) return;\n    await deleteIssueAPI(selectedIssue.id);\n    const refreshed = await listIssues(projectId);\n    setIssues(refreshed);\n    setSelectedIssue(null);\n  };\n\n  const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n  const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n  const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n  const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n  return (\n    <div className=\"board-wrap\">\n      {getSwimlanes(issues).map(lane => {\n        const isOpen = openSwimlanes[lane.id];\n        return (\n          <section className=\"swimlane\" key={lane.id}>\n            <header className=\"swimlane-header\">\n              <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n                {isOpen ? '▼' : '▶'}\n              </button>\n              <span className=\"swimlane-icon\">⚡</span>\n              <input className=\"swimlane-title-input\" value={customTitles[lane.id] || ''} onChange={e => onTitleChange(lane.id, e.target.value)} />\n              <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n            </header>\n            {isOpen && (\n              <div className=\"kanban-row\">\n                {STATUSES.map(status => {\n                  const issuesForStatus = byStatus(lane.issues, status);\n                  return (\n                    <div className=\"kanban-column\" key={status} onDragOver={onDragOver} onDrop={e => onDrop(e, status, lane.id)}>\n                      <div className=\"col-header\">\n                        <span className=\"col-title\">{status.toUpperCase()}</span>\n                        {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n                      </div>\n                      <div className=\"col-create\">\n                        {status === 'backlog' && (\n                          createLaneId === lane.id ? (\n                            <div className=\"create-card\">\n                              <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n                              <div className=\"create-actions\">\n                                <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n                                  <option>Task</option><option>Subtask</option><option>Bug</option>\n                                </select>\n                                <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n                                <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n                              </div>\n                            </div>\n                          ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n                        )}\n                      </div>\n                      {issuesForStatus.map(issue => (\n                        <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n                          <div className=\"card-top\">\n                            <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n                            <span className=\"card-id\">{issue.id}</span>\n                          </div>\n                          <div className=\"card-title\">{issue.title}</div>\n                        </div>\n                      ))}\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </section>\n        );\n      })}\n\n      {/* Modal */}\n      {selectedIssue && editIssue && (\n        <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n          <div className=\"modal\" onClick={e => e.stopPropagation()}>\n            <h2 style={{ gridColumn: \"span 3\" }}>{editIssue.epicName}\n              <button className=\"modal-delete-btn\" onClick={handleDelete}>🗑</button>\n            </h2>\n\n            <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n            <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n            <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n            <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n            <div className=\"modal-field\"><label>Status</label><input disabled value={editIssue.status} /></div>\n            <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n            <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n            <div className=\"modal-field\"><label>Priority</label>\n              <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n                <option>Low</option><option>Medium</option><option>High</option>\n              </select>\n            </div>\n            <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n            <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n\n            <div className=\"modal-actions\" style={{ gridColumn: \"span 3\" }}>\n              <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n              <button className=\"btn-save\" onClick={handleSave}>Save</button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <style>{`\n        body {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n          background-color: #f5f6f8;\n          margin: 0;\n          padding: 16px;\n        }\n        \n        .board-wrap {\n          max-width: 100%;\n          overflow-x: auto;\n        }\n        \n        .swimlane {\n          background: white;\n          border-radius: 8px;\n          margin-bottom: 16px;\n          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n          overflow: hidden;\n        }\n        \n        .swimlane-header {\n          display: flex;\n          align-items: center;\n          padding: 12px 16px;\n          background: #fafbfc;\n          border-bottom: 1px solid #dfe1e5;\n          font-weight: 600;\n          font-size: 14px;\n          color: #172b4d;\n        }\n        \n        .swimlane-toggle {\n          background: none;\n          border: none;\n          font-size: 12px;\n          margin-right: 8px;\n          cursor: pointer;\n          color: #5e6c84;\n        }\n        \n        .swimlane-icon {\n          margin-right: 8px;\n          font-size: 16px;\n          color: #5e6c84;\n        }\n        \n        .swimlane-title-input {\n          border: 1px solid #dfe1e5;\n          border-radius: 4px;\n          padding: 4px 8px;\n          font-size: 14px;\n          font-weight: 600;\n          background: white;\n          margin-right: 8px;\n          min-width: 150px;\n          color: #172b4d;\n        }\n        \n        .swimlane-count {\n          color: #5e6c84;\n          font-size: 12px;\n          font-weight: normal;\n        }\n        \n        .kanban-row {\n          display: flex;\n          padding: 16px;\n          gap: 12px;\n          overflow-x: auto;\n          min-height: 300px;\n        }\n        \n        .kanban-column {\n          flex: 0 0 260px;\n          background: #f5f6f8;\n          border-radius: 6px;\n          padding: 12px;\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n          border: 1px solid #dfe1e5;\n        }\n        \n        .col-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 4px;\n        }\n        \n        .col-title {\n          font-weight: 600;\n          font-size: 12px;\n          color: #5e6c84;\n          text-transform: uppercase;\n          letter-spacing: 0.5px;\n        }\n        \n        .col-count {\n          background: #dfe1e5;\n          color: #5e6c84;\n          border-radius: 10px;\n          padding: 1px 6px;\n          font-size: 11px;\n          font-weight: 600;\n        }\n        \n        .col-create {\n          margin-bottom: 4px;\n        }\n        \n        .create-link {\n          color: #5e6c84;\n          cursor: pointer;\n          font-size: 12px;\n          padding: 6px;\n          display: block;\n          border-radius: 3px;\n          transition: background-color 0.2s;\n        }\n        \n        .create-link:hover {\n          background: #ebecf0;\n        }\n        \n        .create-card {\n          background: white;\n          border: 1px solid #dfe1e5;\n          border-radius: 4px;\n          padding: 8px;\n        }\n        \n        .create-input {\n          width: 100%;\n          border: 1px solid #dfe1e5;\n          border-radius: 3px;\n          padding: 6px;\n          font-size: 12px;\n          resize: vertical;\n          margin-bottom: 6px;\n          color: #172b4d;\n        }\n        \n        .create-actions {\n          display: flex;\n          gap: 6px;\n          align-items: center;\n        }\n        \n        .create-select {\n          flex: 1;\n          border: 1px solid #dfe1e5;\n          border-radius: 3px;\n          padding: 4px;\n          font-size: 11px;\n          color: #172b4d;\n        }\n        \n        .create-btn {\n          background: #f5f6f8;\n          border: 1px solid #dfe1e5;\n          border-radius: 3px;\n          padding: 4px;\n          cursor: pointer;\n          font-size: 11px;\n          color: #5e6c84;\n        }\n        \n        .card-item {\n          background: white;\n          border: 1px solid #dfe1e5;\n          border-radius: 6px;\n          padding: 12px;\n          cursor: pointer;\n          transition: all 0.2s;\n          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n        }\n        \n        .card-item:hover {\n          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n          border-color: #c1c7d0;\n        }\n        \n        .card-top {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 6px;\n        }\n        \n        .card-tag {\n          font-size: 10px;\n          font-weight: 600;\n          padding: 2px 4px;\n          border-radius: 3px;\n          text-transform: uppercase;\n        }\n        \n        .card-tag-task {\n          background: #e3f2fd;\n          color: #1976d2;\n        }\n        \n        .card-tag-bug {\n          background: #ffebee;\n          color: #d32f2f;\n        }\n        \n        .card-tag-subtask {\n          background: #f3e5f5;\n          color: #7b1fa2;\n        }\n        \n        .card-id {\n          color: #5e6c84;\n          font-size: 10px;\n          font-family: monospace;\n        }\n        \n        .card-title {\n          font-size: 13px;\n          line-height: 1.3;\n          color: #172b4d;\n          font-weight: 500;\n        }\n        \n        .modal-overlay {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: rgba(0, 0, 0, 0.5);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .modal {\n          background: white;\n          border-radius: 8px;\n          padding: 24px;\n          display: grid;\n          grid-template-columns: repeat(3, 1fr);\n          gap: 16px;\n          max-width: 900px;\n          width: 100%;\n          max-height: 80vh;\n          overflow-y: auto;\n          box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n        }\n        \n        .modal h2 {\n          margin: 0 0 16px 0;\n          font-size: 20px;\n          font-weight: 600;\n          color: #172b4d;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        .modal-delete-btn {\n          background: #d32f2f;\n          border: none;\n          border-radius: 4px;\n          padding: 6px 10px;\n          color: white;\n          cursor: pointer;\n          font-size: 12px;\n        }\n        \n        .modal-field {\n          display: flex;\n          flex-direction: column;\n          gap: 4px;\n        }\n        \n        .modal-field label {\n          font-size: 12px;\n          font-weight: 600;\n          color: #5e6c84;\n        }\n        \n        .modal-field input, .modal-field textarea, .modal-field select {\n          border: 1px solid #dfe1e5;\n          border-radius: 4px;\n          padding: 8px;\n          font-size: 13px;\n          background: white;\n          transition: border-color 0.2s;\n          color: #172b4d;\n        }\n        \n        .modal-field input:focus, .modal-field textarea:focus, .modal-field select:focus {\n          outline: none;\n          border-color: #1976d2;\n        }\n        \n        .modal-field input:disabled {\n          background: #f5f6f8;\n          color: #5e6c84;\n        }\n        \n        .modal-actions {\n          display: flex;\n          justify-content: flex-end;\n          gap: 8px;\n          margin-top: 16px;\n        }\n        \n        .btn-reset {\n          background: #5e6c84;\n          border: none;\n          padding: 8px 16px;\n          border-radius: 4px;\n          cursor: pointer;\n          color: white;\n          font-size: 12px;\n          font-weight: 600;\n        }\n        \n        .btn-save {\n          background: #1976d2;\n          border: none;\n          color: white;\n          padding: 8px 16px;\n          border-radius: 4px;\n          cursor: pointer;\n          font-size: 12px;\n          font-weight: 600;\n        }\n      `}</style>\n    </div>\n  );\n}\n"],"mappings":";;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAclD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,Q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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// /*\n//   Enhancements:\n//   - Keyboard-only moves: when a card is focused, user can press ArrowLeft/ArrowRight to move between columns.\n//   - Buttons for accessibility to move left/right.\n//   - Export/Import CSV for issues in the top header.\n// */\n\n// const STATUSES = ['todo','inprogress','review','done'];\n\n// function issuesToCSV(issues) {\n//   const headers = ['id','projectId','title','status','priority','assignee','type','storyPoints','createdAt'];\n//   const rows = issues.map(i => headers.map(h => `\"${(i[h]||'').toString().replace(/\"/g,'\"\"')}\"`).join(','));\n//   return [headers.join(','), ...rows].join('\\n');\n// }\n\n// function csvToIssues(csv) {\n//   const lines = csv.split(/\\r?\\n/).filter(Boolean);\n//   if(lines.length < 2) return [];\n//   const headers = lines[0].split(',').map(h => h.replace(/(^\"|\"$)/g,''));\n//   const res = [];\n//   for(let i=1;i<lines.length;i++){\n//     const cols = lines[i].split(',').map(c => c.replace(/(^\"|\"$)/g,''));\n//     const obj = {};\n//     headers.forEach((h,idx)=> obj[h]=cols[idx]||'');\n//     res.push(obj);\n//   }\n//   return res;\n// }\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const refresh = async ()=> setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n//   const onDragStart = (e,id) => { e.dataTransfer.setData('text/plain', id); };\n\n//   const byStatus = s => issues.filter(i=>i.status===s);\n\n//   // keyboard move handler: ArrowLeft/ArrowRight move between columns\n//   const handleKey = async (e, issue) => {\n//     if(e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n//       e.preventDefault();\n//       const idx = STATUSES.indexOf(issue.status);\n//       let targetIdx = idx + (e.key === 'ArrowRight' ? 1 : -1);\n//       targetIdx = Math.max(0, Math.min(STATUSES.length-1, targetIdx));\n//       const target = STATUSES[targetIdx];\n//       if(target !== issue.status) {\n//         await moveIssue(issue.id, target);\n//         refresh();\n//       }\n//     }\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx-1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length-1, idx+1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n\n//   // Export CSV\n//   const exportCSV = () => {\n//     const csv = issuesToCSV(issues);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url; a.download = `issues_export_${projectId||'all'}.csv`; a.click();\n//     URL.revokeObjectURL(url);\n//   };\n\n//   // Import CSV\n//   const importCSV = (e) => {\n//     const file = e.target.files && e.target.files[0];\n//     if(!file) return;\n//     const reader = new FileReader();\n//     reader.onload = async (ev) => {\n//       try {\n//         const text = ev.target.result;\n//         const imported = csvToIssues(text);\n//         // Merge with existing issues: simple append with new IDs\n//         for(const row of imported){\n//           // only minimal fields handled; createIssue is not imported here to avoid API mismatch\n//           // createIssue would be used for full import; for demo we push to localStorage directly\n//           // but here we attempt to call moveIssue or update if id exists. fallback: ignore.\n//         }\n//         alert('Import parsed ' + imported.length + ' rows. For full import to central DB, use backend import.');\n//       } catch(err) {\n//         alert('CSV parse error: ' + err.message);\n//       }\n//     };\n//     reader.readAsText(file);\n//     // reset file input\n//     e.target.value = '';\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:12}}>\n//         <h2 style={{margin:0}}>Kanban Board {projectId?`- ${projectId}`:''}</h2>\n//         <div style={{display:'flex',gap:8,alignItems:'center'}}>\n//           <button className=\"btn-ghost\" onClick={exportCSV} aria-label=\"Export issues as CSV\">Export CSV</button>\n//           <label className=\"btn-ghost\" style={{cursor:'pointer'}}>\n//             Import CSV\n//             <input ref={fileRef} type=\"file\" accept=\".csv,text/csv\" onChange={importCSV} style={{display:'none'}} aria-hidden=\"true\"/>\n//           </label>\n//           <button className=\"btn\" onClick={()=>window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s=>(\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e=>e.preventDefault()} onDrop={e=>onDrop(e,s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i=>(\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e=>onDragStart(e,i.id)}\n//                 onKeyDown={(e)=>handleKey(e,i)}\n//                 aria-describedby={`desc-${i.id}`}>\n//                 <div style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{display:'flex',gap:6}}>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveLeft(i.id); }} aria-label={`Move ${i.title} left`}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveRight(i.id); }} aria-label={`Move ${i.title} right`}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div id={`desc-${i.id}`} className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { useProjects } from '../../context/ProjectContext';\n\n// const STATUSES = ['todo', 'inprogress', 'review', 'done'];\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const { projects } = useProjects();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const refresh = async () => setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n\n//   const onDragStart = (e, id) => {\n//     e.dataTransfer.setData('text/plain', id);\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx - 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length - 1, idx + 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const byStatus = (s) => issues.filter(i => i.status === s);\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n//         <h2 style={{ margin: 0 }}>Kanban Board {projectId ? `- ${projectId}` : ''}</h2>\n//         <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\n//           <button className=\"btn\" onClick={() => window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s => (\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e => e.preventDefault()} onDrop={e => onDrop(e, s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i => (\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e => onDragStart(e, i.id)}>\n//                 <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{ display: 'flex', gap: 6 }}>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveLeft(i.id); }}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveRight(i.id); }}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n\n//       <div style={{ marginTop: 20 }}>\n//         <h3>📋 Projects from Timeline</h3>\n//         <ul>\n//           {projects.map(p => (\n//             <li key={p.id}>\n//               <strong>{p.text}</strong> — Starts: {p.start_date}, Duration: {p.duration} days\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/components/boards/KanbanBoard.js"],"sourcesContent":["\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// /*\n//   Enhancements:\n//   - Keyboard-only moves: when a card is focused, user can press ArrowLeft/ArrowRight to move between columns.\n//   - Buttons for accessibility to move left/right.\n//   - Export/Import CSV for issues in the top header.\n// */\n\n// const STATUSES = ['todo','inprogress','review','done'];\n\n// function issuesToCSV(issues) {\n//   const headers = ['id','projectId','title','status','priority','assignee','type','storyPoints','createdAt'];\n//   const rows = issues.map(i => headers.map(h => `\"${(i[h]||'').toString().replace(/\"/g,'\"\"')}\"`).join(','));\n//   return [headers.join(','), ...rows].join('\\n');\n// }\n\n// function csvToIssues(csv) {\n//   const lines = csv.split(/\\r?\\n/).filter(Boolean);\n//   if(lines.length < 2) return [];\n//   const headers = lines[0].split(',').map(h => h.replace(/(^\"|\"$)/g,''));\n//   const res = [];\n//   for(let i=1;i<lines.length;i++){\n//     const cols = lines[i].split(',').map(c => c.replace(/(^\"|\"$)/g,''));\n//     const obj = {};\n//     headers.forEach((h,idx)=> obj[h]=cols[idx]||'');\n//     res.push(obj);\n//   }\n//   return res;\n// }\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const refresh = async ()=> setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n//   const onDragStart = (e,id) => { e.dataTransfer.setData('text/plain', id); };\n\n//   const byStatus = s => issues.filter(i=>i.status===s);\n\n//   // keyboard move handler: ArrowLeft/ArrowRight move between columns\n//   const handleKey = async (e, issue) => {\n//     if(e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n//       e.preventDefault();\n//       const idx = STATUSES.indexOf(issue.status);\n//       let targetIdx = idx + (e.key === 'ArrowRight' ? 1 : -1);\n//       targetIdx = Math.max(0, Math.min(STATUSES.length-1, targetIdx));\n//       const target = STATUSES[targetIdx];\n//       if(target !== issue.status) {\n//         await moveIssue(issue.id, target);\n//         refresh();\n//       }\n//     }\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx-1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i=>i.id===id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length-1, idx+1)];\n//     if(target !== issue.status){ await moveIssue(id,target); refresh(); }\n//   };\n\n//   // Export CSV\n//   const exportCSV = () => {\n//     const csv = issuesToCSV(issues);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url; a.download = `issues_export_${projectId||'all'}.csv`; a.click();\n//     URL.revokeObjectURL(url);\n//   };\n\n//   // Import CSV\n//   const importCSV = (e) => {\n//     const file = e.target.files && e.target.files[0];\n//     if(!file) return;\n//     const reader = new FileReader();\n//     reader.onload = async (ev) => {\n//       try {\n//         const text = ev.target.result;\n//         const imported = csvToIssues(text);\n//         // Merge with existing issues: simple append with new IDs\n//         for(const row of imported){\n//           // only minimal fields handled; createIssue is not imported here to avoid API mismatch\n//           // createIssue would be used for full import; for demo we push to localStorage directly\n//           // but here we attempt to call moveIssue or update if id exists. fallback: ignore.\n//         }\n//         alert('Import parsed ' + imported.length + ' rows. For full import to central DB, use backend import.');\n//       } catch(err) {\n//         alert('CSV parse error: ' + err.message);\n//       }\n//     };\n//     reader.readAsText(file);\n//     // reset file input\n//     e.target.value = '';\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:12}}>\n//         <h2 style={{margin:0}}>Kanban Board {projectId?`- ${projectId}`:''}</h2>\n//         <div style={{display:'flex',gap:8,alignItems:'center'}}>\n//           <button className=\"btn-ghost\" onClick={exportCSV} aria-label=\"Export issues as CSV\">Export CSV</button>\n//           <label className=\"btn-ghost\" style={{cursor:'pointer'}}>\n//             Import CSV\n//             <input ref={fileRef} type=\"file\" accept=\".csv,text/csv\" onChange={importCSV} style={{display:'none'}} aria-hidden=\"true\"/>\n//           </label>\n//           <button className=\"btn\" onClick={()=>window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s=>(\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e=>e.preventDefault()} onDrop={e=>onDrop(e,s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i=>(\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e=>onDragStart(e,i.id)}\n//                 onKeyDown={(e)=>handleKey(e,i)}\n//                 aria-describedby={`desc-${i.id}`}>\n//                 <div style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{display:'flex',gap:6}}>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveLeft(i.id); }} aria-label={`Move ${i.title} left`}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e)=>{ e.stopPropagation(); moveRight(i.id); }} aria-label={`Move ${i.title} right`}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div id={`desc-${i.id}`} className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import { listIssues, moveIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { useProjects } from '../../context/ProjectContext';\n\n// const STATUSES = ['todo', 'inprogress', 'review', 'done'];\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const { projects } = useProjects();\n//   const [issues, setIssues] = useState([]);\n//   const fileRef = useRef(null);\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const refresh = async () => setIssues(await listIssues(projectId));\n\n//   const onDrop = async (e, status) => {\n//     const id = e.dataTransfer.getData('text/plain');\n//     await moveIssue(id, status);\n//     refresh();\n//   };\n\n//   const onDragStart = (e, id) => {\n//     e.dataTransfer.setData('text/plain', id);\n//   };\n\n//   const moveLeft = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.max(0, idx - 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const moveRight = async (id) => {\n//     const issue = issues.find(i => i.id === id);\n//     const idx = STATUSES.indexOf(issue.status);\n//     const target = STATUSES[Math.min(STATUSES.length - 1, idx + 1)];\n//     if (target !== issue.status) {\n//       await moveIssue(id, target);\n//       refresh();\n//     }\n//   };\n\n//   const byStatus = (s) => issues.filter(i => i.status === s);\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-label=\"Kanban board\">\n//       <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n//         <h2 style={{ margin: 0 }}>Kanban Board {projectId ? `- ${projectId}` : ''}</h2>\n//         <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\n//           <button className=\"btn\" onClick={() => window.print()} aria-label=\"Print board\">Print</button>\n//         </div>\n//       </div>\n\n//       <div className=\"kanban\" role=\"list\">\n//         {STATUSES.map(s => (\n//           <section key={s} className=\"kanban-column\" aria-labelledby={`col-${s}`} onDragOver={e => e.preventDefault()} onDrop={e => onDrop(e, s)}>\n//             <h4 id={`col-${s}`}>{s.toUpperCase()}</h4>\n//             {byStatus(s).map(i => (\n//               <article key={i.id} className=\"card-item\" role=\"listitem\" tabIndex=\"0\" data-priority={i.priority}\n//                 draggable onDragStart={e => onDragStart(e, i.id)}>\n//                 <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n//                   <strong>{i.title}</strong>\n//                   <div style={{ display: 'flex', gap: 6 }}>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveLeft(i.id); }}>◀</button>\n//                     <button className=\"btn-ghost\" onClick={(e) => { e.stopPropagation(); moveRight(i.id); }}>▶</button>\n//                   </div>\n//                 </div>\n//                 <div className=\"small\">Assignee: {i.assignee} • {i.storyPoints} pts</div>\n//               </article>\n//             ))}\n//           </section>\n//         ))}\n//       </div>\n\n//       <div style={{ marginTop: 20 }}>\n//         <h3>📋 Projects from Timeline</h3>\n//         <ul>\n//           {projects.map(p => (\n//             <li key={p.id}>\n//               <strong>{p.text}</strong> — Starts: {p.start_date}, Duration: {p.duration} days\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
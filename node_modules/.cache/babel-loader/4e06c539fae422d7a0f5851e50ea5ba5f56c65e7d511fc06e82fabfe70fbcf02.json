{"ast":null,"code":"\n\n//  // for epic delete button \n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const STATUSES = [\n//   'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n// ];\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const mockEpics = [\n//   { id: 'p1', name: 'Frontend' },\n//   { id: 'p2', name: 'Middleware' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n\n// const listEpics = async () => {\n//   await simulateApiDelay();\n//   return mockEpics;\n// };\n\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = {\n//     id: 'p' + (mockEpics.length + 1),\n//     name: epicName\n//   };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) {\n//     mockEpics.splice(epicIndex, 1);\n//   }\n\n//   // Also delete all issues associated with this epic\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => {\n//     if (issue.epic === epicId) {\n//       issueIndices.push(index);\n//     }\n//   });\n\n//   // Remove issues from highest index to lowest to avoid index issues\n//   issueIndices.sort((a, b) => b - a).forEach(index => {\n//     mockIssues.splice(index, 1);\n//   });\n// };\n\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n\n// const createIssueAPI = async (issue) => {\n//   await simulateApiDelay();\n//   mockIssues.push(issue);\n// };\n\n// const deleteIssueAPI = async (issueId) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === issueId);\n//   if (idx > -1) mockIssues.splice(idx, 1);\n// };\n\n// const updateIssueAPI = async (updatedIssue) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === updatedIssue.id);\n//   if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue };\n// };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const [issuesData, epicsData] = await Promise.all([\n//           listIssues(projectId),\n//           listEpics()\n//         ]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {};\n//         const initialTitles = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//       } catch (err) {\n//         console.error('Failed to load data:', err);\n//       }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const onTitleChange = (id, value) => setCustomTitles(prev => ({ ...prev, [id]: value }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) {\n//       console.error('Error moving issue:', err);\n//     }\n//   };\n\n//   const onDragOver = e => e.preventDefault();\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error('Error creating issue:', err); }\n//   };\n\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) { alert('Epic name is required'); return; }\n//     try {\n//       const newEpic = await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n\n//       // Update open swimlanes and custom titles for the new epic\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//     } catch (err) { console.error('Error creating epic:', err); }\n//   };\n\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) { alert('Please select an epic to delete'); return; }\n\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//     } catch (err) { console.error('Error deleting epic:', err); }\n//   };\n\n//   const handleDelete = async () => {\n//     if (!selectedIssue) return;\n//     await deleteIssueAPI(selectedIssue.id);\n//     const refreshed = await listIssues(projectId);\n//     setIssues(refreshed);\n//     setSelectedIssue(null);\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Epic Management Buttons */}\n//       <div className=\"epic-management-section\">\n//         <div className=\"epic-buttons-container\">\n//           <button className=\"create-epic-btn\" onClick={() => { setShowCreateEpic(true); setShowDeleteEpic(false); }}>\n//             + Create Epic\n//           </button>\n//           <button className=\"delete-epic-btn\" onClick={() => { setShowDeleteEpic(true); setShowCreateEpic(false); }}>\n//             ðŸ—‘ Delete Epic\n//           </button>\n//         </div>\n\n//         {/* Create Epic Modal */}\n//         {showCreateEpic && (\n//           <div className=\"epic-modal-overlay\" onClick={() => setShowCreateEpic(false)}>\n//             <div className=\"epic-modal\" onClick={e => e.stopPropagation()}>\n//               <div className=\"epic-modal-content\">\n//                 <h3>Create New Epic</h3>\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Enter epic name (e.g., Frontend, Backend, Database)\"\n//                   value={newEpicName}\n//                   onChange={(e) => setNewEpicName(e.target.value)}\n//                   className=\"epic-modal-input\"\n//                   autoFocus\n//                 />\n//                 <div className=\"epic-modal-actions\">\n//                   <button className=\"btn-cancel\" onClick={() => { setShowCreateEpic(false); setNewEpicName(''); }}>\n//                     Cancel\n//                   </button>\n//                   <button className=\"btn-create\" onClick={handleCreateEpic}>\n//                     Create Epic\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n\n//         {/* Delete Epic Modal */}\n//         {showDeleteEpic && (\n//           <div className=\"epic-modal-overlay\" onClick={() => setShowDeleteEpic(false)}>\n//             <div className=\"epic-modal\" onClick={e => e.stopPropagation()}>\n//               <div className=\"epic-modal-content\">\n//                 <h3>Delete Epic</h3>\n//                 <p className=\"delete-warning\">Select an epic to delete. This will also delete all issues in the epic.</p>\n//                 <select \n//                   value={epicToDelete} \n//                   onChange={(e) => setEpicToDelete(e.target.value)}\n//                   className=\"epic-modal-select\"\n//                 >\n//                   <option value=\"\">Select an epic...</option>\n//                   {epics.map(epic => (\n//                     <option key={epic.id} value={epic.id}>\n//                       {epic.name} ({swimlanes.find(s => s.id === epic.id)?.issues.length || 0} issues)\n//                     </option>\n//                   ))}\n//                 </select>\n//                 <div className=\"epic-modal-actions\">\n//                   <button className=\"btn-cancel\" onClick={() => { setShowDeleteEpic(false); setEpicToDelete(''); }}>\n//                     Cancel\n//                   </button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteEpic} disabled={!epicToDelete}>\n//                     Delete Epic\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {swimlanes.map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                 {isOpen ? 'â–¼' : 'â–¶'}\n//               </button>\n//               <span className=\"swimlane-icon\">âš¡</span>\n//               <input className=\"swimlane-title-input\" value={customTitles[lane.id] || ''} onChange={e => onTitleChange(lane.id, e.target.value)} />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\">\n//                 {STATUSES.map(status => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div className=\"kanban-column\" key={status} onDragOver={onDragOver} onDrop={e => onDrop(e, status, lane.id)}>\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>âœ”</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>âœ–</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => (\n//                         <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                           <div className=\"card-top\">\n//                             <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                             <span className=\"card-id\">{issue.id}</span>\n//                           </div>\n//                           <div className=\"card-title\">{issue.title}</div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Issue Modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className=\"modal\" onClick={e => e.stopPropagation()}>\n//             <h2 style={{ gridColumn: \"span 3\" }}>{editIssue.epicName}\n//               <button className=\"modal-delete-btn\" onClick={handleDelete}>ðŸ—‘</button>\n//             </h2>\n\n//             <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n\n//             <div className=\"modal-field\"><label>Status</label>\n//               <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\n//                 {STATUSES.map(st => <option key={st} value={st}>{st}</option>)}\n//               </select>\n//             </div>\n\n//             <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//             <div className=\"modal-field\"><label>Priority</label>\n//               <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                 <option>Low</option><option>Medium</option><option>High</option>\n//               </select>\n//             </div>\n//             <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\" }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Styles */}\n//       <style>{`\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f5f6f8;\n//           margin: 0;\n//           padding: 16px;\n//         }\n\n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n\n//         .epic-management-section {\n//           margin-bottom: 20px;\n//           position: relative;\n//         }\n\n//         .epic-buttons-container {\n//           display: flex;\n//           justify-content: flex-end;\n//           gap: 12px;\n//           margin-bottom: 10px;\n//         }\n\n//         .create-epic-btn {\n//           background: #1976d2;\n//           color: white;\n//           border: none;\n//           padding: 10px 16px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//           margin: 5px;\n//         }\n\n//         .create-epic-btn:hover {\n//           background: #1565c0;\n//         }\n\n//         .delete-epic-btn {\n//           background: #d32f2f;\n//           color: white;\n//           border: none;\n//           padding: 10px 16px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//           margin: 5px;\n//         }\n\n//         .delete-epic-btn:hover {\n//           background: #c62828;\n//         }\n\n//         .delete-epic-btn:disabled {\n//           background: #cccccc;\n//           cursor: not-allowed;\n//         }\n\n//         .epic-modal-overlay {\n//           position: fixed;\n//           top: 0;\n//           left: 0;\n//           right: 0;\n//           bottom: 0;\n//           background: rgba(0, 0, 0, 0.5);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//           padding: 20px;\n//         }\n\n//         .epic-modal {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 24px;\n//           max-width: 500px;\n//           width: 100%;\n//           box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n//         }\n\n//         .epic-modal-content h3 {\n//           margin: 0 0 16px 0;\n//           font-size: 18px;\n//           font-weight: 600;\n//           color: #172b4d;\n//         }\n\n//         .delete-warning {\n//           color: #d32f2f;\n//           font-size: 14px;\n//           margin-bottom: 16px;\n//           padding: 8px;\n//           background: #ffebee;\n//           border-radius: 4px;\n//         }\n\n//         .epic-modal-input, .epic-modal-select {\n//           width: 100%;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 10px 12px;\n//           font-size: 14px;\n//           margin-bottom: 16px;\n//           box-sizing: border-box;\n//         }\n\n//         .epic-modal-input:focus, .epic-modal-select:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n\n//         .epic-modal-actions {\n//           display: flex;\n//           gap: 12px;\n//           justify-content: flex-end;\n//         }\n\n//         .btn-cancel {\n//           background: #5e6c84;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//         }\n\n//         .btn-create {\n//           background: #1976d2;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//         }\n\n//         .btn-delete {\n//           background: #d32f2f;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//         }\n\n//         .btn-delete:disabled {\n//           background: #cccccc;\n//           cursor: not-allowed;\n//         }\n\n//         .swimlane {\n//           background: white;\n//           border-radius: 8px;\n//           margin-bottom: 16px;\n//           box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n//           overflow: hidden;\n//         }\n\n//         .swimlane-header {\n//           display: flex;\n//           align-items: center;\n//           padding: 12px 16px;\n//           background: #fafbfc;\n//           border-bottom: 1px solid #dfe1e5;\n//           font-weight: 600;\n//           font-size: 14px;\n//           color: #172b4d;\n//         }\n\n//         .swimlane-toggle {\n//           background: none;\n//           border: none;\n//           font-size: 12px;\n//           margin-right: 8px;\n//           cursor: pointer;\n//           color: #5e6c84;\n//         }\n\n//         .swimlane-icon {\n//           margin-right: 8px;\n//           font-size: 16px;\n//           color: #5e6c84;\n//         }\n\n//         .swimlane-title-input {\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 4px 8px;\n//           font-size: 14px;\n//           font-weight: 600;\n//           background: white;\n//           margin-right: 8px;\n//           min-width: 150px;\n//           color: #172b4d;\n//         }\n\n//         .swimlane-count {\n//           color: #5e6c84;\n//           font-size: 12px;\n//           font-weight: normal;\n//         }\n\n//         .kanban-row {\n//           display: flex;\n//           padding: 16px;\n//           gap: 12px;\n//           overflow-x: auto;\n//           min-height: 300px;\n//         }\n\n//         .kanban-column {\n//           flex: 0 0 260px;\n//           background: #f5f6f8;\n//           border-radius: 6px;\n//           padding: 12px;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 8px;\n//           border: 1px solid #dfe1e5;\n//         }\n\n//         .col-header {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 4px;\n//         }\n\n//         .col-title {\n//           font-weight: 600;\n//           font-size: 12px;\n//           color: #5e6c84;\n//           text-transform: uppercase;\n//           letter-spacing: 0.5px;\n//         }\n\n//         .col-count {\n//           background: #dfe1e5;\n//           color: #5e6c84;\n//           border-radius: 10px;\n//           padding: 1px 6px;\n//           font-size: 11px;\n//           font-weight: 600;\n//         }\n\n//         .col-create {\n//           margin-bottom: 4px;\n//         }\n\n//         .create-link {\n//           color: #5e6c84;\n//           cursor: pointer;\n//           font-size: 12px;\n//           padding: 6px;\n//           display: block;\n//           border-radius: 3px;\n//           transition: background-color 0.2s;\n//         }\n\n//         .create-link:hover {\n//           background: #ebecf0;\n//         }\n\n//         .create-card {\n//           background: white;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 8px;\n//         }\n\n//         .create-input {\n//           width: 100%;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 3px;\n//           padding: 6px;\n//           font-size: 12px;\n//           resize: vertical;\n//           margin-bottom: 6px;\n//           color: #172b4d;\n//         }\n\n//         .create-actions {\n//           display: flex;\n//           gap: 6px;\n//           align-items: center;\n//         }\n\n//         .create-select {\n//           flex: 1;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 3px;\n//           padding: 4px;\n//           font-size: 11px;\n//           color: #172b4d;\n//         }\n\n//         .create-btn {\n//           background: #f5f6f8;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 3px;\n//           padding: 4px;\n//           cursor: pointer;\n//           font-size: 11px;\n//           color: #5e6c84;\n//         }\n\n//         .card-item {\n//           background: white;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 6px;\n//           padding: 12px;\n//           cursor: pointer;\n//           transition: all 0.2s;\n//           box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n//         }\n\n//         .card-item:hover {\n//           box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n//           border-color: #c1c7d0;\n//         }\n\n//         .card-top {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 6px;\n//         }\n\n//         .card-tag {\n//           font-size: 10px;\n//           font-weight: 600;\n//           padding: 2px 4px;\n//           border-radius: 3px;\n//           text-transform: uppercase;\n//         }\n\n//         .card-tag-task {\n//           background: #e3f2fd;\n//           color: #1976d2;\n//         }\n\n//         .card-tag-bug {\n//           background: #ffebee;\n//           color: #d32f2f;\n//         }\n\n//         .card-tag-subtask {\n//           background: #f3e5f5;\n//           color: #7b1fa2;\n//         }\n\n//         .card-id {\n//           color: #5e6c84;\n//           font-size: 10px;\n//           font-family: monospace;\n//         }\n\n//         .card-title {\n//           font-size: 13px;\n//           line-height: 1.3;\n//           color: #172b4d;\n//           font-weight: 500;\n//         }\n\n//         .modal-overlay {\n//           position: fixed;\n//           top: 0;\n//           left: 0;\n//           right: 0;\n//           bottom: 0;\n//           background: rgba(0, 0, 0, 0.5);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//           padding: 20px;\n//         }\n\n//         .modal {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 24px;\n//           display: grid;\n//           grid-template-columns: repeat(3, 1fr);\n//           gap: 16px;\n//           max-width: 900px;\n//           width: 100%;\n//           max-height: 80vh;\n//           overflow-y: auto;\n//           box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n//         }\n\n//         .modal h2 {\n//           margin: 0 0 16px 0;\n//           font-size: 20px;\n//           font-weight: 600;\n//           color: #172b4d;\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//         }\n\n//         .modal-delete-btn {\n//           background: #d32f2f;\n//           border: none;\n//           border-radius: 4px;\n//           padding: 6px 10px;\n//           color: white;\n//           cursor: pointer;\n//           font-size: 12px;\n//         }\n\n//         .modal-field {\n//           display: flex;\n//           flex-direction: column;\n//           gap: 4px;\n//         }\n\n//         .modal-field label {\n//           font-size: 12px;\n//           font-weight: 600;\n//           color: #5e6c84;\n//         }\n\n//         .modal-field input, .modal-field textarea, .modal-field select {\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 8px;\n//           font-size: 13px;\n//           background: white;\n//           transition: border-color 0.2s;\n//           color: #172b4d;\n//         }\n\n//         .modal-field input:focus, .modal-field textarea:focus, .modal-field select:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n\n//         .modal-field input:disabled {\n//           background: #f5f6f8;\n//           color: #5e6c84;\n//         }\n\n//         .modal-actions {\n//           display: flex;\n//           justify-content: flex-end;\n//           gap: 8px;\n//           margin-top: 16px;\n//         }\n\n//         .btn-reset {\n//           background: #5e6c84;\n//           border: none;\n//           padding: 8px 16px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 12px;\n//           font-weight: 600;\n//         }\n\n//         .btn-save {\n//           background: #1976d2;\n//           border: none;\n//           color: white;\n//           padding: 8px 16px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           font-size: 12px;\n//           font-weight: 600;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const STATUSES = [\n//   'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n// ];\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const mockEpics = [\n//   { id: 'p1', name: 'Frontend' },\n//   { id: 'p2', name: 'Middleware' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n\n// const listEpics = async () => {\n//   await simulateApiDelay();\n//   return mockEpics;\n// };\n\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = {\n//     id: 'p' + (mockEpics.length + 1),\n//     name: epicName\n//   };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) {\n//     mockEpics.splice(epicIndex, 1);\n//   }\n\n//   // Also delete all issues associated with this epic\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => {\n//     if (issue.epic === epicId) {\n//       issueIndices.push(index);\n//     }\n//   });\n\n//   // Remove issues from highest index to lowest to avoid index issues\n//   issueIndices.sort((a, b) => b - a).forEach(index => {\n//     mockIssues.splice(index, 1);\n//   });\n// };\n\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n\n// const createIssueAPI = async (issue) => {\n//   await simulateApiDelay();\n//   mockIssues.push(issue);\n// };\n\n// const deleteIssueAPI = async (issueId) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === issueId);\n//   if (idx > -1) mockIssues.splice(idx, 1);\n// };\n\n// const updateIssueAPI = async (updatedIssue) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === updatedIssue.id);\n//   if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue };\n// };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const [issuesData, epicsData] = await Promise.all([\n//           listIssues(projectId),\n//           listEpics()\n//         ]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {};\n//         const initialTitles = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//       } catch (err) {\n//         console.error('Failed to load data:', err);\n//       }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const onTitleChange = (id, value) => setCustomTitles(prev => ({ ...prev, [id]: value }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) {\n//       console.error('Error moving issue:', err);\n//     }\n//   };\n\n//   const onDragOver = e => e.preventDefault();\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error('Error creating issue:', err); }\n//   };\n\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) { alert('Epic name is required'); return; }\n//     try {\n//       const newEpic = await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n\n//       // Update open swimlanes and custom titles for the new epic\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//     } catch (err) { console.error('Error creating epic:', err); }\n//   };\n\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) { alert('Please select an epic to delete'); return; }\n\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//     } catch (err) { console.error('Error deleting epic:', err); }\n//   };\n\n//   const handleDelete = async () => {\n//     if (!selectedIssue) return;\n//     await deleteIssueAPI(selectedIssue.id);\n//     const refreshed = await listIssues(projectId);\n//     setIssues(refreshed);\n//     setSelectedIssue(null);\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Epic Management Buttons */}\n//       <div className=\"epic-management-section\">\n//         <div className=\"epic-buttons-container\">\n//           <button className=\"create-epic-btn\" onClick={() => { setShowCreateEpic(true); setShowDeleteEpic(false); }}>\n//             + Create Epic\n//           </button>\n//           <button className=\"delete-epic-btn\" onClick={() => { setShowDeleteEpic(true); setShowCreateEpic(false); }}>\n//             ðŸ—‘ Delete Epic\n//           </button>\n//         </div>\n\n//         {/* Create Epic Modal */}\n//         {showCreateEpic && (\n//           <div className=\"epic-modal-overlay\" onClick={() => setShowCreateEpic(false)}>\n//             <div className=\"epic-modal\" onClick={e => e.stopPropagation()}>\n//               <div className=\"epic-modal-content\">\n//                 <h3>Create New Epic</h3>\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Enter epic name (e.g., Frontend, Backend, Database)\"\n//                   value={newEpicName}\n//                   onChange={(e) => setNewEpicName(e.target.value)}\n//                   className=\"epic-modal-input\"\n//                   autoFocus\n//                 />\n//                 <div className=\"epic-modal-actions\">\n//                   <button className=\"btn-cancel\" onClick={() => { setShowCreateEpic(false); setNewEpicName(''); }}>\n//                     Cancel\n//                   </button>\n//                   <button className=\"btn-create\" onClick={handleCreateEpic}>\n//                     Create Epic\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n\n//         {/* Delete Epic Modal */}\n//         {showDeleteEpic && (\n//           <div className=\"epic-modal-overlay\" onClick={() => setShowDeleteEpic(false)}>\n//             <div className=\"epic-modal\" onClick={e => e.stopPropagation()}>\n//               <div className=\"epic-modal-content\">\n//                 <h3>Delete Epic</h3>\n//                 <p className=\"delete-warning\">Select an epic to delete. This will also delete all issues in the epic.</p>\n//                 <select \n//                   value={epicToDelete} \n//                   onChange={(e) => setEpicToDelete(e.target.value)}\n//                   className=\"epic-modal-select\"\n//                 >\n//                   <option value=\"\">Select an epic...</option>\n//                   {epics.map(epic => (\n//                     <option key={epic.id} value={epic.id}>\n//                       {epic.name} ({swimlanes.find(s => s.id === epic.id)?.issues.length || 0} issues)\n//                     </option>\n//                   ))}\n//                 </select>\n//                 <div className=\"epic-modal-actions\">\n//                   <button className=\"btn-cancel\" onClick={() => { setShowDeleteEpic(false); setEpicToDelete(''); }}>\n//                     Cancel\n//                   </button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteEpic} disabled={!epicToDelete}>\n//                     Delete Epic\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {swimlanes.map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                 {isOpen ? 'â–¼' : 'â–¶'}\n//               </button>\n//               <span className=\"swimlane-icon\">âš¡</span>\n//               <input className=\"swimlane-title-input\" value={customTitles[lane.id] || ''} onChange={e => onTitleChange(lane.id, e.target.value)} />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\">\n//                 {STATUSES.map(status => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div className=\"kanban-column\" key={status} onDragOver={onDragOver} onDrop={e => onDrop(e, status, lane.id)}>\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                         <div className=\"col-actions\">\n//                           <span className=\"col-create-btn\" onClick={() => handleCreateClick(lane.id)}>+</span>\n//                           <span className=\"col-menu\">...</span>\n//                         </div>\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>âœ”</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>âœ–</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => (\n//                         <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                           <div className=\"card-top\">\n//                             <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                             <span className=\"card-id\">{issue.id}</span>\n//                           </div>\n//                           <div className=\"card-title\">{issue.title}</div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Issue Modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className=\"modal\" onClick={e => e.stopPropagation()}>\n//             <h2 style={{ gridColumn: \"span 3\" }}>{editIssue.epicName}\n//               <button className=\"modal-delete-btn\" onClick={handleDelete}>ðŸ—‘</button>\n//             </h2>\n\n//             <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n\n//             <div className=\"modal-field\"><label>Status</label>\n//               <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\n//                 {STATUSES.map(st => <option key={st} value={st}>{st}</option>)}\n//               </select>\n//             </div>\n\n//             <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//             <div className=\"modal-field\"><label>Priority</label>\n//               <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                 <option>Low</option><option>Medium</option><option>High</option>\n//               </select>\n//             </div>\n//             <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\" }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Styles */}\n//       <style>{`\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f5f6f8;\n//           margin: 0;\n//           padding: 16px;\n//         }\n\n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n\n//         .epic-management-section {\n//           margin-bottom: 20px;\n//           position: relative;\n//         }\n\n//         .epic-buttons-container {\n//           display: flex;\n//           justify-content: flex-end;\n//           gap: 12px;\n//           margin-bottom: 10px;\n//         }\n\n//         .create-epic-btn {\n//           background: #1976d2;\n//           color: white;\n//           border: none;\n//           padding: 10px 16px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//           margin: 5px;\n//         }\n\n//         .create-epic-btn:hover {\n//           background: #1565c0;\n//         }\n\n//         .delete-epic-btn {\n//           background: #d32f2f;\n//           color: white;\n//           border: none;\n//           padding: 10px 16px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//           margin: 5px;\n//         }\n\n//         .delete-epic-btn:hover {\n//           background: #c62828;\n//         }\n\n//         .delete-epic-btn:disabled {\n//           background: #cccccc;\n//           cursor: not-allowed;\n//         }\n\n//         .epic-modal-overlay {\n//           position: fixed;\n//           top: 0;\n//           left: 0;\n//           right: 0;\n//           bottom: 0;\n//           background: rgba(0, 0, 0, 0.5);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//           padding: 20px;\n//         }\n\n//         .epic-modal {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 24px;\n//           max-width: 500px;\n//           width: 100%;\n//           box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n//         }\n\n//         .epic-modal-content h3 {\n//           margin: 0 0 16px 0;\n//           font-size: 18px;\n//           font-weight: 600;\n//           color: #172b4d;\n//         }\n\n//         .delete-warning {\n//           color: #d32f2f;\n//           font-size: 14px;\n//           margin-bottom: 16px;\n//           padding: 8px;\n//           background: #ffebee;\n//           border-radius: 4px;\n//         }\n\n//         .epic-modal-input, .epic-modal-select {\n//           width: 100%;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 10px 12px;\n//           font-size: 14px;\n//           margin-bottom: 16px;\n//           box-sizing: border-box;\n//         }\n\n//         .epic-modal-input:focus, .epic-modal-select:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n\n//         .epic-modal-actions {\n//           display: flex;\n//           gap: 12px;\n//           justify-content: flex-end;\n//         }\n\n//         .btn-cancel {\n//           background: #5e6c84;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//         }\n\n//         .btn-create {\n//           background: #1976d2;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//         }\n\n//         .btn-delete {\n//           background: #d32f2f;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//         }\n\n//         .btn-delete:disabled {\n//           background: #cccccc;\n//           cursor: not-allowed;\n//         }\n\n//         .swimlane {\n//           background: white;\n//           border-radius: 8px;\n//           margin-bottom: 16px;\n//           box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n//           overflow: hidden;\n//         }\n\n//         .swimlane-header {\n//           display: flex;\n//           align-items: center;\n//           padding: 12px 16px;\n//           background: #fafbfc;\n//           border-bottom: 1px solid #dfe1e5;\n//           font-weight: 600;\n//           font-size: 14px;\n//           color: #172b4d;\n//         }\n\n//         .swimlane-toggle {\n//           background: none;\n//           border: none;\n//           font-size: 12px;\n//           margin-right: 8px;\n//           cursor: pointer;\n//           color: #5e6c84;\n//         }\n\n//         .swimlane-icon {\n//           margin-right: 8px;\n//           font-size: 16px;\n//           color: #5e6c84;\n//         }\n\n//         .swimlane-title-input {\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 4px 8px;\n//           font-size: 14px;\n//           font-weight: 600;\n//           background: white;\n//           margin-right: 8px;\n//           min-width: 150px;\n//           color: #172b4d;\n//         }\n\n//         .swimlane-count {\n//           color: #5e6c84;\n//           font-size: 12px;\n//           font-weight: normal;\n//         }\n\n//         .kanban-row {\n//           display: flex;\n//           padding: 16px;\n//           gap: 12px;\n//           overflow-x: auto;\n//           min-height: 300px;\n//         }\n\n//         .kanban-column {\n//           flex: 0 0 260px;\n//           background: #f5f6f8;\n//           border-radius: 6px;\n//           padding: 12px;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 8px;\n//           border: 1px solid #dfe1e5;\n//         }\n\n//         .col-header {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 4px;\n//         }\n\n//         .col-title {\n//           font-weight: 600;\n//           font-size: 12px;\n//           color: #5e6c84;\n//           text-transform: uppercase;\n//           letter-spacing: 0.5px;\n//         }\n\n//         .col-count {\n//           background: #dfe1e5;\n//           color: #5e6c84;\n//           border-radius: 10px;\n//           padding: 1px 6px;\n//           font-size: 11px;\n//           font-weight: 600;\n//         }\n\n//         .col-actions {\n//           display: flex;\n//           gap: 8px;\n//         }\n\n//         .col-create-btn, .col-menu {\n//           cursor: pointer;\n//           font-size: 16px;\n//           color: #5e6c84;\n//           padding: 2px 6px;\n//           border-radius: 3px;\n//         }\n\n//         .col-create-btn:hover, .col-menu:hover {\n//           background: #ebecf0;\n//         }\n\n//         .col-create {\n//           margin-bottom: 4px;\n//         }\n\n//         .create-link {\n//           color: #5e6c84;\n//           cursor: pointer;\n//           font-size: 12px;\n//           padding: 6px;\n//           display: block;\n//           border-radius: 3px;\n//           transition: background-color 0.2s;\n//         }\n\n//         .create-link:hover {\n//           background: #ebecf0;\n//         }\n\n//         .create-card {\n//           background: white;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 8px;\n//         }\n\n//         .create-input {\n//           width: 100%;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 3px;\n//           padding: 6px;\n//           font-size: 12px;\n//           resize: vertical;\n//           margin-bottom: 6px;\n//           color: #172b4d;\n//         }\n\n//         .create-actions {\n//           display: flex;\n//           gap: 6px;\n//           align-items: center;\n//         }\n\n//         .create-select {\n//           flex: 1;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 3px;\n//           padding: 4px;\n//           font-size: 11px;\n//           color: #172b4d;\n//         }\n\n//         .create-btn {\n//           background: #f5f6f8;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 3px;\n//           padding: 4px;\n//           cursor: pointer;\n//           font-size: 11px;\n//           color: #5e6c84;\n//         }\n\n//         .card-item {\n//           background: white;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 6px;\n//           padding: 12px;\n//           cursor: pointer;\n//           transition: all 0.2s;\n//           box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n//         }\n\n//         .card-item:hover {\n//           box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n//           border-color: #c1c7d0;\n//         }\n\n//         .card-top {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 6px;\n//         }\n\n//         .card-tag {\n//           font-size: 10px;\n//           font-weight: 600;\n//           padding: 2px 4px;\n//           border-radius: 3px;\n//           text-transform: uppercase;\n//         }\n\n//         .card-tag-task {\n//           background: #e3f2fd;\n//           color: #1976d2;\n//         }\n\n//         .card-tag-bug {\n//           background: #ffebee;\n//           color: #d32f2f;\n//         }\n\n//         .card-tag-subtask {\n//           background: #f3e5f5;\n//           color: #7b1fa2;\n//         }\n\n//         .card-id {\n//           color: #5e6c84;\n//           font-size: 10px;\n//           font-family: monospace;\n//         }\n\n//         .card-title {\n//           font-size: 13px;\n//           line-height: 1.3;\n//           color: #172b4d;\n//           font-weight: 500;\n//         }\n\n//         .modal-overlay {\n//           position: fixed;\n//           top: 0;\n//           left: 0;\n//           right: 0;\n//           bottom: 0;\n//           background: rgba(0, 0, 0, 0.5);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//           padding: 20px;\n//         }\n\n//         .modal {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 24px;\n//           display: grid;\n//           grid-template-columns: repeat(3, 1fr);\n//           gap: 16px;\n//           max-width: 900px;\n//           width: 100%;\n//           max-height: 80vh;\n//           overflow-y: auto;\n//           box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n//         }\n\n//         .modal h2 {\n//           margin: 0 0 16px 0;\n//           font-size: 20px;\n//           font-weight: 600;\n//           color: #172b4d;\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//         }\n\n//         .modal-delete-btn {\n//           background: #d32f2f;\n//           border: none;\n//           border-radius: 4px;\n//           padding: 6px 10px;\n//           color: white;\n//           cursor: pointer;\n//           font-size: 12px;\n//         }\n\n//         .modal-field {\n//           display: flex;\n//           flex-direction: column;\n//           gap: 4px;\n//         }\n\n//         .modal-field label {\n//           font-size: 12px;\n//           font-weight: 600;\n//           color: #5e6c84;\n//         }\n\n//         .modal-field input, .modal-field textarea, .modal-field select {\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 8px;\n//           font-size: 13px;\n//           background: white;\n//           transition: border-color 0.2s;\n//           color: #172b4d;\n//         }\n\n//         .modal-field input:focus, .modal-field textarea:focus, .modal-field select:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n\n//         .modal-field input:disabled {\n//           background: #f5f6f8;\n//           color: #5e6c84;\n//         }\n\n//         .modal-actions {\n//           display: flex;\n//           justify-content: flex-end;\n//           gap: 8px;\n//           margin-top: 16px;\n//         }\n\n//         .btn-reset {\n//           background: #5e6c84;\n//           border: none;\n//           padding: 8px 16px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 12px;\n//           font-weight: 600;\n//         }\n\n//         .btn-save {\n//           background: #1976d2;\n//           border: none;\n//           color: white;\n//           padding: 8px 16px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           font-size: 12px;\n//           font-weight: 600;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/components/boards/KanbanBoard.js"],"sourcesContent":["\n\n//  // for epic delete button \n\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const STATUSES = [\n//   'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n// ];\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const mockEpics = [\n//   { id: 'p1', name: 'Frontend' },\n//   { id: 'p2', name: 'Middleware' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n\n// const listEpics = async () => {\n//   await simulateApiDelay();\n//   return mockEpics;\n// };\n\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = {\n//     id: 'p' + (mockEpics.length + 1),\n//     name: epicName\n//   };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) {\n//     mockEpics.splice(epicIndex, 1);\n//   }\n  \n//   // Also delete all issues associated with this epic\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => {\n//     if (issue.epic === epicId) {\n//       issueIndices.push(index);\n//     }\n//   });\n  \n//   // Remove issues from highest index to lowest to avoid index issues\n//   issueIndices.sort((a, b) => b - a).forEach(index => {\n//     mockIssues.splice(index, 1);\n//   });\n// };\n\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n\n// const createIssueAPI = async (issue) => {\n//   await simulateApiDelay();\n//   mockIssues.push(issue);\n// };\n\n// const deleteIssueAPI = async (issueId) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === issueId);\n//   if (idx > -1) mockIssues.splice(idx, 1);\n// };\n\n// const updateIssueAPI = async (updatedIssue) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === updatedIssue.id);\n//   if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue };\n// };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const [issuesData, epicsData] = await Promise.all([\n//           listIssues(projectId),\n//           listEpics()\n//         ]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {};\n//         const initialTitles = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//       } catch (err) {\n//         console.error('Failed to load data:', err);\n//       }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const onTitleChange = (id, value) => setCustomTitles(prev => ({ ...prev, [id]: value }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) {\n//       console.error('Error moving issue:', err);\n//     }\n//   };\n\n//   const onDragOver = e => e.preventDefault();\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n  \n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error('Error creating issue:', err); }\n//   };\n\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) { alert('Epic name is required'); return; }\n//     try {\n//       const newEpic = await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n      \n//       // Update open swimlanes and custom titles for the new epic\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//     } catch (err) { console.error('Error creating epic:', err); }\n//   };\n\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) { alert('Please select an epic to delete'); return; }\n    \n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n    \n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//     } catch (err) { console.error('Error deleting epic:', err); }\n//   };\n\n//   const handleDelete = async () => {\n//     if (!selectedIssue) return;\n//     await deleteIssueAPI(selectedIssue.id);\n//     const refreshed = await listIssues(projectId);\n//     setIssues(refreshed);\n//     setSelectedIssue(null);\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Epic Management Buttons */}\n//       <div className=\"epic-management-section\">\n//         <div className=\"epic-buttons-container\">\n//           <button className=\"create-epic-btn\" onClick={() => { setShowCreateEpic(true); setShowDeleteEpic(false); }}>\n//             + Create Epic\n//           </button>\n//           <button className=\"delete-epic-btn\" onClick={() => { setShowDeleteEpic(true); setShowCreateEpic(false); }}>\n//             ðŸ—‘ Delete Epic\n//           </button>\n//         </div>\n        \n//         {/* Create Epic Modal */}\n//         {showCreateEpic && (\n//           <div className=\"epic-modal-overlay\" onClick={() => setShowCreateEpic(false)}>\n//             <div className=\"epic-modal\" onClick={e => e.stopPropagation()}>\n//               <div className=\"epic-modal-content\">\n//                 <h3>Create New Epic</h3>\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Enter epic name (e.g., Frontend, Backend, Database)\"\n//                   value={newEpicName}\n//                   onChange={(e) => setNewEpicName(e.target.value)}\n//                   className=\"epic-modal-input\"\n//                   autoFocus\n//                 />\n//                 <div className=\"epic-modal-actions\">\n//                   <button className=\"btn-cancel\" onClick={() => { setShowCreateEpic(false); setNewEpicName(''); }}>\n//                     Cancel\n//                   </button>\n//                   <button className=\"btn-create\" onClick={handleCreateEpic}>\n//                     Create Epic\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n        \n//         {/* Delete Epic Modal */}\n//         {showDeleteEpic && (\n//           <div className=\"epic-modal-overlay\" onClick={() => setShowDeleteEpic(false)}>\n//             <div className=\"epic-modal\" onClick={e => e.stopPropagation()}>\n//               <div className=\"epic-modal-content\">\n//                 <h3>Delete Epic</h3>\n//                 <p className=\"delete-warning\">Select an epic to delete. This will also delete all issues in the epic.</p>\n//                 <select \n//                   value={epicToDelete} \n//                   onChange={(e) => setEpicToDelete(e.target.value)}\n//                   className=\"epic-modal-select\"\n//                 >\n//                   <option value=\"\">Select an epic...</option>\n//                   {epics.map(epic => (\n//                     <option key={epic.id} value={epic.id}>\n//                       {epic.name} ({swimlanes.find(s => s.id === epic.id)?.issues.length || 0} issues)\n//                     </option>\n//                   ))}\n//                 </select>\n//                 <div className=\"epic-modal-actions\">\n//                   <button className=\"btn-cancel\" onClick={() => { setShowDeleteEpic(false); setEpicToDelete(''); }}>\n//                     Cancel\n//                   </button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteEpic} disabled={!epicToDelete}>\n//                     Delete Epic\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {swimlanes.map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                 {isOpen ? 'â–¼' : 'â–¶'}\n//               </button>\n//               <span className=\"swimlane-icon\">âš¡</span>\n//               <input className=\"swimlane-title-input\" value={customTitles[lane.id] || ''} onChange={e => onTitleChange(lane.id, e.target.value)} />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\">\n//                 {STATUSES.map(status => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div className=\"kanban-column\" key={status} onDragOver={onDragOver} onDrop={e => onDrop(e, status, lane.id)}>\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>âœ”</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>âœ–</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => (\n//                         <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                           <div className=\"card-top\">\n//                             <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                             <span className=\"card-id\">{issue.id}</span>\n//                           </div>\n//                           <div className=\"card-title\">{issue.title}</div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Issue Modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className=\"modal\" onClick={e => e.stopPropagation()}>\n//             <h2 style={{ gridColumn: \"span 3\" }}>{editIssue.epicName}\n//               <button className=\"modal-delete-btn\" onClick={handleDelete}>ðŸ—‘</button>\n//             </h2>\n\n//             <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n            \n//             <div className=\"modal-field\"><label>Status</label>\n//               <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\n//                 {STATUSES.map(st => <option key={st} value={st}>{st}</option>)}\n//               </select>\n//             </div>\n\n//             <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//             <div className=\"modal-field\"><label>Priority</label>\n//               <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                 <option>Low</option><option>Medium</option><option>High</option>\n//               </select>\n//             </div>\n//             <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\" }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Styles */}\n//       <style>{`\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f5f6f8;\n//           margin: 0;\n//           padding: 16px;\n//         }\n       \n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n       \n//         .epic-management-section {\n//           margin-bottom: 20px;\n//           position: relative;\n//         }\n       \n//         .epic-buttons-container {\n//           display: flex;\n//           justify-content: flex-end;\n//           gap: 12px;\n//           margin-bottom: 10px;\n//         }\n       \n//         .create-epic-btn {\n//           background: #1976d2;\n//           color: white;\n//           border: none;\n//           padding: 10px 16px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//           margin: 5px;\n//         }\n       \n//         .create-epic-btn:hover {\n//           background: #1565c0;\n//         }\n       \n//         .delete-epic-btn {\n//           background: #d32f2f;\n//           color: white;\n//           border: none;\n//           padding: 10px 16px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//           margin: 5px;\n//         }\n       \n//         .delete-epic-btn:hover {\n//           background: #c62828;\n//         }\n       \n//         .delete-epic-btn:disabled {\n//           background: #cccccc;\n//           cursor: not-allowed;\n//         }\n       \n//         .epic-modal-overlay {\n//           position: fixed;\n//           top: 0;\n//           left: 0;\n//           right: 0;\n//           bottom: 0;\n//           background: rgba(0, 0, 0, 0.5);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//           padding: 20px;\n//         }\n       \n//         .epic-modal {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 24px;\n//           max-width: 500px;\n//           width: 100%;\n//           box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n//         }\n       \n//         .epic-modal-content h3 {\n//           margin: 0 0 16px 0;\n//           font-size: 18px;\n//           font-weight: 600;\n//           color: #172b4d;\n//         }\n       \n//         .delete-warning {\n//           color: #d32f2f;\n//           font-size: 14px;\n//           margin-bottom: 16px;\n//           padding: 8px;\n//           background: #ffebee;\n//           border-radius: 4px;\n//         }\n       \n//         .epic-modal-input, .epic-modal-select {\n//           width: 100%;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 10px 12px;\n//           font-size: 14px;\n//           margin-bottom: 16px;\n//           box-sizing: border-box;\n//         }\n       \n//         .epic-modal-input:focus, .epic-modal-select:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n       \n//         .epic-modal-actions {\n//           display: flex;\n//           gap: 12px;\n//           justify-content: flex-end;\n//         }\n       \n//         .btn-cancel {\n//           background: #5e6c84;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//         }\n       \n//         .btn-create {\n//           background: #1976d2;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//         }\n       \n//         .btn-delete {\n//           background: #d32f2f;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//         }\n       \n//         .btn-delete:disabled {\n//           background: #cccccc;\n//           cursor: not-allowed;\n//         }\n       \n//         .swimlane {\n//           background: white;\n//           border-radius: 8px;\n//           margin-bottom: 16px;\n//           box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n//           overflow: hidden;\n//         }\n       \n//         .swimlane-header {\n//           display: flex;\n//           align-items: center;\n//           padding: 12px 16px;\n//           background: #fafbfc;\n//           border-bottom: 1px solid #dfe1e5;\n//           font-weight: 600;\n//           font-size: 14px;\n//           color: #172b4d;\n//         }\n       \n//         .swimlane-toggle {\n//           background: none;\n//           border: none;\n//           font-size: 12px;\n//           margin-right: 8px;\n//           cursor: pointer;\n//           color: #5e6c84;\n//         }\n       \n//         .swimlane-icon {\n//           margin-right: 8px;\n//           font-size: 16px;\n//           color: #5e6c84;\n//         }\n       \n//         .swimlane-title-input {\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 4px 8px;\n//           font-size: 14px;\n//           font-weight: 600;\n//           background: white;\n//           margin-right: 8px;\n//           min-width: 150px;\n//           color: #172b4d;\n//         }\n       \n//         .swimlane-count {\n//           color: #5e6c84;\n//           font-size: 12px;\n//           font-weight: normal;\n//         }\n       \n//         .kanban-row {\n//           display: flex;\n//           padding: 16px;\n//           gap: 12px;\n//           overflow-x: auto;\n//           min-height: 300px;\n//         }\n       \n//         .kanban-column {\n//           flex: 0 0 260px;\n//           background: #f5f6f8;\n//           border-radius: 6px;\n//           padding: 12px;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 8px;\n//           border: 1px solid #dfe1e5;\n//         }\n       \n//         .col-header {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 4px;\n//         }\n       \n//         .col-title {\n//           font-weight: 600;\n//           font-size: 12px;\n//           color: #5e6c84;\n//           text-transform: uppercase;\n//           letter-spacing: 0.5px;\n//         }\n       \n//         .col-count {\n//           background: #dfe1e5;\n//           color: #5e6c84;\n//           border-radius: 10px;\n//           padding: 1px 6px;\n//           font-size: 11px;\n//           font-weight: 600;\n//         }\n       \n//         .col-create {\n//           margin-bottom: 4px;\n//         }\n       \n//         .create-link {\n//           color: #5e6c84;\n//           cursor: pointer;\n//           font-size: 12px;\n//           padding: 6px;\n//           display: block;\n//           border-radius: 3px;\n//           transition: background-color 0.2s;\n//         }\n       \n//         .create-link:hover {\n//           background: #ebecf0;\n//         }\n       \n//         .create-card {\n//           background: white;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 8px;\n//         }\n       \n//         .create-input {\n//           width: 100%;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 3px;\n//           padding: 6px;\n//           font-size: 12px;\n//           resize: vertical;\n//           margin-bottom: 6px;\n//           color: #172b4d;\n//         }\n       \n//         .create-actions {\n//           display: flex;\n//           gap: 6px;\n//           align-items: center;\n//         }\n       \n//         .create-select {\n//           flex: 1;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 3px;\n//           padding: 4px;\n//           font-size: 11px;\n//           color: #172b4d;\n//         }\n       \n//         .create-btn {\n//           background: #f5f6f8;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 3px;\n//           padding: 4px;\n//           cursor: pointer;\n//           font-size: 11px;\n//           color: #5e6c84;\n//         }\n       \n//         .card-item {\n//           background: white;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 6px;\n//           padding: 12px;\n//           cursor: pointer;\n//           transition: all 0.2s;\n//           box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n//         }\n       \n//         .card-item:hover {\n//           box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n//           border-color: #c1c7d0;\n//         }\n       \n//         .card-top {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 6px;\n//         }\n       \n//         .card-tag {\n//           font-size: 10px;\n//           font-weight: 600;\n//           padding: 2px 4px;\n//           border-radius: 3px;\n//           text-transform: uppercase;\n//         }\n       \n//         .card-tag-task {\n//           background: #e3f2fd;\n//           color: #1976d2;\n//         }\n       \n//         .card-tag-bug {\n//           background: #ffebee;\n//           color: #d32f2f;\n//         }\n       \n//         .card-tag-subtask {\n//           background: #f3e5f5;\n//           color: #7b1fa2;\n//         }\n       \n//         .card-id {\n//           color: #5e6c84;\n//           font-size: 10px;\n//           font-family: monospace;\n//         }\n       \n//         .card-title {\n//           font-size: 13px;\n//           line-height: 1.3;\n//           color: #172b4d;\n//           font-weight: 500;\n//         }\n       \n//         .modal-overlay {\n//           position: fixed;\n//           top: 0;\n//           left: 0;\n//           right: 0;\n//           bottom: 0;\n//           background: rgba(0, 0, 0, 0.5);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//           padding: 20px;\n//         }\n       \n//         .modal {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 24px;\n//           display: grid;\n//           grid-template-columns: repeat(3, 1fr);\n//           gap: 16px;\n//           max-width: 900px;\n//           width: 100%;\n//           max-height: 80vh;\n//           overflow-y: auto;\n//           box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n//         }\n       \n//         .modal h2 {\n//           margin: 0 0 16px 0;\n//           font-size: 20px;\n//           font-weight: 600;\n//           color: #172b4d;\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//         }\n       \n//         .modal-delete-btn {\n//           background: #d32f2f;\n//           border: none;\n//           border-radius: 4px;\n//           padding: 6px 10px;\n//           color: white;\n//           cursor: pointer;\n//           font-size: 12px;\n//         }\n       \n//         .modal-field {\n//           display: flex;\n//           flex-direction: column;\n//           gap: 4px;\n//         }\n       \n//         .modal-field label {\n//           font-size: 12px;\n//           font-weight: 600;\n//           color: #5e6c84;\n//         }\n       \n//         .modal-field input, .modal-field textarea, .modal-field select {\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 8px;\n//           font-size: 13px;\n//           background: white;\n//           transition: border-color 0.2s;\n//           color: #172b4d;\n//         }\n       \n//         .modal-field input:focus, .modal-field textarea:focus, .modal-field select:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n       \n//         .modal-field input:disabled {\n//           background: #f5f6f8;\n//           color: #5e6c84;\n//         }\n       \n//         .modal-actions {\n//           display: flex;\n//           justify-content: flex-end;\n//           gap: 8px;\n//           margin-top: 16px;\n//         }\n       \n//         .btn-reset {\n//           background: #5e6c84;\n//           border: none;\n//           padding: 8px 16px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 12px;\n//           font-weight: 600;\n//         }\n       \n//         .btn-save {\n//           background: #1976d2;\n//           border: none;\n//           color: white;\n//           padding: 8px 16px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           font-size: 12px;\n//           font-weight: 600;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const STATUSES = [\n//   'backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'\n// ];\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'u2', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'u4', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const mockEpics = [\n//   { id: 'p1', name: 'Frontend' },\n//   { id: 'p2', name: 'Middleware' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n\n// const listEpics = async () => {\n//   await simulateApiDelay();\n//   return mockEpics;\n// };\n\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = {\n//     id: 'p' + (mockEpics.length + 1),\n//     name: epicName\n//   };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) {\n//     mockEpics.splice(epicIndex, 1);\n//   }\n  \n//   // Also delete all issues associated with this epic\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => {\n//     if (issue.epic === epicId) {\n//       issueIndices.push(index);\n//     }\n//   });\n  \n//   // Remove issues from highest index to lowest to avoid index issues\n//   issueIndices.sort((a, b) => b - a).forEach(index => {\n//     mockIssues.splice(index, 1);\n//   });\n// };\n\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n\n// const createIssueAPI = async (issue) => {\n//   await simulateApiDelay();\n//   mockIssues.push(issue);\n// };\n\n// const deleteIssueAPI = async (issueId) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === issueId);\n//   if (idx > -1) mockIssues.splice(idx, 1);\n// };\n\n// const updateIssueAPI = async (updatedIssue) => {\n//   await simulateApiDelay();\n//   const idx = mockIssues.findIndex(i => i.id === updatedIssue.id);\n//   if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue };\n// };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const [issuesData, epicsData] = await Promise.all([\n//           listIssues(projectId),\n//           listEpics()\n//         ]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {};\n//         const initialTitles = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//       } catch (err) {\n//         console.error('Failed to load data:', err);\n//       }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const onTitleChange = (id, value) => setCustomTitles(prev => ({ ...prev, [id]: value }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) {\n//       console.error('Error moving issue:', err);\n//     }\n//   };\n\n//   const onDragOver = e => e.preventDefault();\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n  \n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error('Error creating issue:', err); }\n//   };\n\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) { alert('Epic name is required'); return; }\n//     try {\n//       const newEpic = await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n      \n//       // Update open swimlanes and custom titles for the new epic\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//     } catch (err) { console.error('Error creating epic:', err); }\n//   };\n\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) { alert('Please select an epic to delete'); return; }\n    \n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n    \n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//     } catch (err) { console.error('Error deleting epic:', err); }\n//   };\n\n//   const handleDelete = async () => {\n//     if (!selectedIssue) return;\n//     await deleteIssueAPI(selectedIssue.id);\n//     const refreshed = await listIssues(projectId);\n//     setIssues(refreshed);\n//     setSelectedIssue(null);\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Epic Management Buttons */}\n//       <div className=\"epic-management-section\">\n//         <div className=\"epic-buttons-container\">\n//           <button className=\"create-epic-btn\" onClick={() => { setShowCreateEpic(true); setShowDeleteEpic(false); }}>\n//             + Create Epic\n//           </button>\n//           <button className=\"delete-epic-btn\" onClick={() => { setShowDeleteEpic(true); setShowCreateEpic(false); }}>\n//             ðŸ—‘ Delete Epic\n//           </button>\n//         </div>\n        \n//         {/* Create Epic Modal */}\n//         {showCreateEpic && (\n//           <div className=\"epic-modal-overlay\" onClick={() => setShowCreateEpic(false)}>\n//             <div className=\"epic-modal\" onClick={e => e.stopPropagation()}>\n//               <div className=\"epic-modal-content\">\n//                 <h3>Create New Epic</h3>\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Enter epic name (e.g., Frontend, Backend, Database)\"\n//                   value={newEpicName}\n//                   onChange={(e) => setNewEpicName(e.target.value)}\n//                   className=\"epic-modal-input\"\n//                   autoFocus\n//                 />\n//                 <div className=\"epic-modal-actions\">\n//                   <button className=\"btn-cancel\" onClick={() => { setShowCreateEpic(false); setNewEpicName(''); }}>\n//                     Cancel\n//                   </button>\n//                   <button className=\"btn-create\" onClick={handleCreateEpic}>\n//                     Create Epic\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n        \n//         {/* Delete Epic Modal */}\n//         {showDeleteEpic && (\n//           <div className=\"epic-modal-overlay\" onClick={() => setShowDeleteEpic(false)}>\n//             <div className=\"epic-modal\" onClick={e => e.stopPropagation()}>\n//               <div className=\"epic-modal-content\">\n//                 <h3>Delete Epic</h3>\n//                 <p className=\"delete-warning\">Select an epic to delete. This will also delete all issues in the epic.</p>\n//                 <select \n//                   value={epicToDelete} \n//                   onChange={(e) => setEpicToDelete(e.target.value)}\n//                   className=\"epic-modal-select\"\n//                 >\n//                   <option value=\"\">Select an epic...</option>\n//                   {epics.map(epic => (\n//                     <option key={epic.id} value={epic.id}>\n//                       {epic.name} ({swimlanes.find(s => s.id === epic.id)?.issues.length || 0} issues)\n//                     </option>\n//                   ))}\n//                 </select>\n//                 <div className=\"epic-modal-actions\">\n//                   <button className=\"btn-cancel\" onClick={() => { setShowDeleteEpic(false); setEpicToDelete(''); }}>\n//                     Cancel\n//                   </button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteEpic} disabled={!epicToDelete}>\n//                     Delete Epic\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {swimlanes.map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                 {isOpen ? 'â–¼' : 'â–¶'}\n//               </button>\n//               <span className=\"swimlane-icon\">âš¡</span>\n//               <input className=\"swimlane-title-input\" value={customTitles[lane.id] || ''} onChange={e => onTitleChange(lane.id, e.target.value)} />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\">\n//                 {STATUSES.map(status => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div className=\"kanban-column\" key={status} onDragOver={onDragOver} onDrop={e => onDrop(e, status, lane.id)}>\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                         <div className=\"col-actions\">\n//                           <span className=\"col-create-btn\" onClick={() => handleCreateClick(lane.id)}>+</span>\n//                           <span className=\"col-menu\">...</span>\n//                         </div>\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>âœ”</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>âœ–</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => (\n//                         <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                           <div className=\"card-top\">\n//                             <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                             <span className=\"card-id\">{issue.id}</span>\n//                           </div>\n//                           <div className=\"card-title\">{issue.title}</div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Issue Modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className=\"modal\" onClick={e => e.stopPropagation()}>\n//             <h2 style={{ gridColumn: \"span 3\" }}>{editIssue.epicName}\n//               <button className=\"modal-delete-btn\" onClick={handleDelete}>ðŸ—‘</button>\n//             </h2>\n\n//             <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n            \n//             <div className=\"modal-field\"><label>Status</label>\n//               <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\n//                 {STATUSES.map(st => <option key={st} value={st}>{st}</option>)}\n//               </select>\n//             </div>\n\n//             <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//             <div className=\"modal-field\"><label>Priority</label>\n//               <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                 <option>Low</option><option>Medium</option><option>High</option>\n//               </select>\n//             </div>\n//             <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\" }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Styles */}\n//       <style>{`\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f5f6f8;\n//           margin: 0;\n//           padding: 16px;\n//         }\n       \n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n       \n//         .epic-management-section {\n//           margin-bottom: 20px;\n//           position: relative;\n//         }\n       \n//         .epic-buttons-container {\n//           display: flex;\n//           justify-content: flex-end;\n//           gap: 12px;\n//           margin-bottom: 10px;\n//         }\n       \n//         .create-epic-btn {\n//           background: #1976d2;\n//           color: white;\n//           border: none;\n//           padding: 10px 16px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//           margin: 5px;\n//         }\n       \n//         .create-epic-btn:hover {\n//           background: #1565c0;\n//         }\n       \n//         .delete-epic-btn {\n//           background: #d32f2f;\n//           color: white;\n//           border: none;\n//           padding: 10px 16px;\n//           border-radius: 6px;\n//           cursor: pointer;\n//           font-size: 14px;\n//           font-weight: 600;\n//           transition: background-color 0.2s;\n//           margin: 5px;\n//         }\n       \n//         .delete-epic-btn:hover {\n//           background: #c62828;\n//         }\n       \n//         .delete-epic-btn:disabled {\n//           background: #cccccc;\n//           cursor: not-allowed;\n//         }\n       \n//         .epic-modal-overlay {\n//           position: fixed;\n//           top: 0;\n//           left: 0;\n//           right: 0;\n//           bottom: 0;\n//           background: rgba(0, 0, 0, 0.5);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//           padding: 20px;\n//         }\n       \n//         .epic-modal {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 24px;\n//           max-width: 500px;\n//           width: 100%;\n//           box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n//         }\n       \n//         .epic-modal-content h3 {\n//           margin: 0 0 16px 0;\n//           font-size: 18px;\n//           font-weight: 600;\n//           color: #172b4d;\n//         }\n       \n//         .delete-warning {\n//           color: #d32f2f;\n//           font-size: 14px;\n//           margin-bottom: 16px;\n//           padding: 8px;\n//           background: #ffebee;\n//           border-radius: 4px;\n//         }\n       \n//         .epic-modal-input, .epic-modal-select {\n//           width: 100%;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 10px 12px;\n//           font-size: 14px;\n//           margin-bottom: 16px;\n//           box-sizing: border-box;\n//         }\n       \n//         .epic-modal-input:focus, .epic-modal-select:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n       \n//         .epic-modal-actions {\n//           display: flex;\n//           gap: 12px;\n//           justify-content: flex-end;\n//         }\n       \n//         .btn-cancel {\n//           background: #5e6c84;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//         }\n       \n//         .btn-create {\n//           background: #1976d2;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//         }\n       \n//         .btn-delete {\n//           background: #d32f2f;\n//           border: none;\n//           padding: 10px 20px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 14px;\n//           font-weight: 600;\n//         }\n       \n//         .btn-delete:disabled {\n//           background: #cccccc;\n//           cursor: not-allowed;\n//         }\n       \n//         .swimlane {\n//           background: white;\n//           border-radius: 8px;\n//           margin-bottom: 16px;\n//           box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n//           overflow: hidden;\n//         }\n       \n//         .swimlane-header {\n//           display: flex;\n//           align-items: center;\n//           padding: 12px 16px;\n//           background: #fafbfc;\n//           border-bottom: 1px solid #dfe1e5;\n//           font-weight: 600;\n//           font-size: 14px;\n//           color: #172b4d;\n//         }\n       \n//         .swimlane-toggle {\n//           background: none;\n//           border: none;\n//           font-size: 12px;\n//           margin-right: 8px;\n//           cursor: pointer;\n//           color: #5e6c84;\n//         }\n       \n//         .swimlane-icon {\n//           margin-right: 8px;\n//           font-size: 16px;\n//           color: #5e6c84;\n//         }\n       \n//         .swimlane-title-input {\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 4px 8px;\n//           font-size: 14px;\n//           font-weight: 600;\n//           background: white;\n//           margin-right: 8px;\n//           min-width: 150px;\n//           color: #172b4d;\n//         }\n       \n//         .swimlane-count {\n//           color: #5e6c84;\n//           font-size: 12px;\n//           font-weight: normal;\n//         }\n       \n//         .kanban-row {\n//           display: flex;\n//           padding: 16px;\n//           gap: 12px;\n//           overflow-x: auto;\n//           min-height: 300px;\n//         }\n       \n//         .kanban-column {\n//           flex: 0 0 260px;\n//           background: #f5f6f8;\n//           border-radius: 6px;\n//           padding: 12px;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 8px;\n//           border: 1px solid #dfe1e5;\n//         }\n       \n//         .col-header {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 4px;\n//         }\n       \n//         .col-title {\n//           font-weight: 600;\n//           font-size: 12px;\n//           color: #5e6c84;\n//           text-transform: uppercase;\n//           letter-spacing: 0.5px;\n//         }\n       \n//         .col-count {\n//           background: #dfe1e5;\n//           color: #5e6c84;\n//           border-radius: 10px;\n//           padding: 1px 6px;\n//           font-size: 11px;\n//           font-weight: 600;\n//         }\n       \n//         .col-actions {\n//           display: flex;\n//           gap: 8px;\n//         }\n       \n//         .col-create-btn, .col-menu {\n//           cursor: pointer;\n//           font-size: 16px;\n//           color: #5e6c84;\n//           padding: 2px 6px;\n//           border-radius: 3px;\n//         }\n       \n//         .col-create-btn:hover, .col-menu:hover {\n//           background: #ebecf0;\n//         }\n       \n//         .col-create {\n//           margin-bottom: 4px;\n//         }\n       \n//         .create-link {\n//           color: #5e6c84;\n//           cursor: pointer;\n//           font-size: 12px;\n//           padding: 6px;\n//           display: block;\n//           border-radius: 3px;\n//           transition: background-color 0.2s;\n//         }\n       \n//         .create-link:hover {\n//           background: #ebecf0;\n//         }\n       \n//         .create-card {\n//           background: white;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 8px;\n//         }\n       \n//         .create-input {\n//           width: 100%;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 3px;\n//           padding: 6px;\n//           font-size: 12px;\n//           resize: vertical;\n//           margin-bottom: 6px;\n//           color: #172b4d;\n//         }\n       \n//         .create-actions {\n//           display: flex;\n//           gap: 6px;\n//           align-items: center;\n//         }\n       \n//         .create-select {\n//           flex: 1;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 3px;\n//           padding: 4px;\n//           font-size: 11px;\n//           color: #172b4d;\n//         }\n       \n//         .create-btn {\n//           background: #f5f6f8;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 3px;\n//           padding: 4px;\n//           cursor: pointer;\n//           font-size: 11px;\n//           color: #5e6c84;\n//         }\n       \n//         .card-item {\n//           background: white;\n//           border: 1px solid #dfe1e5;\n//           border-radius: 6px;\n//           padding: 12px;\n//           cursor: pointer;\n//           transition: all 0.2s;\n//           box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n//         }\n       \n//         .card-item:hover {\n//           box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n//           border-color: #c1c7d0;\n//         }\n       \n//         .card-top {\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//           margin-bottom: 6px;\n//         }\n       \n//         .card-tag {\n//           font-size: 10px;\n//           font-weight: 600;\n//           padding: 2px 4px;\n//           border-radius: 3px;\n//           text-transform: uppercase;\n//         }\n       \n//         .card-tag-task {\n//           background: #e3f2fd;\n//           color: #1976d2;\n//         }\n       \n//         .card-tag-bug {\n//           background: #ffebee;\n//           color: #d32f2f;\n//         }\n       \n//         .card-tag-subtask {\n//           background: #f3e5f5;\n//           color: #7b1fa2;\n//         }\n       \n//         .card-id {\n//           color: #5e6c84;\n//           font-size: 10px;\n//           font-family: monospace;\n//         }\n       \n//         .card-title {\n//           font-size: 13px;\n//           line-height: 1.3;\n//           color: #172b4d;\n//           font-weight: 500;\n//         }\n       \n//         .modal-overlay {\n//           position: fixed;\n//           top: 0;\n//           left: 0;\n//           right: 0;\n//           bottom: 0;\n//           background: rgba(0, 0, 0, 0.5);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//           padding: 20px;\n//         }\n       \n//         .modal {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 24px;\n//           display: grid;\n//           grid-template-columns: repeat(3, 1fr);\n//           gap: 16px;\n//           max-width: 900px;\n//           width: 100%;\n//           max-height: 80vh;\n//           overflow-y: auto;\n//           box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n//         }\n       \n//         .modal h2 {\n//           margin: 0 0 16px 0;\n//           font-size: 20px;\n//           font-weight: 600;\n//           color: #172b4d;\n//           display: flex;\n//           justify-content: space-between;\n//           align-items: center;\n//         }\n       \n//         .modal-delete-btn {\n//           background: #d32f2f;\n//           border: none;\n//           border-radius: 4px;\n//           padding: 6px 10px;\n//           color: white;\n//           cursor: pointer;\n//           font-size: 12px;\n//         }\n       \n//         .modal-field {\n//           display: flex;\n//           flex-direction: column;\n//           gap: 4px;\n//         }\n       \n//         .modal-field label {\n//           font-size: 12px;\n//           font-weight: 600;\n//           color: #5e6c84;\n//         }\n       \n//         .modal-field input, .modal-field textarea, .modal-field select {\n//           border: 1px solid #dfe1e5;\n//           border-radius: 4px;\n//           padding: 8px;\n//           font-size: 13px;\n//           background: white;\n//           transition: border-color 0.2s;\n//           color: #172b4d;\n//         }\n       \n//         .modal-field input:focus, .modal-field textarea:focus, .modal-field select:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n       \n//         .modal-field input:disabled {\n//           background: #f5f6f8;\n//           color: #5e6c84;\n//         }\n       \n//         .modal-actions {\n//           display: flex;\n//           justify-content: flex-end;\n//           gap: 8px;\n//           margin-top: 16px;\n//         }\n       \n//         .btn-reset {\n//           background: #5e6c84;\n//           border: none;\n//           padding: 8px 16px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           color: white;\n//           font-size: 12px;\n//           font-weight: 600;\n//         }\n       \n//         .btn-save {\n//           background: #1976d2;\n//           border: none;\n//           color: white;\n//           padding: 8px 16px;\n//           border-radius: 4px;\n//           cursor: pointer;\n//           font-size: 12px;\n//           font-weight: 600;\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":";;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
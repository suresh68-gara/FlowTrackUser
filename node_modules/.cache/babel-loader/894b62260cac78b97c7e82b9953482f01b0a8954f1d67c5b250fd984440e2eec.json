{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\battina srinuvasurao\\\\OneDrive\\\\Desktop\\\\userstool\\\\src\\\\components\\\\boards\\\\KanbanBoard.js\",\n  _s = $RefreshSig$();\n// this code is ok\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\n// const mockProjects = [\n//   { id: 'p1', name: 'E-Commerce Platform' },\n//   { id: 'p2', name: 'API Gateway Service' },\n//   { id: 'p3', name: 'Mobile App Development' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\n// const getProjectName = async (projectId) => {\n//   await simulateApiDelay();\n//   const project = mockProjects.find(p => p.id === projectId);\n//   return project ? project.name : 'Untitled Project';\n// };\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\n// };\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [projectName, setProjectName] = useState('');\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n//   const [columnsByLane, setColumnsByLane] = useState({});\n//   const [columnModal, setColumnModal] = useState(null);\n//   const [columnInput, setColumnInput] = useState('');\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\n//   const [isMobile, setIsMobile] = useState(false);\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\n\n//   useEffect(() => {\n//     const checkScreenSize = () => {\n//       setIsMobile(window.innerWidth < 768);\n//     };\n//     checkScreenSize();\n//     window.addEventListener('resize', checkScreenSize);\n//     return () => window.removeEventListener('resize', checkScreenSize);\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const projectNameData = projectId ? await getProjectName(projectId) : 'All Projects';\n//         const [issuesData, epicsData] = await Promise.all([\n//           listIssues(projectId),\n//           listEpics()\n//         ]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         setProjectName(projectNameData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//           initialCols[lane.id] = defaultStatuses.slice();\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//         setColumnsByLane(initialCols);\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const openAddColumnModal = (e, laneId, colIndex) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'add' });\n//     setColumnInput('');\n//   };\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\n//     setColumnInput(status);\n//   };\n//   const handleAddColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[columnModal.laneId]];\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\n//       return { ...prev, [columnModal.laneId]: cols };\n//     });\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleEditColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     const { laneId, colIndex } = columnModal;\n//     const oldCol = columnsByLane[laneId][colIndex];\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\n//       alert('Column name already exists');\n//       return;\n//     }\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols[colIndex] = name.toLowerCase();\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleDeleteColumn = () => {\n//     const { laneId, colIndex } = columnModal;\n//     const removedCol = columnsByLane[laneId][colIndex];\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols.splice(colIndex, 1);\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) { console.error(err); }\n//   };\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error(err); }\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) {\n//       alert('Epic name is required');\n//       return;\n//     }\n//     try {\n//       await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\n//     } catch (error) {\n//       console.error('Error creating epic:', error);\n//     }\n//   };\n\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) {\n//       alert('Please select an epic to delete');\n//       return;\n//     }\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//       setColumnsByLane(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setOpenSwimlanes(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setCustomTitles(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//     } catch (error) {\n//       console.error('Error deleting epic:', error);\n//     }\n//   };\n\n//   const toggleMobileSwimlane = (laneId) => {\n//     if (activeSwimlane === laneId) {\n//       setActiveSwimlane(null);\n//     } else {\n//       setActiveSwimlane(laneId);\n//     }\n//   };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Project Name Header */}\n//       <div className=\"project-header\">\n//         <h1 className=\"project-title\">{projectName}</h1>\n//         <div className=\"project-stats\">\n//           <span className=\"project-stat\">{epics.length} Epics</span>\n//           <span className=\"project-stat\">{issues.length} Issues</span>\n//           <span className=\"project-stat\">\n//             {issues.filter(issue => issue.status === 'done').length} Completed\n//           </span>\n//         </div>\n//       </div>\n\n//       {isMobile && (\n//         <div className=\"mobile-swimlane-selector\">\n//           <select\n//             value={activeSwimlane || ''}\n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\n//             className=\"mobile-select\"\n//           >\n//             <option value=\"\">All Swimlanes</option>\n//             {swimlanes.map(lane => (\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       {swimlanes.map(lane => {\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\n\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\n//           return null;\n//         }\n\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               {!isMobile && (\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                   {isOpen ? '▼' : '▶'}\n//                 </button>\n//               )}\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input\n//                 className=\"swimlane-title-input\"\n//                 value={customTitles[lane.id] || ''}\n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))}\n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//               {isMobile && (\n//                 <button\n//                   className=\"mobile-swimlane-toggle\"\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\n//                 >\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\n//                 </button>\n//               )}\n//             </header>\n//             {isOpen && (\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\n//                 {statuses.map((status, idx) => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div\n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`}\n//                       key={status}\n//                       onDragOver={onDragOver}\n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {!isMobile && (\n//                           <span className=\"col-icons\">\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\n//                           </span>\n//                         )}\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => {\n//                         const isHovered = hoveredAssigneeId === issue.id;\n//                         return (\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                             <div className=\"card-top\">\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                               <span className=\"card-id\">{issue.id}</span>\n//                             </div>\n//                             <div className=\"card-title\">{issue.title}</div>\n//                             <div className=\"card-meta\">\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\n//                               {issue.assignee && (\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\n//                                   👤\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\n//                                 </span>\n//                               )}\n//                             </div>\n//                           </div>\n//                         );\n//                       })}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n//       {/* Column Add/Edit modal */}\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\n//             position: isMobile ? 'fixed' : 'absolute',\n//             top: isMobile ? '50%' : modalPosition.top,\n//             left: isMobile ? '50%' : modalPosition.left,\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\n//             minWidth: isMobile ? '90vw' : 280,\n//             maxWidth: isMobile ? '95vw' : 320,\n//             padding: 20,\n//             borderRadius: 10,\n//             background: 'white',\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\n//             zIndex: 1100\n//           }}>\n//             {columnModal.type === 'add' ? (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                 </div>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//       {/* Issue modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className={`modal ${isMobile ? 'mobile-modal' : ''}`} onClick={e => e.stopPropagation()}>\n//             <div className=\"modal-header\">\n//               <h2>{editIssue.epicName}</h2>\n//               <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\n//             </div>\n//             <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\n//               <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Status</label>\n//                 <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\n//                   {columnsByLane[editIssue.epic]?.map(st => <option key={st} value={st}>{st}</option>) || defaultStatuses.map(st => <option key={st} value={st}>{st}</option>)}\n//                 </select>\n//               </div>\n//               <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//               <div className=\"modal-field\"><label>Priority</label>\n//                 <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                   <option>Low</option><option>Medium</option><option>High</option>\n//                 </select>\n//               </div>\n//               <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n//             </div>\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\", alignItems: 'center' }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//               <button className=\"modal-delete-btn\" onClick={async () => {\n//                 if (window.confirm('Delete this issue?')) {\n//                   await deleteIssueAPI(selectedIssue.id);\n//                   const refreshed = await listIssues(projectId);\n//                   setIssues(refreshed);\n//                   setSelectedIssue(null);\n//                 }\n//               }}>🗑</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Inline CSS styles */}\n// <style>{`\n//   body {\n//     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//     background-color: #f5f6f8;\n//     margin: 0;\n//     padding: 16px;\n//   }\n//   .board-wrap {\n//     max-width: 100%;\n//     overflow-x: auto;\n//   }\n//   .project-header {\n//     background: white;\n//     border-radius: 8px;\n//     padding: 20px 24px;\n//     margin-bottom: 20px;\n//     box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//     border-left: 4px solid #1976d2;\n//   }\n//   .project-title {\n//     margin: 0 0 12px 0;\n//     font-size: 28px;\n//     font-weight: 700;\n//     color: #172b4d;\n//     line-height: 1.2;\n//   }\n//   .project-stats {\n//     display: flex;\n//     gap: 20px;\n//     flex-wrap: wrap;\n//   }\n//   .project-stat {\n//     background: #f5f6f8;\n//     padding: 6px 12px;\n//     border-radius: 16px;\n//     font-size: 14px;\n//     font-weight: 600;\n//     color: #5e6c84;\n//     display: flex;\n//     align-items: center;\n//     gap: 4px;\n//   }\n//   .project-stat:before {\n//     content: \"•\";\n//     color: #1976d2;\n//     font-weight: bold;\n//   }\n//   @media (min-width: 768px) {\n//     .swimlane {\n//       background: white;\n//       border-radius: 8px;\n//       margin-bottom: 16px;\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//       overflow: hidden;\n//     }\n//     .kanban-row {\n//       display: flex;\n//       padding: 16px;\n//       gap: 12px;\n//       overflow-x: auto;\n//     }\n//     .kanban-column {\n//       flex: 0 0 260px;\n//       background: #f5f6f8;\n//       border-radius: 6px;\n//       padding: 12px;\n//       display: flex;\n//       flex-direction: column;\n//       gap: 12px;\n//       border: 1px solid #dfe5e5;\n//       user-select: none;\n//       min-height: 400px;\n//     }\n//     .modal {\n//       background: white;\n//       border-radius: 8px;\n//       padding: 24px;\n//       width: 700px;\n//       max-height: 80vh;\n//       display: grid;\n//       grid-template-columns: 1fr 1fr 1fr;\n//       gap: 16px;\n//       overflow-y: auto;\n//       position: relative;\n//     }\n//   }\n//   @media (max-width: 767px) {\n//     body {\n//       padding: 8px;\n//     }\n//     .project-header {\n//       padding: 16px;\n//       margin-bottom: 16px;\n//       border-left-width: 3px;\n//     }\n//     .project-title {\n//       font-size: 22px;\n//       margin-bottom: 10px;\n//     }\n//     .project-stats {\n//       gap: 12px;\n//     }\n//     .project-stat {\n//       font-size: 12px;\n//       padding: 4px 10px;\n//     }\n//     .mobile-swimlane-selector {\n//       margin-bottom: 16px;\n//       position: sticky;\n//       top: 0;\n//       background: white;\n//       padding: 12px;\n//       border-radius: 8px;\n//       box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n//       z-index: 100;\n//     }\n//     .mobile-select {\n//       width: 100%;\n//       padding: 12px;\n//       border: 1px solid #dfe5e5;\n//       border-radius: 6px;\n//       font-size: 16px;\n//       background: white;\n//     }\n//     .swimlane {\n//       background: white;\n//       border-radius: 8px;\n//       margin-bottom: 12px;\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//       overflow: hidden;\n//     }\n//     .swimlane-header {\n//       display: flex;\n//       align-items: center;\n//       padding: 12px;\n//       background: #fafbfc;\n//       border-bottom: 1px solid #dfe5e5;\n//       font-weight: 600;\n//       font-size: 14px;\n//       color: #172b4d;\n//       position: relative;\n//     }\n//     .mobile-swimlane-toggle {\n//       background: none;\n//       border: none;\n//       font-size: 16px;\n//       color: #5e6c84;\n//       margin-left: auto;\n//       padding: 4px 8px;\n//     }\n//     .kanban-row.mobile-view {\n//       display: block;\n//       padding: 8px;\n//       overflow-x: auto;\n//       white-space: nowrap;\n//     }\n//     .kanban-column.mobile-column {\n//       display: inline-block;\n//       vertical-align: top;\n//       width: 280px;\n//       margin-right: 8px;\n//       background: #f5f6f8;\n//       border-radius: 6px;\n//       padding: 8px;\n//       border: 1px solid #dfe5e5;\n//       user-select: none;\n//       min-height: 300px;\n//     }\n//     .col-header {\n//       display: flex;\n//       align-items: center;\n//       margin-bottom: 8px;\n//       gap: 6px;\n//     }\n//     .col-title {\n//       font-weight: 600;\n//       font-size: 11px;\n//       color: #5e6c84;\n//       text-transform: uppercase;\n//       letter-spacing: 0.5px;\n//       flex-grow: 1;\n//     }\n//     .card-item {\n//       background: white;\n//       border-radius: 6px;\n//       padding: 10px;\n//       box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//       cursor: pointer;\n//       user-select: none;\n//       display: flex;\n//       flex-direction: column;\n//       gap: 6px;\n//       border: 1px solid #dfe5e5;\n//       margin-bottom: 8px;\n//     }\n//     .card-title {\n//       font-weight: 600;\n//       font-size: 13px;\n//       color: #2b3a59;\n//       line-height: 1.3;\n//     }\n//     .card-meta {\n//       display: flex;\n//       gap: 6px;\n//       font-size: 10px;\n//       color: #6b7c93;\n//       align-items: center;\n//       flex-wrap: wrap;\n//     }\n//     .modal.mobile-modal {\n//       width: 95vw;\n//       max-height: 90vh;\n//       padding: 16px;\n//       display: flex;\n//       flex-direction: column;\n//     }\n//     .modal-content.mobile-modal-content {\n//       display: flex;\n//       flex-direction: column;\n//       gap: 12px;\n//       overflow-y: auto;\n//     }\n//     .modal-field {\n//       display: flex;\n//       flex-direction: column;\n//       gap: 4px;\n//     }\n//     .modal-field input, .modal-field textarea, .modal-field select {\n//       padding: 10px;\n//       font-size: 16px;\n//     }\n//     .modal-actions {\n//       display: flex;\n//       gap: 8px;\n//       justify-content: space-between;\n//       margin-top: 16px;\n//     }\n//     .modal-actions button {\n//       flex: 1;\n//       padding: 12px;\n//       font-size: 16px;\n//     }\n//   }\n//   .swimlane-header {\n//     display: flex;\n//     align-items: center;\n//     padding: 12px 16px;\n//     background: #fafbfc;\n//     border-bottom: 1px solid #dfe5e5;\n//     font-weight: 600;\n//     font-size: 14px;\n//     color: #172b4d;\n//   }\n//   .swimlane-toggle, .swimlane-icon {\n//     color: #5e6c84;\n//     margin-right: 8px;\n//     cursor: pointer;\n//   }\n//   .swimlane-toggle {\n//     border: none;\n//     background: transparent;\n//     font-size: 14px;\n//   }\n//   .swimlane-icon {\n//     font-size: 18px;\n//   }\n//   .swimlane-title-input {\n//     border: 1px solid #dfe5e5;\n//     border-radius: 4px;\n//     padding: 4px 8px;\n//     font-size: 14px;\n//     font-weight: 600;\n//     background: white;\n//     margin-right: 8px;\n//     min-width: 150px;\n//     color: #172b4d;\n//   }\n//   .swimlane-title-input:focus {\n//     outline: none;\n//     border-color: #1976d2;\n//   }\n//   .swimlane-count {\n//     color: #5e6c84;\n//     font-size: 12px;\n//     font-weight: normal;\n//   }\n//   .col-header {\n//     display: flex;\n//     align-items: center;\n//     margin-bottom: 4px;\n//     gap: 6px;\n//   }\n//   .col-title {\n//     font-weight: 600;\n//     font-size: 12px;\n//     color: #5e6c84;\n//     text-transform: uppercase;\n//     letter-spacing: 0.5px;\n//     flex-grow: 1;\n//   }\n//   .col-count {\n//     background: #dfe5e5;\n//     color: #5e6c84;\n//     border-radius: 12px;\n//     padding: 2px 8px;\n//     font-size: 11px;\n//     font-weight: 600;\n//     min-width: 20px;\n//     text-align: center;\n//   }\n//   .col-icons {\n//     display: flex;\n//     gap: 6px;\n//   }\n//   .col-icon {\n//     cursor: pointer;\n//     color: #5e6c84;\n//     font-size: 18px;\n//     background: none;\n//     border: none;\n//     padding: 0;\n//   }\n//   .create-card {\n//     background: white;\n//     padding: 10px;\n//     border-radius: 6px;\n//     box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n//     display: flex;\n//     flex-direction: column;\n//     gap: 10px;\n//   }\n//   .card-item {\n//     background: white;\n//     border-radius: 8px;\n//     padding: 12px;\n//     box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//     cursor: pointer;\n//     user-select: none;\n//     display: flex;\n//     flex-direction: column;\n//     gap: 6px;\n//     border: 1px solid #dfe5e5;\n//     transition: box-shadow 0.2s ease, border-color 0.2s ease;\n//   }\n//   .card-item:hover {\n//     box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\n//     border-color: #a2adba;\n//   }\n//   .modal-overlay {\n//     position: fixed;\n//     top: 0; left: 0; right: 0; bottom: 0;\n//     background: rgba(0,0,0,0.5);\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//     z-index: 1000;\n//   }\n//   button {\n//     cursor: pointer;\n//     transition: background-color 0.2s;\n//   }\n//   button:hover {\n//     opacity: 0.9;\n//   }\n//   @media (max-width: 767px) {\n//     button, .card-item, .col-icon {\n//       min-height: 44px;\n//       min-width: 44px;\n//     }\n//     .card-item {\n//       touch-action: manipulation;\n//     }\n//   }\n// `}</style>\n\n//     </div>\n//   );\n// }\n\n// const btnStyle = {\n//   cancel: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#5e6c84',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   create: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#1976d2',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   delete: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#d32f2f',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   }\n// };\n\n// for model dialog style  code ok \n\n// import React, { useEffect, useState, useRef } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\n// const mockProjects = [\n//   { id: 'p1', name: 'E-Commerce Platform' },\n//   { id: 'p2', name: 'API Gateway Service' },\n//   { id: 'p3', name: 'Mobile App Development' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\n// const getProjectName = async (projectId) => {\n//   await simulateApiDelay();\n//   const project = mockProjects.find(p => p.id === projectId);\n//   return project ? project.name : 'Untitled Project';\n// };\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\n// };\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [projectName, setProjectName] = useState('');\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n//   const [columnsByLane, setColumnsByLane] = useState({});\n//   const [columnModal, setColumnModal] = useState(null);\n//   const [columnInput, setColumnInput] = useState('');\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\n//   const [isMobile, setIsMobile] = useState(false);\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\n\n//   // Draggable modal state\n//   const [modalDrag, setModalDrag] = useState({\n//     isDragging: false,\n//     position: { x: 0, y: 0 },\n//     startPosition: { x: 0, y: 0 }\n//   });\n//   const modalRef = useRef(null);\n\n//   useEffect(() => {\n//     const checkScreenSize = () => {\n//       setIsMobile(window.innerWidth < 768);\n//     };\n//     checkScreenSize();\n//     window.addEventListener('resize', checkScreenSize);\n//     return () => window.removeEventListener('resize', checkScreenSize);\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const projectNameData = projectId ? await getProjectName(projectId) : 'All Projects';\n//         const [issuesData, epicsData] = await Promise.all([\n//           listIssues(projectId),\n//           listEpics()\n//         ]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         setProjectName(projectNameData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//           initialCols[lane.id] = defaultStatuses.slice();\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//         setColumnsByLane(initialCols);\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   // Draggable modal functions\n//   const handleModalMouseDown = (e) => {\n//     if (isMobile) return; // Disable dragging on mobile\n\n//     // Only start dragging if clicking on the header (not on buttons or inputs)\n//     if (e.target.closest('.modal-close-btn') || \n//         e.target.closest('input') || \n//         e.target.closest('select') || \n//         e.target.closest('textarea') ||\n//         e.target.closest('button')) {\n//       return;\n//     }\n\n//     setModalDrag({\n//       isDragging: true,\n//       position: modalDrag.position,\n//       startPosition: {\n//         x: e.clientX - modalDrag.position.x,\n//         y: e.clientY - modalDrag.position.y\n//       }\n//     });\n//   };\n\n//   const handleModalMouseMove = (e) => {\n//     if (!modalDrag.isDragging || isMobile) return;\n\n//     const newX = e.clientX - modalDrag.startPosition.x;\n//     const newY = e.clientY - modalDrag.startPosition.y;\n\n//     setModalDrag(prev => ({\n//       ...prev,\n//       position: { x: newX, y: newY }\n//     }));\n//   };\n\n//   const handleModalMouseUp = () => {\n//     if (isMobile) return;\n//     setModalDrag(prev => ({ ...prev, isDragging: false }));\n//   };\n\n//   // Reset modal position when closed\n//   useEffect(() => {\n//     if (!selectedIssue) {\n//       setModalDrag({\n//         isDragging: false,\n//         position: { x: 0, y: 0 },\n//         startPosition: { x: 0, y: 0 }\n//       });\n//     }\n//   }, [selectedIssue]);\n\n//   // Add event listeners for dragging\n//   useEffect(() => {\n//     if (modalDrag.isDragging) {\n//       document.addEventListener('mousemove', handleModalMouseMove);\n//       document.addEventListener('mouseup', handleModalMouseUp);\n//       document.body.style.cursor = 'grabbing';\n//       document.body.style.userSelect = 'none';\n//     } else {\n//       document.removeEventListener('mousemove', handleModalMouseMove);\n//       document.removeEventListener('mouseup', handleModalMouseUp);\n//       document.body.style.cursor = '';\n//       document.body.style.userSelect = '';\n//     }\n\n//     return () => {\n//       document.removeEventListener('mousemove', handleModalMouseMove);\n//       document.removeEventListener('mouseup', handleModalMouseUp);\n//       document.body.style.cursor = '';\n//       document.body.style.userSelect = '';\n//     };\n//   }, [modalDrag.isDragging]);\n\n//   const openAddColumnModal = (e, laneId, colIndex) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'add' });\n//     setColumnInput('');\n//   };\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\n//     setColumnInput(status);\n//   };\n//   const handleAddColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[columnModal.laneId]];\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\n//       return { ...prev, [columnModal.laneId]: cols };\n//     });\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleEditColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     const { laneId, colIndex } = columnModal;\n//     const oldCol = columnsByLane[laneId][colIndex];\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\n//       alert('Column name already exists');\n//       return;\n//     }\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols[colIndex] = name.toLowerCase();\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleDeleteColumn = () => {\n//     const { laneId, colIndex } = columnModal;\n//     const removedCol = columnsByLane[laneId][colIndex];\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols.splice(colIndex, 1);\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) { console.error(err); }\n//   };\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error(err); }\n//   };\n\n//   const handleOpenModal = (issue) => { \n//     setSelectedIssue(issue); \n//     setEditIssue({ ...issue }); \n//     // Reset position when opening new modal\n//     setModalDrag({\n//       isDragging: false,\n//       position: { x: 0, y: 0 },\n//       startPosition: { x: 0, y: 0 }\n//     });\n//   };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) {\n//       alert('Epic name is required');\n//       return;\n//     }\n//     try {\n//       await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\n//     } catch (error) {\n//       console.error('Error creating epic:', error);\n//     }\n//   };\n\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) {\n//       alert('Please select an epic to delete');\n//       return;\n//     }\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//       setColumnsByLane(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setOpenSwimlanes(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setCustomTitles(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//     } catch (error) {\n//       console.error('Error deleting epic:', error);\n//     }\n//   };\n\n//   const toggleMobileSwimlane = (laneId) => {\n//     if (activeSwimlane === laneId) {\n//       setActiveSwimlane(null);\n//     } else {\n//       setActiveSwimlane(laneId);\n//     }\n//   };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Project Name Header */}\n//       <div className=\"project-header\">\n//         <h1 className=\"project-title\">{projectName}</h1>\n//         <div className=\"project-stats\">\n//           <span className=\"project-stat\">{epics.length} Epics</span>\n//           <span className=\"project-stat\">{issues.length} Issues</span>\n//           <span className=\"project-stat\">\n//             {issues.filter(issue => issue.status === 'done').length} Completed\n//           </span>\n//         </div>\n//       </div>\n\n//       {isMobile && (\n//         <div className=\"mobile-swimlane-selector\">\n//           <select\n//             value={activeSwimlane || ''}\n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\n//             className=\"mobile-select\"\n//           >\n//             <option value=\"\">All Swimlanes</option>\n//             {swimlanes.map(lane => (\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       {swimlanes.map(lane => {\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\n\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\n//           return null;\n//         }\n\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               {!isMobile && (\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                   {isOpen ? '▼' : '▶'}\n//                 </button>\n//               )}\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input\n//                 className=\"swimlane-title-input\"\n//                 value={customTitles[lane.id] || ''}\n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))}\n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//               {isMobile && (\n//                 <button\n//                   className=\"mobile-swimlane-toggle\"\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\n//                 >\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\n//                 </button>\n//               )}\n//             </header>\n//             {isOpen && (\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\n//                 {statuses.map((status, idx) => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div\n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`}\n//                       key={status}\n//                       onDragOver={onDragOver}\n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {!isMobile && (\n//                           <span className=\"col-icons\">\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\n//                           </span>\n//                         )}\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => {\n//                         const isHovered = hoveredAssigneeId === issue.id;\n//                         return (\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                             <div className=\"card-top\">\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                               <span className=\"card-id\">{issue.id}</span>\n//                             </div>\n//                             <div className=\"card-title\">{issue.title}</div>\n//                             <div className=\"card-meta\">\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\n//                               {issue.assignee && (\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\n//                                   👤\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\n//                                 </span>\n//                               )}\n//                             </div>\n//                           </div>\n//                         );\n//                       })}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n//       {/* Column Add/Edit modal */}\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\n//             position: isMobile ? 'fixed' : 'absolute',\n//             top: isMobile ? '50%' : modalPosition.top,\n//             left: isMobile ? '50%' : modalPosition.left,\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\n//             minWidth: isMobile ? '90vw' : 280,\n//             maxWidth: isMobile ? '95vw' : 320,\n//             padding: 20,\n//             borderRadius: 10,\n//             background: 'white',\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\n//             zIndex: 1100\n//           }}>\n//             {columnModal.type === 'add' ? (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                 </div>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//       {/* Issue modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div \n//             className={`modal-container ${isMobile ? 'mobile-modal-container' : ''}`}\n//             style={\n//               !isMobile && modalDrag.position.x !== 0 && modalDrag.position.y !== 0\n//                 ? { \n//                     position: 'fixed',\n//                     top: modalDrag.position.y,\n//                     left: modalDrag.position.x,\n//                     transform: 'none'\n//                   }\n//                 : {}\n//             }\n//             ref={modalRef}\n//           >\n//             <div \n//               className={`modal ${isMobile ? 'mobile-modal' : ''} ${modalDrag.isDragging ? 'modal-dragging' : ''}`}\n//               onClick={e => e.stopPropagation()}\n//               onMouseDown={handleModalMouseDown}\n//             >\n//               <div className=\"modal-header\">\n//                 <div className=\"modal-header-content\">\n//                   <span className=\"modal-epic-badge\">{editIssue.epicName}</span>\n//                   <h2 className=\"modal-title\">{editIssue.title || 'Untitled Issue'}</h2>\n//                   <div className=\"modal-id-type\">\n//                     <span className=\"modal-id\">{editIssue.id}</span>\n//                     <span className={`modal-type modal-type-${editIssue.type.toLowerCase()}`}>{editIssue.type}</span>\n//                   </div>\n//                 </div>\n//                 <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\n//               </div>\n\n//               <div className=\"modal-content-scroll\">\n//                 <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\n//                   <div className=\"modal-section\">\n//                     <h3 className=\"modal-section-title\">Details</h3>\n//                     <div className=\"modal-grid\">\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Title</label>\n//                         <input \n//                           className=\"modal-input\" \n//                           value={editIssue.title} \n//                           onChange={e => handleUpdateField('title', e.target.value)} \n//                           placeholder=\"Enter issue title\"\n//                         />\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Status</label>\n//                         <select \n//                           className=\"modal-select\"\n//                           value={editIssue.status} \n//                           onChange={e => handleUpdateField('status', e.target.value)}\n//                         >\n//                           {columnsByLane[editIssue.epic]?.map(st => (\n//                             <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\n//                           )) || defaultStatuses.map(st => (\n//                             <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Assignee</label>\n//                         <input \n//                           className=\"modal-input\"\n//                           value={editIssue.assignee} \n//                           onChange={e => handleUpdateField('assignee', e.target.value)}\n//                           placeholder=\"Unassigned\"\n//                         />\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Reporter</label>\n//                         <input \n//                           className=\"modal-input modal-input-disabled\"\n//                           disabled \n//                           value={editIssue.reporter} \n//                         />\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Priority</label>\n//                         <select \n//                           className=\"modal-select\"\n//                           value={editIssue.priority} \n//                           onChange={e => handleUpdateField('priority', e.target.value)}\n//                         >\n//                           <option>Low</option>\n//                           <option>Medium</option>\n//                           <option>High</option>\n//                         </select>\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Story Points</label>\n//                         <input \n//                           className=\"modal-input\"\n//                           type=\"number\" \n//                           value={editIssue.storyPoints} \n//                           onChange={e => handleUpdateField('storyPoints', e.target.value)}\n//                           placeholder=\"0\"\n//                         />\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Start Date</label>\n//                         <input \n//                           className=\"modal-input\"\n//                           type=\"date\" \n//                           value={editIssue.startDate} \n//                           onChange={e => handleUpdateField('startDate', e.target.value)} \n//                         />\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Due Date</label>\n//                         <input \n//                           className=\"modal-input\"\n//                           type=\"date\" \n//                           value={editIssue.dueDate} \n//                           onChange={e => handleUpdateField('dueDate', e.target.value)} \n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n\n//                   <div className=\"modal-section\">\n//                     <h3 className=\"modal-section-title\">Description</h3>\n//                     <div className=\"modal-field-full\">\n//                       <textarea \n//                         className=\"modal-textarea\"\n//                         rows=\"4\" \n//                         value={editIssue.description} \n//                         onChange={e => handleUpdateField('description', e.target.value)}\n//                         placeholder=\"Add a detailed description...\"\n//                       />\n//                     </div>\n//                   </div>\n\n//                   <div className=\"modal-section\">\n//                     <h3 className=\"modal-section-title\">Additional Information</h3>\n//                     <div className=\"modal-grid\">\n//                       <div className=\"modal-field-full\">\n//                         <label className=\"modal-label\">Subtasks</label>\n//                         <input \n//                           className=\"modal-input\"\n//                           value={editIssue.subtasks} \n//                           onChange={e => handleUpdateField('subtasks', e.target.value)}\n//                           placeholder=\"Enter subtasks (comma separated)\"\n//                         />\n//                       </div>\n//                       <div className=\"modal-field-full\">\n//                         <label className=\"modal-label\">Comments</label>\n//                         <textarea \n//                           className=\"modal-textarea\"\n//                           rows=\"3\" \n//                           value={editIssue.comments} \n//                           onChange={e => handleUpdateField('comments', e.target.value)}\n//                           placeholder=\"Add comments...\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 </div>\n//               </div>\n\n//               <div className=\"modal-actions\">\n//                 <button className=\"btn-reset\" onClick={handleReset}>Reset Changes</button>\n//                 <div className=\"modal-actions-right\">\n//                   <button \n//                     className=\"modal-delete-btn\" \n//                     onClick={async () => {\n//                       if (window.confirm('Are you sure you want to delete this issue?')) {\n//                         await deleteIssueAPI(selectedIssue.id);\n//                         const refreshed = await listIssues(projectId);\n//                         setIssues(refreshed);\n//                         setSelectedIssue(null);\n//                       }\n//                     }}\n//                   >\n//                     Delete Issue\n//                   </button>\n//                   <button className=\"btn-save\" onClick={handleSave}>Save Changes</button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Inline CSS styles */}\n// <style>{`\n//   body {\n//     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//     background-color: #f5f6f8;\n//     margin: 0;\n//     padding: 16px;\n//   }\n//   .board-wrap {\n//     max-width: 100%;\n//     overflow-x: auto;\n//   }\n//   .project-header {\n//     background: white;\n//     border-radius: 8px;\n//     padding: 20px 24px;\n//     margin-bottom: 20px;\n//     box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//     border-left: 4px solid #1976d2;\n//   }\n//   .project-title {\n//     margin: 0 0 12px 0;\n//     font-size: 28px;\n//     font-weight: 700;\n//     color: #172b4d;\n//     line-height: 1.2;\n//   }\n//   .project-stats {\n//     display: flex;\n//     gap: 20px;\n//     flex-wrap: wrap;\n//   }\n//   .project-stat {\n//     background: #f5f6f8;\n//     padding: 6px 12px;\n//     border-radius: 16px;\n//     font-size: 14px;\n//     font-weight: 600;\n//     color: #5e6c84;\n//     display: flex;\n//     align-items: center;\n//     gap: 4px;\n//   }\n//   .project-stat:before {\n//     content: \"•\";\n//     color: #1976d2;\n//     font-weight: bold;\n//   }\n//   @media (min-width: 768px) {\n//     .swimlane {\n//       background: white;\n//       border-radius: 8px;\n//       margin-bottom: 16px;\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//       overflow: hidden;\n//     }\n//     .kanban-row {\n//       display: flex;\n//       padding: 16px;\n//       gap: 12px;\n//       overflow-x: auto;\n//     }\n//     .kanban-column {\n//       flex: 0 0 260px;\n//       background: #f5f6f8;\n//       border-radius: 6px;\n//       padding: 12px;\n//       display: flex;\n//       flex-direction: column;\n//       gap: 12px;\n//       border: 1px solid #dfe5e5;\n//       user-select: none;\n//       min-height: 400px;\n//     }\n//   }\n//   @media (max-width: 767px) {\n//     body {\n//       padding: 8px;\n//     }\n//     .project-header {\n//       padding: 16px;\n//       margin-bottom: 16px;\n//       border-left-width: 3px;\n//     }\n//     .project-title {\n//       font-size: 22px;\n//       margin-bottom: 10px;\n//     }\n//     .project-stats {\n//       gap: 12px;\n//     }\n//     .project-stat {\n//       font-size: 12px;\n//       padding: 4px 10px;\n//     }\n//     .mobile-swimlane-selector {\n//       margin-bottom: 16px;\n//       position: sticky;\n//       top: 0;\n//       background: white;\n//       padding: 12px;\n//       border-radius: 8px;\n//       box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n//       z-index: 100;\n//     }\n//     .mobile-select {\n//       width: 100%;\n//       padding: 12px;\n//       border: 1px solid #dfe5e5;\n//       border-radius: 6px;\n//       font-size: 16px;\n//       background: white;\n//     }\n//     .swimlane {\n//       background: white;\n//       border-radius: 8px;\n//       margin-bottom: 12px;\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//       overflow: hidden;\n//     }\n//     .swimlane-header {\n//       display: flex;\n//       align-items: center;\n//       padding: 12px;\n//       background: #fafbfc;\n//       border-bottom: 1px solid #dfe5e5;\n//       font-weight: 600;\n//       font-size: 14px;\n//       color: #172b4d;\n//       position: relative;\n//     }\n//     .mobile-swimlane-toggle {\n//       background: none;\n//       border: none;\n//       font-size: 16px;\n//       color: #5e6c84;\n//       margin-left: auto;\n//       padding: 4px 8px;\n//     }\n//     .kanban-row.mobile-view {\n//       display: block;\n//       padding: 8px;\n//       overflow-x: auto;\n//       white-space: nowrap;\n//     }\n//     .kanban-column.mobile-column {\n//       display: inline-block;\n//       vertical-align: top;\n//       width: 280px;\n//       margin-right: 8px;\n//       background: #f5f6f8;\n//       border-radius: 6px;\n//       padding: 8px;\n//       border: 1px solid #dfe5e5;\n//       user-select: none;\n//       min-height: 300px;\n//     }\n//     .col-header {\n//       display: flex;\n//       align-items: center;\n//       margin-bottom: 8px;\n//       gap: 6px;\n//     }\n//     .col-title {\n//       font-weight: 600;\n//       font-size: 11px;\n//       color: #5e6c84;\n//       text-transform: uppercase;\n//       letter-spacing: 0.5px;\n//       flex-grow: 1;\n//     }\n//     .card-item {\n//       background: white;\n//       border-radius: 6px;\n//       padding: 10px;\n//       box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//       cursor: pointer;\n//       user-select: none;\n//       display: flex;\n//       flex-direction: column;\n//       gap: 6px;\n//       border: 1px solid #dfe5e5;\n//       margin-bottom: 8px;\n//     }\n//     .card-title {\n//       font-weight: 600;\n//       font-size: 13px;\n//       color: #2b3a59;\n//       line-height: 1.3;\n//     }\n//     .card-meta {\n//       display: flex;\n//       gap: 6px;\n//       font-size: 10px;\n//       color: #6b7c93;\n//       align-items: center;\n//       flex-wrap: wrap;\n//     }\n//     .modal.mobile-modal {\n//       width: 100%;\n//       max-height: 90vh;\n//       display: flex;\n//       flex-direction: column;\n//     }\n//     .modal-content.mobile-modal-content {\n//       display: flex;\n//       flex-direction: column;\n//       gap: 12px;\n//       overflow-y: auto;\n//     }\n//     .modal-field {\n//       display: flex;\n//       flex-direction: column;\n//       gap: 4px;\n//     }\n//     .modal-field input, .modal-field textarea, .modal-field select {\n//       padding: 10px;\n//       font-size: 16px;\n//     }\n//     .modal-actions {\n//       display: flex;\n//       gap: 8px;\n//       justify-content: space-between;\n//       margin-top: 16px;\n//     }\n//     .modal-actions button {\n//       flex: 1;\n//       padding: 12px;\n//       font-size: 16px;\n//     }\n//   }\n\n//   /* Enhanced Modal Styles - Fixed Positioning with Dragging */\n//   .modal-overlay {\n//     position: fixed;\n//     top: 0;\n//     left: 0;\n//     right: 0;\n//     bottom: 0;\n//     background: rgba(0,0,0,0.6);\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//     z-index: 10000;\n//     padding: 20px;\n//   }\n\n//   .modal-container {\n//     width: 100%;\n//     max-width: 1000px;\n//     max-height: 85vh;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//     transition: none;\n//   }\n\n//   .modal {\n//     background: white;\n//     border-radius: 12px;\n//     width: 100%;\n//     max-height: 85vh;\n//     display: flex;\n//     flex-direction: column;\n//     overflow: hidden;\n//     box-shadow: 0 20px 60px rgba(0,0,0,0.3);\n//     margin: 0 auto;\n//     transition: box-shadow 0.2s ease;\n//   }\n\n//   .modal-dragging {\n//     box-shadow: 0 25px 80px rgba(0,0,0,0.4);\n//     cursor: grabbing;\n//   }\n\n//   .modal-header {\n//     display: flex;\n//     justify-content: space-between;\n//     align-items: flex-start;\n//     padding: 24px;\n//     background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n//     border-bottom: 1px solid #e1e4e8;\n//     flex-shrink: 0;\n//     cursor: grab;\n//     transition: background-color 0.2s ease;\n//   }\n\n//   .modal-header:hover {\n//     background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);\n//   }\n\n//   .modal-dragging .modal-header {\n//     cursor: grabbing;\n//     background: linear-gradient(135deg, #dee2e6 0%, #ced4da 100%);\n//   }\n\n//   .modal-header-content {\n//     flex: 1;\n//     min-width: 0;\n//   }\n\n//   .modal-epic-badge {\n//     display: inline-block;\n//     background: #1976d2;\n//     color: white;\n//     padding: 4px 12px;\n//     border-radius: 16px;\n//     font-size: 12px;\n//     font-weight: 600;\n//     margin-bottom: 8px;\n//   }\n\n//   .modal-title {\n//     margin: 0 0 8px 0;\n//     font-size: 24px;\n//     font-weight: 700;\n//     color: #172b4d;\n//     line-height: 1.3;\n//     word-wrap: break-word;\n//   }\n\n//   .modal-id-type {\n//     display: flex;\n//     gap: 12px;\n//     align-items: center;\n//   }\n\n//   .modal-id {\n//     font-size: 14px;\n//     color: #5e6c84;\n//     font-family: 'Monaco', 'Menlo', monospace;\n//   }\n\n//   .modal-type {\n//     padding: 2px 8px;\n//     border-radius: 4px;\n//     font-size: 12px;\n//     font-weight: 600;\n//     text-transform: uppercase;\n//   }\n\n//   .modal-type-task { background: #e3f2fd; color: #1976d2; }\n//   .modal-type-subtask { background: #f3e5f5; color: #7b1fa2; }\n//   .modal-type-bug { background: #ffebee; color: #d32f2f; }\n\n//   .modal-close-btn {\n//     background: none;\n//     border: none;\n//     font-size: 20px;\n//     color: #5e6c84;\n//     cursor: pointer;\n//     padding: 8px;\n//     margin: -8px;\n//     border-radius: 4px;\n//     transition: background-color 0.2s;\n//     flex-shrink: 0;\n//   }\n\n//   .modal-close-btn:hover {\n//     background: rgba(0,0,0,0.1);\n//   }\n\n//   .modal-content-scroll {\n//     flex: 1;\n//     overflow-y: auto;\n//     padding: 0 24px;\n//   }\n\n//   .modal-content {\n//     padding: 24px 0;\n//     display: flex;\n//     flex-direction: column;\n//     gap: 24px;\n//   }\n\n//   .modal-section {\n//     display: flex;\n//     flex-direction: column;\n//     gap: 16px;\n//   }\n\n//   .modal-section-title {\n//     font-size: 18px;\n//     font-weight: 600;\n//     color: #172b4d;\n//     margin: 0;\n//     padding-bottom: 8px;\n//     border-bottom: 2px solid #f0f0f0;\n//   }\n\n//   .modal-grid {\n//     display: grid;\n//     grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n//     gap: 16px;\n//   }\n\n//   .modal-field {\n//     display: flex;\n//     flex-direction: column;\n//     gap: 6px;\n//   }\n\n//   .modal-field-full {\n//     grid-column: 1 / -1;\n//     display: flex;\n//     flex-direction: column;\n//     gap: 6px;\n//   }\n\n//   .modal-label {\n//     font-size: 14px;\n//     font-weight: 600;\n//     color: #44546f;\n//     margin: 0;\n//   }\n\n//   .modal-input, .modal-select, .modal-textarea {\n//     padding: 12px;\n//     border: 2px solid #dfe1e6;\n//     border-radius: 8px;\n//     font-size: 14px;\n//     font-family: inherit;\n//     transition: border-color 0.2s, box-shadow 0.2s;\n//     background: white;\n//   }\n\n//   .modal-input:focus, .modal-select:focus, .modal-textarea:focus {\n//     outline: none;\n//     border-color: #1976d2;\n//     box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);\n//   }\n\n//   .modal-input-disabled {\n//     background: #f8f9fa;\n//     color: #6b778c;\n//     cursor: not-allowed;\n//   }\n\n//   .modal-textarea {\n//     resize: vertical;\n//     min-height: 80px;\n//     line-height: 1.5;\n//   }\n\n//   .modal-actions {\n//     display: flex;\n//     justify-content: space-between;\n//     align-items: center;\n//     padding: 20px 24px;\n//     background: #f8f9fa;\n//     border-top: 1px solid #e1e4e8;\n//     gap: 16px;\n//     flex-shrink: 0;\n//   }\n\n//   .modal-actions-right {\n//     display: flex;\n//     gap: 12px;\n//     align-items: center;\n//   }\n\n//   .btn-reset {\n//     padding: 10px 20px;\n//     border: 1px solid #dcdfe4;\n//     background: white;\n//     color: #44546f;\n//     border-radius: 6px;\n//     font-weight: 600;\n//     cursor: pointer;\n//     transition: all 0.2s;\n//   }\n\n//   .btn-reset:hover {\n//     background: #f1f2f4;\n//     border-color: #c1c7d0;\n//   }\n\n//   .btn-save {\n//     padding: 10px 24px;\n//     border: none;\n//     background: #1976d2;\n//     color: white;\n//     border-radius: 6px;\n//     font-weight: 600;\n//     cursor: pointer;\n//     transition: background-color 0.2s;\n//   }\n\n//   .btn-save:hover {\n//     background: #1565c0;\n//   }\n\n//   .modal-delete-btn {\n//     padding: 10px 20px;\n//     border: 1px solid #ffcdd2;\n//     background: white;\n//     color: #d32f2f;\n//     border-radius: 6px;\n//     font-weight: 600;\n//     cursor: pointer;\n//     transition: all 0.2s;\n//   }\n\n//   .modal-delete-btn:hover {\n//     background: #ffebee;\n//     border-color: #ef5350;\n//   }\n\n//   @media (max-width: 767px) {\n//     .modal-overlay {\n//       padding: 10px;\n//     }\n\n//     .modal-container.mobile-modal-container {\n//       width: 100%;\n//       height: 100%;\n//       padding: 0;\n//     }\n\n//     .modal.mobile-modal {\n//       width: 100%;\n//       max-height: 100%;\n//       border-radius: 0;\n//       margin: 0;\n//     }\n\n//     .modal-header {\n//       padding: 16px;\n//       flex-direction: column;\n//       gap: 12px;\n//       cursor: default;\n//     }\n\n//     .modal-close-btn {\n//       align-self: flex-end;\n//       margin: 0;\n//     }\n\n//     .modal-content-scroll {\n//       padding: 0 16px;\n//     }\n\n//     .modal-content {\n//       padding: 16px 0;\n//       gap: 20px;\n//     }\n\n//     .modal-grid {\n//       grid-template-columns: 1fr;\n//       gap: 12px;\n//     }\n\n//     .modal-actions {\n//       padding: 16px;\n//       flex-direction: column;\n//       gap: 12px;\n//     }\n\n//     .modal-actions-right {\n//       width: 100%;\n//       justify-content: space-between;\n//     }\n\n//     .btn-reset, .modal-delete-btn, .btn-save {\n//       flex: 1;\n//       text-align: center;\n//     }\n//   }\n\n//   .swimlane-header {\n//     display: flex;\n//     align-items: center;\n//     padding: 12px 16px;\n//     background: #fafbfc;\n//     border-bottom: 1px solid #dfe5e5;\n//     font-weight: 600;\n//     font-size: 14px;\n//     color: #172b4d;\n//   }\n//   .swimlane-toggle, .swimlane-icon {\n//     color: #5e6c84;\n//     margin-right: 8px;\n//     cursor: pointer;\n//   }\n//   .swimlane-toggle {\n//     border: none;\n//     background: transparent;\n//     font-size: 14px;\n//   }\n//   .swimlane-icon {\n//     font-size: 18px;\n//   }\n//   .swimlane-title-input {\n//     border: 1px solid #dfe5e5;\n//     border-radius: 4px;\n//     padding: 4px 8px;\n//     font-size: 14px;\n//     font-weight: 600;\n//     background: white;\n//     margin-right: 8px;\n//     min-width: 150px;\n//     color: #172b4d;\n//   }\n//   .swimlane-title-input:focus {\n//     outline: none;\n//     border-color: #1976d2;\n//   }\n//   .swimlane-count {\n//     color: #5e6c84;\n//     font-size: 12px;\n//     font-weight: normal;\n//   }\n//   .col-header {\n//     display: flex;\n//     align-items: center;\n//     margin-bottom: 4px;\n//     gap: 6px;\n//   }\n//   .col-title {\n//     font-weight: 600;\n//     font-size: 12px;\n//     color: #5e6c84;\n//     text-transform: uppercase;\n//     letter-spacing: 0.5px;\n//     flex-grow: 1;\n//   }\n//   .col-count {\n//     background: #dfe5e5;\n//     color: #5e6c84;\n//     border-radius: 12px;\n//     padding: 2px 8px;\n//     font-size: 11px;\n//     font-weight: 600;\n//     min-width: 20px;\n//     text-align: center;\n//   }\n//   .col-icons {\n//     display: flex;\n//     gap: 6px;\n//   }\n//   .col-icon {\n//     cursor: pointer;\n//     color: #5e6c84;\n//     font-size: 18px;\n//     background: none;\n//     border: none;\n//     padding: 0;\n//   }\n//   .create-card {\n//     background: white;\n//     padding: 10px;\n//     border-radius: 6px;\n//     box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n//     display: flex;\n//     flex-direction: column;\n//     gap: 10px;\n//   }\n//   .card-item {\n//     background: white;\n//     border-radius: 8px;\n//     padding: 12px;\n//     box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//     cursor: pointer;\n//     user-select: none;\n//     display: flex;\n//     flex-direction: column;\n//     gap: 6px;\n//     border: 1px solid #dfe5e5;\n//     transition: box-shadow 0.2s ease, border-color 0.2s ease;\n//   }\n//   .card-item:hover {\n//     box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\n//     border-color: #a2adba;\n//   }\n//   button {\n//     cursor: pointer;\n//     transition: background-color 0.2s;\n//   }\n//   button:hover {\n//     opacity: 0.9;\n//   }\n//   @media (max-width: 767px) {\n//     button, .card-item, .col-icon {\n//       min-height: 44px;\n//       min-width: 44px;\n//     }\n//     .card-item {\n//       touch-action: manipulation;\n//     }\n//   }\n// `}</style>\n\n//     </div>\n//   );\n// }\n\n// const btnStyle = {\n//   cancel: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#5e6c84',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   create: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#1976d2',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   delete: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#d32f2f',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   }\n// };\n\n//  this code is ok \n\n// import React, { useEffect, useState, useRef } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const mockIssues = [\n//   { \n//     id: 'i1', \n//     epic: 'p1', \n//     epicName: 'Frontend', \n//     status: 'todo', \n//     type: 'Task', \n//     title: 'Setup repo', \n//     assignee: 'John Doe', \n//     storyPoints: 3, \n//     labels: [], \n//     dueDate: '2025-09-30', \n//     reporter: 'admin', \n//     priority: 'High', \n//     startDate: '2025-09-15', \n//     description: 'Setup the initial repository structure and configuration', \n//     subtasks: [\n//       { id: 'st1', title: 'Create GitHub repository', completed: true },\n//       { id: 'st2', title: 'Setup CI/CD pipeline', completed: false },\n//       { id: 'st3', title: 'Configure linting and formatting', completed: false }\n//     ], \n//     comments: 'Initial setup required for the project' \n//   },\n//   { \n//     id: 'i3', \n//     epic: 'p2', \n//     epicName: 'Middleware', \n//     status: 'todo', \n//     type: 'Subtask', \n//     title: 'API integration', \n//     assignee: 'Jane Smith', \n//     storyPoints: 2, \n//     labels: [], \n//     dueDate: '', \n//     reporter: 'lead-dev', \n//     priority: 'Low', \n//     startDate: '2025-09-18', \n//     description: 'Integrate with external API services', \n//     subtasks: [\n//       { id: 'st4', title: 'Design API endpoints', completed: true },\n//       { id: 'st5', title: 'Implement authentication', completed: false }\n//     ], \n//     comments: '' \n//   }\n// ];\n\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\n// const mockProjects = [\n//   { id: 'p1', name: 'E-Commerce Platform' },\n//   { id: 'p2', name: 'API Gateway Service' },\n//   { id: 'p3', name: 'Mobile App Development' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\n// const getProjectName = async (projectId) => {\n//   await simulateApiDelay();\n//   const project = mockProjects.find(p => p.id === projectId);\n//   return project ? project.name : 'Untitled Project';\n// };\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\n// };\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\n// const updateIssueAPI = async (updatedIssue) => { \n//   await simulateApiDelay(); \n//   const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); \n//   if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; \n// };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [projectName, setProjectName] = useState('');\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n//   const [columnsByLane, setColumnsByLane] = useState({});\n//   const [columnModal, setColumnModal] = useState(null);\n//   const [columnInput, setColumnInput] = useState('');\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\n//   const [isMobile, setIsMobile] = useState(false);\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\n\n//   // Draggable modal state\n//   const [modalDrag, setModalDrag] = useState({\n//     isDragging: false,\n//     position: { x: 0, y: 0 },\n//     startPosition: { x: 0, y: 0 }\n//   });\n//   const modalRef = useRef(null);\n\n//   // Subtask management\n//   const [newSubtaskText, setNewSubtaskText] = useState('');\n\n//   useEffect(() => {\n//     const checkScreenSize = () => {\n//       setIsMobile(window.innerWidth < 768);\n//     };\n//     checkScreenSize();\n//     window.addEventListener('resize', checkScreenSize);\n//     return () => window.removeEventListener('resize', checkScreenSize);\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const projectNameData = projectId ? await getProjectName(projectId) : 'All Projects';\n//         const [issuesData, epicsData] = await Promise.all([\n//           listIssues(projectId),\n//           listEpics()\n//         ]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         setProjectName(projectNameData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//           initialCols[lane.id] = defaultStatuses.slice();\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//         setColumnsByLane(initialCols);\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   // Subtask functions\n//   const addSubtask = () => {\n//     if (!newSubtaskText.trim()) return;\n\n//     const newSubtask = {\n//       id: `st${Date.now()}`,\n//       title: newSubtaskText.trim(),\n//       completed: false\n//     };\n\n//     setEditIssue(prev => ({\n//       ...prev,\n//       subtasks: [...(prev.subtasks || []), newSubtask]\n//     }));\n\n//     setNewSubtaskText('');\n//   };\n\n//   const toggleSubtask = (subtaskId) => {\n//     setEditIssue(prev => ({\n//       ...prev,\n//       subtasks: prev.subtasks.map(subtask =>\n//         subtask.id === subtaskId \n//           ? { ...subtask, completed: !subtask.completed }\n//           : subtask\n//       )\n//     }));\n//   };\n\n//   const deleteSubtask = (subtaskId) => {\n//     setEditIssue(prev => ({\n//       ...prev,\n//       subtasks: prev.subtasks.filter(subtask => subtask.id !== subtaskId)\n//     }));\n//   };\n\n//   const handleSubtaskKeyPress = (e) => {\n//     if (e.key === 'Enter') {\n//       e.preventDefault();\n//       addSubtask();\n//     }\n//   };\n\n//   // Draggable modal functions\n//   const handleModalMouseDown = (e) => {\n//     if (isMobile) return; // Disable dragging on mobile\n\n//     // Only start dragging if clicking on the header (not on buttons or inputs)\n//     if (e.target.closest('.modal-close-btn') || \n//         e.target.closest('input') || \n//         e.target.closest('select') || \n//         e.target.closest('textarea') ||\n//         e.target.closest('button') ||\n//         e.target.closest('.subtask-item')) {\n//       return;\n//     }\n\n//     setModalDrag({\n//       isDragging: true,\n//       position: modalDrag.position,\n//       startPosition: {\n//         x: e.clientX - modalDrag.position.x,\n//         y: e.clientY - modalDrag.position.y\n//       }\n//     });\n//   };\n\n//   const handleModalMouseMove = (e) => {\n//     if (!modalDrag.isDragging || isMobile) return;\n\n//     const newX = e.clientX - modalDrag.startPosition.x;\n//     const newY = e.clientY - modalDrag.startPosition.y;\n\n//     setModalDrag(prev => ({\n//       ...prev,\n//       position: { x: newX, y: newY }\n//     }));\n//   };\n\n//   const handleModalMouseUp = () => {\n//     if (isMobile) return;\n//     setModalDrag(prev => ({ ...prev, isDragging: false }));\n//   };\n\n//   // Reset modal position when closed\n//   useEffect(() => {\n//     if (!selectedIssue) {\n//       setModalDrag({\n//         isDragging: false,\n//         position: { x: 0, y: 0 },\n//         startPosition: { x: 0, y: 0 }\n//       });\n//     }\n//   }, [selectedIssue]);\n\n//   // Add event listeners for dragging\n//   useEffect(() => {\n//     if (modalDrag.isDragging) {\n//       document.addEventListener('mousemove', handleModalMouseMove);\n//       document.addEventListener('mouseup', handleModalMouseUp);\n//       document.body.style.cursor = 'grabbing';\n//       document.body.style.userSelect = 'none';\n//     } else {\n//       document.removeEventListener('mousemove', handleModalMouseMove);\n//       document.removeEventListener('mouseup', handleModalMouseUp);\n//       document.body.style.cursor = '';\n//       document.body.style.userSelect = '';\n//     }\n\n//     return () => {\n//       document.removeEventListener('mousemove', handleModalMouseMove);\n//       document.removeEventListener('mouseup', handleModalMouseUp);\n//       document.body.style.cursor = '';\n//       document.body.style.userSelect = '';\n//     };\n//   }, [modalDrag.isDragging]);\n\n//   const openAddColumnModal = (e, laneId, colIndex) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'add' });\n//     setColumnInput('');\n//   };\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\n//     setColumnInput(status);\n//   };\n//   const handleAddColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[columnModal.laneId]];\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\n//       return { ...prev, [columnModal.laneId]: cols };\n//     });\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleEditColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     const { laneId, colIndex } = columnModal;\n//     const oldCol = columnsByLane[laneId][colIndex];\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\n//       alert('Column name already exists');\n//       return;\n//     }\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols[colIndex] = name.toLowerCase();\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleDeleteColumn = () => {\n//     const { laneId, colIndex } = columnModal;\n//     const removedCol = columnsByLane[laneId][colIndex];\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols.splice(colIndex, 1);\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) { console.error(err); }\n//   };\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: [],\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error(err); }\n//   };\n\n//   const handleOpenModal = (issue) => { \n//     setSelectedIssue(issue); \n//     setEditIssue({ ...issue }); \n//     setNewSubtaskText('');\n//     // Reset position when opening new modal\n//     setModalDrag({\n//       isDragging: false,\n//       position: { x: 0, y: 0 },\n//       startPosition: { x: 0, y: 0 }\n//     });\n//   };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { \n//     await updateIssueAPI(editIssue); \n//     const refreshed = await listIssues(projectId); \n//     setIssues(refreshed); \n//     setSelectedIssue(null); \n//     setEditIssue(null); \n//   };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) {\n//       alert('Epic name is required');\n//       return;\n//     }\n//     try {\n//       await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\n//     } catch (error) {\n//       console.error('Error creating epic:', error);\n//     }\n//   };\n\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) {\n//       alert('Please select an epic to delete');\n//       return;\n//     }\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//       setColumnsByLane(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setOpenSwimlanes(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setCustomTitles(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//     } catch (error) {\n//       console.error('Error deleting epic:', error);\n//     }\n//   };\n\n//   const toggleMobileSwimlane = (laneId) => {\n//     if (activeSwimlane === laneId) {\n//       setActiveSwimlane(null);\n//     } else {\n//       setActiveSwimlane(laneId);\n//     }\n//   };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   // Calculate subtask progress\n//   const getSubtaskProgress = (subtasks) => {\n//     if (!subtasks || subtasks.length === 0) return { completed: 0, total: 0, percentage: 0 };\n//     const completed = subtasks.filter(st => st.completed).length;\n//     const total = subtasks.length;\n//     const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;\n//     return { completed, total, percentage };\n//   };\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Project Name Header */}\n//       <div className=\"project-header\">\n//         <h1 className=\"project-title\">{projectName}</h1>\n//         <div className=\"project-stats\">\n//           <span className=\"project-stat\">{epics.length} Epics</span>\n//           <span className=\"project-stat\">{issues.length} Issues</span>\n//           <span className=\"project-stat\">\n//             {issues.filter(issue => issue.status === 'done').length} Completed\n//           </span>\n//         </div>\n//       </div>\n\n//       {isMobile && (\n//         <div className=\"mobile-swimlane-selector\">\n//           <select\n//             value={activeSwimlane || ''}\n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\n//             className=\"mobile-select\"\n//           >\n//             <option value=\"\">All Swimlanes</option>\n//             {swimlanes.map(lane => (\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       {swimlanes.map(lane => {\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\n\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\n//           return null;\n//         }\n\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               {!isMobile && (\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                   {isOpen ? '▼' : '▶'}\n//                 </button>\n//               )}\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input\n//                 className=\"swimlane-title-input\"\n//                 value={customTitles[lane.id] || ''}\n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))}\n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//               {isMobile && (\n//                 <button\n//                   className=\"mobile-swimlane-toggle\"\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\n//                 >\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\n//                 </button>\n//               )}\n//             </header>\n//             {isOpen && (\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\n//                 {statuses.map((status, idx) => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div\n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`}\n//                       key={status}\n//                       onDragOver={onDragOver}\n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {!isMobile && (\n//                           <span className=\"col-icons\">\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\n//                           </span>\n//                         )}\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => {\n//                         const isHovered = hoveredAssigneeId === issue.id;\n//                         return (\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                             <div className=\"card-top\">\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                               <span className=\"card-id\">{issue.id}</span>\n//                             </div>\n//                             <div className=\"card-title\">{issue.title}</div>\n//                             <div className=\"card-meta\">\n//                               {issue.assignee && (\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)}>\n//                                   👤 {issue.assignee}\n//                                 </span>\n//                               )}\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\n//                             </div>\n//                           </div>\n//                         );\n//                       })}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n//       {/* Column Add/Edit modal */}\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\n//             position: isMobile ? 'fixed' : 'absolute',\n//             top: isMobile ? '50%' : modalPosition.top,\n//             left: isMobile ? '50%' : modalPosition.left,\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\n//             minWidth: isMobile ? '90vw' : 280,\n//             maxWidth: isMobile ? '95vw' : 320,\n//             padding: 20,\n//             borderRadius: 10,\n//             background: 'white',\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\n//             zIndex: 1100\n//           }}>\n//             {columnModal.type === 'add' ? (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                 </div>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//       {/* Issue modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div \n//             className={`modal-container ${isMobile ? 'mobile-modal-container' : ''}`}\n//             style={\n//               !isMobile && modalDrag.position.x !== 0 && modalDrag.position.y !== 0\n//                 ? { \n//                     position: 'fixed',\n//                     top: modalDrag.position.y,\n//                     left: modalDrag.position.x,\n//                     transform: 'none'\n//                   }\n//                 : {}\n//             }\n//             ref={modalRef}\n//           >\n//             <div \n//               className={`modal ${isMobile ? 'mobile-modal' : ''} ${modalDrag.isDragging ? 'modal-dragging' : ''}`}\n//               onClick={e => e.stopPropagation()}\n//               onMouseDown={handleModalMouseDown}\n//             >\n//               <div className=\"modal-header\">\n//                 <div className=\"modal-header-content\">\n//                   <span className=\"modal-epic-badge\">{editIssue.epicName}</span>\n//                   <h2 className=\"modal-title\">{editIssue.title || 'Untitled Issue'}</h2>\n//                   <div className=\"modal-id-type\">\n//                     <span className=\"modal-id\">{editIssue.id}</span>\n//                     <span className={`modal-type modal-type-${editIssue.type.toLowerCase()}`}>{editIssue.type}</span>\n//                   </div>\n//                 </div>\n//                 <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\n//               </div>\n\n//               <div className=\"modal-content-scroll\">\n//                 <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\n//                   <div className=\"modal-section\">\n//                     <h3 className=\"modal-section-title\">Details</h3>\n//                     <div className=\"modal-grid\">\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Title</label>\n//                         <input \n//                           className=\"modal-input\" \n//                           value={editIssue.title} \n//                           onChange={e => handleUpdateField('title', e.target.value)} \n//                           placeholder=\"Enter issue title\"\n//                         />\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Status</label>\n//                         <select \n//                           className=\"modal-select\"\n//                           value={editIssue.status} \n//                           onChange={e => handleUpdateField('status', e.target.value)}\n//                         >\n//                           {columnsByLane[editIssue.epic]?.map(st => (\n//                             <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\n//                           )) || defaultStatuses.map(st => (\n//                             <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Assignee</label>\n//                         <input \n//                           className=\"modal-input\"\n//                           value={editIssue.assignee} \n//                           onChange={e => handleUpdateField('assignee', e.target.value)}\n//                           placeholder=\"Unassigned\"\n//                         />\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Reporter</label>\n//                         <input \n//                           className=\"modal-input modal-input-disabled\"\n//                           disabled \n//                           value={editIssue.reporter} \n//                         />\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Priority</label>\n//                         <select \n//                           className=\"modal-select\"\n//                           value={editIssue.priority} \n//                           onChange={e => handleUpdateField('priority', e.target.value)}\n//                         >\n//                           <option>Low</option>\n//                           <option>Medium</option>\n//                           <option>High</option>\n//                         </select>\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Story Points</label>\n//                         <input \n//                           className=\"modal-input\"\n//                           type=\"number\" \n//                           value={editIssue.storyPoints} \n//                           onChange={e => handleUpdateField('storyPoints', e.target.value)}\n//                           placeholder=\"0\"\n//                         />\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Start Date</label>\n//                         <input \n//                           className=\"modal-input\"\n//                           type=\"date\" \n//                           value={editIssue.startDate} \n//                           onChange={e => handleUpdateField('startDate', e.target.value)} \n//                         />\n//                       </div>\n//                       <div className=\"modal-field\">\n//                         <label className=\"modal-label\">Due Date</label>\n//                         <input \n//                           className=\"modal-input\"\n//                           type=\"date\" \n//                           value={editIssue.dueDate} \n//                           onChange={e => handleUpdateField('dueDate', e.target.value)} \n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n\n//                   <div className=\"modal-section\">\n//                     <h3 className=\"modal-section-title\">Description</h3>\n//                     <div className=\"modal-field-full\">\n//                       <textarea \n//                         className=\"modal-textarea\"\n//                         rows=\"4\" \n//                         value={editIssue.description} \n//                         onChange={e => handleUpdateField('description', e.target.value)}\n//                         placeholder=\"Add a detailed description...\"\n//                       />\n//                     </div>\n//                   </div>\n\n//                   <div className=\"modal-section\">\n//                     <h3 className=\"modal-section-title\">Subtasks</h3>\n//                     <div className=\"modal-field-full\">\n//                       <div className=\"subtasks-container\">\n//                         <div className=\"subtasks-header\">\n//                           <span className=\"subtasks-title\">\n//                             Subtasks ({getSubtaskProgress(editIssue.subtasks).completed}/{getSubtaskProgress(editIssue.subtasks).total})\n//                           </span>\n//                           {editIssue.subtasks && editIssue.subtasks.length > 0 && (\n//                             <div className=\"subtask-progress-bar\">\n//                               <div \n//                                 className=\"subtask-progress-fill\" \n//                                 style={{ width: `${getSubtaskProgress(editIssue.subtasks).percentage}%` }}\n//                               ></div>\n//                             </div>\n//                           )}\n//                         </div>\n\n//                         <div className=\"subtasks-list\">\n//                           {editIssue.subtasks && editIssue.subtasks.length > 0 ? (\n//                             editIssue.subtasks.map((subtask) => (\n//                               <div key={subtask.id} className=\"subtask-item\">\n//                                 <label className=\"subtask-checkbox\">\n//                                   <input\n//                                     type=\"checkbox\"\n//                                     checked={subtask.completed}\n//                                     onChange={() => toggleSubtask(subtask.id)}\n//                                   />\n//                                   <span className={`subtask-text ${subtask.completed ? 'completed' : ''}`}>\n//                                     {subtask.title}\n//                                   </span>\n//                                 </label>\n//                                 <button\n//                                   className=\"subtask-delete-btn\"\n//                                   onClick={() => deleteSubtask(subtask.id)}\n//                                   title=\"Delete subtask\"\n//                                 >\n//                                   ✕\n//                                 </button>\n//                               </div>\n//                             ))\n//                           ) : (\n//                             <div className=\"no-subtasks\">No subtasks added yet</div>\n//                           )}\n//                         </div>\n\n//                         <div className=\"add-subtask\">\n//                           <input\n//                             type=\"text\"\n//                             className=\"subtask-input\"\n//                             placeholder=\"Add a new subtask...\"\n//                             value={newSubtaskText}\n//                             onChange={(e) => setNewSubtaskText(e.target.value)}\n//                             onKeyPress={handleSubtaskKeyPress}\n//                           />\n//                           <button\n//                             className=\"add-subtask-btn\"\n//                             onClick={addSubtask}\n//                             disabled={!newSubtaskText.trim()}\n//                           >\n//                             Add\n//                           </button>\n//                         </div>\n//                       </div>\n//                     </div>\n//                   </div>\n\n//                   <div className=\"modal-section\">\n//                     <h3 className=\"modal-section-title\">Comments</h3>\n//                     <div className=\"modal-field-full\">\n//                       <textarea \n//                         className=\"modal-textarea\"\n//                         rows=\"3\" \n//                         value={editIssue.comments} \n//                         onChange={e => handleUpdateField('comments', e.target.value)}\n//                         placeholder=\"Add comments...\"\n//                       />\n//                     </div>\n//                   </div>\n//                 </div>\n//               </div>\n\n//               <div className=\"modal-actions\">\n//                 <button className=\"btn-reset\" onClick={handleReset}>Reset Changes</button>\n//                 <div className=\"modal-actions-right\">\n//                   <button \n//                     className=\"modal-delete-btn\" \n//                     onClick={async () => {\n//                       if (window.confirm('Are you sure you want to delete this issue?')) {\n//                         await deleteIssueAPI(selectedIssue.id);\n//                         const refreshed = await listIssues(projectId);\n//                         setIssues(refreshed);\n//                         setSelectedIssue(null);\n//                       }\n//                     }}\n//                   >\n//                     Delete Issue\n//                   </button>\n//                   <button className=\"btn-save\" onClick={handleSave}>Save Changes</button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Inline CSS styles */}\n// <style>{`\n//   body {\n//     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//     background-color: #f5f6f8;\n//     margin: 0;\n//     padding: 16px;\n//   }\n//   .board-wrap {\n//     max-width: 100%;\n//     overflow-x: auto;\n//   }\n//   .project-header {\n//     background: white;\n//     border-radius: 8px;\n//     padding: 20px 24px;\n//     margin-bottom: 20px;\n//     box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//     border-left: 4px solid #1976d2;\n//   }\n//   .project-title {\n//     margin: 0 0 12px 0;\n//     font-size: 28px;\n//     font-weight: 700;\n//     color: #172b4d;\n//     line-height: 1.2;\n//   }\n//   .project-stats {\n//     display: flex;\n//     gap: 20px;\n//     flex-wrap: wrap;\n//   }\n//   .project-stat {\n//     background: #f5f6f8;\n//     padding: 6px 12px;\n//     border-radius: 16px;\n//     font-size: 14px;\n//     font-weight: 600;\n//     color: #5e6c84;\n//     display: flex;\n//     align-items: center;\n//     gap: 4px;\n//   }\n//   .project-stat:before {\n//     content: \"•\";\n//     color: #1976d2;\n//     font-weight: bold;\n//   }\n//   @media (min-width: 768px) {\n//     .swimlane {\n//       background: white;\n//       border-radius: 8px;\n//       margin-bottom: 16px;\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//       overflow: hidden;\n//     }\n//     .kanban-row {\n//       display: flex;\n//       padding: 16px;\n//       gap: 12px;\n//       overflow-x: auto;\n//     }\n//     .kanban-column {\n//       flex: 0 0 260px;\n//       background: #f5f6f8;\n//       border-radius: 6px;\n//       padding: 12px;\n//       display: flex;\n//       flex-direction: column;\n//       gap: 12px;\n//       border: 1px solid #dfe5e5;\n//       user-select: none;\n//       min-height: 400px;\n//     }\n//   }\n//   @media (max-width: 767px) {\n//     body {\n//       padding: 8px;\n//     }\n//     .project-header {\n//       padding: 16px;\n//       margin-bottom: 16px;\n//       border-left-width: 3px;\n//     }\n//     .project-title {\n//       font-size: 22px;\n//       margin-bottom: 10px;\n//     }\n//     .project-stats {\n//       gap: 12px;\n//     }\n//     .project-stat {\n//       font-size: 12px;\n//       padding: 4px 10px;\n//     }\n//     .mobile-swimlane-selector {\n//       margin-bottom: 16px;\n//       position: sticky;\n//       top: 0;\n//       background: white;\n//       padding: 12px;\n//       border-radius: 8px;\n//       box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n//       z-index: 100;\n//     }\n//     .mobile-select {\n//       width: 100%;\n//       padding: 12px;\n//       border: 1px solid #dfe5e5;\n//       border-radius: 6px;\n//       font-size: 16px;\n//       background: white;\n//     }\n//     .swimlane {\n//       background: white;\n//       border-radius: 8px;\n//       margin-bottom: 12px;\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//       overflow: hidden;\n//     }\n//     .swimlane-header {\n//       display: flex;\n//       align-items: center;\n//       padding: 12px;\n//       background: #fafbfc;\n//       border-bottom: 1px solid #dfe5e5;\n//       font-weight: 600;\n//       font-size: 14px;\n//       color: #172b4d;\n//       position: relative;\n//     }\n//     .mobile-swimlane-toggle {\n//       background: none;\n//       border: none;\n//       font-size: 16px;\n//       color: #5e6c84;\n//       margin-left: auto;\n//       padding: 4px 8px;\n//     }\n//     .kanban-row.mobile-view {\n//       display: block;\n//       padding: 8px;\n//       overflow-x: auto;\n//       white-space: nowrap;\n//     }\n//     .kanban-column.mobile-column {\n//       display: inline-block;\n//       vertical-align: top;\n//       width: 280px;\n//       margin-right: 8px;\n//       background: #f5f6f8;\n//       border-radius: 6px;\n//       padding: 8px;\n//       border: 1px solid #dfe5e5;\n//       user-select: none;\n//       min-height: 300px;\n//     }\n//     .col-header {\n//       display: flex;\n//       align-items: center;\n//       margin-bottom: 8px;\n//       gap: 6px;\n//     }\n//     .col-title {\n//       font-weight: 600;\n//       font-size: 11px;\n//       color: #5e6c84;\n//       text-transform: uppercase;\n//       letter-spacing: 0.5px;\n//       flex-grow: 1;\n//     }\n//     .card-item {\n//       background: white;\n//       border-radius: 6px;\n//       padding: 10px;\n//       box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//       cursor: pointer;\n//       user-select: none;\n//       display: flex;\n//       flex-direction: column;\n//       gap: 6px;\n//       border: 1px solid #dfe5e5;\n//       margin-bottom: 8px;\n//     }\n//     .card-title {\n//       font-weight: 600;\n//       font-size: 13px;\n//       color: #2b3a59;\n//       line-height: 1.3;\n//     }\n//     .card-meta {\n//       display: flex;\n//       gap: 6px;\n//       font-size: 10px;\n//       color: #6b7c93;\n//       align-items: center;\n//       flex-wrap: wrap;\n//     }\n//     .modal.mobile-modal {\n//       width: 100%;\n//       max-height: 90vh;\n//       display: flex;\n//       flex-direction: column;\n//     }\n//     .modal-content.mobile-modal-content {\n//       display: flex;\n//       flex-direction: column;\n//       gap: 12px;\n//       overflow-y: auto;\n//     }\n//     .modal-field {\n//       display: flex;\n//       flex-direction: column;\n//       gap: 4px;\n//     }\n//     .modal-field input, .modal-field textarea, .modal-field select {\n//       padding: 10px;\n//       font-size: 16px;\n//     }\n//     .modal-actions {\n//       display: flex;\n//       gap: 8px;\n//       justify-content: space-between;\n//       margin-top: 16px;\n//     }\n//     .modal-actions button {\n//       flex: 1;\n//       padding: 12px;\n//       font-size: 16px;\n//     }\n//   }\n\n//   /* Card Styles - Only Title, Assignee, Due Date, and Priority */\n//   .card-item {\n//     background: white;\n//     border-radius: 8px;\n//     padding: 12px;\n//     box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//     cursor: pointer;\n//     user-select: none;\n//     display: flex;\n//     flex-direction: column;\n//     gap: 8px;\n//     border: 1px solid #dfe5e5;\n//     transition: box-shadow 0.2s ease, border-color 0.2s ease;\n//   }\n\n//   .card-item:hover {\n//     box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\n//     border-color: #a2adba;\n//   }\n\n//   .card-top {\n//     display: flex;\n//     justify-content: space-between;\n//     align-items: flex-start;\n//     gap: 8px;\n//   }\n\n//   .card-tag {\n//     padding: 2px 6px;\n//     border-radius: 4px;\n//     font-size: 10px;\n//     font-weight: 600;\n//     text-transform: uppercase;\n//   }\n\n//   .card-tag-task { background: #e3f2fd; color: #1976d2; }\n//   .card-tag-subtask { background: #f3e5f5; color: #7b1fa2; }\n//   .card-tag-bug { background: #ffebee; color: #d32f2f; }\n\n//   .card-id {\n//     font-size: 10px;\n//     color: #6b7c93;\n//     font-family: 'Monaco', 'Menlo', monospace;\n//     font-weight: 600;\n//   }\n\n//   .card-title {\n//     font-weight: 600;\n//     font-size: 14px;\n//     color: #2b3a59;\n//     line-height: 1.3;\n//     margin: 0;\n//     word-break: break-word;\n//   }\n\n//   .card-meta {\n//     display: flex;\n//     flex-direction: column;\n//     gap: 6px;\n//   }\n\n//   .card-assignee {\n//     display: flex;\n//     align-items: center;\n//     gap: 4px;\n//     font-size: 11px;\n//     color: #5e6c84;\n//     font-weight: 500;\n//   }\n\n//   .card-due {\n//     display: flex;\n//     align-items: center;\n//     gap: 4px;\n//     font-size: 11px;\n//     color: #d32f2f;\n//     font-weight: 500;\n//   }\n\n//   .card-priority {\n//     display: flex;\n//     align-items: center;\n//     gap: 4px;\n//     font-size: 11px;\n//     font-weight: 600;\n//     padding: 2px 6px;\n//     border-radius: 4px;\n//     width: fit-content;\n//   }\n\n//   .card-priority.high { background: #ffebee; color: #d32f2f; }\n//   .card-priority.medium { background: #fff3e0; color: #f57c00; }\n//   .card-priority.low { background: #e8f5e8; color: #388e3c; }\n\n//   /* Modal Subtasks Styles */\n//   .subtasks-container {\n//     display: flex;\n//     flex-direction: column;\n//     gap: 12px;\n//   }\n\n//   .subtasks-header {\n//     display: flex;\n//     flex-direction: column;\n//     gap: 8px;\n//   }\n\n//   .subtasks-title {\n//     font-size: 14px;\n//     font-weight: 600;\n//     color: #44546f;\n//   }\n\n//   .subtasks-list {\n//     display: flex;\n//     flex-direction: column;\n//     gap: 8px;\n//     max-height: 200px;\n//     overflow-y: auto;\n//   }\n\n//   .subtask-item {\n//     display: flex;\n//     align-items: center;\n//     justify-content: space-between;\n//     padding: 8px 12px;\n//     background: #f8f9fa;\n//     border-radius: 6px;\n//     border: 1px solid #e1e4e8;\n//     transition: background-color 0.2s;\n//   }\n\n//   .subtask-item:hover {\n//     background: #f1f2f4;\n//   }\n\n//   .subtask-checkbox {\n//     display: flex;\n//     align-items: center;\n//     gap: 8px;\n//     flex: 1;\n//     cursor: pointer;\n//     margin: 0;\n//   }\n\n//   .subtask-checkbox input[type=\"checkbox\"] {\n//     margin: 0;\n//     cursor: pointer;\n//   }\n\n//   .subtask-text {\n//     font-size: 14px;\n//     color: #44546f;\n//     transition: all 0.2s;\n//   }\n\n//   .subtask-text.completed {\n//     text-decoration: line-through;\n//     color: #8b9cb1;\n//   }\n\n//   .subtask-delete-btn {\n//     background: none;\n//     border: none;\n//     color: #d32f2f;\n//     cursor: pointer;\n//     padding: 4px;\n//     border-radius: 4px;\n//     font-size: 12px;\n//     transition: background-color 0.2s;\n//   }\n\n//   .subtask-delete-btn:hover {\n//     background: #ffebee;\n//   }\n\n//   .no-subtasks {\n//     text-align: center;\n//     color: #8b9cb1;\n//     font-style: italic;\n//     padding: 16px;\n//     font-size: 14px;\n//   }\n\n//   .add-subtask {\n//     display: flex;\n//     gap: 8px;\n//   }\n\n//   .subtask-input {\n//     flex: 1;\n//     padding: 8px 12px;\n//     border: 2px solid #dfe1e6;\n//     border-radius: 6px;\n//     font-size: 14px;\n//     transition: border-color 0.2s;\n//   }\n\n//   .subtask-input:focus {\n//     outline: none;\n//     border-color: #1976d2;\n//   }\n\n//   .add-subtask-btn {\n//     padding: 8px 16px;\n//     background: #1976d2;\n//     color: white;\n//     border: none;\n//     border-radius: 6px;\n//     font-size: 14px;\n//     font-weight: 600;\n//     cursor: pointer;\n//     transition: background-color 0.2s;\n//   }\n\n//   .add-subtask-btn:hover:not(:disabled) {\n//     background: #1565c0;\n//   }\n\n//   .add-subtask-btn:disabled {\n//     background: #b0bec5;\n//     cursor: not-allowed;\n//   }\n\n//   /* Enhanced Modal Styles - Fixed Positioning with Dragging */\n//   .modal-overlay {\n//     position: fixed;\n//     top: 0;\n//     left: 0;\n//     right: 0;\n//     bottom: 0;\n//     background: rgba(0,0,0,0.6);\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//     z-index: 10000;\n//     padding: 20px;\n//   }\n\n//   .modal-container {\n//     width: 100%;\n//     max-width: 1000px;\n//     max-height: 85vh;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//     transition: none;\n//   }\n\n//   .modal {\n//     background: white;\n//     border-radius: 12px;\n//     width: 100%;\n//     max-height: 85vh;\n//     display: flex;\n//     flex-direction: column;\n//     overflow: hidden;\n//     box-shadow: 0 20px 60px rgba(0,0,0,0.3);\n//     margin: 0 auto;\n//     transition: box-shadow 0.2s ease;\n//   }\n\n//   .modal-dragging {\n//     box-shadow: 0 25px 80px rgba(0,0,0,0.4);\n//     cursor: grabbing;\n//   }\n\n//   .modal-header {\n//     display: flex;\n//     justify-content: space-between;\n//     align-items: flex-start;\n//     padding: 24px;\n//     background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n//     border-bottom: 1px solid #e1e4e8;\n//     flex-shrink: 0;\n//     cursor: grab;\n//     transition: background-color 0.2s ease;\n//   }\n\n//   .modal-header:hover {\n//     background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);\n//   }\n\n//   .modal-dragging .modal-header {\n//     cursor: grabbing;\n//     background: linear-gradient(135deg, #dee2e6 0%, #ced4da 100%);\n//   }\n\n//   .modal-header-content {\n//     flex: 1;\n//     min-width: 0;\n//   }\n\n//   .modal-epic-badge {\n//     display: inline-block;\n//     background: #1976d2;\n//     color: white;\n//     padding: 4px 12px;\n//     border-radius: 16px;\n//     font-size: 12px;\n//     font-weight: 600;\n//     margin-bottom: 8px;\n//   }\n\n//   .modal-title {\n//     margin: 0 0 8px 0;\n//     font-size: 24px;\n//     font-weight: 700;\n//     color: #172b4d;\n//     line-height: 1.3;\n//     word-wrap: break-word;\n//   }\n\n//   .modal-id-type {\n//     display: flex;\n//     gap: 12px;\n//     align-items: center;\n//   }\n\n//   .modal-id {\n//     font-size: 14px;\n//     color: #5e6c84;\n//     font-family: 'Monaco', 'Menlo', monospace;\n//   }\n\n//   .modal-type {\n//     padding: 2px 8px;\n//     border-radius: 4px;\n//     font-size: 12px;\n//     font-weight: 600;\n//     text-transform: uppercase;\n//   }\n\n//   .modal-type-task { background: #e3f2fd; color: #1976d2; }\n//   .modal-type-subtask { background: #f3e5f5; color: #7b1fa2; }\n//   .modal-type-bug { background: #ffebee; color: #d32f2f; }\n\n//   .modal-close-btn {\n//     background: none;\n//     border: none;\n//     font-size: 20px;\n//     color: #5e6c84;\n//     cursor: pointer;\n//     padding: 8px;\n//     margin: -8px;\n//     border-radius: 4px;\n//     transition: background-color 0.2s;\n//     flex-shrink: 0;\n//   }\n\n//   .modal-close-btn:hover {\n//     background: rgba(0,0,0,0.1);\n//   }\n\n//   .modal-content-scroll {\n//     flex: 1;\n//     overflow-y: auto;\n//     padding: 0 24px;\n//   }\n\n//   .modal-content {\n//     padding: 24px 0;\n//     display: flex;\n//     flex-direction: column;\n//     gap: 24px;\n//   }\n\n//   .modal-section {\n//     display: flex;\n//     flex-direction: column;\n//     gap: 16px;\n//   }\n\n//   .modal-section-title {\n//     font-size: 18px;\n//     font-weight: 600;\n//     color: #172b4d;\n//     margin: 0;\n//     padding-bottom: 8px;\n//     border-bottom: 2px solid #f0f0f0;\n//   }\n\n//   .modal-grid {\n//     display: grid;\n//     grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n//     gap: 16px;\n//   }\n\n//   .modal-field {\n//     display: flex;\n//     flex-direction: column;\n//     gap: 6px;\n//   }\n\n//   .modal-field-full {\n//     grid-column: 1 / -1;\n//     display: flex;\n//     flex-direction: column;\n//     gap: 6px;\n//   }\n\n//   .modal-label {\n//     font-size: 14px;\n//     font-weight: 600;\n//     color: #44546f;\n//     margin: 0;\n//   }\n\n//   .modal-input, .modal-select, .modal-textarea {\n//     padding: 12px;\n//     border: 2px solid #dfe1e6;\n//     border-radius: 8px;\n//     font-size: 14px;\n//     font-family: inherit;\n//     transition: border-color 0.2s, box-shadow 0.2s;\n//     background: white;\n//   }\n\n//   .modal-input:focus, .modal-select:focus, .modal-textarea:focus {\n//     outline: none;\n//     border-color: #1976d2;\n//     box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);\n//   }\n\n//   .modal-input-disabled {\n//     background: #f8f9fa;\n//     color: #6b778c;\n//     cursor: not-allowed;\n//   }\n\n//   .modal-textarea {\n//     resize: vertical;\n//     min-height: 80px;\n//     line-height: 1.5;\n//   }\n\n//   .modal-actions {\n//     display: flex;\n//     justify-content: space-between;\n//     align-items: center;\n//     padding: 20px 24px;\n//     background: #f8f9fa;\n//     border-top: 1px solid #e1e4e8;\n//     gap: 16px;\n//     flex-shrink: 0;\n//   }\n\n//   .modal-actions-right {\n//     display: flex;\n//     gap: 12px;\n//     align-items: center;\n//   }\n\n//   .btn-reset {\n//     padding: 10px 20px;\n//     border: 1px solid #dcdfe4;\n//     background: white;\n//     color: #44546f;\n//     border-radius: 6px;\n//     font-weight: 600;\n//     cursor: pointer;\n//     transition: all 0.2s;\n//   }\n\n//   .btn-reset:hover {\n//     background: #f1f2f4;\n//     border-color: #c1c7d0;\n//   }\n\n//   .btn-save {\n//     padding: 10px 24px;\n//     border: none;\n//     background: #1976d2;\n//     color: white;\n//     border-radius: 6px;\n//     font-weight: 600;\n//     cursor: pointer;\n//     transition: background-color 0.2s;\n//   }\n\n//   .btn-save:hover {\n//     background: #1565c0;\n//   }\n\n//   .modal-delete-btn {\n//     padding: 10px 20px;\n//     border: 1px solid #ffcdd2;\n//     background: white;\n//     color: #d32f2f;\n//     border-radius: 6px;\n//     font-weight: 600;\n//     cursor: pointer;\n//     transition: all 0.2s;\n//   }\n\n//   .modal-delete-btn:hover {\n//     background: #ffebee;\n//     border-color: #ef5350;\n//   }\n\n//   @media (max-width: 767px) {\n//     .modal-overlay {\n//       padding: 10px;\n//     }\n\n//     .modal-container.mobile-modal-container {\n//       width: 100%;\n//       height: 100%;\n//       padding: 0;\n//     }\n\n//     .modal.mobile-modal {\n//       width: 100%;\n//       max-height: 100%;\n//       border-radius: 0;\n//       margin: 0;\n//     }\n\n//     .modal-header {\n//       padding: 16px;\n//       flex-direction: column;\n//       gap: 12px;\n//       cursor: default;\n//     }\n\n//     .modal-close-btn {\n//       align-self: flex-end;\n//       margin: 0;\n//     }\n\n//     .modal-content-scroll {\n//       padding: 0 16px;\n//     }\n\n//     .modal-content {\n//       padding: 16px 0;\n//       gap: 20px;\n//     }\n\n//     .modal-grid {\n//       grid-template-columns: 1fr;\n//       gap: 12px;\n//     }\n\n//     .modal-actions {\n//       padding: 16px;\n//       flex-direction: column;\n//       gap: 12px;\n//     }\n\n//     .modal-actions-right {\n//       width: 100%;\n//       justify-content: space-between;\n//     }\n\n//     .btn-reset, .modal-delete-btn, .btn-save {\n//       flex: 1;\n//       text-align: center;\n//     }\n\n//     .add-subtask {\n//       flex-direction: column;\n//     }\n\n//     .subtasks-list {\n//       max-height: 150px;\n//     }\n//   }\n\n//   .swimlane-header {\n//     display: flex;\n//     align-items: center;\n//     padding: 12px 16px;\n//     background: #fafbfc;\n//     border-bottom: 1px solid #dfe5e5;\n//     font-weight: 600;\n//     font-size: 14px;\n//     color: #172b4d;\n//   }\n//   .swimlane-toggle, .swimlane-icon {\n//     color: #5e6c84;\n//     margin-right: 8px;\n//     cursor: pointer;\n//   }\n//   .swimlane-toggle {\n//     border: none;\n//     background: transparent;\n//     font-size: 14px;\n//   }\n//   .swimlane-icon {\n//     font-size: 18px;\n//   }\n//   .swimlane-title-input {\n//     border: 1px solid #dfe5e5;\n//     border-radius: 4px;\n//     padding: 4px 8px;\n//     font-size: 14px;\n//     font-weight: 600;\n//     background: white;\n//     margin-right: 8px;\n//     min-width: 150px;\n//     color: #172b4d;\n//   }\n//   .swimlane-title-input:focus {\n//     outline: none;\n//     border-color: #1976d2;\n//   }\n//   .swimlane-count {\n//     color: #5e6c84;\n//     font-size: 12px;\n//     font-weight: normal;\n//   }\n//   .col-header {\n//     display: flex;\n//     align-items: center;\n//     margin-bottom: 4px;\n//     gap: 6px;\n//   }\n//   .col-title {\n//     font-weight: 600;\n//     font-size: 12px;\n//     color: #5e6c84;\n//     text-transform: uppercase;\n//     letter-spacing: 0.5px;\n//     flex-grow: 1;\n//   }\n//   .col-count {\n//     background: #dfe5e5;\n//     color: #5e6c84;\n//     border-radius: 12px;\n//     padding: 2px 8px;\n//     font-size: 11px;\n//     font-weight: 600;\n//     min-width: 20px;\n//     text-align: center;\n//   }\n//   .col-icons {\n//     display: flex;\n//     gap: 6px;\n//   }\n//   .col-icon {\n//     cursor: pointer;\n//     color: #5e6c84;\n//     font-size: 18px;\n//     background: none;\n//     border: none;\n//     padding: 0;\n//   }\n//   .create-card {\n//     background: white;\n//     padding: 10px;\n//     border-radius: 6px;\n//     box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n//     display: flex;\n//     flex-direction: column;\n//     gap: 10px;\n//   }\n//   button {\n//     cursor: pointer;\n//     transition: background-color 0.2s;\n//   }\n//   button:hover {\n//     opacity: 0.9;\n//   }\n//   @media (max-width: 767px) {\n//     button, .card-item, .col-icon {\n//       min-height: 44px;\n//       min-width: 44px;\n//     }\n//     .card-item {\n//       touch-action: manipulation;\n//     }\n//   }\n// `}</style>\n\n//     </div>\n//   );\n// }\n\n// const btnStyle = {\n//   cancel: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#5e6c84',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   create: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#1976d2',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   delete: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#d32f2f',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   }\n// };\n\n// for UI/UX \n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst mockIssues = [{\n  id: 'i1',\n  epic: 'p1',\n  epicName: 'Frontend',\n  status: 'todo',\n  type: 'Task',\n  title: 'Setup repo',\n  assignee: 'John Doe',\n  storyPoints: 3,\n  labels: [],\n  dueDate: '2025-09-30',\n  reporter: 'admin',\n  priority: 'High',\n  startDate: '2025-09-15',\n  description: 'Setup the initial repository structure and configuration',\n  subtasks: [{\n    id: 'st1',\n    title: 'Create GitHub repository',\n    completed: true\n  }, {\n    id: 'st2',\n    title: 'Setup CI/CD pipeline',\n    completed: false\n  }, {\n    id: 'st3',\n    title: 'Configure linting and formatting',\n    completed: false\n  }],\n  comments: 'Initial setup required for the project'\n}, {\n  id: 'i3',\n  epic: 'p2',\n  epicName: 'Middleware',\n  status: 'todo',\n  type: 'Subtask',\n  title: 'API integration',\n  assignee: 'Jane Smith',\n  storyPoints: 2,\n  labels: [],\n  dueDate: '',\n  reporter: 'lead-dev',\n  priority: 'Low',\n  startDate: '2025-09-18',\n  description: 'Integrate with external API services',\n  subtasks: [{\n    id: 'st4',\n    title: 'Design API endpoints',\n    completed: true\n  }, {\n    id: 'st5',\n    title: 'Implement authentication',\n    completed: false\n  }],\n  comments: ''\n}];\nconst defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\nconst mockEpics = [{\n  id: 'p1',\n  name: 'Frontend'\n}, {\n  id: 'p2',\n  name: 'Middleware'\n}];\nconst mockProjects = [{\n  id: 'p1',\n  name: 'E-Commerce Platform'\n}, {\n  id: 'p2',\n  name: 'API Gateway Service'\n}, {\n  id: 'p3',\n  name: 'Mobile App Development'\n}];\nconst simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\nconst listIssues = async projectId => {\n  await simulateApiDelay();\n  return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n};\nconst listEpics = async () => {\n  await simulateApiDelay();\n  return mockEpics;\n};\nconst getProjectName = async projectId => {\n  await simulateApiDelay();\n  const project = mockProjects.find(p => p.id === projectId);\n  return project ? project.name : 'Untitled Project';\n};\nconst createEpicAPI = async epicName => {\n  await simulateApiDelay();\n  const newEpic = {\n    id: 'p' + (mockEpics.length + 1),\n    name: epicName\n  };\n  mockEpics.push(newEpic);\n  return newEpic;\n};\nconst deleteEpicAPI = async epicId => {\n  await simulateApiDelay();\n  const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n  if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\n  const issueIndices = [];\n  mockIssues.forEach((issue, index) => {\n    if (issue.epic === epicId) issueIndices.push(index);\n  });\n  issueIndices.sort((a, b) => b - a).forEach(index => {\n    mockIssues.splice(index, 1);\n  });\n};\nconst moveIssue = async (issueId, status) => {\n  await simulateApiDelay();\n  const issue = mockIssues.find(i => i.id === issueId);\n  if (!issue) throw new Error('Issue not found');\n  issue.status = status;\n};\nconst createIssueAPI = async issue => {\n  await simulateApiDelay();\n  mockIssues.push(issue);\n};\nconst deleteIssueAPI = async issueId => {\n  await simulateApiDelay();\n  const idx = mockIssues.findIndex(i => i.id === issueId);\n  if (idx > -1) mockIssues.splice(idx, 1);\n};\nconst updateIssueAPI = async updatedIssue => {\n  await simulateApiDelay();\n  const idx = mockIssues.findIndex(i => i.id === updatedIssue.id);\n  if (idx > -1) mockIssues[idx] = {\n    ...mockIssues[idx],\n    ...updatedIssue\n  };\n};\nconst getSwimlanes = (issues, epics) => epics.map(epic => {\n  const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n  return {\n    id: epic.id,\n    title: epic.name,\n    issues: epicIssues\n  };\n});\nexport default function KanbanBoard() {\n  _s();\n  var _columnsByLane$editIs;\n  const {\n    projectId\n  } = useParams();\n  const [issues, setIssues] = useState([]);\n  const [epics, setEpics] = useState([]);\n  const [projectName, setProjectName] = useState('');\n  const [openSwimlanes, setOpenSwimlanes] = useState({});\n  const [customTitles, setCustomTitles] = useState({});\n  const [createLaneId, setCreateLaneId] = useState(null);\n  const [newTaskText, setNewTaskText] = useState('');\n  const [newTaskType, setNewTaskType] = useState('Task');\n  const [selectedIssue, setSelectedIssue] = useState(null);\n  const [editIssue, setEditIssue] = useState(null);\n  const [showCreateEpic, setShowCreateEpic] = useState(false);\n  const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n  const [newEpicName, setNewEpicName] = useState('');\n  const [epicToDelete, setEpicToDelete] = useState('');\n  const [columnsByLane, setColumnsByLane] = useState({});\n  const [columnModal, setColumnModal] = useState(null);\n  const [columnInput, setColumnInput] = useState('');\n  const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\n  const [modalPosition, setModalPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const [isMobile, setIsMobile] = useState(false);\n  const [activeSwimlane, setActiveSwimlane] = useState(null);\n\n  // Draggable modal state\n  const [modalDrag, setModalDrag] = useState({\n    isDragging: false,\n    position: {\n      x: 0,\n      y: 0\n    },\n    startPosition: {\n      x: 0,\n      y: 0\n    }\n  });\n  const modalRef = useRef(null);\n\n  // Subtask management\n  const [newSubtaskText, setNewSubtaskText] = useState('');\n  useEffect(() => {\n    const checkScreenSize = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    checkScreenSize();\n    window.addEventListener('resize', checkScreenSize);\n    return () => window.removeEventListener('resize', checkScreenSize);\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const projectNameData = projectId ? await getProjectName(projectId) : 'All Projects';\n        const [issuesData, epicsData] = await Promise.all([listIssues(projectId), listEpics()]);\n        setIssues(issuesData);\n        setEpics(epicsData);\n        setProjectName(projectNameData);\n        const lanes = getSwimlanes(issuesData, epicsData);\n        const initialOpen = {},\n          initialTitles = {},\n          initialCols = {};\n        lanes.forEach(lane => {\n          initialOpen[lane.id] = true;\n          initialTitles[lane.id] = lane.title;\n          initialCols[lane.id] = defaultStatuses.slice();\n        });\n        setOpenSwimlanes(initialOpen);\n        setCustomTitles(initialTitles);\n        setColumnsByLane(initialCols);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    fetchData();\n  }, [projectId]);\n\n  // Subtask functions\n  const addSubtask = () => {\n    if (!newSubtaskText.trim()) return;\n    const newSubtask = {\n      id: `st${Date.now()}`,\n      title: newSubtaskText.trim(),\n      completed: false\n    };\n    setEditIssue(prev => ({\n      ...prev,\n      subtasks: [...(prev.subtasks || []), newSubtask]\n    }));\n    setNewSubtaskText('');\n  };\n  const toggleSubtask = subtaskId => {\n    setEditIssue(prev => ({\n      ...prev,\n      subtasks: prev.subtasks.map(subtask => subtask.id === subtaskId ? {\n        ...subtask,\n        completed: !subtask.completed\n      } : subtask)\n    }));\n  };\n  const deleteSubtask = subtaskId => {\n    setEditIssue(prev => ({\n      ...prev,\n      subtasks: prev.subtasks.filter(subtask => subtask.id !== subtaskId)\n    }));\n  };\n  const handleSubtaskKeyPress = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      addSubtask();\n    }\n  };\n\n  // Draggable modal functions\n  const handleModalMouseDown = e => {\n    if (isMobile) return; // Disable dragging on mobile\n\n    // Only start dragging if clicking on the header (not on buttons or inputs)\n    if (e.target.closest('.modal-close-btn') || e.target.closest('input') || e.target.closest('select') || e.target.closest('textarea') || e.target.closest('button') || e.target.closest('.subtask-item')) {\n      return;\n    }\n    setModalDrag({\n      isDragging: true,\n      position: modalDrag.position,\n      startPosition: {\n        x: e.clientX - modalDrag.position.x,\n        y: e.clientY - modalDrag.position.y\n      }\n    });\n  };\n  const handleModalMouseMove = e => {\n    if (!modalDrag.isDragging || isMobile) return;\n    const newX = e.clientX - modalDrag.startPosition.x;\n    const newY = e.clientY - modalDrag.startPosition.y;\n    setModalDrag(prev => ({\n      ...prev,\n      position: {\n        x: newX,\n        y: newY\n      }\n    }));\n  };\n  const handleModalMouseUp = () => {\n    if (isMobile) return;\n    setModalDrag(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n  };\n\n  // Reset modal position when closed\n  useEffect(() => {\n    if (!selectedIssue) {\n      setModalDrag({\n        isDragging: false,\n        position: {\n          x: 0,\n          y: 0\n        },\n        startPosition: {\n          x: 0,\n          y: 0\n        }\n      });\n    }\n  }, [selectedIssue]);\n\n  // Add event listeners for dragging\n  useEffect(() => {\n    if (modalDrag.isDragging) {\n      document.addEventListener('mousemove', handleModalMouseMove);\n      document.addEventListener('mouseup', handleModalMouseUp);\n      document.body.style.cursor = 'grabbing';\n      document.body.style.userSelect = 'none';\n    } else {\n      document.removeEventListener('mousemove', handleModalMouseMove);\n      document.removeEventListener('mouseup', handleModalMouseUp);\n      document.body.style.cursor = '';\n      document.body.style.userSelect = '';\n    }\n    return () => {\n      document.removeEventListener('mousemove', handleModalMouseMove);\n      document.removeEventListener('mouseup', handleModalMouseUp);\n      document.body.style.cursor = '';\n      document.body.style.userSelect = '';\n    };\n  }, [modalDrag.isDragging]);\n  const openAddColumnModal = (e, laneId, colIndex) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    setModalPosition({\n      top: rect.bottom + window.scrollY + 8,\n      left: rect.left + window.scrollX\n    });\n    setColumnModal({\n      laneId,\n      colIndex,\n      type: 'add'\n    });\n    setColumnInput('');\n  };\n  const openEditColumnModal = (e, laneId, colIndex, status) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    setModalPosition({\n      top: rect.bottom + window.scrollY + 8,\n      left: rect.left + window.scrollX\n    });\n    setColumnModal({\n      laneId,\n      colIndex,\n      type: 'menu'\n    });\n    setColumnInput(status);\n  };\n  const handleAddColumn = () => {\n    const name = columnInput.trim();\n    if (!name) return alert('Column name is required');\n    setColumnsByLane(prev => {\n      const cols = [...prev[columnModal.laneId]];\n      if (cols.includes(name.toLowerCase())) alert('Column name already exists');else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\n      return {\n        ...prev,\n        [columnModal.laneId]: cols\n      };\n    });\n    setColumnModal(null);\n    setColumnInput('');\n  };\n  const handleEditColumn = () => {\n    const name = columnInput.trim();\n    if (!name) return alert('Column name is required');\n    const {\n      laneId,\n      colIndex\n    } = columnModal;\n    const oldCol = columnsByLane[laneId][colIndex];\n    if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\n      alert('Column name already exists');\n      return;\n    }\n    setColumnsByLane(prev => {\n      const cols = [...prev[laneId]];\n      cols[colIndex] = name.toLowerCase();\n      return {\n        ...prev,\n        [laneId]: cols\n      };\n    });\n    const updatedIssues = issues.map(issue => (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? {\n      ...issue,\n      status: name.toLowerCase()\n    } : issue);\n    setIssues(updatedIssues);\n    setColumnModal(null);\n    setColumnInput('');\n  };\n  const handleDeleteColumn = () => {\n    const {\n      laneId,\n      colIndex\n    } = columnModal;\n    const removedCol = columnsByLane[laneId][colIndex];\n    setColumnsByLane(prev => {\n      const cols = [...prev[laneId]];\n      cols.splice(colIndex, 1);\n      return {\n        ...prev,\n        [laneId]: cols\n      };\n    });\n    const updatedIssues = issues.map(issue => (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? {\n      ...issue,\n      status: 'backlog'\n    } : issue);\n    setIssues(updatedIssues);\n    setColumnModal(null);\n    setColumnInput('');\n  };\n  const toggleSwimlane = id => setOpenSwimlanes(prev => ({\n    ...prev,\n    [id]: !prev[id]\n  }));\n  const byStatus = (collection, status) => collection.filter(i => i.status === status);\n  const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n  const onDrop = async (e, targetStatus, swimlaneId) => {\n    e.preventDefault();\n    try {\n      const issueId = e.dataTransfer.getData('text/plain');\n      const issue = issues.find(i => i.id === issueId);\n      const srcLaneId = issue.epic || issue.projectId;\n      if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n        await moveIssue(issueId, targetStatus);\n        const refreshed = await listIssues(projectId);\n        setIssues(refreshed);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const onDragOver = e => e.preventDefault();\n  const handleCreateClick = laneId => {\n    setCreateLaneId(laneId);\n    setNewTaskText('');\n    setNewTaskType('Task');\n  };\n  const handleCreateSubmit = async lane => {\n    if (!newTaskText.trim()) {\n      alert('Task title is required');\n      return;\n    }\n    const newIssue = {\n      id: Math.random().toString(36).slice(2),\n      epic: lane.id,\n      projectId: lane.id,\n      epicName: lane.title,\n      title: newTaskText,\n      status: 'backlog',\n      assignee: '',\n      type: newTaskType,\n      storyPoints: '',\n      labels: [],\n      dueDate: '',\n      reporter: 'system',\n      priority: 'Medium',\n      startDate: new Date().toISOString().split('T')[0],\n      description: '',\n      subtasks: [],\n      comments: ''\n    };\n    try {\n      await createIssueAPI(newIssue);\n      const refreshed = await listIssues(projectId);\n      setIssues(refreshed);\n      setCreateLaneId(null);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const handleOpenModal = issue => {\n    setSelectedIssue(issue);\n    setEditIssue({\n      ...issue\n    });\n    setNewSubtaskText('');\n    // Reset position when opening new modal\n    setModalDrag({\n      isDragging: false,\n      position: {\n        x: 0,\n        y: 0\n      },\n      startPosition: {\n        x: 0,\n        y: 0\n      }\n    });\n  };\n  const handleUpdateField = (field, value) => {\n    setEditIssue(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  const handleSave = async () => {\n    await updateIssueAPI(editIssue);\n    const refreshed = await listIssues(projectId);\n    setIssues(refreshed);\n    setSelectedIssue(null);\n    setEditIssue(null);\n  };\n  const handleReset = () => {\n    setEditIssue({\n      ...selectedIssue\n    });\n  };\n  const handleCreateEpic = async () => {\n    if (!newEpicName.trim()) {\n      alert('Epic name is required');\n      return;\n    }\n    try {\n      await createEpicAPI(newEpicName);\n      const updatedEpics = await listEpics();\n      setEpics(updatedEpics);\n      setNewEpicName('');\n      setShowCreateEpic(false);\n      const newEpic = updatedEpics[updatedEpics.length - 1];\n      setOpenSwimlanes(prev => ({\n        ...prev,\n        [newEpic.id]: true\n      }));\n      setCustomTitles(prev => ({\n        ...prev,\n        [newEpic.id]: newEpic.name\n      }));\n      setColumnsByLane(prev => ({\n        ...prev,\n        [newEpic.id]: defaultStatuses.slice()\n      }));\n    } catch (error) {\n      console.error('Error creating epic:', error);\n    }\n  };\n  const handleDeleteEpic = async () => {\n    var _epics$find;\n    if (!epicToDelete) {\n      alert('Please select an epic to delete');\n      return;\n    }\n    if (!window.confirm(`Are you sure you want to delete the epic \"${(_epics$find = epics.find(e => e.id === epicToDelete)) === null || _epics$find === void 0 ? void 0 : _epics$find.name}\"? This will also delete all issues in this epic.`)) {\n      return;\n    }\n    try {\n      await deleteEpicAPI(epicToDelete);\n      const [refreshedIssues, refreshedEpics] = await Promise.all([listIssues(projectId), listEpics()]);\n      setIssues(refreshedIssues);\n      setEpics(refreshedEpics);\n      setEpicToDelete('');\n      setShowDeleteEpic(false);\n      setColumnsByLane(prev => {\n        const copy = {\n          ...prev\n        };\n        delete copy[epicToDelete];\n        return copy;\n      });\n      setOpenSwimlanes(prev => {\n        const copy = {\n          ...prev\n        };\n        delete copy[epicToDelete];\n        return copy;\n      });\n      setCustomTitles(prev => {\n        const copy = {\n          ...prev\n        };\n        delete copy[epicToDelete];\n        return copy;\n      });\n    } catch (error) {\n      console.error('Error deleting epic:', error);\n    }\n  };\n  const toggleMobileSwimlane = laneId => {\n    if (activeSwimlane === laneId) {\n      setActiveSwimlane(null);\n    } else {\n      setActiveSwimlane(laneId);\n    }\n  };\n  const swimlanes = getSwimlanes(issues, epics);\n\n  // Calculate subtask progress\n  const getSubtaskProgress = subtasks => {\n    if (!subtasks || subtasks.length === 0) return {\n      completed: 0,\n      total: 0,\n      percentage: 0\n    };\n    const completed = subtasks.filter(st => st.completed).length;\n    const total = subtasks.length;\n    const percentage = total > 0 ? Math.round(completed / total * 100) : 0;\n    return {\n      completed,\n      total,\n      percentage\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"project-title\",\n        children: projectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4842,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"project-stat\",\n          children: [epics.length, \" Epics\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 4844,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"project-stat\",\n          children: [issues.length, \" Issues\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 4845,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"project-stat\",\n          children: [issues.filter(issue => issue.status === 'done').length, \" Completed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 4846,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 4843,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 4841,\n      columnNumber: 7\n    }, this), isMobile && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mobile-swimlane-selector\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: activeSwimlane || '',\n        onChange: e => setActiveSwimlane(e.target.value || null),\n        className: \"mobile-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"All Swimlanes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4859,\n          columnNumber: 13\n        }, this), swimlanes.map(lane => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: lane.id,\n          children: customTitles[lane.id] || lane.title\n        }, lane.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4861,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 4854,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4853,\n      columnNumber: 9\n    }, this), swimlanes.map(lane => {\n      const isOpen = isMobile ? activeSwimlane === null || activeSwimlane === lane.id : openSwimlanes[lane.id];\n      const statuses = columnsByLane[lane.id] || defaultStatuses;\n      if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\n        return null;\n      }\n      return /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"swimlane\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"swimlane-header\",\n          children: [!isMobile && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"swimlane-toggle\",\n            onClick: () => toggleSwimlane(lane.id),\n            children: isOpen ? '▼' : '▶'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4879,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"swimlane-icon\",\n            children: \"\\u26A1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4883,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"swimlane-title-input\",\n            value: customTitles[lane.id] || '',\n            onChange: e => setCustomTitles(prev => ({\n              ...prev,\n              [lane.id]: e.target.value\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4884,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"swimlane-count\",\n            children: [lane.issues.length, \" work items\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 4889,\n            columnNumber: 15\n          }, this), isMobile && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"mobile-swimlane-toggle\",\n            onClick: () => toggleMobileSwimlane(lane.id),\n            children: activeSwimlane === lane.id ? '▲' : '▼'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4891,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 4877,\n          columnNumber: 13\n        }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `kanban-row ${isMobile ? 'mobile-view' : ''}`,\n          children: statuses.map((status, idx) => {\n            const issuesForStatus = byStatus(lane.issues, status);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `kanban-column ${isMobile ? 'mobile-column' : ''}`,\n              onDragOver: onDragOver,\n              onDrop: e => onDrop(e, status, lane.id),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"col-title\",\n                  children: status.toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4911,\n                  columnNumber: 25\n                }, this), !isMobile && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"col-icons\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"col-icon\",\n                    title: \"Add Column\",\n                    onClick: e => openAddColumnModal(e, lane.id, idx),\n                    children: \"\\uFF0B\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4914,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"col-icon\",\n                    title: \"Edit/Delete Column\",\n                    onClick: e => openEditColumnModal(e, lane.id, idx, status),\n                    children: \"\\u22EE\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4915,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4913,\n                  columnNumber: 27\n                }, this), issuesForStatus.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"col-count\",\n                  children: issuesForStatus.length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4918,\n                  columnNumber: 56\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 4910,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-create\",\n                children: status === 'backlog' && (createLaneId === lane.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"create-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                    rows: 2,\n                    className: \"create-input\",\n                    placeholder: \"What needs to be done?\",\n                    value: newTaskText,\n                    onChange: e => setNewTaskText(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4924,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"create-actions\",\n                    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                      value: newTaskType,\n                      onChange: e => setNewTaskType(e.target.value),\n                      className: \"create-select\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Task\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 4927,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Subtask\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 4927,\n                        columnNumber: 56\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Bug\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 4927,\n                        columnNumber: 80\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4926,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"create-btn\",\n                      onClick: () => handleCreateSubmit(lane),\n                      children: \"\\u2714\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4929,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"create-btn\",\n                      onClick: () => setCreateLaneId(null),\n                      children: \"\\u2716\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4930,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4925,\n                    columnNumber: 31\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4923,\n                  columnNumber: 29\n                }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"create-link\",\n                  onClick: () => handleCreateClick(lane.id),\n                  children: \"+ Create\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4933,\n                  columnNumber: 32\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4920,\n                columnNumber: 23\n              }, this), issuesForStatus.map(issue => {\n                const isHovered = hoveredAssigneeId === issue.id;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-item\",\n                  draggable: true,\n                  onDragStart: e => onDragStart(e, issue.id),\n                  onClick: () => handleOpenModal(issue),\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"card-top\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `card-tag card-tag-${issue.type.toLowerCase()}`,\n                      children: issue.type\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4941,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"card-id\",\n                      children: issue.id\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4942,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4940,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"card-title\",\n                    children: issue.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4944,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"card-meta\",\n                    children: [issue.assignee && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"card-assignee\",\n                      onMouseEnter: () => setHoveredAssigneeId(issue.id),\n                      onMouseLeave: () => setHoveredAssigneeId(null),\n                      children: [\"\\uD83D\\uDC64 \", issue.assignee]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4947,\n                      columnNumber: 33\n                    }, this), issue.dueDate && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"card-due\",\n                      children: [\"\\uD83D\\uDCC5 \", issue.dueDate]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4951,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `card-priority ${issue.priority.toLowerCase()}`,\n                      children: [\"\\u2691 \", issue.priority]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4952,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4945,\n                    columnNumber: 29\n                  }, this)]\n                }, issue.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4939,\n                  columnNumber: 27\n                }, this);\n              })]\n            }, status, true, {\n              fileName: _jsxFileName,\n              lineNumber: 4904,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4900,\n          columnNumber: 15\n        }, this)]\n      }, lane.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 4876,\n        columnNumber: 11\n      }, this);\n    }), columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"epic-modal-overlay\",\n      onClick: () => setColumnModal(null),\n      style: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        zIndex: 1000\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"epic-modal\",\n        onClick: e => e.stopPropagation(),\n        style: {\n          position: isMobile ? 'fixed' : 'absolute',\n          top: isMobile ? '50%' : modalPosition.top,\n          left: isMobile ? '50%' : modalPosition.left,\n          transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\n          minWidth: isMobile ? '90vw' : 280,\n          maxWidth: isMobile ? '95vw' : 320,\n          padding: 20,\n          borderRadius: 10,\n          background: 'white',\n          boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\n          zIndex: 1100\n        },\n        children: columnModal.type === 'add' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              marginBottom: 15,\n              fontWeight: 600,\n              fontSize: 20,\n              color: '#172b4d'\n            },\n            children: \"Add Column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4983,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: columnInput,\n            onChange: e => setColumnInput(e.target.value),\n            placeholder: \"Column name\",\n            autoFocus: true,\n            className: \"epic-modal-input\",\n            style: {\n              width: '100%',\n              padding: 12,\n              fontSize: 16,\n              borderRadius: 6,\n              border: '1px solid #dfe1e5',\n              marginBottom: 20,\n              boxSizing: 'border-box'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4984,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"epic-modal-actions\",\n            style: {\n              display: 'flex',\n              justifyContent: 'flex-end',\n              gap: 12,\n              flexWrap: isMobile ? 'wrap' : 'nowrap'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-cancel\",\n              onClick: () => setColumnModal(null),\n              style: btnStyle.cancel,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4986,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-create\",\n              onClick: handleAddColumn,\n              style: btnStyle.create,\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4987,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 4985,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              marginBottom: 15,\n              fontWeight: 600,\n              fontSize: 20,\n              color: '#172b4d'\n            },\n            children: \"Edit/Delete Column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4992,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: columnInput,\n            onChange: e => setColumnInput(e.target.value),\n            placeholder: \"Column name\",\n            autoFocus: true,\n            className: \"epic-modal-input\",\n            style: {\n              width: '100%',\n              padding: 12,\n              fontSize: 16,\n              borderRadius: 6,\n              border: '1px solid #dfe1e5',\n              marginBottom: 20,\n              boxSizing: 'border-box'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4993,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"epic-modal-actions\",\n            style: {\n              display: 'flex',\n              justifyContent: 'flex-end',\n              gap: 12,\n              flexWrap: isMobile ? 'wrap' : 'nowrap'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-save\",\n              onClick: handleEditColumn,\n              style: btnStyle.create,\n              children: \"Rename\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4995,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-delete\",\n              onClick: handleDeleteColumn,\n              style: btnStyle.delete,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4996,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-cancel\",\n              onClick: () => setColumnModal(null),\n              style: btnStyle.cancel,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4997,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 4994,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4968,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4967,\n      columnNumber: 9\n    }, this), selectedIssue && editIssue && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      onClick: () => setSelectedIssue(null),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `modal-container ${isMobile ? 'mobile-modal-container' : ''}`,\n        style: !isMobile && modalDrag.position.x !== 0 && modalDrag.position.y !== 0 ? {\n          position: 'fixed',\n          top: modalDrag.position.y,\n          left: modalDrag.position.x,\n          transform: 'none'\n        } : {},\n        ref: modalRef,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `modal ${isMobile ? 'mobile-modal' : ''} ${modalDrag.isDragging ? 'modal-dragging' : ''}`,\n          onClick: e => e.stopPropagation(),\n          onMouseDown: handleModalMouseDown,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-header-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"modal-epic-badge\",\n                children: editIssue.epicName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 5028,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"modal-title\",\n                children: editIssue.title || 'Untitled Issue'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 5029,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"modal-id-type\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"modal-id\",\n                  children: editIssue.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 5031,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `modal-type modal-type-${editIssue.type.toLowerCase()}`,\n                  children: editIssue.type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 5032,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 5030,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 5027,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"modal-close-btn\",\n              onClick: () => setSelectedIssue(null),\n              children: \"\\u2716\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 5035,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 5026,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-content-scroll\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `modal-content ${isMobile ? 'mobile-modal-content' : ''}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"modal-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"modal-section-title\",\n                  children: \"Details\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 5041,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"modal-grid\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"modal-field\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"modal-label\",\n                      children: \"Title\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5044,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"modal-input\",\n                      value: editIssue.title,\n                      onChange: e => handleUpdateField('title', e.target.value),\n                      placeholder: \"Enter issue title\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5045,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 5043,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"modal-field\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"modal-label\",\n                      children: \"Status\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5053,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      className: \"modal-select\",\n                      value: editIssue.status,\n                      onChange: e => handleUpdateField('status', e.target.value),\n                      children: ((_columnsByLane$editIs = columnsByLane[editIssue.epic]) === null || _columnsByLane$editIs === void 0 ? void 0 : _columnsByLane$editIs.map(st => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: st,\n                        children: st.charAt(0).toUpperCase() + st.slice(1)\n                      }, st, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 5060,\n                        columnNumber: 29\n                      }, this))) || defaultStatuses.map(st => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: st,\n                        children: st.charAt(0).toUpperCase() + st.slice(1)\n                      }, st, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 5062,\n                        columnNumber: 29\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5054,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 5052,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"modal-field\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"modal-label\",\n                      children: \"Assignee\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5067,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"modal-input\",\n                      value: editIssue.assignee,\n                      onChange: e => handleUpdateField('assignee', e.target.value),\n                      placeholder: \"Unassigned\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5068,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 5066,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"modal-field\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"modal-label\",\n                      children: \"Reporter\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5076,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"modal-input modal-input-disabled\",\n                      disabled: true,\n                      value: editIssue.reporter\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5077,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 5075,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"modal-field\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"modal-label\",\n                      children: \"Priority\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5084,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      className: \"modal-select\",\n                      value: editIssue.priority,\n                      onChange: e => handleUpdateField('priority', e.target.value),\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Low\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 5090,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"Medium\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 5091,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        children: \"High\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 5092,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5085,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 5083,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"modal-field\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"modal-label\",\n                      children: \"Story Points\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5096,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"modal-input\",\n                      type: \"number\",\n                      value: editIssue.storyPoints,\n                      onChange: e => handleUpdateField('storyPoints', e.target.value),\n                      placeholder: \"0\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5097,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 5095,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"modal-field\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"modal-label\",\n                      children: \"Start Date\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5106,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"modal-input\",\n                      type: \"date\",\n                      value: editIssue.startDate,\n                      onChange: e => handleUpdateField('startDate', e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5107,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 5105,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"modal-field\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"modal-label\",\n                      children: \"Due Date\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5115,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"modal-input\",\n                      type: \"date\",\n                      value: editIssue.dueDate,\n                      onChange: e => handleUpdateField('dueDate', e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5116,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 5114,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 5042,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 5040,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"modal-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"modal-section-title\",\n                  children: \"Description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 5127,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"modal-field-full\",\n                  children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                    className: \"modal-textarea\",\n                    rows: \"4\",\n                    value: editIssue.description,\n                    onChange: e => handleUpdateField('description', e.target.value),\n                    placeholder: \"Add a detailed description...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 5129,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 5128,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 5126,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"modal-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"modal-section-title\",\n                  children: \"Subtasks\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 5140,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"modal-field-full\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"subtasks-container\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"subtasks-header\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"subtasks-title\",\n                        children: [\"Subtasks (\", getSubtaskProgress(editIssue.subtasks).completed, \"/\", getSubtaskProgress(editIssue.subtasks).total, \")\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 5144,\n                        columnNumber: 27\n                      }, this), editIssue.subtasks && editIssue.subtasks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"subtask-progress-bar\",\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"subtask-progress-fill\",\n                          style: {\n                            width: `${getSubtaskProgress(editIssue.subtasks).percentage}%`\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 5149,\n                          columnNumber: 31\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 5148,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5143,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"subtasks-list\",\n                      children: editIssue.subtasks && editIssue.subtasks.length > 0 ? editIssue.subtasks.map(subtask => /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"subtask-item\",\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          className: \"subtask-checkbox\",\n                          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                            type: \"checkbox\",\n                            checked: subtask.completed,\n                            onChange: () => toggleSubtask(subtask.id)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 5162,\n                            columnNumber: 35\n                          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                            className: `subtask-text ${subtask.completed ? 'completed' : ''}`,\n                            children: subtask.title\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 5167,\n                            columnNumber: 35\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 5161,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: \"subtask-delete-btn\",\n                          onClick: () => deleteSubtask(subtask.id),\n                          title: \"Delete subtask\",\n                          children: \"\\u2715\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 5171,\n                          columnNumber: 33\n                        }, this)]\n                      }, subtask.id, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 5160,\n                        columnNumber: 31\n                      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"no-subtasks\",\n                        children: \"No subtasks added yet\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 5181,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5157,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"add-subtask\",\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"text\",\n                        className: \"subtask-input\",\n                        placeholder: \"Add a new subtask...\",\n                        value: newSubtaskText,\n                        onChange: e => setNewSubtaskText(e.target.value),\n                        onKeyPress: handleSubtaskKeyPress\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 5186,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"add-subtask-btn\",\n                        onClick: addSubtask,\n                        disabled: !newSubtaskText.trim(),\n                        children: \"Add\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 5194,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 5185,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 5142,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 5141,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 5139,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"modal-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"modal-section-title\",\n                  children: \"Comments\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 5207,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"modal-field-full\",\n                  children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                    className: \"modal-textarea\",\n                    rows: \"3\",\n                    value: editIssue.comments,\n                    onChange: e => handleUpdateField('comments', e.target.value),\n                    placeholder: \"Add comments...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 5209,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 5208,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 5206,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 5039,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 5038,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-reset\",\n              onClick: handleReset,\n              children: \"Reset Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 5222,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-actions-right\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"modal-delete-btn\",\n                onClick: async () => {\n                  if (window.confirm('Are you sure you want to delete this issue?')) {\n                    await deleteIssueAPI(selectedIssue.id);\n                    const refreshed = await listIssues(projectId);\n                    setIssues(refreshed);\n                    setSelectedIssue(null);\n                  }\n                },\n                children: \"Delete Issue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 5224,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn-save\",\n                onClick: handleSave,\n                children: \"Save Changes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 5237,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 5223,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 5221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 5021,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 5007,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5006,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n\n\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif;\n    background-color: #D0F0F4; /* changed to requested color */\n    margin: 0;\n    padding: 16px;\n  }\n  .board-wrap {\n    max-width: 100%;\n    overflow-x: auto;\n  }\n  .project-header {\n    background: #dbeafe;\n    border-radius: 8px;\n    padding: 20px 24px;\n    margin-bottom: 20px;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n    border-left: 4px solid #1976d2;\n  }\n  .project-title {\n    margin: 0 0 12px 0;\n    font-size: 28px;\n    font-weight: 700;\n    color: #172b4d;\n    line-height: 1.2;\n  }\n  .project-stats {\n    display: flex;\n    gap: 20px;\n    flex-wrap: wrap;\n  }\n  .project-stat {\n    background: #dbeafe;\n    padding: 6px 12px;\n    border-radius: 16px;\n    font-size: 14px;\n    font-weight: 600;\n    color: #5e6c84;\n    display: flex;\n    align-items: center;\n    gap: 4px;\n  }\n  .project-stat:before {\n    content: \"•\";\n    color: #1976d2;\n    font-weight: bold;\n  }\n  @media (min-width: 768px) {\n    .swimlane {\n      background: #dbeafe;\n      border-radius: 8px;\n      margin-bottom: 16px;\n      box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n      overflow: hidden;\n    }\n    .kanban-row {\n      display: flex;\n      padding: 16px;\n      gap: 12px;\n      overflow-x: auto;\n    }\n    .kanban-column {\n      flex: 0 0 260px;\n      background: #f5f6f8;\n      border-radius: 6px;\n      padding: 12px;\n      display: flex;\n      flex-direction: column;\n      gap: 12px;\n      border: 1px solid #dfe5e5;\n      user-select: none;\n      min-height: 400px;\n    }\n  }\n  @media (max-width: 767px) {\n    body {\n      padding: 8px;\n    }\n    .project-header {\n      padding: 16px;\n      margin-bottom: 16px;\n      border-left-width: 3px;\n    }\n    .project-title {\n      font-size: 22px;\n      margin-bottom: 10px;\n    }\n    .project-stats {\n      gap: 12px;\n    }\n    .project-stat {\n      font-size: 12px;\n      padding: 4px 10px;\n    }\n    .mobile-swimlane-selector {\n      margin-bottom: 16px;\n      position: sticky;\n      top: 0;\n      background: white;\n      padding: 12px;\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      z-index: 100;\n    }\n    .mobile-select {\n      width: 100%;\n      padding: 12px;\n      border: 1px solid #dfe5e5;\n      border-radius: 6px;\n      font-size: 16px;\n      background: white;\n    }\n    .swimlane {\n      background: #dbeafe;\n      border-radius: 8px;\n      margin-bottom: 12px;\n      box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n      overflow: hidden;\n    }\n    .swimlane-header {\n      display: flex;\n      align-items: center;\n      padding: 12px;\n      background: #fafbfc;\n      border-bottom: 1px solid #dfe5e5;\n      font-weight: 600;\n      font-size: 14px;\n      color: #172b4d;\n      position: relative;\n    }\n    .mobile-swimlane-toggle {\n      background:#dbeafe;\n      border: none;\n      font-size: 16px;\n      color: #5e6c84;\n      margin-left: auto;\n      padding: 4px 8px;\n    }\n    .kanban-row.mobile-view {\n      display: block;\n      padding: 8px;\n      overflow-x: auto;\n      white-space: nowrap;\n    }\n    .kanban-column.mobile-column {\n      display: inline-block;\n      vertical-align: top;\n      width: 280px;\n      margin-right: 8px;\n      background: #dbeafe;\n      border-radius: 6px;\n      padding: 8px;\n      border: 1px solid #dfe5e5;\n      user-select: none;\n      min-height: 300px;\n    }\n    .col-header {\n      display: flex;\n      align-items: center;\n      margin-bottom: 8px;\n      gap: 6px;\n    }\n    .col-title {\n      font-weight: 600;\n      font-size: 11px;\n      color: #5e6c84;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n      flex-grow: 1;\n    }\n    .card-item {\n      background: #dbeafe;\n      border-radius: 6px;\n      padding: 10px;\n      box-shadow: 0 0 2px rgba(0,0,0,0.1);\n      cursor: pointer;\n      user-select: none;\n      display: flex;\n      flex-direction: column;\n      gap: 6px;\n      border: 1px solid #dfe5e5;\n      margin-bottom: 8px;\n    }\n    .card-title {\n      font-weight: 600;\n      font-size: 13px;\n      color: #2b3a59;\n      line-height: 1.3;\n    }\n    .card-meta {\n      display: flex;\n      gap: 6px;\n      font-size: 10px;\n      color: #6b7c93;\n      align-items: center;\n      flex-wrap: wrap;\n    }\n    .modal.mobile-modal {\n      width: 100%;\n      max-height: 90vh;\n      display: flex;\n      flex-direction: column;\n    }\n    .modal-content.mobile-modal-content {\n      display: flex;\n      flex-direction: column;\n      gap: 12px;\n      overflow-y: auto;\n    }\n    .modal-field {\n      display: flex;\n      flex-direction: column;\n      gap: 4px;\n    }\n    .modal-field input, .modal-field textarea, .modal-field select {\n      padding: 10px;\n      font-size: 16px;\n    }\n    .modal-actions {\n      display: flex;\n      gap: 8px;\n      justify-content: space-between;\n      margin-top: 16px;\n    }\n    .modal-actions button {\n      flex: 1;\n      padding: 12px;\n      font-size: 16px;\n    }\n  }\n\n  /* Card Styles - Only Title, Assignee, Due Date, and Priority */\n  .card-item {\n    background: white;\n    border-radius: 8px;\n    padding: 12px;\n    box-shadow: 0 0 2px rgba(0,0,0,0.1);\n    cursor: pointer;\n    user-select: none;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    border: 1px solid #dfe5e5;\n    transition: box-shadow 0.2s ease, border-color 0.2s ease;\n  }\n\n  .card-item:hover {\n    box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\n    border-color: #a2adba;\n  }\n\n  .card-top {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    gap: 8px;\n  }\n\n  .card-tag {\n    padding: 2px 6px;\n    border-radius: 4px;\n    font-size: 10px;\n    font-weight: 600;\n    text-transform: uppercase;\n  }\n\n  .card-tag-task { background: #e3f2fd; color: #1976d2; }\n  .card-tag-subtask { background: #f3e5f5; color: #7b1fa2; }\n  .card-tag-bug { background: #ffebee; color: #d32f2f; }\n\n  .card-id {\n    font-size: 10px;\n    color: #6b7c93;\n    font-family: 'Monaco', 'Menlo', monospace;\n    font-weight: 600;\n  }\n\n  .card-title {\n    font-weight: 600;\n    font-size: 14px;\n    color: #2b3a59;\n    line-height: 1.3;\n    margin: 0;\n    word-break: break-word;\n  }\n\n  .card-meta {\n    display: flex;\n    flex-direction: column;\n    gap: 6px;\n  }\n\n  .card-assignee {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    font-size: 11px;\n    color: #5e6c84;\n    font-weight: 500;\n  }\n\n  .card-due {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    font-size: 11px;\n    color: #d32f2f;\n    font-weight: 500;\n  }\n\n  .card-priority {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    font-size: 11px;\n    font-weight: 600;\n    padding: 2px 6px;\n    border-radius: 4px;\n    width: fit-content;\n  }\n\n  .card-priority.high { background: #ffebee; color: #d32f2f; }\n  .card-priority.medium { background: #fff3e0; color: #f57c00; }\n  .card-priority.low { background: #e8f5e8; color: #388e3c; }\n\n  /* Modal Subtasks Styles */\n  .subtasks-container {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n  }\n\n  .subtasks-header {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .subtasks-title {\n    font-size: 14px;\n    font-weight: 600;\n    color: #44546f;\n  }\n\n  .subtasks-list {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    max-height: 200px;\n    overflow-y: auto;\n  }\n\n  .subtask-item {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 8px 12px;\n    background: #f8f9fa;\n    border-radius: 6px;\n    border: 1px solid #e1e4e8;\n    transition: background-color 0.2s;\n  }\n\n  .subtask-item:hover {\n    background: #f1f2f4;\n  }\n\n  .subtask-checkbox {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    flex: 1;\n    cursor: pointer;\n    margin: 0;\n  }\n\n  .subtask-checkbox input[type=\"checkbox\"] {\n    margin: 0;\n    cursor: pointer;\n  }\n\n  .subtask-text {\n    font-size: 14px;\n    color: #44546f;\n    transition: all 0.2s;\n  }\n\n  .subtask-text.completed {\n    text-decoration: line-through;\n    color: #8b9cb1;\n  }\n\n  .subtask-delete-btn {\n    background: none;\n    border: none;\n    color: #d32f2f;\n    cursor: pointer;\n    padding: 4px;\n    border-radius: 4px;\n    font-size: 12px;\n    transition: background-color 0.2s;\n  }\n\n  .subtask-delete-btn:hover {\n    background: #ffebee;\n  }\n\n  .no-subtasks {\n    text-align: center;\n    color: #8b9cb1;\n    font-style: italic;\n    padding: 16px;\n    font-size: 14px;\n  }\n\n  .add-subtask {\n    display: flex;\n    gap: 8px;\n  }\n\n  .subtask-input {\n    flex: 1;\n    padding: 8px 12px;\n    border: 2px solid #dfe1e6;\n    border-radius: 6px;\n    font-size: 14px;\n    transition: border-color 0.2s;\n  }\n\n  .subtask-input:focus {\n    outline: none;\n    border-color: #1976d2;\n  }\n\n  .add-subtask-btn {\n    padding: 8px 16px;\n    background: #1976d2;\n    color: white;\n    border: none;\n    border-radius: 6px;\n    font-size: 14px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: background-color 0.2s;\n  }\n\n  .add-subtask-btn:hover:not(:disabled) {\n    background: #1565c0;\n  }\n\n  .add-subtask-btn:disabled {\n    background: #b0bec5;\n    cursor: not-allowed;\n  }\n\n  /* Enhanced Modal Styles - Fixed Positioning with Dragging */\n  .modal-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0,0,0,0.6);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 10000;\n    padding: 20px;\n  }\n\n  .modal-container {\n    width: 100%;\n    max-width: 1000px;\n    max-height: 85vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: none;\n  }\n\n  .modal {\n    background: white;\n    border-radius: 12px;\n    width: 100%;\n    max-height: 85vh;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    box-shadow: 0 20px 60px rgba(0,0,0,0.3);\n    margin: 0 auto;\n    transition: box-shadow 0.2s ease;\n  }\n\n  .modal-dragging {\n    box-shadow: 0 25px 80px rgba(0,0,0,0.4);\n    cursor: grabbing;\n  }\n\n  .modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    padding: 24px;\n    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n    border-bottom: 1px solid #e1e4e8;\n    flex-shrink: 0;\n    cursor: grab;\n    transition: background-color 0.2s ease;\n  }\n\n  .modal-header:hover {\n    background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);\n  }\n\n  .modal-dragging .modal-header {\n    cursor: grabbing;\n    background: linear-gradient(135deg, #dee2e6 0%, #ced4da 100%);\n  }\n\n  .modal-header-content {\n    flex: 1;\n    min-width: 0;\n  }\n\n  .modal-epic-badge {\n    display: inline-block;\n    background: #1976d2;\n    color: white;\n    padding: 4px 12px;\n    border-radius: 16px;\n    font-size: 12px;\n    font-weight: 600;\n    margin-bottom: 8px;\n  }\n\n  .modal-title {\n    margin: 0 0 8px 0;\n    font-size: 24px;\n    font-weight: 700;\n    color: #172b4d;\n    line-height: 1.3;\n    word-wrap: break-word;\n  }\n\n  .modal-id-type {\n    display: flex;\n    gap: 12px;\n    align-items: center;\n  }\n\n  .modal-id {\n    font-size: 14px;\n    color: #5e6c84;\n    font-family: 'Monaco', 'Menlo', monospace;\n  }\n\n  .modal-type {\n    padding: 2px 8px;\n    border-radius: 4px;\n    font-size: 12px;\n    font-weight: 600;\n    text-transform: uppercase;\n  }\n\n  .modal-type-task { background: #e3f2fd; color: #1976d2; }\n  .modal-type-subtask { background: #f3e5f5; color: #7b1fa2; }\n  .modal-type-bug { background: #ffebee; color: #d32f2f; }\n\n  .modal-close-btn {\n    background: none;\n    border: none;\n    font-size: 20px;\n    color: #5e6c84;\n    cursor: pointer;\n    padding: 8px;\n    margin: -8px;\n    border-radius: 4px;\n    transition: background-color 0.2s;\n    flex-shrink: 0;\n  }\n\n  .modal-close-btn:hover {\n    background: rgba(0,0,0,0.1);\n  }\n\n  .modal-content-scroll {\n    flex: 1;\n    overflow-y: auto;\n    padding: 0 24px;\n  }\n\n  .modal-content {\n    padding: 24px 0;\n    display: flex;\n    flex-direction: column;\n    gap: 24px;\n  }\n\n  .modal-section {\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n  }\n\n  .modal-section-title {\n    font-size: 18px;\n    font-weight: 600;\n    color: #172b4d;\n    margin: 0;\n    padding-bottom: 8px;\n    border-bottom: 2px solid #f0f0f0;\n  }\n\n  .modal-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 16px;\n  }\n\n  .modal-field {\n    display: flex;\n    flex-direction: column;\n    gap: 6px;\n  }\n\n  .modal-field-full {\n    grid-column: 1 / -1;\n    display: flex;\n    flex-direction: column;\n    gap: 6px;\n  }\n\n  .modal-label {\n    font-size: 14px;\n    font-weight: 600;\n    color: #44546f;\n    margin: 0;\n  }\n\n  .modal-input, .modal-select, .modal-textarea {\n    padding: 12px;\n    border: 2px solid #dfe1e6;\n    border-radius: 8px;\n    font-size: 14px;\n    font-family: inherit;\n    transition: border-color 0.2s, box-shadow 0.2s;\n    background: white;\n  }\n\n  .modal-input:focus, .modal-select:focus, .modal-textarea:focus {\n    outline: none;\n    border-color: #1976d2;\n    box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);\n  }\n\n  .modal-input-disabled {\n    background: #f8f9fa;\n    color: #6b778c;\n    cursor: not-allowed;\n  }\n\n  .modal-textarea {\n    resize: vertical;\n    min-height: 80px;\n    line-height: 1.5;\n  }\n\n  .modal-actions {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 20px 24px;\n    background: #f8f9fa;\n    border-top: 1px solid #e1e4e8;\n    gap: 16px;\n    flex-shrink: 0;\n  }\n\n  .modal-actions-right {\n    display: flex;\n    gap: 12px;\n    align-items: center;\n  }\n\n  .btn-reset {\n    padding: 10px 20px;\n    border: 1px solid #dcdfe4;\n    background: white;\n    color: #44546f;\n    border-radius: 6px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.2s;\n  }\n\n  .btn-reset:hover {\n    background: #f1f2f4;\n    border-color: #c1c7d0;\n  }\n\n  .btn-save {\n    padding: 10px 24px;\n    border: none;\n    background: #1976d2;\n    color: white;\n    border-radius: 6px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: background-color 0.2s;\n  }\n\n  .btn-save:hover {\n    background: #1565c0;\n  }\n\n  .modal-delete-btn {\n    padding: 10px 20px;\n    border: 1px solid #ffcdd2;\n    background: white;\n    color: #d32f2f;\n    border-radius: 6px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.2s;\n  }\n\n  .modal-delete-btn:hover {\n    background: #ffebee;\n    border-color: #ef5350;\n  }\n\n  @media (max-width: 767px) {\n    .modal-overlay {\n      padding: 10px;\n    }\n    \n    .modal-container.mobile-modal-container {\n      width: 100%;\n      height: 100%;\n      padding: 0;\n    }\n\n    .modal.mobile-modal {\n      width: 100%;\n      max-height: 100%;\n      border-radius: 0;\n      margin: 0;\n    }\n\n    .modal-header {\n      padding: 16px;\n      flex-direction: column;\n      gap: 12px;\n      cursor: default;\n    }\n\n    .modal-close-btn {\n      align-self: flex-end;\n      margin: 0;\n    }\n\n    .modal-content-scroll {\n      padding: 0 16px;\n    }\n\n    .modal-content {\n      padding: 16px 0;\n      gap: 20px;\n    }\n\n    .modal-grid {\n      grid-template-columns: 1fr;\n      gap: 12px;\n    }\n\n    .modal-actions {\n      padding: 16px;\n      flex-direction: column;\n      gap: 12px;\n    }\n\n    .modal-actions-right {\n      width: 100%;\n      justify-content: space-between;\n    }\n\n    .btn-reset, .modal-delete-btn, .btn-save {\n      flex: 1;\n      text-align: center;\n    }\n\n    .add-subtask {\n      flex-direction: column;\n    }\n\n    .subtasks-list {\n      max-height: 150px;\n    }\n  }\n\n  .swimlane-header {\n    display: flex;\n    align-items: center;\n    padding: 12px 16px;\n    background: #fafbfc;\n    border-bottom: 1px solid #dfe5e5;\n    font-weight: 600;\n    font-size: 14px;\n    color: #172b4d;\n  }\n  .swimlane-toggle, .swimlane-icon {\n    color: #5e6c84;\n    margin-right: 8px;\n    cursor: pointer;\n  }\n  .swimlane-toggle {\n    border: none;\n    background: transparent;\n    font-size: 14px;\n  }\n  .swimlane-icon {\n    font-size: 18px;\n  }\n  .swimlane-title-input {\n    border: 1px solid #dfe5e5;\n    border-radius: 4px;\n    padding: 4px 8px;\n    font-size: 14px;\n    font-weight: 600;\n    background: white;\n    margin-right: 8px;\n    min-width: 150px;\n    color: #172b4d;\n  }\n  .swimlane-title-input:focus {\n    outline: none;\n    border-color: #1976d2;\n  }\n  .swimlane-count {\n    color: #5e6c84;\n    font-size: 12px;\n    font-weight: normal;\n  }\n  .col-header {\n    display: flex;\n    align-items: center;\n    margin-bottom: 4px;\n    gap: 6px;\n  }\n  .col-title {\n    font-weight: 600;\n    font-size: 12px;\n    color: #5e6c84;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    flex-grow: 1;\n  }\n  .col-count {\n    background: #dfe5e5;\n    color: #5e6c84;\n    border-radius: 12px;\n    padding: 2px 8px;\n    font-size: 11px;\n    font-weight: 600;\n    min-width: 20px;\n    text-align: center;\n  }\n  .col-icons {\n    display: flex;\n    gap: 6px;\n  }\n  .col-icon {\n    cursor: pointer;\n    color: #5e6c84;\n    font-size: 18px;\n    background: none;\n    border: none;\n    padding: 0;\n  }\n  .create-card {\n    background: white;\n    padding: 10px;\n    border-radius: 6px;\n    box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n  }\n  button {\n    cursor: pointer;\n    transition: background-color 0.2s;\n  }\n  button:hover {\n    opacity: 0.9;\n  }\n  @media (max-width: 767px) {\n    button, .card-item, .col-icon {\n      min-height: 44px;\n      min-width: 44px;\n    }\n    .card-item {\n      touch-action: manipulation;\n    }\n  }\n`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5246,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 4839,\n    columnNumber: 5\n  }, this);\n}\n_s(KanbanBoard, \"9anko77NwxpTLhrEDJL7Sg8Gc6g=\", false, function () {\n  return [useParams];\n});\n_c = KanbanBoard;\nconst btnStyle = {\n  cancel: {\n    padding: '10px 18px',\n    borderRadius: '6px',\n    border: 'none',\n    backgroundColor: '#5e6c84',\n    color: 'white',\n    fontWeight: '600',\n    fontSize: '14px',\n    cursor: 'pointer'\n  },\n  create: {\n    padding: '10px 18px',\n    borderRadius: '6px',\n    border: 'none',\n    backgroundColor: '#1976d2',\n    color: 'white',\n    fontWeight: '600',\n    fontSize: '14px',\n    cursor: 'pointer'\n  },\n  delete: {\n    padding: '10px 18px',\n    borderRadius: '6px',\n    border: 'none',\n    backgroundColor: '#d32f2f',\n    color: 'white',\n    fontWeight: '600',\n    fontSize: '14px',\n    cursor: 'pointer'\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","mockIssues","id","epic","epicName","status","type","title","assignee","storyPoints","labels","dueDate","reporter","priority","startDate","description","subtasks","completed","comments","defaultStatuses","mockEpics","name","mockProjects","simulateApiDelay","Promise","resolve","setTimeout","listIssues","projectId","filter","i","listEpics","getProjectName","project","find","p","createEpicAPI","newEpic","length","push","deleteEpicAPI","epicId","epicIndex","findIndex","splice","issueIndices","forEach","issue","index","sort","a","b","moveIssue","issueId","Error","createIssueAPI","deleteIssueAPI","idx","updateIssueAPI","updatedIssue","getSwimlanes","issues","epics","map","epicIssues","KanbanBoard","_s","_columnsByLane$editIs","setIssues","setEpics","projectName","setProjectName","openSwimlanes","setOpenSwimlanes","customTitles","setCustomTitles","createLaneId","setCreateLaneId","newTaskText","setNewTaskText","newTaskType","setNewTaskType","selectedIssue","setSelectedIssue","editIssue","setEditIssue","showCreateEpic","setShowCreateEpic","showDeleteEpic","setShowDeleteEpic","newEpicName","setNewEpicName","epicToDelete","setEpicToDelete","columnsByLane","setColumnsByLane","columnModal","setColumnModal","columnInput","setColumnInput","hoveredAssigneeId","setHoveredAssigneeId","modalPosition","setModalPosition","top","left","isMobile","setIsMobile","activeSwimlane","setActiveSwimlane","modalDrag","setModalDrag","isDragging","position","x","y","startPosition","modalRef","newSubtaskText","setNewSubtaskText","checkScreenSize","window","innerWidth","addEventListener","removeEventListener","fetchData","projectNameData","issuesData","epicsData","all","lanes","initialOpen","initialTitles","initialCols","lane","slice","err","console","error","addSubtask","trim","newSubtask","Date","now","prev","toggleSubtask","subtaskId","subtask","deleteSubtask","handleSubtaskKeyPress","e","key","preventDefault","handleModalMouseDown","target","closest","clientX","clientY","handleModalMouseMove","newX","newY","handleModalMouseUp","document","body","style","cursor","userSelect","openAddColumnModal","laneId","colIndex","rect","currentTarget","getBoundingClientRect","bottom","scrollY","scrollX","openEditColumnModal","handleAddColumn","alert","cols","includes","toLowerCase","handleEditColumn","oldCol","updatedIssues","handleDeleteColumn","removedCol","toggleSwimlane","byStatus","collection","onDragStart","dataTransfer","setData","onDrop","targetStatus","swimlaneId","getData","srcLaneId","refreshed","onDragOver","handleCreateClick","handleCreateSubmit","newIssue","Math","random","toString","toISOString","split","handleOpenModal","handleUpdateField","field","value","handleSave","handleReset","handleCreateEpic","updatedEpics","handleDeleteEpic","_epics$find","confirm","refreshedIssues","refreshedEpics","copy","toggleMobileSwimlane","swimlanes","getSubtaskProgress","total","percentage","st","round","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","isOpen","statuses","onClick","issuesForStatus","toUpperCase","rows","placeholder","isHovered","draggable","onMouseEnter","onMouseLeave","right","zIndex","stopPropagation","transform","minWidth","maxWidth","padding","borderRadius","background","boxShadow","marginBottom","fontWeight","fontSize","color","autoFocus","width","border","boxSizing","display","justifyContent","gap","flexWrap","btnStyle","cancel","create","delete","ref","onMouseDown","charAt","disabled","checked","onKeyPress","_c","backgroundColor","$RefreshReg$"],"sources":["C:/Users/battina srinuvasurao/OneDrive/Desktop/userstool/src/components/boards/KanbanBoard.js"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// this code is ok\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const mockIssues = [\r\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\r\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\r\n// ];\r\n\r\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\r\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\r\n// const mockProjects = [\r\n//   { id: 'p1', name: 'E-Commerce Platform' },\r\n//   { id: 'p2', name: 'API Gateway Service' },\r\n//   { id: 'p3', name: 'Mobile App Development' }\r\n// ];\r\n\r\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\r\n\r\n// const listIssues = async (projectId) => {\r\n//   await simulateApiDelay();\r\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\r\n// };\r\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\r\n// const getProjectName = async (projectId) => {\r\n//   await simulateApiDelay();\r\n//   const project = mockProjects.find(p => p.id === projectId);\r\n//   return project ? project.name : 'Untitled Project';\r\n// };\r\n// const createEpicAPI = async (epicName) => {\r\n//   await simulateApiDelay();\r\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\r\n//   mockEpics.push(newEpic);\r\n//   return newEpic;\r\n// };\r\n// const deleteEpicAPI = async (epicId) => {\r\n//   await simulateApiDelay();\r\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\r\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\r\n//   const issueIndices = [];\r\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\r\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\r\n// };\r\n// const moveIssue = async (issueId, status) => {\r\n//   await simulateApiDelay();\r\n//   const issue = mockIssues.find(i => i.id === issueId);\r\n//   if (!issue) throw new Error('Issue not found');\r\n//   issue.status = status;\r\n// };\r\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\r\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\r\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\r\n\r\n// const getSwimlanes = (issues, epics) =>\r\n//   epics.map(epic => {\r\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\r\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\r\n//   });\r\n\r\n// export default function KanbanBoard() {\r\n//   const { projectId } = useParams();\r\n//   const [issues, setIssues] = useState([]);\r\n//   const [epics, setEpics] = useState([]);\r\n//   const [projectName, setProjectName] = useState('');\r\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\r\n//   const [customTitles, setCustomTitles] = useState({});\r\n//   const [createLaneId, setCreateLaneId] = useState(null);\r\n//   const [newTaskText, setNewTaskText] = useState('');\r\n//   const [newTaskType, setNewTaskType] = useState('Task');\r\n//   const [selectedIssue, setSelectedIssue] = useState(null);\r\n//   const [editIssue, setEditIssue] = useState(null);\r\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\r\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\r\n//   const [newEpicName, setNewEpicName] = useState('');\r\n//   const [epicToDelete, setEpicToDelete] = useState('');\r\n//   const [columnsByLane, setColumnsByLane] = useState({});\r\n//   const [columnModal, setColumnModal] = useState(null);\r\n//   const [columnInput, setColumnInput] = useState('');\r\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\r\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\r\n//   const [isMobile, setIsMobile] = useState(false);\r\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const checkScreenSize = () => {\r\n//       setIsMobile(window.innerWidth < 768);\r\n//     };\r\n//     checkScreenSize();\r\n//     window.addEventListener('resize', checkScreenSize);\r\n//     return () => window.removeEventListener('resize', checkScreenSize);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const projectNameData = projectId ? await getProjectName(projectId) : 'All Projects';\r\n//         const [issuesData, epicsData] = await Promise.all([\r\n//           listIssues(projectId),\r\n//           listEpics()\r\n//         ]);\r\n//         setIssues(issuesData);\r\n//         setEpics(epicsData);\r\n//         setProjectName(projectNameData);\r\n//         const lanes = getSwimlanes(issuesData, epicsData);\r\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\r\n//         lanes.forEach(lane => {\r\n//           initialOpen[lane.id] = true;\r\n//           initialTitles[lane.id] = lane.title;\r\n//           initialCols[lane.id] = defaultStatuses.slice();\r\n//         });\r\n//         setOpenSwimlanes(initialOpen);\r\n//         setCustomTitles(initialTitles);\r\n//         setColumnsByLane(initialCols);\r\n//       } catch (err) {\r\n//         console.error(err);\r\n//       }\r\n//     };\r\n//     fetchData();\r\n//   }, [projectId]);\r\n\r\n//   const openAddColumnModal = (e, laneId, colIndex) => {\r\n//     const rect = e.currentTarget.getBoundingClientRect();\r\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\r\n//     setColumnModal({ laneId, colIndex, type: 'add' });\r\n//     setColumnInput('');\r\n//   };\r\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\r\n//     const rect = e.currentTarget.getBoundingClientRect();\r\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\r\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\r\n//     setColumnInput(status);\r\n//   };\r\n//   const handleAddColumn = () => {\r\n//     const name = columnInput.trim();\r\n//     if (!name) return alert('Column name is required');\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[columnModal.laneId]];\r\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\r\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\r\n//       return { ...prev, [columnModal.laneId]: cols };\r\n//     });\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const handleEditColumn = () => {\r\n//     const name = columnInput.trim();\r\n//     if (!name) return alert('Column name is required');\r\n//     const { laneId, colIndex } = columnModal;\r\n//     const oldCol = columnsByLane[laneId][colIndex];\r\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\r\n//       alert('Column name already exists');\r\n//       return;\r\n//     }\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[laneId]];\r\n//       cols[colIndex] = name.toLowerCase();\r\n//       return { ...prev, [laneId]: cols };\r\n//     });\r\n//     const updatedIssues = issues.map(issue =>\r\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\r\n//     );\r\n//     setIssues(updatedIssues);\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const handleDeleteColumn = () => {\r\n//     const { laneId, colIndex } = columnModal;\r\n//     const removedCol = columnsByLane[laneId][colIndex];\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[laneId]];\r\n//       cols.splice(colIndex, 1);\r\n//       return { ...prev, [laneId]: cols };\r\n//     });\r\n//     const updatedIssues = issues.map(issue =>\r\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\r\n//     );\r\n//     setIssues(updatedIssues);\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\r\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\r\n\r\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\r\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const issueId = e.dataTransfer.getData('text/plain');\r\n//       const issue = issues.find(i => i.id === issueId);\r\n//       const srcLaneId = issue.epic || issue.projectId;\r\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\r\n//         await moveIssue(issueId, targetStatus);\r\n//         const refreshed = await listIssues(projectId);\r\n//         setIssues(refreshed);\r\n//       }\r\n//     } catch (err) { console.error(err); }\r\n//   };\r\n//   const onDragOver = e => e.preventDefault();\r\n\r\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\r\n//   const handleCreateSubmit = async lane => {\r\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\r\n//     const newIssue = {\r\n//       id: Math.random().toString(36).slice(2),\r\n//       epic: lane.id,\r\n//       projectId: lane.id,\r\n//       epicName: lane.title,\r\n//       title: newTaskText,\r\n//       status: 'backlog',\r\n//       assignee: '',\r\n//       type: newTaskType,\r\n//       storyPoints: '',\r\n//       labels: [],\r\n//       dueDate: '',\r\n//       reporter: 'system',\r\n//       priority: 'Medium',\r\n//       startDate: new Date().toISOString().split('T')[0],\r\n//       description: '',\r\n//       subtasks: '',\r\n//       comments: ''\r\n//     };\r\n//     try {\r\n//       await createIssueAPI(newIssue);\r\n//       const refreshed = await listIssues(projectId);\r\n//       setIssues(refreshed);\r\n//       setCreateLaneId(null);\r\n//     } catch (err) { console.error(err); }\r\n//   };\r\n\r\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\r\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\r\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\r\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\r\n\r\n//   const handleCreateEpic = async () => {\r\n//     if (!newEpicName.trim()) {\r\n//       alert('Epic name is required');\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await createEpicAPI(newEpicName);\r\n//       const updatedEpics = await listEpics();\r\n//       setEpics(updatedEpics);\r\n//       setNewEpicName('');\r\n//       setShowCreateEpic(false);\r\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\r\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\r\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\r\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\r\n//     } catch (error) {\r\n//       console.error('Error creating epic:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteEpic = async () => {\r\n//     if (!epicToDelete) {\r\n//       alert('Please select an epic to delete');\r\n//       return;\r\n//     }\r\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await deleteEpicAPI(epicToDelete);\r\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\r\n//         listIssues(projectId),\r\n//         listEpics()\r\n//       ]);\r\n//       setIssues(refreshedIssues);\r\n//       setEpics(refreshedEpics);\r\n//       setEpicToDelete('');\r\n//       setShowDeleteEpic(false);\r\n//       setColumnsByLane(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//       setOpenSwimlanes(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//       setCustomTitles(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error deleting epic:', error);\r\n//     }\r\n//   };\r\n\r\n//   const toggleMobileSwimlane = (laneId) => {\r\n//     if (activeSwimlane === laneId) {\r\n//       setActiveSwimlane(null);\r\n//     } else {\r\n//       setActiveSwimlane(laneId);\r\n//     }\r\n//   };\r\n\r\n//   const swimlanes = getSwimlanes(issues, epics);\r\n\r\n//   return (\r\n//     <div className=\"board-wrap\">\r\n//       {/* Project Name Header */}\r\n//       <div className=\"project-header\">\r\n//         <h1 className=\"project-title\">{projectName}</h1>\r\n//         <div className=\"project-stats\">\r\n//           <span className=\"project-stat\">{epics.length} Epics</span>\r\n//           <span className=\"project-stat\">{issues.length} Issues</span>\r\n//           <span className=\"project-stat\">\r\n//             {issues.filter(issue => issue.status === 'done').length} Completed\r\n//           </span>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {isMobile && (\r\n//         <div className=\"mobile-swimlane-selector\">\r\n//           <select\r\n//             value={activeSwimlane || ''}\r\n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\r\n//             className=\"mobile-select\"\r\n//           >\r\n//             <option value=\"\">All Swimlanes</option>\r\n//             {swimlanes.map(lane => (\r\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\r\n//             ))}\r\n//           </select>\r\n//         </div>\r\n//       )}\r\n\r\n//       {swimlanes.map(lane => {\r\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\r\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\r\n\r\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\r\n//           return null;\r\n//         }\r\n\r\n//         return (\r\n//           <section className=\"swimlane\" key={lane.id}>\r\n//             <header className=\"swimlane-header\">\r\n//               {!isMobile && (\r\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\r\n//                   {isOpen ? '▼' : '▶'}\r\n//                 </button>\r\n//               )}\r\n//               <span className=\"swimlane-icon\">⚡</span>\r\n//               <input\r\n//                 className=\"swimlane-title-input\"\r\n//                 value={customTitles[lane.id] || ''}\r\n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))}\r\n//               />\r\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\r\n//               {isMobile && (\r\n//                 <button\r\n//                   className=\"mobile-swimlane-toggle\"\r\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\r\n//                 >\r\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\r\n//                 </button>\r\n//               )}\r\n//             </header>\r\n//             {isOpen && (\r\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\r\n//                 {statuses.map((status, idx) => {\r\n//                   const issuesForStatus = byStatus(lane.issues, status);\r\n//                   return (\r\n//                     <div\r\n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`}\r\n//                       key={status}\r\n//                       onDragOver={onDragOver}\r\n//                       onDrop={e => onDrop(e, status, lane.id)}\r\n//                     >\r\n//                       <div className=\"col-header\">\r\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\r\n//                         {!isMobile && (\r\n//                           <span className=\"col-icons\">\r\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\r\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\r\n//                           </span>\r\n//                         )}\r\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\r\n//                       </div>\r\n//                       <div className=\"col-create\">\r\n//                         {status === 'backlog' && (\r\n//                           createLaneId === lane.id ? (\r\n//                             <div className=\"create-card\">\r\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\r\n//                               <div className=\"create-actions\">\r\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\r\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\r\n//                                 </select>\r\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\r\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\r\n//                               </div>\r\n//                             </div>\r\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\r\n//                         )}\r\n//                       </div>\r\n//                       {issuesForStatus.map(issue => {\r\n//                         const isHovered = hoveredAssigneeId === issue.id;\r\n//                         return (\r\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\r\n//                             <div className=\"card-top\">\r\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\r\n//                               <span className=\"card-id\">{issue.id}</span>\r\n//                             </div>\r\n//                             <div className=\"card-title\">{issue.title}</div>\r\n//                             <div className=\"card-meta\">\r\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\r\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\r\n//                               {issue.assignee && (\r\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\r\n//                                   👤\r\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\r\n//                                 </span>\r\n//                               )}\r\n//                             </div>\r\n//                           </div>\r\n//                         );\r\n//                       })}\r\n//                     </div>\r\n//                   );\r\n//                 })}\r\n//               </div>\r\n//             )}\r\n//           </section>\r\n//         );\r\n//       })}\r\n//       {/* Column Add/Edit modal */}\r\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\r\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\r\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\r\n//             position: isMobile ? 'fixed' : 'absolute',\r\n//             top: isMobile ? '50%' : modalPosition.top,\r\n//             left: isMobile ? '50%' : modalPosition.left,\r\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\r\n//             minWidth: isMobile ? '90vw' : 280,\r\n//             maxWidth: isMobile ? '95vw' : 320,\r\n//             padding: 20,\r\n//             borderRadius: 10,\r\n//             background: 'white',\r\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\r\n//             zIndex: 1100\r\n//           }}>\r\n//             {columnModal.type === 'add' ? (\r\n//               <>\r\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\r\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\r\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\r\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\r\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\r\n//                 </div>\r\n//               </>\r\n//             ) : (\r\n//               <>\r\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\r\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\r\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\r\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\r\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\r\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\r\n//                 </div>\r\n//               </>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//       {/* Issue modal */}\r\n//       {selectedIssue && editIssue && (\r\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\r\n//           <div className={`modal ${isMobile ? 'mobile-modal' : ''}`} onClick={e => e.stopPropagation()}>\r\n//             <div className=\"modal-header\">\r\n//               <h2>{editIssue.epicName}</h2>\r\n//               <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\r\n//             </div>\r\n//             <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\r\n//               <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\r\n//               <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\r\n//               <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\r\n//               <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\r\n//               <div className=\"modal-field\"><label>Status</label>\r\n//                 <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\r\n//                   {columnsByLane[editIssue.epic]?.map(st => <option key={st} value={st}>{st}</option>) || defaultStatuses.map(st => <option key={st} value={st}>{st}</option>)}\r\n//                 </select>\r\n//               </div>\r\n//               <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\r\n//               <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\r\n//               <div className=\"modal-field\"><label>Priority</label>\r\n//                 <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\r\n//                   <option>Low</option><option>Medium</option><option>High</option>\r\n//                 </select>\r\n//               </div>\r\n//               <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\r\n//               <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\r\n//             </div>\r\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\", alignItems: 'center' }}>\r\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\r\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\r\n//               <button className=\"modal-delete-btn\" onClick={async () => {\r\n//                 if (window.confirm('Delete this issue?')) {\r\n//                   await deleteIssueAPI(selectedIssue.id);\r\n//                   const refreshed = await listIssues(projectId);\r\n//                   setIssues(refreshed);\r\n//                   setSelectedIssue(null);\r\n//                 }\r\n//               }}>🗑</button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Inline CSS styles */}\r\n// <style>{`\r\n//   body {\r\n//     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n//     background-color: #f5f6f8;\r\n//     margin: 0;\r\n//     padding: 16px;\r\n//   }\r\n//   .board-wrap {\r\n//     max-width: 100%;\r\n//     overflow-x: auto;\r\n//   }\r\n//   .project-header {\r\n//     background: white;\r\n//     border-radius: 8px;\r\n//     padding: 20px 24px;\r\n//     margin-bottom: 20px;\r\n//     box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//     border-left: 4px solid #1976d2;\r\n//   }\r\n//   .project-title {\r\n//     margin: 0 0 12px 0;\r\n//     font-size: 28px;\r\n//     font-weight: 700;\r\n//     color: #172b4d;\r\n//     line-height: 1.2;\r\n//   }\r\n//   .project-stats {\r\n//     display: flex;\r\n//     gap: 20px;\r\n//     flex-wrap: wrap;\r\n//   }\r\n//   .project-stat {\r\n//     background: #f5f6f8;\r\n//     padding: 6px 12px;\r\n//     border-radius: 16px;\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     color: #5e6c84;\r\n//     display: flex;\r\n//     align-items: center;\r\n//     gap: 4px;\r\n//   }\r\n//   .project-stat:before {\r\n//     content: \"•\";\r\n//     color: #1976d2;\r\n//     font-weight: bold;\r\n//   }\r\n//   @media (min-width: 768px) {\r\n//     .swimlane {\r\n//       background: white;\r\n//       border-radius: 8px;\r\n//       margin-bottom: 16px;\r\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//       overflow: hidden;\r\n//     }\r\n//     .kanban-row {\r\n//       display: flex;\r\n//       padding: 16px;\r\n//       gap: 12px;\r\n//       overflow-x: auto;\r\n//     }\r\n//     .kanban-column {\r\n//       flex: 0 0 260px;\r\n//       background: #f5f6f8;\r\n//       border-radius: 6px;\r\n//       padding: 12px;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//       border: 1px solid #dfe5e5;\r\n//       user-select: none;\r\n//       min-height: 400px;\r\n//     }\r\n//     .modal {\r\n//       background: white;\r\n//       border-radius: 8px;\r\n//       padding: 24px;\r\n//       width: 700px;\r\n//       max-height: 80vh;\r\n//       display: grid;\r\n//       grid-template-columns: 1fr 1fr 1fr;\r\n//       gap: 16px;\r\n//       overflow-y: auto;\r\n//       position: relative;\r\n//     }\r\n//   }\r\n//   @media (max-width: 767px) {\r\n//     body {\r\n//       padding: 8px;\r\n//     }\r\n//     .project-header {\r\n//       padding: 16px;\r\n//       margin-bottom: 16px;\r\n//       border-left-width: 3px;\r\n//     }\r\n//     .project-title {\r\n//       font-size: 22px;\r\n//       margin-bottom: 10px;\r\n//     }\r\n//     .project-stats {\r\n//       gap: 12px;\r\n//     }\r\n//     .project-stat {\r\n//       font-size: 12px;\r\n//       padding: 4px 10px;\r\n//     }\r\n//     .mobile-swimlane-selector {\r\n//       margin-bottom: 16px;\r\n//       position: sticky;\r\n//       top: 0;\r\n//       background: white;\r\n//       padding: 12px;\r\n//       border-radius: 8px;\r\n//       box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n//       z-index: 100;\r\n//     }\r\n//     .mobile-select {\r\n//       width: 100%;\r\n//       padding: 12px;\r\n//       border: 1px solid #dfe5e5;\r\n//       border-radius: 6px;\r\n//       font-size: 16px;\r\n//       background: white;\r\n//     }\r\n//     .swimlane {\r\n//       background: white;\r\n//       border-radius: 8px;\r\n//       margin-bottom: 12px;\r\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//       overflow: hidden;\r\n//     }\r\n//     .swimlane-header {\r\n//       display: flex;\r\n//       align-items: center;\r\n//       padding: 12px;\r\n//       background: #fafbfc;\r\n//       border-bottom: 1px solid #dfe5e5;\r\n//       font-weight: 600;\r\n//       font-size: 14px;\r\n//       color: #172b4d;\r\n//       position: relative;\r\n//     }\r\n//     .mobile-swimlane-toggle {\r\n//       background: none;\r\n//       border: none;\r\n//       font-size: 16px;\r\n//       color: #5e6c84;\r\n//       margin-left: auto;\r\n//       padding: 4px 8px;\r\n//     }\r\n//     .kanban-row.mobile-view {\r\n//       display: block;\r\n//       padding: 8px;\r\n//       overflow-x: auto;\r\n//       white-space: nowrap;\r\n//     }\r\n//     .kanban-column.mobile-column {\r\n//       display: inline-block;\r\n//       vertical-align: top;\r\n//       width: 280px;\r\n//       margin-right: 8px;\r\n//       background: #f5f6f8;\r\n//       border-radius: 6px;\r\n//       padding: 8px;\r\n//       border: 1px solid #dfe5e5;\r\n//       user-select: none;\r\n//       min-height: 300px;\r\n//     }\r\n//     .col-header {\r\n//       display: flex;\r\n//       align-items: center;\r\n//       margin-bottom: 8px;\r\n//       gap: 6px;\r\n//     }\r\n//     .col-title {\r\n//       font-weight: 600;\r\n//       font-size: 11px;\r\n//       color: #5e6c84;\r\n//       text-transform: uppercase;\r\n//       letter-spacing: 0.5px;\r\n//       flex-grow: 1;\r\n//     }\r\n//     .card-item {\r\n//       background: white;\r\n//       border-radius: 6px;\r\n//       padding: 10px;\r\n//       box-shadow: 0 0 2px rgba(0,0,0,0.1);\r\n//       cursor: pointer;\r\n//       user-select: none;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 6px;\r\n//       border: 1px solid #dfe5e5;\r\n//       margin-bottom: 8px;\r\n//     }\r\n//     .card-title {\r\n//       font-weight: 600;\r\n//       font-size: 13px;\r\n//       color: #2b3a59;\r\n//       line-height: 1.3;\r\n//     }\r\n//     .card-meta {\r\n//       display: flex;\r\n//       gap: 6px;\r\n//       font-size: 10px;\r\n//       color: #6b7c93;\r\n//       align-items: center;\r\n//       flex-wrap: wrap;\r\n//     }\r\n//     .modal.mobile-modal {\r\n//       width: 95vw;\r\n//       max-height: 90vh;\r\n//       padding: 16px;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//     }\r\n//     .modal-content.mobile-modal-content {\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//       overflow-y: auto;\r\n//     }\r\n//     .modal-field {\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 4px;\r\n//     }\r\n//     .modal-field input, .modal-field textarea, .modal-field select {\r\n//       padding: 10px;\r\n//       font-size: 16px;\r\n//     }\r\n//     .modal-actions {\r\n//       display: flex;\r\n//       gap: 8px;\r\n//       justify-content: space-between;\r\n//       margin-top: 16px;\r\n//     }\r\n//     .modal-actions button {\r\n//       flex: 1;\r\n//       padding: 12px;\r\n//       font-size: 16px;\r\n//     }\r\n//   }\r\n//   .swimlane-header {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     padding: 12px 16px;\r\n//     background: #fafbfc;\r\n//     border-bottom: 1px solid #dfe5e5;\r\n//     font-weight: 600;\r\n//     font-size: 14px;\r\n//     color: #172b4d;\r\n//   }\r\n//   .swimlane-toggle, .swimlane-icon {\r\n//     color: #5e6c84;\r\n//     margin-right: 8px;\r\n//     cursor: pointer;\r\n//   }\r\n//   .swimlane-toggle {\r\n//     border: none;\r\n//     background: transparent;\r\n//     font-size: 14px;\r\n//   }\r\n//   .swimlane-icon {\r\n//     font-size: 18px;\r\n//   }\r\n//   .swimlane-title-input {\r\n//     border: 1px solid #dfe5e5;\r\n//     border-radius: 4px;\r\n//     padding: 4px 8px;\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     background: white;\r\n//     margin-right: 8px;\r\n//     min-width: 150px;\r\n//     color: #172b4d;\r\n//   }\r\n//   .swimlane-title-input:focus {\r\n//     outline: none;\r\n//     border-color: #1976d2;\r\n//   }\r\n//   .swimlane-count {\r\n//     color: #5e6c84;\r\n//     font-size: 12px;\r\n//     font-weight: normal;\r\n//   }\r\n//   .col-header {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     margin-bottom: 4px;\r\n//     gap: 6px;\r\n//   }\r\n//   .col-title {\r\n//     font-weight: 600;\r\n//     font-size: 12px;\r\n//     color: #5e6c84;\r\n//     text-transform: uppercase;\r\n//     letter-spacing: 0.5px;\r\n//     flex-grow: 1;\r\n//   }\r\n//   .col-count {\r\n//     background: #dfe5e5;\r\n//     color: #5e6c84;\r\n//     border-radius: 12px;\r\n//     padding: 2px 8px;\r\n//     font-size: 11px;\r\n//     font-weight: 600;\r\n//     min-width: 20px;\r\n//     text-align: center;\r\n//   }\r\n//   .col-icons {\r\n//     display: flex;\r\n//     gap: 6px;\r\n//   }\r\n//   .col-icon {\r\n//     cursor: pointer;\r\n//     color: #5e6c84;\r\n//     font-size: 18px;\r\n//     background: none;\r\n//     border: none;\r\n//     padding: 0;\r\n//   }\r\n//   .create-card {\r\n//     background: white;\r\n//     padding: 10px;\r\n//     border-radius: 6px;\r\n//     box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 10px;\r\n//   }\r\n//   .card-item {\r\n//     background: white;\r\n//     border-radius: 8px;\r\n//     padding: 12px;\r\n//     box-shadow: 0 0 2px rgba(0,0,0,0.1);\r\n//     cursor: pointer;\r\n//     user-select: none;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 6px;\r\n//     border: 1px solid #dfe5e5;\r\n//     transition: box-shadow 0.2s ease, border-color 0.2s ease;\r\n//   }\r\n//   .card-item:hover {\r\n//     box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\r\n//     border-color: #a2adba;\r\n//   }\r\n//   .modal-overlay {\r\n//     position: fixed;\r\n//     top: 0; left: 0; right: 0; bottom: 0;\r\n//     background: rgba(0,0,0,0.5);\r\n//     display: flex;\r\n//     align-items: center;\r\n//     justify-content: center;\r\n//     z-index: 1000;\r\n//   }\r\n//   button {\r\n//     cursor: pointer;\r\n//     transition: background-color 0.2s;\r\n//   }\r\n//   button:hover {\r\n//     opacity: 0.9;\r\n//   }\r\n//   @media (max-width: 767px) {\r\n//     button, .card-item, .col-icon {\r\n//       min-height: 44px;\r\n//       min-width: 44px;\r\n//     }\r\n//     .card-item {\r\n//       touch-action: manipulation;\r\n//     }\r\n//   }\r\n// `}</style>\r\n\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// const btnStyle = {\r\n//   cancel: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#5e6c84',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   },\r\n//   create: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#1976d2',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   },\r\n//   delete: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#d32f2f',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   }\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// for model dialog style  code ok \r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState, useRef } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const mockIssues = [\r\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\r\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\r\n// ];\r\n\r\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\r\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\r\n// const mockProjects = [\r\n//   { id: 'p1', name: 'E-Commerce Platform' },\r\n//   { id: 'p2', name: 'API Gateway Service' },\r\n//   { id: 'p3', name: 'Mobile App Development' }\r\n// ];\r\n\r\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\r\n\r\n// const listIssues = async (projectId) => {\r\n//   await simulateApiDelay();\r\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\r\n// };\r\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\r\n// const getProjectName = async (projectId) => {\r\n//   await simulateApiDelay();\r\n//   const project = mockProjects.find(p => p.id === projectId);\r\n//   return project ? project.name : 'Untitled Project';\r\n// };\r\n// const createEpicAPI = async (epicName) => {\r\n//   await simulateApiDelay();\r\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\r\n//   mockEpics.push(newEpic);\r\n//   return newEpic;\r\n// };\r\n// const deleteEpicAPI = async (epicId) => {\r\n//   await simulateApiDelay();\r\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\r\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\r\n//   const issueIndices = [];\r\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\r\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\r\n// };\r\n// const moveIssue = async (issueId, status) => {\r\n//   await simulateApiDelay();\r\n//   const issue = mockIssues.find(i => i.id === issueId);\r\n//   if (!issue) throw new Error('Issue not found');\r\n//   issue.status = status;\r\n// };\r\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\r\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\r\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\r\n\r\n// const getSwimlanes = (issues, epics) =>\r\n//   epics.map(epic => {\r\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\r\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\r\n//   });\r\n\r\n// export default function KanbanBoard() {\r\n//   const { projectId } = useParams();\r\n//   const [issues, setIssues] = useState([]);\r\n//   const [epics, setEpics] = useState([]);\r\n//   const [projectName, setProjectName] = useState('');\r\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\r\n//   const [customTitles, setCustomTitles] = useState({});\r\n//   const [createLaneId, setCreateLaneId] = useState(null);\r\n//   const [newTaskText, setNewTaskText] = useState('');\r\n//   const [newTaskType, setNewTaskType] = useState('Task');\r\n//   const [selectedIssue, setSelectedIssue] = useState(null);\r\n//   const [editIssue, setEditIssue] = useState(null);\r\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\r\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\r\n//   const [newEpicName, setNewEpicName] = useState('');\r\n//   const [epicToDelete, setEpicToDelete] = useState('');\r\n//   const [columnsByLane, setColumnsByLane] = useState({});\r\n//   const [columnModal, setColumnModal] = useState(null);\r\n//   const [columnInput, setColumnInput] = useState('');\r\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\r\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\r\n//   const [isMobile, setIsMobile] = useState(false);\r\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\r\n  \r\n//   // Draggable modal state\r\n//   const [modalDrag, setModalDrag] = useState({\r\n//     isDragging: false,\r\n//     position: { x: 0, y: 0 },\r\n//     startPosition: { x: 0, y: 0 }\r\n//   });\r\n//   const modalRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const checkScreenSize = () => {\r\n//       setIsMobile(window.innerWidth < 768);\r\n//     };\r\n//     checkScreenSize();\r\n//     window.addEventListener('resize', checkScreenSize);\r\n//     return () => window.removeEventListener('resize', checkScreenSize);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const projectNameData = projectId ? await getProjectName(projectId) : 'All Projects';\r\n//         const [issuesData, epicsData] = await Promise.all([\r\n//           listIssues(projectId),\r\n//           listEpics()\r\n//         ]);\r\n//         setIssues(issuesData);\r\n//         setEpics(epicsData);\r\n//         setProjectName(projectNameData);\r\n//         const lanes = getSwimlanes(issuesData, epicsData);\r\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\r\n//         lanes.forEach(lane => {\r\n//           initialOpen[lane.id] = true;\r\n//           initialTitles[lane.id] = lane.title;\r\n//           initialCols[lane.id] = defaultStatuses.slice();\r\n//         });\r\n//         setOpenSwimlanes(initialOpen);\r\n//         setCustomTitles(initialTitles);\r\n//         setColumnsByLane(initialCols);\r\n//       } catch (err) {\r\n//         console.error(err);\r\n//       }\r\n//     };\r\n//     fetchData();\r\n//   }, [projectId]);\r\n\r\n//   // Draggable modal functions\r\n//   const handleModalMouseDown = (e) => {\r\n//     if (isMobile) return; // Disable dragging on mobile\r\n    \r\n//     // Only start dragging if clicking on the header (not on buttons or inputs)\r\n//     if (e.target.closest('.modal-close-btn') || \r\n//         e.target.closest('input') || \r\n//         e.target.closest('select') || \r\n//         e.target.closest('textarea') ||\r\n//         e.target.closest('button')) {\r\n//       return;\r\n//     }\r\n\r\n//     setModalDrag({\r\n//       isDragging: true,\r\n//       position: modalDrag.position,\r\n//       startPosition: {\r\n//         x: e.clientX - modalDrag.position.x,\r\n//         y: e.clientY - modalDrag.position.y\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   const handleModalMouseMove = (e) => {\r\n//     if (!modalDrag.isDragging || isMobile) return;\r\n\r\n//     const newX = e.clientX - modalDrag.startPosition.x;\r\n//     const newY = e.clientY - modalDrag.startPosition.y;\r\n\r\n//     setModalDrag(prev => ({\r\n//       ...prev,\r\n//       position: { x: newX, y: newY }\r\n//     }));\r\n//   };\r\n\r\n//   const handleModalMouseUp = () => {\r\n//     if (isMobile) return;\r\n//     setModalDrag(prev => ({ ...prev, isDragging: false }));\r\n//   };\r\n\r\n//   // Reset modal position when closed\r\n//   useEffect(() => {\r\n//     if (!selectedIssue) {\r\n//       setModalDrag({\r\n//         isDragging: false,\r\n//         position: { x: 0, y: 0 },\r\n//         startPosition: { x: 0, y: 0 }\r\n//       });\r\n//     }\r\n//   }, [selectedIssue]);\r\n\r\n//   // Add event listeners for dragging\r\n//   useEffect(() => {\r\n//     if (modalDrag.isDragging) {\r\n//       document.addEventListener('mousemove', handleModalMouseMove);\r\n//       document.addEventListener('mouseup', handleModalMouseUp);\r\n//       document.body.style.cursor = 'grabbing';\r\n//       document.body.style.userSelect = 'none';\r\n//     } else {\r\n//       document.removeEventListener('mousemove', handleModalMouseMove);\r\n//       document.removeEventListener('mouseup', handleModalMouseUp);\r\n//       document.body.style.cursor = '';\r\n//       document.body.style.userSelect = '';\r\n//     }\r\n\r\n//     return () => {\r\n//       document.removeEventListener('mousemove', handleModalMouseMove);\r\n//       document.removeEventListener('mouseup', handleModalMouseUp);\r\n//       document.body.style.cursor = '';\r\n//       document.body.style.userSelect = '';\r\n//     };\r\n//   }, [modalDrag.isDragging]);\r\n\r\n//   const openAddColumnModal = (e, laneId, colIndex) => {\r\n//     const rect = e.currentTarget.getBoundingClientRect();\r\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\r\n//     setColumnModal({ laneId, colIndex, type: 'add' });\r\n//     setColumnInput('');\r\n//   };\r\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\r\n//     const rect = e.currentTarget.getBoundingClientRect();\r\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\r\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\r\n//     setColumnInput(status);\r\n//   };\r\n//   const handleAddColumn = () => {\r\n//     const name = columnInput.trim();\r\n//     if (!name) return alert('Column name is required');\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[columnModal.laneId]];\r\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\r\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\r\n//       return { ...prev, [columnModal.laneId]: cols };\r\n//     });\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const handleEditColumn = () => {\r\n//     const name = columnInput.trim();\r\n//     if (!name) return alert('Column name is required');\r\n//     const { laneId, colIndex } = columnModal;\r\n//     const oldCol = columnsByLane[laneId][colIndex];\r\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\r\n//       alert('Column name already exists');\r\n//       return;\r\n//     }\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[laneId]];\r\n//       cols[colIndex] = name.toLowerCase();\r\n//       return { ...prev, [laneId]: cols };\r\n//     });\r\n//     const updatedIssues = issues.map(issue =>\r\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\r\n//     );\r\n//     setIssues(updatedIssues);\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const handleDeleteColumn = () => {\r\n//     const { laneId, colIndex } = columnModal;\r\n//     const removedCol = columnsByLane[laneId][colIndex];\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[laneId]];\r\n//       cols.splice(colIndex, 1);\r\n//       return { ...prev, [laneId]: cols };\r\n//     });\r\n//     const updatedIssues = issues.map(issue =>\r\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\r\n//     );\r\n//     setIssues(updatedIssues);\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\r\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\r\n\r\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\r\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const issueId = e.dataTransfer.getData('text/plain');\r\n//       const issue = issues.find(i => i.id === issueId);\r\n//       const srcLaneId = issue.epic || issue.projectId;\r\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\r\n//         await moveIssue(issueId, targetStatus);\r\n//         const refreshed = await listIssues(projectId);\r\n//         setIssues(refreshed);\r\n//       }\r\n//     } catch (err) { console.error(err); }\r\n//   };\r\n//   const onDragOver = e => e.preventDefault();\r\n\r\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\r\n//   const handleCreateSubmit = async lane => {\r\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\r\n//     const newIssue = {\r\n//       id: Math.random().toString(36).slice(2),\r\n//       epic: lane.id,\r\n//       projectId: lane.id,\r\n//       epicName: lane.title,\r\n//       title: newTaskText,\r\n//       status: 'backlog',\r\n//       assignee: '',\r\n//       type: newTaskType,\r\n//       storyPoints: '',\r\n//       labels: [],\r\n//       dueDate: '',\r\n//       reporter: 'system',\r\n//       priority: 'Medium',\r\n//       startDate: new Date().toISOString().split('T')[0],\r\n//       description: '',\r\n//       subtasks: '',\r\n//       comments: ''\r\n//     };\r\n//     try {\r\n//       await createIssueAPI(newIssue);\r\n//       const refreshed = await listIssues(projectId);\r\n//       setIssues(refreshed);\r\n//       setCreateLaneId(null);\r\n//     } catch (err) { console.error(err); }\r\n//   };\r\n\r\n//   const handleOpenModal = (issue) => { \r\n//     setSelectedIssue(issue); \r\n//     setEditIssue({ ...issue }); \r\n//     // Reset position when opening new modal\r\n//     setModalDrag({\r\n//       isDragging: false,\r\n//       position: { x: 0, y: 0 },\r\n//       startPosition: { x: 0, y: 0 }\r\n//     });\r\n//   };\r\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\r\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\r\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\r\n\r\n//   const handleCreateEpic = async () => {\r\n//     if (!newEpicName.trim()) {\r\n//       alert('Epic name is required');\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await createEpicAPI(newEpicName);\r\n//       const updatedEpics = await listEpics();\r\n//       setEpics(updatedEpics);\r\n//       setNewEpicName('');\r\n//       setShowCreateEpic(false);\r\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\r\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\r\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\r\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\r\n//     } catch (error) {\r\n//       console.error('Error creating epic:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteEpic = async () => {\r\n//     if (!epicToDelete) {\r\n//       alert('Please select an epic to delete');\r\n//       return;\r\n//     }\r\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await deleteEpicAPI(epicToDelete);\r\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\r\n//         listIssues(projectId),\r\n//         listEpics()\r\n//       ]);\r\n//       setIssues(refreshedIssues);\r\n//       setEpics(refreshedEpics);\r\n//       setEpicToDelete('');\r\n//       setShowDeleteEpic(false);\r\n//       setColumnsByLane(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//       setOpenSwimlanes(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//       setCustomTitles(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error deleting epic:', error);\r\n//     }\r\n//   };\r\n\r\n//   const toggleMobileSwimlane = (laneId) => {\r\n//     if (activeSwimlane === laneId) {\r\n//       setActiveSwimlane(null);\r\n//     } else {\r\n//       setActiveSwimlane(laneId);\r\n//     }\r\n//   };\r\n\r\n//   const swimlanes = getSwimlanes(issues, epics);\r\n\r\n//   return (\r\n//     <div className=\"board-wrap\">\r\n//       {/* Project Name Header */}\r\n//       <div className=\"project-header\">\r\n//         <h1 className=\"project-title\">{projectName}</h1>\r\n//         <div className=\"project-stats\">\r\n//           <span className=\"project-stat\">{epics.length} Epics</span>\r\n//           <span className=\"project-stat\">{issues.length} Issues</span>\r\n//           <span className=\"project-stat\">\r\n//             {issues.filter(issue => issue.status === 'done').length} Completed\r\n//           </span>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {isMobile && (\r\n//         <div className=\"mobile-swimlane-selector\">\r\n//           <select\r\n//             value={activeSwimlane || ''}\r\n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\r\n//             className=\"mobile-select\"\r\n//           >\r\n//             <option value=\"\">All Swimlanes</option>\r\n//             {swimlanes.map(lane => (\r\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\r\n//             ))}\r\n//           </select>\r\n//         </div>\r\n//       )}\r\n\r\n//       {swimlanes.map(lane => {\r\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\r\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\r\n\r\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\r\n//           return null;\r\n//         }\r\n\r\n//         return (\r\n//           <section className=\"swimlane\" key={lane.id}>\r\n//             <header className=\"swimlane-header\">\r\n//               {!isMobile && (\r\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\r\n//                   {isOpen ? '▼' : '▶'}\r\n//                 </button>\r\n//               )}\r\n//               <span className=\"swimlane-icon\">⚡</span>\r\n//               <input\r\n//                 className=\"swimlane-title-input\"\r\n//                 value={customTitles[lane.id] || ''}\r\n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))}\r\n//               />\r\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\r\n//               {isMobile && (\r\n//                 <button\r\n//                   className=\"mobile-swimlane-toggle\"\r\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\r\n//                 >\r\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\r\n//                 </button>\r\n//               )}\r\n//             </header>\r\n//             {isOpen && (\r\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\r\n//                 {statuses.map((status, idx) => {\r\n//                   const issuesForStatus = byStatus(lane.issues, status);\r\n//                   return (\r\n//                     <div\r\n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`}\r\n//                       key={status}\r\n//                       onDragOver={onDragOver}\r\n//                       onDrop={e => onDrop(e, status, lane.id)}\r\n//                     >\r\n//                       <div className=\"col-header\">\r\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\r\n//                         {!isMobile && (\r\n//                           <span className=\"col-icons\">\r\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\r\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\r\n//                           </span>\r\n//                         )}\r\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\r\n//                       </div>\r\n//                       <div className=\"col-create\">\r\n//                         {status === 'backlog' && (\r\n//                           createLaneId === lane.id ? (\r\n//                             <div className=\"create-card\">\r\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\r\n//                               <div className=\"create-actions\">\r\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\r\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\r\n//                                 </select>\r\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\r\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\r\n//                               </div>\r\n//                             </div>\r\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\r\n//                         )}\r\n//                       </div>\r\n//                       {issuesForStatus.map(issue => {\r\n//                         const isHovered = hoveredAssigneeId === issue.id;\r\n//                         return (\r\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\r\n//                             <div className=\"card-top\">\r\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\r\n//                               <span className=\"card-id\">{issue.id}</span>\r\n//                             </div>\r\n//                             <div className=\"card-title\">{issue.title}</div>\r\n//                             <div className=\"card-meta\">\r\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\r\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\r\n//                               {issue.assignee && (\r\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\r\n//                                   👤\r\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\r\n//                                 </span>\r\n//                               )}\r\n//                             </div>\r\n//                           </div>\r\n//                         );\r\n//                       })}\r\n//                     </div>\r\n//                   );\r\n//                 })}\r\n//               </div>\r\n//             )}\r\n//           </section>\r\n//         );\r\n//       })}\r\n//       {/* Column Add/Edit modal */}\r\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\r\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\r\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\r\n//             position: isMobile ? 'fixed' : 'absolute',\r\n//             top: isMobile ? '50%' : modalPosition.top,\r\n//             left: isMobile ? '50%' : modalPosition.left,\r\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\r\n//             minWidth: isMobile ? '90vw' : 280,\r\n//             maxWidth: isMobile ? '95vw' : 320,\r\n//             padding: 20,\r\n//             borderRadius: 10,\r\n//             background: 'white',\r\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\r\n//             zIndex: 1100\r\n//           }}>\r\n//             {columnModal.type === 'add' ? (\r\n//               <>\r\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\r\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\r\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\r\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\r\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\r\n//                 </div>\r\n//               </>\r\n//             ) : (\r\n//               <>\r\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\r\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\r\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\r\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\r\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\r\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\r\n//                 </div>\r\n//               </>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//       {/* Issue modal */}\r\n//       {selectedIssue && editIssue && (\r\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\r\n//           <div \r\n//             className={`modal-container ${isMobile ? 'mobile-modal-container' : ''}`}\r\n//             style={\r\n//               !isMobile && modalDrag.position.x !== 0 && modalDrag.position.y !== 0\r\n//                 ? { \r\n//                     position: 'fixed',\r\n//                     top: modalDrag.position.y,\r\n//                     left: modalDrag.position.x,\r\n//                     transform: 'none'\r\n//                   }\r\n//                 : {}\r\n//             }\r\n//             ref={modalRef}\r\n//           >\r\n//             <div \r\n//               className={`modal ${isMobile ? 'mobile-modal' : ''} ${modalDrag.isDragging ? 'modal-dragging' : ''}`}\r\n//               onClick={e => e.stopPropagation()}\r\n//               onMouseDown={handleModalMouseDown}\r\n//             >\r\n//               <div className=\"modal-header\">\r\n//                 <div className=\"modal-header-content\">\r\n//                   <span className=\"modal-epic-badge\">{editIssue.epicName}</span>\r\n//                   <h2 className=\"modal-title\">{editIssue.title || 'Untitled Issue'}</h2>\r\n//                   <div className=\"modal-id-type\">\r\n//                     <span className=\"modal-id\">{editIssue.id}</span>\r\n//                     <span className={`modal-type modal-type-${editIssue.type.toLowerCase()}`}>{editIssue.type}</span>\r\n//                   </div>\r\n//                 </div>\r\n//                 <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\r\n//               </div>\r\n              \r\n//               <div className=\"modal-content-scroll\">\r\n//                 <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\r\n//                   <div className=\"modal-section\">\r\n//                     <h3 className=\"modal-section-title\">Details</h3>\r\n//                     <div className=\"modal-grid\">\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Title</label>\r\n//                         <input \r\n//                           className=\"modal-input\" \r\n//                           value={editIssue.title} \r\n//                           onChange={e => handleUpdateField('title', e.target.value)} \r\n//                           placeholder=\"Enter issue title\"\r\n//                         />\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Status</label>\r\n//                         <select \r\n//                           className=\"modal-select\"\r\n//                           value={editIssue.status} \r\n//                           onChange={e => handleUpdateField('status', e.target.value)}\r\n//                         >\r\n//                           {columnsByLane[editIssue.epic]?.map(st => (\r\n//                             <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\r\n//                           )) || defaultStatuses.map(st => (\r\n//                             <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\r\n//                           ))}\r\n//                         </select>\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Assignee</label>\r\n//                         <input \r\n//                           className=\"modal-input\"\r\n//                           value={editIssue.assignee} \r\n//                           onChange={e => handleUpdateField('assignee', e.target.value)}\r\n//                           placeholder=\"Unassigned\"\r\n//                         />\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Reporter</label>\r\n//                         <input \r\n//                           className=\"modal-input modal-input-disabled\"\r\n//                           disabled \r\n//                           value={editIssue.reporter} \r\n//                         />\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Priority</label>\r\n//                         <select \r\n//                           className=\"modal-select\"\r\n//                           value={editIssue.priority} \r\n//                           onChange={e => handleUpdateField('priority', e.target.value)}\r\n//                         >\r\n//                           <option>Low</option>\r\n//                           <option>Medium</option>\r\n//                           <option>High</option>\r\n//                         </select>\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Story Points</label>\r\n//                         <input \r\n//                           className=\"modal-input\"\r\n//                           type=\"number\" \r\n//                           value={editIssue.storyPoints} \r\n//                           onChange={e => handleUpdateField('storyPoints', e.target.value)}\r\n//                           placeholder=\"0\"\r\n//                         />\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Start Date</label>\r\n//                         <input \r\n//                           className=\"modal-input\"\r\n//                           type=\"date\" \r\n//                           value={editIssue.startDate} \r\n//                           onChange={e => handleUpdateField('startDate', e.target.value)} \r\n//                         />\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Due Date</label>\r\n//                         <input \r\n//                           className=\"modal-input\"\r\n//                           type=\"date\" \r\n//                           value={editIssue.dueDate} \r\n//                           onChange={e => handleUpdateField('dueDate', e.target.value)} \r\n//                         />\r\n//                       </div>\r\n//                     </div>\r\n//                   </div>\r\n\r\n//                   <div className=\"modal-section\">\r\n//                     <h3 className=\"modal-section-title\">Description</h3>\r\n//                     <div className=\"modal-field-full\">\r\n//                       <textarea \r\n//                         className=\"modal-textarea\"\r\n//                         rows=\"4\" \r\n//                         value={editIssue.description} \r\n//                         onChange={e => handleUpdateField('description', e.target.value)}\r\n//                         placeholder=\"Add a detailed description...\"\r\n//                       />\r\n//                     </div>\r\n//                   </div>\r\n\r\n//                   <div className=\"modal-section\">\r\n//                     <h3 className=\"modal-section-title\">Additional Information</h3>\r\n//                     <div className=\"modal-grid\">\r\n//                       <div className=\"modal-field-full\">\r\n//                         <label className=\"modal-label\">Subtasks</label>\r\n//                         <input \r\n//                           className=\"modal-input\"\r\n//                           value={editIssue.subtasks} \r\n//                           onChange={e => handleUpdateField('subtasks', e.target.value)}\r\n//                           placeholder=\"Enter subtasks (comma separated)\"\r\n//                         />\r\n//                       </div>\r\n//                       <div className=\"modal-field-full\">\r\n//                         <label className=\"modal-label\">Comments</label>\r\n//                         <textarea \r\n//                           className=\"modal-textarea\"\r\n//                           rows=\"3\" \r\n//                           value={editIssue.comments} \r\n//                           onChange={e => handleUpdateField('comments', e.target.value)}\r\n//                           placeholder=\"Add comments...\"\r\n//                         />\r\n//                       </div>\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               <div className=\"modal-actions\">\r\n//                 <button className=\"btn-reset\" onClick={handleReset}>Reset Changes</button>\r\n//                 <div className=\"modal-actions-right\">\r\n//                   <button \r\n//                     className=\"modal-delete-btn\" \r\n//                     onClick={async () => {\r\n//                       if (window.confirm('Are you sure you want to delete this issue?')) {\r\n//                         await deleteIssueAPI(selectedIssue.id);\r\n//                         const refreshed = await listIssues(projectId);\r\n//                         setIssues(refreshed);\r\n//                         setSelectedIssue(null);\r\n//                       }\r\n//                     }}\r\n//                   >\r\n//                     Delete Issue\r\n//                   </button>\r\n//                   <button className=\"btn-save\" onClick={handleSave}>Save Changes</button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Inline CSS styles */}\r\n// <style>{`\r\n//   body {\r\n//     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n//     background-color: #f5f6f8;\r\n//     margin: 0;\r\n//     padding: 16px;\r\n//   }\r\n//   .board-wrap {\r\n//     max-width: 100%;\r\n//     overflow-x: auto;\r\n//   }\r\n//   .project-header {\r\n//     background: white;\r\n//     border-radius: 8px;\r\n//     padding: 20px 24px;\r\n//     margin-bottom: 20px;\r\n//     box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//     border-left: 4px solid #1976d2;\r\n//   }\r\n//   .project-title {\r\n//     margin: 0 0 12px 0;\r\n//     font-size: 28px;\r\n//     font-weight: 700;\r\n//     color: #172b4d;\r\n//     line-height: 1.2;\r\n//   }\r\n//   .project-stats {\r\n//     display: flex;\r\n//     gap: 20px;\r\n//     flex-wrap: wrap;\r\n//   }\r\n//   .project-stat {\r\n//     background: #f5f6f8;\r\n//     padding: 6px 12px;\r\n//     border-radius: 16px;\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     color: #5e6c84;\r\n//     display: flex;\r\n//     align-items: center;\r\n//     gap: 4px;\r\n//   }\r\n//   .project-stat:before {\r\n//     content: \"•\";\r\n//     color: #1976d2;\r\n//     font-weight: bold;\r\n//   }\r\n//   @media (min-width: 768px) {\r\n//     .swimlane {\r\n//       background: white;\r\n//       border-radius: 8px;\r\n//       margin-bottom: 16px;\r\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//       overflow: hidden;\r\n//     }\r\n//     .kanban-row {\r\n//       display: flex;\r\n//       padding: 16px;\r\n//       gap: 12px;\r\n//       overflow-x: auto;\r\n//     }\r\n//     .kanban-column {\r\n//       flex: 0 0 260px;\r\n//       background: #f5f6f8;\r\n//       border-radius: 6px;\r\n//       padding: 12px;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//       border: 1px solid #dfe5e5;\r\n//       user-select: none;\r\n//       min-height: 400px;\r\n//     }\r\n//   }\r\n//   @media (max-width: 767px) {\r\n//     body {\r\n//       padding: 8px;\r\n//     }\r\n//     .project-header {\r\n//       padding: 16px;\r\n//       margin-bottom: 16px;\r\n//       border-left-width: 3px;\r\n//     }\r\n//     .project-title {\r\n//       font-size: 22px;\r\n//       margin-bottom: 10px;\r\n//     }\r\n//     .project-stats {\r\n//       gap: 12px;\r\n//     }\r\n//     .project-stat {\r\n//       font-size: 12px;\r\n//       padding: 4px 10px;\r\n//     }\r\n//     .mobile-swimlane-selector {\r\n//       margin-bottom: 16px;\r\n//       position: sticky;\r\n//       top: 0;\r\n//       background: white;\r\n//       padding: 12px;\r\n//       border-radius: 8px;\r\n//       box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n//       z-index: 100;\r\n//     }\r\n//     .mobile-select {\r\n//       width: 100%;\r\n//       padding: 12px;\r\n//       border: 1px solid #dfe5e5;\r\n//       border-radius: 6px;\r\n//       font-size: 16px;\r\n//       background: white;\r\n//     }\r\n//     .swimlane {\r\n//       background: white;\r\n//       border-radius: 8px;\r\n//       margin-bottom: 12px;\r\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//       overflow: hidden;\r\n//     }\r\n//     .swimlane-header {\r\n//       display: flex;\r\n//       align-items: center;\r\n//       padding: 12px;\r\n//       background: #fafbfc;\r\n//       border-bottom: 1px solid #dfe5e5;\r\n//       font-weight: 600;\r\n//       font-size: 14px;\r\n//       color: #172b4d;\r\n//       position: relative;\r\n//     }\r\n//     .mobile-swimlane-toggle {\r\n//       background: none;\r\n//       border: none;\r\n//       font-size: 16px;\r\n//       color: #5e6c84;\r\n//       margin-left: auto;\r\n//       padding: 4px 8px;\r\n//     }\r\n//     .kanban-row.mobile-view {\r\n//       display: block;\r\n//       padding: 8px;\r\n//       overflow-x: auto;\r\n//       white-space: nowrap;\r\n//     }\r\n//     .kanban-column.mobile-column {\r\n//       display: inline-block;\r\n//       vertical-align: top;\r\n//       width: 280px;\r\n//       margin-right: 8px;\r\n//       background: #f5f6f8;\r\n//       border-radius: 6px;\r\n//       padding: 8px;\r\n//       border: 1px solid #dfe5e5;\r\n//       user-select: none;\r\n//       min-height: 300px;\r\n//     }\r\n//     .col-header {\r\n//       display: flex;\r\n//       align-items: center;\r\n//       margin-bottom: 8px;\r\n//       gap: 6px;\r\n//     }\r\n//     .col-title {\r\n//       font-weight: 600;\r\n//       font-size: 11px;\r\n//       color: #5e6c84;\r\n//       text-transform: uppercase;\r\n//       letter-spacing: 0.5px;\r\n//       flex-grow: 1;\r\n//     }\r\n//     .card-item {\r\n//       background: white;\r\n//       border-radius: 6px;\r\n//       padding: 10px;\r\n//       box-shadow: 0 0 2px rgba(0,0,0,0.1);\r\n//       cursor: pointer;\r\n//       user-select: none;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 6px;\r\n//       border: 1px solid #dfe5e5;\r\n//       margin-bottom: 8px;\r\n//     }\r\n//     .card-title {\r\n//       font-weight: 600;\r\n//       font-size: 13px;\r\n//       color: #2b3a59;\r\n//       line-height: 1.3;\r\n//     }\r\n//     .card-meta {\r\n//       display: flex;\r\n//       gap: 6px;\r\n//       font-size: 10px;\r\n//       color: #6b7c93;\r\n//       align-items: center;\r\n//       flex-wrap: wrap;\r\n//     }\r\n//     .modal.mobile-modal {\r\n//       width: 100%;\r\n//       max-height: 90vh;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//     }\r\n//     .modal-content.mobile-modal-content {\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//       overflow-y: auto;\r\n//     }\r\n//     .modal-field {\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 4px;\r\n//     }\r\n//     .modal-field input, .modal-field textarea, .modal-field select {\r\n//       padding: 10px;\r\n//       font-size: 16px;\r\n//     }\r\n//     .modal-actions {\r\n//       display: flex;\r\n//       gap: 8px;\r\n//       justify-content: space-between;\r\n//       margin-top: 16px;\r\n//     }\r\n//     .modal-actions button {\r\n//       flex: 1;\r\n//       padding: 12px;\r\n//       font-size: 16px;\r\n//     }\r\n//   }\r\n\r\n//   /* Enhanced Modal Styles - Fixed Positioning with Dragging */\r\n//   .modal-overlay {\r\n//     position: fixed;\r\n//     top: 0;\r\n//     left: 0;\r\n//     right: 0;\r\n//     bottom: 0;\r\n//     background: rgba(0,0,0,0.6);\r\n//     display: flex;\r\n//     align-items: center;\r\n//     justify-content: center;\r\n//     z-index: 10000;\r\n//     padding: 20px;\r\n//   }\r\n\r\n//   .modal-container {\r\n//     width: 100%;\r\n//     max-width: 1000px;\r\n//     max-height: 85vh;\r\n//     display: flex;\r\n//     align-items: center;\r\n//     justify-content: center;\r\n//     transition: none;\r\n//   }\r\n\r\n//   .modal {\r\n//     background: white;\r\n//     border-radius: 12px;\r\n//     width: 100%;\r\n//     max-height: 85vh;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     overflow: hidden;\r\n//     box-shadow: 0 20px 60px rgba(0,0,0,0.3);\r\n//     margin: 0 auto;\r\n//     transition: box-shadow 0.2s ease;\r\n//   }\r\n\r\n//   .modal-dragging {\r\n//     box-shadow: 0 25px 80px rgba(0,0,0,0.4);\r\n//     cursor: grabbing;\r\n//   }\r\n\r\n//   .modal-header {\r\n//     display: flex;\r\n//     justify-content: space-between;\r\n//     align-items: flex-start;\r\n//     padding: 24px;\r\n//     background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\r\n//     border-bottom: 1px solid #e1e4e8;\r\n//     flex-shrink: 0;\r\n//     cursor: grab;\r\n//     transition: background-color 0.2s ease;\r\n//   }\r\n\r\n//   .modal-header:hover {\r\n//     background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);\r\n//   }\r\n\r\n//   .modal-dragging .modal-header {\r\n//     cursor: grabbing;\r\n//     background: linear-gradient(135deg, #dee2e6 0%, #ced4da 100%);\r\n//   }\r\n\r\n//   .modal-header-content {\r\n//     flex: 1;\r\n//     min-width: 0;\r\n//   }\r\n\r\n//   .modal-epic-badge {\r\n//     display: inline-block;\r\n//     background: #1976d2;\r\n//     color: white;\r\n//     padding: 4px 12px;\r\n//     border-radius: 16px;\r\n//     font-size: 12px;\r\n//     font-weight: 600;\r\n//     margin-bottom: 8px;\r\n//   }\r\n\r\n//   .modal-title {\r\n//     margin: 0 0 8px 0;\r\n//     font-size: 24px;\r\n//     font-weight: 700;\r\n//     color: #172b4d;\r\n//     line-height: 1.3;\r\n//     word-wrap: break-word;\r\n//   }\r\n\r\n//   .modal-id-type {\r\n//     display: flex;\r\n//     gap: 12px;\r\n//     align-items: center;\r\n//   }\r\n\r\n//   .modal-id {\r\n//     font-size: 14px;\r\n//     color: #5e6c84;\r\n//     font-family: 'Monaco', 'Menlo', monospace;\r\n//   }\r\n\r\n//   .modal-type {\r\n//     padding: 2px 8px;\r\n//     border-radius: 4px;\r\n//     font-size: 12px;\r\n//     font-weight: 600;\r\n//     text-transform: uppercase;\r\n//   }\r\n\r\n//   .modal-type-task { background: #e3f2fd; color: #1976d2; }\r\n//   .modal-type-subtask { background: #f3e5f5; color: #7b1fa2; }\r\n//   .modal-type-bug { background: #ffebee; color: #d32f2f; }\r\n\r\n//   .modal-close-btn {\r\n//     background: none;\r\n//     border: none;\r\n//     font-size: 20px;\r\n//     color: #5e6c84;\r\n//     cursor: pointer;\r\n//     padding: 8px;\r\n//     margin: -8px;\r\n//     border-radius: 4px;\r\n//     transition: background-color 0.2s;\r\n//     flex-shrink: 0;\r\n//   }\r\n\r\n//   .modal-close-btn:hover {\r\n//     background: rgba(0,0,0,0.1);\r\n//   }\r\n\r\n//   .modal-content-scroll {\r\n//     flex: 1;\r\n//     overflow-y: auto;\r\n//     padding: 0 24px;\r\n//   }\r\n\r\n//   .modal-content {\r\n//     padding: 24px 0;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 24px;\r\n//   }\r\n\r\n//   .modal-section {\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 16px;\r\n//   }\r\n\r\n//   .modal-section-title {\r\n//     font-size: 18px;\r\n//     font-weight: 600;\r\n//     color: #172b4d;\r\n//     margin: 0;\r\n//     padding-bottom: 8px;\r\n//     border-bottom: 2px solid #f0f0f0;\r\n//   }\r\n\r\n//   .modal-grid {\r\n//     display: grid;\r\n//     grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n//     gap: 16px;\r\n//   }\r\n\r\n//   .modal-field {\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 6px;\r\n//   }\r\n\r\n//   .modal-field-full {\r\n//     grid-column: 1 / -1;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 6px;\r\n//   }\r\n\r\n//   .modal-label {\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     color: #44546f;\r\n//     margin: 0;\r\n//   }\r\n\r\n//   .modal-input, .modal-select, .modal-textarea {\r\n//     padding: 12px;\r\n//     border: 2px solid #dfe1e6;\r\n//     border-radius: 8px;\r\n//     font-size: 14px;\r\n//     font-family: inherit;\r\n//     transition: border-color 0.2s, box-shadow 0.2s;\r\n//     background: white;\r\n//   }\r\n\r\n//   .modal-input:focus, .modal-select:focus, .modal-textarea:focus {\r\n//     outline: none;\r\n//     border-color: #1976d2;\r\n//     box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);\r\n//   }\r\n\r\n//   .modal-input-disabled {\r\n//     background: #f8f9fa;\r\n//     color: #6b778c;\r\n//     cursor: not-allowed;\r\n//   }\r\n\r\n//   .modal-textarea {\r\n//     resize: vertical;\r\n//     min-height: 80px;\r\n//     line-height: 1.5;\r\n//   }\r\n\r\n//   .modal-actions {\r\n//     display: flex;\r\n//     justify-content: space-between;\r\n//     align-items: center;\r\n//     padding: 20px 24px;\r\n//     background: #f8f9fa;\r\n//     border-top: 1px solid #e1e4e8;\r\n//     gap: 16px;\r\n//     flex-shrink: 0;\r\n//   }\r\n\r\n//   .modal-actions-right {\r\n//     display: flex;\r\n//     gap: 12px;\r\n//     align-items: center;\r\n//   }\r\n\r\n//   .btn-reset {\r\n//     padding: 10px 20px;\r\n//     border: 1px solid #dcdfe4;\r\n//     background: white;\r\n//     color: #44546f;\r\n//     border-radius: 6px;\r\n//     font-weight: 600;\r\n//     cursor: pointer;\r\n//     transition: all 0.2s;\r\n//   }\r\n\r\n//   .btn-reset:hover {\r\n//     background: #f1f2f4;\r\n//     border-color: #c1c7d0;\r\n//   }\r\n\r\n//   .btn-save {\r\n//     padding: 10px 24px;\r\n//     border: none;\r\n//     background: #1976d2;\r\n//     color: white;\r\n//     border-radius: 6px;\r\n//     font-weight: 600;\r\n//     cursor: pointer;\r\n//     transition: background-color 0.2s;\r\n//   }\r\n\r\n//   .btn-save:hover {\r\n//     background: #1565c0;\r\n//   }\r\n\r\n//   .modal-delete-btn {\r\n//     padding: 10px 20px;\r\n//     border: 1px solid #ffcdd2;\r\n//     background: white;\r\n//     color: #d32f2f;\r\n//     border-radius: 6px;\r\n//     font-weight: 600;\r\n//     cursor: pointer;\r\n//     transition: all 0.2s;\r\n//   }\r\n\r\n//   .modal-delete-btn:hover {\r\n//     background: #ffebee;\r\n//     border-color: #ef5350;\r\n//   }\r\n\r\n//   @media (max-width: 767px) {\r\n//     .modal-overlay {\r\n//       padding: 10px;\r\n//     }\r\n    \r\n//     .modal-container.mobile-modal-container {\r\n//       width: 100%;\r\n//       height: 100%;\r\n//       padding: 0;\r\n//     }\r\n\r\n//     .modal.mobile-modal {\r\n//       width: 100%;\r\n//       max-height: 100%;\r\n//       border-radius: 0;\r\n//       margin: 0;\r\n//     }\r\n\r\n//     .modal-header {\r\n//       padding: 16px;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//       cursor: default;\r\n//     }\r\n\r\n//     .modal-close-btn {\r\n//       align-self: flex-end;\r\n//       margin: 0;\r\n//     }\r\n\r\n//     .modal-content-scroll {\r\n//       padding: 0 16px;\r\n//     }\r\n\r\n//     .modal-content {\r\n//       padding: 16px 0;\r\n//       gap: 20px;\r\n//     }\r\n\r\n//     .modal-grid {\r\n//       grid-template-columns: 1fr;\r\n//       gap: 12px;\r\n//     }\r\n\r\n//     .modal-actions {\r\n//       padding: 16px;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//     }\r\n\r\n//     .modal-actions-right {\r\n//       width: 100%;\r\n//       justify-content: space-between;\r\n//     }\r\n\r\n//     .btn-reset, .modal-delete-btn, .btn-save {\r\n//       flex: 1;\r\n//       text-align: center;\r\n//     }\r\n//   }\r\n\r\n//   .swimlane-header {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     padding: 12px 16px;\r\n//     background: #fafbfc;\r\n//     border-bottom: 1px solid #dfe5e5;\r\n//     font-weight: 600;\r\n//     font-size: 14px;\r\n//     color: #172b4d;\r\n//   }\r\n//   .swimlane-toggle, .swimlane-icon {\r\n//     color: #5e6c84;\r\n//     margin-right: 8px;\r\n//     cursor: pointer;\r\n//   }\r\n//   .swimlane-toggle {\r\n//     border: none;\r\n//     background: transparent;\r\n//     font-size: 14px;\r\n//   }\r\n//   .swimlane-icon {\r\n//     font-size: 18px;\r\n//   }\r\n//   .swimlane-title-input {\r\n//     border: 1px solid #dfe5e5;\r\n//     border-radius: 4px;\r\n//     padding: 4px 8px;\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     background: white;\r\n//     margin-right: 8px;\r\n//     min-width: 150px;\r\n//     color: #172b4d;\r\n//   }\r\n//   .swimlane-title-input:focus {\r\n//     outline: none;\r\n//     border-color: #1976d2;\r\n//   }\r\n//   .swimlane-count {\r\n//     color: #5e6c84;\r\n//     font-size: 12px;\r\n//     font-weight: normal;\r\n//   }\r\n//   .col-header {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     margin-bottom: 4px;\r\n//     gap: 6px;\r\n//   }\r\n//   .col-title {\r\n//     font-weight: 600;\r\n//     font-size: 12px;\r\n//     color: #5e6c84;\r\n//     text-transform: uppercase;\r\n//     letter-spacing: 0.5px;\r\n//     flex-grow: 1;\r\n//   }\r\n//   .col-count {\r\n//     background: #dfe5e5;\r\n//     color: #5e6c84;\r\n//     border-radius: 12px;\r\n//     padding: 2px 8px;\r\n//     font-size: 11px;\r\n//     font-weight: 600;\r\n//     min-width: 20px;\r\n//     text-align: center;\r\n//   }\r\n//   .col-icons {\r\n//     display: flex;\r\n//     gap: 6px;\r\n//   }\r\n//   .col-icon {\r\n//     cursor: pointer;\r\n//     color: #5e6c84;\r\n//     font-size: 18px;\r\n//     background: none;\r\n//     border: none;\r\n//     padding: 0;\r\n//   }\r\n//   .create-card {\r\n//     background: white;\r\n//     padding: 10px;\r\n//     border-radius: 6px;\r\n//     box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 10px;\r\n//   }\r\n//   .card-item {\r\n//     background: white;\r\n//     border-radius: 8px;\r\n//     padding: 12px;\r\n//     box-shadow: 0 0 2px rgba(0,0,0,0.1);\r\n//     cursor: pointer;\r\n//     user-select: none;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 6px;\r\n//     border: 1px solid #dfe5e5;\r\n//     transition: box-shadow 0.2s ease, border-color 0.2s ease;\r\n//   }\r\n//   .card-item:hover {\r\n//     box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\r\n//     border-color: #a2adba;\r\n//   }\r\n//   button {\r\n//     cursor: pointer;\r\n//     transition: background-color 0.2s;\r\n//   }\r\n//   button:hover {\r\n//     opacity: 0.9;\r\n//   }\r\n//   @media (max-width: 767px) {\r\n//     button, .card-item, .col-icon {\r\n//       min-height: 44px;\r\n//       min-width: 44px;\r\n//     }\r\n//     .card-item {\r\n//       touch-action: manipulation;\r\n//     }\r\n//   }\r\n// `}</style>\r\n\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// const btnStyle = {\r\n//   cancel: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#5e6c84',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   },\r\n//   create: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#1976d2',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   },\r\n//   delete: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#d32f2f',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   }\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//  this code is ok \r\n\r\n\r\n// import React, { useEffect, useState, useRef } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const mockIssues = [\r\n//   { \r\n//     id: 'i1', \r\n//     epic: 'p1', \r\n//     epicName: 'Frontend', \r\n//     status: 'todo', \r\n//     type: 'Task', \r\n//     title: 'Setup repo', \r\n//     assignee: 'John Doe', \r\n//     storyPoints: 3, \r\n//     labels: [], \r\n//     dueDate: '2025-09-30', \r\n//     reporter: 'admin', \r\n//     priority: 'High', \r\n//     startDate: '2025-09-15', \r\n//     description: 'Setup the initial repository structure and configuration', \r\n//     subtasks: [\r\n//       { id: 'st1', title: 'Create GitHub repository', completed: true },\r\n//       { id: 'st2', title: 'Setup CI/CD pipeline', completed: false },\r\n//       { id: 'st3', title: 'Configure linting and formatting', completed: false }\r\n//     ], \r\n//     comments: 'Initial setup required for the project' \r\n//   },\r\n//   { \r\n//     id: 'i3', \r\n//     epic: 'p2', \r\n//     epicName: 'Middleware', \r\n//     status: 'todo', \r\n//     type: 'Subtask', \r\n//     title: 'API integration', \r\n//     assignee: 'Jane Smith', \r\n//     storyPoints: 2, \r\n//     labels: [], \r\n//     dueDate: '', \r\n//     reporter: 'lead-dev', \r\n//     priority: 'Low', \r\n//     startDate: '2025-09-18', \r\n//     description: 'Integrate with external API services', \r\n//     subtasks: [\r\n//       { id: 'st4', title: 'Design API endpoints', completed: true },\r\n//       { id: 'st5', title: 'Implement authentication', completed: false }\r\n//     ], \r\n//     comments: '' \r\n//   }\r\n// ];\r\n\r\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\r\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\r\n// const mockProjects = [\r\n//   { id: 'p1', name: 'E-Commerce Platform' },\r\n//   { id: 'p2', name: 'API Gateway Service' },\r\n//   { id: 'p3', name: 'Mobile App Development' }\r\n// ];\r\n\r\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\r\n\r\n// const listIssues = async (projectId) => {\r\n//   await simulateApiDelay();\r\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\r\n// };\r\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\r\n// const getProjectName = async (projectId) => {\r\n//   await simulateApiDelay();\r\n//   const project = mockProjects.find(p => p.id === projectId);\r\n//   return project ? project.name : 'Untitled Project';\r\n// };\r\n// const createEpicAPI = async (epicName) => {\r\n//   await simulateApiDelay();\r\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\r\n//   mockEpics.push(newEpic);\r\n//   return newEpic;\r\n// };\r\n// const deleteEpicAPI = async (epicId) => {\r\n//   await simulateApiDelay();\r\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\r\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\r\n//   const issueIndices = [];\r\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\r\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\r\n// };\r\n// const moveIssue = async (issueId, status) => {\r\n//   await simulateApiDelay();\r\n//   const issue = mockIssues.find(i => i.id === issueId);\r\n//   if (!issue) throw new Error('Issue not found');\r\n//   issue.status = status;\r\n// };\r\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\r\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\r\n// const updateIssueAPI = async (updatedIssue) => { \r\n//   await simulateApiDelay(); \r\n//   const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); \r\n//   if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; \r\n// };\r\n\r\n// const getSwimlanes = (issues, epics) =>\r\n//   epics.map(epic => {\r\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\r\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\r\n//   });\r\n\r\n// export default function KanbanBoard() {\r\n//   const { projectId } = useParams();\r\n//   const [issues, setIssues] = useState([]);\r\n//   const [epics, setEpics] = useState([]);\r\n//   const [projectName, setProjectName] = useState('');\r\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\r\n//   const [customTitles, setCustomTitles] = useState({});\r\n//   const [createLaneId, setCreateLaneId] = useState(null);\r\n//   const [newTaskText, setNewTaskText] = useState('');\r\n//   const [newTaskType, setNewTaskType] = useState('Task');\r\n//   const [selectedIssue, setSelectedIssue] = useState(null);\r\n//   const [editIssue, setEditIssue] = useState(null);\r\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\r\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\r\n//   const [newEpicName, setNewEpicName] = useState('');\r\n//   const [epicToDelete, setEpicToDelete] = useState('');\r\n//   const [columnsByLane, setColumnsByLane] = useState({});\r\n//   const [columnModal, setColumnModal] = useState(null);\r\n//   const [columnInput, setColumnInput] = useState('');\r\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\r\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\r\n//   const [isMobile, setIsMobile] = useState(false);\r\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\r\n  \r\n//   // Draggable modal state\r\n//   const [modalDrag, setModalDrag] = useState({\r\n//     isDragging: false,\r\n//     position: { x: 0, y: 0 },\r\n//     startPosition: { x: 0, y: 0 }\r\n//   });\r\n//   const modalRef = useRef(null);\r\n\r\n//   // Subtask management\r\n//   const [newSubtaskText, setNewSubtaskText] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     const checkScreenSize = () => {\r\n//       setIsMobile(window.innerWidth < 768);\r\n//     };\r\n//     checkScreenSize();\r\n//     window.addEventListener('resize', checkScreenSize);\r\n//     return () => window.removeEventListener('resize', checkScreenSize);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const projectNameData = projectId ? await getProjectName(projectId) : 'All Projects';\r\n//         const [issuesData, epicsData] = await Promise.all([\r\n//           listIssues(projectId),\r\n//           listEpics()\r\n//         ]);\r\n//         setIssues(issuesData);\r\n//         setEpics(epicsData);\r\n//         setProjectName(projectNameData);\r\n//         const lanes = getSwimlanes(issuesData, epicsData);\r\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\r\n//         lanes.forEach(lane => {\r\n//           initialOpen[lane.id] = true;\r\n//           initialTitles[lane.id] = lane.title;\r\n//           initialCols[lane.id] = defaultStatuses.slice();\r\n//         });\r\n//         setOpenSwimlanes(initialOpen);\r\n//         setCustomTitles(initialTitles);\r\n//         setColumnsByLane(initialCols);\r\n//       } catch (err) {\r\n//         console.error(err);\r\n//       }\r\n//     };\r\n//     fetchData();\r\n//   }, [projectId]);\r\n\r\n//   // Subtask functions\r\n//   const addSubtask = () => {\r\n//     if (!newSubtaskText.trim()) return;\r\n    \r\n//     const newSubtask = {\r\n//       id: `st${Date.now()}`,\r\n//       title: newSubtaskText.trim(),\r\n//       completed: false\r\n//     };\r\n\r\n//     setEditIssue(prev => ({\r\n//       ...prev,\r\n//       subtasks: [...(prev.subtasks || []), newSubtask]\r\n//     }));\r\n    \r\n//     setNewSubtaskText('');\r\n//   };\r\n\r\n//   const toggleSubtask = (subtaskId) => {\r\n//     setEditIssue(prev => ({\r\n//       ...prev,\r\n//       subtasks: prev.subtasks.map(subtask =>\r\n//         subtask.id === subtaskId \r\n//           ? { ...subtask, completed: !subtask.completed }\r\n//           : subtask\r\n//       )\r\n//     }));\r\n//   };\r\n\r\n//   const deleteSubtask = (subtaskId) => {\r\n//     setEditIssue(prev => ({\r\n//       ...prev,\r\n//       subtasks: prev.subtasks.filter(subtask => subtask.id !== subtaskId)\r\n//     }));\r\n//   };\r\n\r\n//   const handleSubtaskKeyPress = (e) => {\r\n//     if (e.key === 'Enter') {\r\n//       e.preventDefault();\r\n//       addSubtask();\r\n//     }\r\n//   };\r\n\r\n//   // Draggable modal functions\r\n//   const handleModalMouseDown = (e) => {\r\n//     if (isMobile) return; // Disable dragging on mobile\r\n    \r\n//     // Only start dragging if clicking on the header (not on buttons or inputs)\r\n//     if (e.target.closest('.modal-close-btn') || \r\n//         e.target.closest('input') || \r\n//         e.target.closest('select') || \r\n//         e.target.closest('textarea') ||\r\n//         e.target.closest('button') ||\r\n//         e.target.closest('.subtask-item')) {\r\n//       return;\r\n//     }\r\n\r\n//     setModalDrag({\r\n//       isDragging: true,\r\n//       position: modalDrag.position,\r\n//       startPosition: {\r\n//         x: e.clientX - modalDrag.position.x,\r\n//         y: e.clientY - modalDrag.position.y\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   const handleModalMouseMove = (e) => {\r\n//     if (!modalDrag.isDragging || isMobile) return;\r\n\r\n//     const newX = e.clientX - modalDrag.startPosition.x;\r\n//     const newY = e.clientY - modalDrag.startPosition.y;\r\n\r\n//     setModalDrag(prev => ({\r\n//       ...prev,\r\n//       position: { x: newX, y: newY }\r\n//     }));\r\n//   };\r\n\r\n//   const handleModalMouseUp = () => {\r\n//     if (isMobile) return;\r\n//     setModalDrag(prev => ({ ...prev, isDragging: false }));\r\n//   };\r\n\r\n//   // Reset modal position when closed\r\n//   useEffect(() => {\r\n//     if (!selectedIssue) {\r\n//       setModalDrag({\r\n//         isDragging: false,\r\n//         position: { x: 0, y: 0 },\r\n//         startPosition: { x: 0, y: 0 }\r\n//       });\r\n//     }\r\n//   }, [selectedIssue]);\r\n\r\n//   // Add event listeners for dragging\r\n//   useEffect(() => {\r\n//     if (modalDrag.isDragging) {\r\n//       document.addEventListener('mousemove', handleModalMouseMove);\r\n//       document.addEventListener('mouseup', handleModalMouseUp);\r\n//       document.body.style.cursor = 'grabbing';\r\n//       document.body.style.userSelect = 'none';\r\n//     } else {\r\n//       document.removeEventListener('mousemove', handleModalMouseMove);\r\n//       document.removeEventListener('mouseup', handleModalMouseUp);\r\n//       document.body.style.cursor = '';\r\n//       document.body.style.userSelect = '';\r\n//     }\r\n\r\n//     return () => {\r\n//       document.removeEventListener('mousemove', handleModalMouseMove);\r\n//       document.removeEventListener('mouseup', handleModalMouseUp);\r\n//       document.body.style.cursor = '';\r\n//       document.body.style.userSelect = '';\r\n//     };\r\n//   }, [modalDrag.isDragging]);\r\n\r\n//   const openAddColumnModal = (e, laneId, colIndex) => {\r\n//     const rect = e.currentTarget.getBoundingClientRect();\r\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\r\n//     setColumnModal({ laneId, colIndex, type: 'add' });\r\n//     setColumnInput('');\r\n//   };\r\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\r\n//     const rect = e.currentTarget.getBoundingClientRect();\r\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\r\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\r\n//     setColumnInput(status);\r\n//   };\r\n//   const handleAddColumn = () => {\r\n//     const name = columnInput.trim();\r\n//     if (!name) return alert('Column name is required');\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[columnModal.laneId]];\r\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\r\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\r\n//       return { ...prev, [columnModal.laneId]: cols };\r\n//     });\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const handleEditColumn = () => {\r\n//     const name = columnInput.trim();\r\n//     if (!name) return alert('Column name is required');\r\n//     const { laneId, colIndex } = columnModal;\r\n//     const oldCol = columnsByLane[laneId][colIndex];\r\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\r\n//       alert('Column name already exists');\r\n//       return;\r\n//     }\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[laneId]];\r\n//       cols[colIndex] = name.toLowerCase();\r\n//       return { ...prev, [laneId]: cols };\r\n//     });\r\n//     const updatedIssues = issues.map(issue =>\r\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\r\n//     );\r\n//     setIssues(updatedIssues);\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const handleDeleteColumn = () => {\r\n//     const { laneId, colIndex } = columnModal;\r\n//     const removedCol = columnsByLane[laneId][colIndex];\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[laneId]];\r\n//       cols.splice(colIndex, 1);\r\n//       return { ...prev, [laneId]: cols };\r\n//     });\r\n//     const updatedIssues = issues.map(issue =>\r\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\r\n//     );\r\n//     setIssues(updatedIssues);\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\r\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\r\n\r\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\r\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const issueId = e.dataTransfer.getData('text/plain');\r\n//       const issue = issues.find(i => i.id === issueId);\r\n//       const srcLaneId = issue.epic || issue.projectId;\r\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\r\n//         await moveIssue(issueId, targetStatus);\r\n//         const refreshed = await listIssues(projectId);\r\n//         setIssues(refreshed);\r\n//       }\r\n//     } catch (err) { console.error(err); }\r\n//   };\r\n//   const onDragOver = e => e.preventDefault();\r\n\r\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\r\n//   const handleCreateSubmit = async lane => {\r\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\r\n//     const newIssue = {\r\n//       id: Math.random().toString(36).slice(2),\r\n//       epic: lane.id,\r\n//       projectId: lane.id,\r\n//       epicName: lane.title,\r\n//       title: newTaskText,\r\n//       status: 'backlog',\r\n//       assignee: '',\r\n//       type: newTaskType,\r\n//       storyPoints: '',\r\n//       labels: [],\r\n//       dueDate: '',\r\n//       reporter: 'system',\r\n//       priority: 'Medium',\r\n//       startDate: new Date().toISOString().split('T')[0],\r\n//       description: '',\r\n//       subtasks: [],\r\n//       comments: ''\r\n//     };\r\n//     try {\r\n//       await createIssueAPI(newIssue);\r\n//       const refreshed = await listIssues(projectId);\r\n//       setIssues(refreshed);\r\n//       setCreateLaneId(null);\r\n//     } catch (err) { console.error(err); }\r\n//   };\r\n\r\n//   const handleOpenModal = (issue) => { \r\n//     setSelectedIssue(issue); \r\n//     setEditIssue({ ...issue }); \r\n//     setNewSubtaskText('');\r\n//     // Reset position when opening new modal\r\n//     setModalDrag({\r\n//       isDragging: false,\r\n//       position: { x: 0, y: 0 },\r\n//       startPosition: { x: 0, y: 0 }\r\n//     });\r\n//   };\r\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\r\n//   const handleSave = async () => { \r\n//     await updateIssueAPI(editIssue); \r\n//     const refreshed = await listIssues(projectId); \r\n//     setIssues(refreshed); \r\n//     setSelectedIssue(null); \r\n//     setEditIssue(null); \r\n//   };\r\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\r\n\r\n//   const handleCreateEpic = async () => {\r\n//     if (!newEpicName.trim()) {\r\n//       alert('Epic name is required');\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await createEpicAPI(newEpicName);\r\n//       const updatedEpics = await listEpics();\r\n//       setEpics(updatedEpics);\r\n//       setNewEpicName('');\r\n//       setShowCreateEpic(false);\r\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\r\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\r\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\r\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\r\n//     } catch (error) {\r\n//       console.error('Error creating epic:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteEpic = async () => {\r\n//     if (!epicToDelete) {\r\n//       alert('Please select an epic to delete');\r\n//       return;\r\n//     }\r\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await deleteEpicAPI(epicToDelete);\r\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\r\n//         listIssues(projectId),\r\n//         listEpics()\r\n//       ]);\r\n//       setIssues(refreshedIssues);\r\n//       setEpics(refreshedEpics);\r\n//       setEpicToDelete('');\r\n//       setShowDeleteEpic(false);\r\n//       setColumnsByLane(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//       setOpenSwimlanes(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//       setCustomTitles(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error deleting epic:', error);\r\n//     }\r\n//   };\r\n\r\n//   const toggleMobileSwimlane = (laneId) => {\r\n//     if (activeSwimlane === laneId) {\r\n//       setActiveSwimlane(null);\r\n//     } else {\r\n//       setActiveSwimlane(laneId);\r\n//     }\r\n//   };\r\n\r\n//   const swimlanes = getSwimlanes(issues, epics);\r\n\r\n//   // Calculate subtask progress\r\n//   const getSubtaskProgress = (subtasks) => {\r\n//     if (!subtasks || subtasks.length === 0) return { completed: 0, total: 0, percentage: 0 };\r\n//     const completed = subtasks.filter(st => st.completed).length;\r\n//     const total = subtasks.length;\r\n//     const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;\r\n//     return { completed, total, percentage };\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"board-wrap\">\r\n//       {/* Project Name Header */}\r\n//       <div className=\"project-header\">\r\n//         <h1 className=\"project-title\">{projectName}</h1>\r\n//         <div className=\"project-stats\">\r\n//           <span className=\"project-stat\">{epics.length} Epics</span>\r\n//           <span className=\"project-stat\">{issues.length} Issues</span>\r\n//           <span className=\"project-stat\">\r\n//             {issues.filter(issue => issue.status === 'done').length} Completed\r\n//           </span>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {isMobile && (\r\n//         <div className=\"mobile-swimlane-selector\">\r\n//           <select\r\n//             value={activeSwimlane || ''}\r\n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\r\n//             className=\"mobile-select\"\r\n//           >\r\n//             <option value=\"\">All Swimlanes</option>\r\n//             {swimlanes.map(lane => (\r\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\r\n//             ))}\r\n//           </select>\r\n//         </div>\r\n//       )}\r\n\r\n//       {swimlanes.map(lane => {\r\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\r\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\r\n\r\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\r\n//           return null;\r\n//         }\r\n\r\n//         return (\r\n//           <section className=\"swimlane\" key={lane.id}>\r\n//             <header className=\"swimlane-header\">\r\n//               {!isMobile && (\r\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\r\n//                   {isOpen ? '▼' : '▶'}\r\n//                 </button>\r\n//               )}\r\n//               <span className=\"swimlane-icon\">⚡</span>\r\n//               <input\r\n//                 className=\"swimlane-title-input\"\r\n//                 value={customTitles[lane.id] || ''}\r\n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))}\r\n//               />\r\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\r\n//               {isMobile && (\r\n//                 <button\r\n//                   className=\"mobile-swimlane-toggle\"\r\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\r\n//                 >\r\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\r\n//                 </button>\r\n//               )}\r\n//             </header>\r\n//             {isOpen && (\r\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\r\n//                 {statuses.map((status, idx) => {\r\n//                   const issuesForStatus = byStatus(lane.issues, status);\r\n//                   return (\r\n//                     <div\r\n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`}\r\n//                       key={status}\r\n//                       onDragOver={onDragOver}\r\n//                       onDrop={e => onDrop(e, status, lane.id)}\r\n//                     >\r\n//                       <div className=\"col-header\">\r\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\r\n//                         {!isMobile && (\r\n//                           <span className=\"col-icons\">\r\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\r\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\r\n//                           </span>\r\n//                         )}\r\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\r\n//                       </div>\r\n//                       <div className=\"col-create\">\r\n//                         {status === 'backlog' && (\r\n//                           createLaneId === lane.id ? (\r\n//                             <div className=\"create-card\">\r\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\r\n//                               <div className=\"create-actions\">\r\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\r\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\r\n//                                 </select>\r\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\r\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\r\n//                               </div>\r\n//                             </div>\r\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\r\n//                         )}\r\n//                       </div>\r\n//                       {issuesForStatus.map(issue => {\r\n//                         const isHovered = hoveredAssigneeId === issue.id;\r\n//                         return (\r\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\r\n//                             <div className=\"card-top\">\r\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\r\n//                               <span className=\"card-id\">{issue.id}</span>\r\n//                             </div>\r\n//                             <div className=\"card-title\">{issue.title}</div>\r\n//                             <div className=\"card-meta\">\r\n//                               {issue.assignee && (\r\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)}>\r\n//                                   👤 {issue.assignee}\r\n//                                 </span>\r\n//                               )}\r\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\r\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\r\n//                             </div>\r\n//                           </div>\r\n//                         );\r\n//                       })}\r\n//                     </div>\r\n//                   );\r\n//                 })}\r\n//               </div>\r\n//             )}\r\n//           </section>\r\n//         );\r\n//       })}\r\n//       {/* Column Add/Edit modal */}\r\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\r\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\r\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\r\n//             position: isMobile ? 'fixed' : 'absolute',\r\n//             top: isMobile ? '50%' : modalPosition.top,\r\n//             left: isMobile ? '50%' : modalPosition.left,\r\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\r\n//             minWidth: isMobile ? '90vw' : 280,\r\n//             maxWidth: isMobile ? '95vw' : 320,\r\n//             padding: 20,\r\n//             borderRadius: 10,\r\n//             background: 'white',\r\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\r\n//             zIndex: 1100\r\n//           }}>\r\n//             {columnModal.type === 'add' ? (\r\n//               <>\r\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\r\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\r\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\r\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\r\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\r\n//                 </div>\r\n//               </>\r\n//             ) : (\r\n//               <>\r\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\r\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\r\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\r\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\r\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\r\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\r\n//                 </div>\r\n//               </>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//       {/* Issue modal */}\r\n//       {selectedIssue && editIssue && (\r\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\r\n//           <div \r\n//             className={`modal-container ${isMobile ? 'mobile-modal-container' : ''}`}\r\n//             style={\r\n//               !isMobile && modalDrag.position.x !== 0 && modalDrag.position.y !== 0\r\n//                 ? { \r\n//                     position: 'fixed',\r\n//                     top: modalDrag.position.y,\r\n//                     left: modalDrag.position.x,\r\n//                     transform: 'none'\r\n//                   }\r\n//                 : {}\r\n//             }\r\n//             ref={modalRef}\r\n//           >\r\n//             <div \r\n//               className={`modal ${isMobile ? 'mobile-modal' : ''} ${modalDrag.isDragging ? 'modal-dragging' : ''}`}\r\n//               onClick={e => e.stopPropagation()}\r\n//               onMouseDown={handleModalMouseDown}\r\n//             >\r\n//               <div className=\"modal-header\">\r\n//                 <div className=\"modal-header-content\">\r\n//                   <span className=\"modal-epic-badge\">{editIssue.epicName}</span>\r\n//                   <h2 className=\"modal-title\">{editIssue.title || 'Untitled Issue'}</h2>\r\n//                   <div className=\"modal-id-type\">\r\n//                     <span className=\"modal-id\">{editIssue.id}</span>\r\n//                     <span className={`modal-type modal-type-${editIssue.type.toLowerCase()}`}>{editIssue.type}</span>\r\n//                   </div>\r\n//                 </div>\r\n//                 <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\r\n//               </div>\r\n              \r\n//               <div className=\"modal-content-scroll\">\r\n//                 <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\r\n//                   <div className=\"modal-section\">\r\n//                     <h3 className=\"modal-section-title\">Details</h3>\r\n//                     <div className=\"modal-grid\">\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Title</label>\r\n//                         <input \r\n//                           className=\"modal-input\" \r\n//                           value={editIssue.title} \r\n//                           onChange={e => handleUpdateField('title', e.target.value)} \r\n//                           placeholder=\"Enter issue title\"\r\n//                         />\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Status</label>\r\n//                         <select \r\n//                           className=\"modal-select\"\r\n//                           value={editIssue.status} \r\n//                           onChange={e => handleUpdateField('status', e.target.value)}\r\n//                         >\r\n//                           {columnsByLane[editIssue.epic]?.map(st => (\r\n//                             <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\r\n//                           )) || defaultStatuses.map(st => (\r\n//                             <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\r\n//                           ))}\r\n//                         </select>\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Assignee</label>\r\n//                         <input \r\n//                           className=\"modal-input\"\r\n//                           value={editIssue.assignee} \r\n//                           onChange={e => handleUpdateField('assignee', e.target.value)}\r\n//                           placeholder=\"Unassigned\"\r\n//                         />\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Reporter</label>\r\n//                         <input \r\n//                           className=\"modal-input modal-input-disabled\"\r\n//                           disabled \r\n//                           value={editIssue.reporter} \r\n//                         />\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Priority</label>\r\n//                         <select \r\n//                           className=\"modal-select\"\r\n//                           value={editIssue.priority} \r\n//                           onChange={e => handleUpdateField('priority', e.target.value)}\r\n//                         >\r\n//                           <option>Low</option>\r\n//                           <option>Medium</option>\r\n//                           <option>High</option>\r\n//                         </select>\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Story Points</label>\r\n//                         <input \r\n//                           className=\"modal-input\"\r\n//                           type=\"number\" \r\n//                           value={editIssue.storyPoints} \r\n//                           onChange={e => handleUpdateField('storyPoints', e.target.value)}\r\n//                           placeholder=\"0\"\r\n//                         />\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Start Date</label>\r\n//                         <input \r\n//                           className=\"modal-input\"\r\n//                           type=\"date\" \r\n//                           value={editIssue.startDate} \r\n//                           onChange={e => handleUpdateField('startDate', e.target.value)} \r\n//                         />\r\n//                       </div>\r\n//                       <div className=\"modal-field\">\r\n//                         <label className=\"modal-label\">Due Date</label>\r\n//                         <input \r\n//                           className=\"modal-input\"\r\n//                           type=\"date\" \r\n//                           value={editIssue.dueDate} \r\n//                           onChange={e => handleUpdateField('dueDate', e.target.value)} \r\n//                         />\r\n//                       </div>\r\n//                     </div>\r\n//                   </div>\r\n\r\n//                   <div className=\"modal-section\">\r\n//                     <h3 className=\"modal-section-title\">Description</h3>\r\n//                     <div className=\"modal-field-full\">\r\n//                       <textarea \r\n//                         className=\"modal-textarea\"\r\n//                         rows=\"4\" \r\n//                         value={editIssue.description} \r\n//                         onChange={e => handleUpdateField('description', e.target.value)}\r\n//                         placeholder=\"Add a detailed description...\"\r\n//                       />\r\n//                     </div>\r\n//                   </div>\r\n\r\n//                   <div className=\"modal-section\">\r\n//                     <h3 className=\"modal-section-title\">Subtasks</h3>\r\n//                     <div className=\"modal-field-full\">\r\n//                       <div className=\"subtasks-container\">\r\n//                         <div className=\"subtasks-header\">\r\n//                           <span className=\"subtasks-title\">\r\n//                             Subtasks ({getSubtaskProgress(editIssue.subtasks).completed}/{getSubtaskProgress(editIssue.subtasks).total})\r\n//                           </span>\r\n//                           {editIssue.subtasks && editIssue.subtasks.length > 0 && (\r\n//                             <div className=\"subtask-progress-bar\">\r\n//                               <div \r\n//                                 className=\"subtask-progress-fill\" \r\n//                                 style={{ width: `${getSubtaskProgress(editIssue.subtasks).percentage}%` }}\r\n//                               ></div>\r\n//                             </div>\r\n//                           )}\r\n//                         </div>\r\n                        \r\n//                         <div className=\"subtasks-list\">\r\n//                           {editIssue.subtasks && editIssue.subtasks.length > 0 ? (\r\n//                             editIssue.subtasks.map((subtask) => (\r\n//                               <div key={subtask.id} className=\"subtask-item\">\r\n//                                 <label className=\"subtask-checkbox\">\r\n//                                   <input\r\n//                                     type=\"checkbox\"\r\n//                                     checked={subtask.completed}\r\n//                                     onChange={() => toggleSubtask(subtask.id)}\r\n//                                   />\r\n//                                   <span className={`subtask-text ${subtask.completed ? 'completed' : ''}`}>\r\n//                                     {subtask.title}\r\n//                                   </span>\r\n//                                 </label>\r\n//                                 <button\r\n//                                   className=\"subtask-delete-btn\"\r\n//                                   onClick={() => deleteSubtask(subtask.id)}\r\n//                                   title=\"Delete subtask\"\r\n//                                 >\r\n//                                   ✕\r\n//                                 </button>\r\n//                               </div>\r\n//                             ))\r\n//                           ) : (\r\n//                             <div className=\"no-subtasks\">No subtasks added yet</div>\r\n//                           )}\r\n//                         </div>\r\n\r\n//                         <div className=\"add-subtask\">\r\n//                           <input\r\n//                             type=\"text\"\r\n//                             className=\"subtask-input\"\r\n//                             placeholder=\"Add a new subtask...\"\r\n//                             value={newSubtaskText}\r\n//                             onChange={(e) => setNewSubtaskText(e.target.value)}\r\n//                             onKeyPress={handleSubtaskKeyPress}\r\n//                           />\r\n//                           <button\r\n//                             className=\"add-subtask-btn\"\r\n//                             onClick={addSubtask}\r\n//                             disabled={!newSubtaskText.trim()}\r\n//                           >\r\n//                             Add\r\n//                           </button>\r\n//                         </div>\r\n//                       </div>\r\n//                     </div>\r\n//                   </div>\r\n\r\n//                   <div className=\"modal-section\">\r\n//                     <h3 className=\"modal-section-title\">Comments</h3>\r\n//                     <div className=\"modal-field-full\">\r\n//                       <textarea \r\n//                         className=\"modal-textarea\"\r\n//                         rows=\"3\" \r\n//                         value={editIssue.comments} \r\n//                         onChange={e => handleUpdateField('comments', e.target.value)}\r\n//                         placeholder=\"Add comments...\"\r\n//                       />\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               <div className=\"modal-actions\">\r\n//                 <button className=\"btn-reset\" onClick={handleReset}>Reset Changes</button>\r\n//                 <div className=\"modal-actions-right\">\r\n//                   <button \r\n//                     className=\"modal-delete-btn\" \r\n//                     onClick={async () => {\r\n//                       if (window.confirm('Are you sure you want to delete this issue?')) {\r\n//                         await deleteIssueAPI(selectedIssue.id);\r\n//                         const refreshed = await listIssues(projectId);\r\n//                         setIssues(refreshed);\r\n//                         setSelectedIssue(null);\r\n//                       }\r\n//                     }}\r\n//                   >\r\n//                     Delete Issue\r\n//                   </button>\r\n//                   <button className=\"btn-save\" onClick={handleSave}>Save Changes</button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Inline CSS styles */}\r\n// <style>{`\r\n//   body {\r\n//     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n//     background-color: #f5f6f8;\r\n//     margin: 0;\r\n//     padding: 16px;\r\n//   }\r\n//   .board-wrap {\r\n//     max-width: 100%;\r\n//     overflow-x: auto;\r\n//   }\r\n//   .project-header {\r\n//     background: white;\r\n//     border-radius: 8px;\r\n//     padding: 20px 24px;\r\n//     margin-bottom: 20px;\r\n//     box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//     border-left: 4px solid #1976d2;\r\n//   }\r\n//   .project-title {\r\n//     margin: 0 0 12px 0;\r\n//     font-size: 28px;\r\n//     font-weight: 700;\r\n//     color: #172b4d;\r\n//     line-height: 1.2;\r\n//   }\r\n//   .project-stats {\r\n//     display: flex;\r\n//     gap: 20px;\r\n//     flex-wrap: wrap;\r\n//   }\r\n//   .project-stat {\r\n//     background: #f5f6f8;\r\n//     padding: 6px 12px;\r\n//     border-radius: 16px;\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     color: #5e6c84;\r\n//     display: flex;\r\n//     align-items: center;\r\n//     gap: 4px;\r\n//   }\r\n//   .project-stat:before {\r\n//     content: \"•\";\r\n//     color: #1976d2;\r\n//     font-weight: bold;\r\n//   }\r\n//   @media (min-width: 768px) {\r\n//     .swimlane {\r\n//       background: white;\r\n//       border-radius: 8px;\r\n//       margin-bottom: 16px;\r\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//       overflow: hidden;\r\n//     }\r\n//     .kanban-row {\r\n//       display: flex;\r\n//       padding: 16px;\r\n//       gap: 12px;\r\n//       overflow-x: auto;\r\n//     }\r\n//     .kanban-column {\r\n//       flex: 0 0 260px;\r\n//       background: #f5f6f8;\r\n//       border-radius: 6px;\r\n//       padding: 12px;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//       border: 1px solid #dfe5e5;\r\n//       user-select: none;\r\n//       min-height: 400px;\r\n//     }\r\n//   }\r\n//   @media (max-width: 767px) {\r\n//     body {\r\n//       padding: 8px;\r\n//     }\r\n//     .project-header {\r\n//       padding: 16px;\r\n//       margin-bottom: 16px;\r\n//       border-left-width: 3px;\r\n//     }\r\n//     .project-title {\r\n//       font-size: 22px;\r\n//       margin-bottom: 10px;\r\n//     }\r\n//     .project-stats {\r\n//       gap: 12px;\r\n//     }\r\n//     .project-stat {\r\n//       font-size: 12px;\r\n//       padding: 4px 10px;\r\n//     }\r\n//     .mobile-swimlane-selector {\r\n//       margin-bottom: 16px;\r\n//       position: sticky;\r\n//       top: 0;\r\n//       background: white;\r\n//       padding: 12px;\r\n//       border-radius: 8px;\r\n//       box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n//       z-index: 100;\r\n//     }\r\n//     .mobile-select {\r\n//       width: 100%;\r\n//       padding: 12px;\r\n//       border: 1px solid #dfe5e5;\r\n//       border-radius: 6px;\r\n//       font-size: 16px;\r\n//       background: white;\r\n//     }\r\n//     .swimlane {\r\n//       background: white;\r\n//       border-radius: 8px;\r\n//       margin-bottom: 12px;\r\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//       overflow: hidden;\r\n//     }\r\n//     .swimlane-header {\r\n//       display: flex;\r\n//       align-items: center;\r\n//       padding: 12px;\r\n//       background: #fafbfc;\r\n//       border-bottom: 1px solid #dfe5e5;\r\n//       font-weight: 600;\r\n//       font-size: 14px;\r\n//       color: #172b4d;\r\n//       position: relative;\r\n//     }\r\n//     .mobile-swimlane-toggle {\r\n//       background: none;\r\n//       border: none;\r\n//       font-size: 16px;\r\n//       color: #5e6c84;\r\n//       margin-left: auto;\r\n//       padding: 4px 8px;\r\n//     }\r\n//     .kanban-row.mobile-view {\r\n//       display: block;\r\n//       padding: 8px;\r\n//       overflow-x: auto;\r\n//       white-space: nowrap;\r\n//     }\r\n//     .kanban-column.mobile-column {\r\n//       display: inline-block;\r\n//       vertical-align: top;\r\n//       width: 280px;\r\n//       margin-right: 8px;\r\n//       background: #f5f6f8;\r\n//       border-radius: 6px;\r\n//       padding: 8px;\r\n//       border: 1px solid #dfe5e5;\r\n//       user-select: none;\r\n//       min-height: 300px;\r\n//     }\r\n//     .col-header {\r\n//       display: flex;\r\n//       align-items: center;\r\n//       margin-bottom: 8px;\r\n//       gap: 6px;\r\n//     }\r\n//     .col-title {\r\n//       font-weight: 600;\r\n//       font-size: 11px;\r\n//       color: #5e6c84;\r\n//       text-transform: uppercase;\r\n//       letter-spacing: 0.5px;\r\n//       flex-grow: 1;\r\n//     }\r\n//     .card-item {\r\n//       background: white;\r\n//       border-radius: 6px;\r\n//       padding: 10px;\r\n//       box-shadow: 0 0 2px rgba(0,0,0,0.1);\r\n//       cursor: pointer;\r\n//       user-select: none;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 6px;\r\n//       border: 1px solid #dfe5e5;\r\n//       margin-bottom: 8px;\r\n//     }\r\n//     .card-title {\r\n//       font-weight: 600;\r\n//       font-size: 13px;\r\n//       color: #2b3a59;\r\n//       line-height: 1.3;\r\n//     }\r\n//     .card-meta {\r\n//       display: flex;\r\n//       gap: 6px;\r\n//       font-size: 10px;\r\n//       color: #6b7c93;\r\n//       align-items: center;\r\n//       flex-wrap: wrap;\r\n//     }\r\n//     .modal.mobile-modal {\r\n//       width: 100%;\r\n//       max-height: 90vh;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//     }\r\n//     .modal-content.mobile-modal-content {\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//       overflow-y: auto;\r\n//     }\r\n//     .modal-field {\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 4px;\r\n//     }\r\n//     .modal-field input, .modal-field textarea, .modal-field select {\r\n//       padding: 10px;\r\n//       font-size: 16px;\r\n//     }\r\n//     .modal-actions {\r\n//       display: flex;\r\n//       gap: 8px;\r\n//       justify-content: space-between;\r\n//       margin-top: 16px;\r\n//     }\r\n//     .modal-actions button {\r\n//       flex: 1;\r\n//       padding: 12px;\r\n//       font-size: 16px;\r\n//     }\r\n//   }\r\n\r\n//   /* Card Styles - Only Title, Assignee, Due Date, and Priority */\r\n//   .card-item {\r\n//     background: white;\r\n//     border-radius: 8px;\r\n//     padding: 12px;\r\n//     box-shadow: 0 0 2px rgba(0,0,0,0.1);\r\n//     cursor: pointer;\r\n//     user-select: none;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 8px;\r\n//     border: 1px solid #dfe5e5;\r\n//     transition: box-shadow 0.2s ease, border-color 0.2s ease;\r\n//   }\r\n\r\n//   .card-item:hover {\r\n//     box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\r\n//     border-color: #a2adba;\r\n//   }\r\n\r\n//   .card-top {\r\n//     display: flex;\r\n//     justify-content: space-between;\r\n//     align-items: flex-start;\r\n//     gap: 8px;\r\n//   }\r\n\r\n//   .card-tag {\r\n//     padding: 2px 6px;\r\n//     border-radius: 4px;\r\n//     font-size: 10px;\r\n//     font-weight: 600;\r\n//     text-transform: uppercase;\r\n//   }\r\n\r\n//   .card-tag-task { background: #e3f2fd; color: #1976d2; }\r\n//   .card-tag-subtask { background: #f3e5f5; color: #7b1fa2; }\r\n//   .card-tag-bug { background: #ffebee; color: #d32f2f; }\r\n\r\n//   .card-id {\r\n//     font-size: 10px;\r\n//     color: #6b7c93;\r\n//     font-family: 'Monaco', 'Menlo', monospace;\r\n//     font-weight: 600;\r\n//   }\r\n\r\n//   .card-title {\r\n//     font-weight: 600;\r\n//     font-size: 14px;\r\n//     color: #2b3a59;\r\n//     line-height: 1.3;\r\n//     margin: 0;\r\n//     word-break: break-word;\r\n//   }\r\n\r\n//   .card-meta {\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 6px;\r\n//   }\r\n\r\n//   .card-assignee {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     gap: 4px;\r\n//     font-size: 11px;\r\n//     color: #5e6c84;\r\n//     font-weight: 500;\r\n//   }\r\n\r\n//   .card-due {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     gap: 4px;\r\n//     font-size: 11px;\r\n//     color: #d32f2f;\r\n//     font-weight: 500;\r\n//   }\r\n\r\n//   .card-priority {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     gap: 4px;\r\n//     font-size: 11px;\r\n//     font-weight: 600;\r\n//     padding: 2px 6px;\r\n//     border-radius: 4px;\r\n//     width: fit-content;\r\n//   }\r\n\r\n//   .card-priority.high { background: #ffebee; color: #d32f2f; }\r\n//   .card-priority.medium { background: #fff3e0; color: #f57c00; }\r\n//   .card-priority.low { background: #e8f5e8; color: #388e3c; }\r\n\r\n//   /* Modal Subtasks Styles */\r\n//   .subtasks-container {\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 12px;\r\n//   }\r\n\r\n//   .subtasks-header {\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 8px;\r\n//   }\r\n\r\n//   .subtasks-title {\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     color: #44546f;\r\n//   }\r\n\r\n//   .subtasks-list {\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 8px;\r\n//     max-height: 200px;\r\n//     overflow-y: auto;\r\n//   }\r\n\r\n//   .subtask-item {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     justify-content: space-between;\r\n//     padding: 8px 12px;\r\n//     background: #f8f9fa;\r\n//     border-radius: 6px;\r\n//     border: 1px solid #e1e4e8;\r\n//     transition: background-color 0.2s;\r\n//   }\r\n\r\n//   .subtask-item:hover {\r\n//     background: #f1f2f4;\r\n//   }\r\n\r\n//   .subtask-checkbox {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     gap: 8px;\r\n//     flex: 1;\r\n//     cursor: pointer;\r\n//     margin: 0;\r\n//   }\r\n\r\n//   .subtask-checkbox input[type=\"checkbox\"] {\r\n//     margin: 0;\r\n//     cursor: pointer;\r\n//   }\r\n\r\n//   .subtask-text {\r\n//     font-size: 14px;\r\n//     color: #44546f;\r\n//     transition: all 0.2s;\r\n//   }\r\n\r\n//   .subtask-text.completed {\r\n//     text-decoration: line-through;\r\n//     color: #8b9cb1;\r\n//   }\r\n\r\n//   .subtask-delete-btn {\r\n//     background: none;\r\n//     border: none;\r\n//     color: #d32f2f;\r\n//     cursor: pointer;\r\n//     padding: 4px;\r\n//     border-radius: 4px;\r\n//     font-size: 12px;\r\n//     transition: background-color 0.2s;\r\n//   }\r\n\r\n//   .subtask-delete-btn:hover {\r\n//     background: #ffebee;\r\n//   }\r\n\r\n//   .no-subtasks {\r\n//     text-align: center;\r\n//     color: #8b9cb1;\r\n//     font-style: italic;\r\n//     padding: 16px;\r\n//     font-size: 14px;\r\n//   }\r\n\r\n//   .add-subtask {\r\n//     display: flex;\r\n//     gap: 8px;\r\n//   }\r\n\r\n//   .subtask-input {\r\n//     flex: 1;\r\n//     padding: 8px 12px;\r\n//     border: 2px solid #dfe1e6;\r\n//     border-radius: 6px;\r\n//     font-size: 14px;\r\n//     transition: border-color 0.2s;\r\n//   }\r\n\r\n//   .subtask-input:focus {\r\n//     outline: none;\r\n//     border-color: #1976d2;\r\n//   }\r\n\r\n//   .add-subtask-btn {\r\n//     padding: 8px 16px;\r\n//     background: #1976d2;\r\n//     color: white;\r\n//     border: none;\r\n//     border-radius: 6px;\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     cursor: pointer;\r\n//     transition: background-color 0.2s;\r\n//   }\r\n\r\n//   .add-subtask-btn:hover:not(:disabled) {\r\n//     background: #1565c0;\r\n//   }\r\n\r\n//   .add-subtask-btn:disabled {\r\n//     background: #b0bec5;\r\n//     cursor: not-allowed;\r\n//   }\r\n\r\n//   /* Enhanced Modal Styles - Fixed Positioning with Dragging */\r\n//   .modal-overlay {\r\n//     position: fixed;\r\n//     top: 0;\r\n//     left: 0;\r\n//     right: 0;\r\n//     bottom: 0;\r\n//     background: rgba(0,0,0,0.6);\r\n//     display: flex;\r\n//     align-items: center;\r\n//     justify-content: center;\r\n//     z-index: 10000;\r\n//     padding: 20px;\r\n//   }\r\n\r\n//   .modal-container {\r\n//     width: 100%;\r\n//     max-width: 1000px;\r\n//     max-height: 85vh;\r\n//     display: flex;\r\n//     align-items: center;\r\n//     justify-content: center;\r\n//     transition: none;\r\n//   }\r\n\r\n//   .modal {\r\n//     background: white;\r\n//     border-radius: 12px;\r\n//     width: 100%;\r\n//     max-height: 85vh;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     overflow: hidden;\r\n//     box-shadow: 0 20px 60px rgba(0,0,0,0.3);\r\n//     margin: 0 auto;\r\n//     transition: box-shadow 0.2s ease;\r\n//   }\r\n\r\n//   .modal-dragging {\r\n//     box-shadow: 0 25px 80px rgba(0,0,0,0.4);\r\n//     cursor: grabbing;\r\n//   }\r\n\r\n//   .modal-header {\r\n//     display: flex;\r\n//     justify-content: space-between;\r\n//     align-items: flex-start;\r\n//     padding: 24px;\r\n//     background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\r\n//     border-bottom: 1px solid #e1e4e8;\r\n//     flex-shrink: 0;\r\n//     cursor: grab;\r\n//     transition: background-color 0.2s ease;\r\n//   }\r\n\r\n//   .modal-header:hover {\r\n//     background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);\r\n//   }\r\n\r\n//   .modal-dragging .modal-header {\r\n//     cursor: grabbing;\r\n//     background: linear-gradient(135deg, #dee2e6 0%, #ced4da 100%);\r\n//   }\r\n\r\n//   .modal-header-content {\r\n//     flex: 1;\r\n//     min-width: 0;\r\n//   }\r\n\r\n//   .modal-epic-badge {\r\n//     display: inline-block;\r\n//     background: #1976d2;\r\n//     color: white;\r\n//     padding: 4px 12px;\r\n//     border-radius: 16px;\r\n//     font-size: 12px;\r\n//     font-weight: 600;\r\n//     margin-bottom: 8px;\r\n//   }\r\n\r\n//   .modal-title {\r\n//     margin: 0 0 8px 0;\r\n//     font-size: 24px;\r\n//     font-weight: 700;\r\n//     color: #172b4d;\r\n//     line-height: 1.3;\r\n//     word-wrap: break-word;\r\n//   }\r\n\r\n//   .modal-id-type {\r\n//     display: flex;\r\n//     gap: 12px;\r\n//     align-items: center;\r\n//   }\r\n\r\n//   .modal-id {\r\n//     font-size: 14px;\r\n//     color: #5e6c84;\r\n//     font-family: 'Monaco', 'Menlo', monospace;\r\n//   }\r\n\r\n//   .modal-type {\r\n//     padding: 2px 8px;\r\n//     border-radius: 4px;\r\n//     font-size: 12px;\r\n//     font-weight: 600;\r\n//     text-transform: uppercase;\r\n//   }\r\n\r\n//   .modal-type-task { background: #e3f2fd; color: #1976d2; }\r\n//   .modal-type-subtask { background: #f3e5f5; color: #7b1fa2; }\r\n//   .modal-type-bug { background: #ffebee; color: #d32f2f; }\r\n\r\n//   .modal-close-btn {\r\n//     background: none;\r\n//     border: none;\r\n//     font-size: 20px;\r\n//     color: #5e6c84;\r\n//     cursor: pointer;\r\n//     padding: 8px;\r\n//     margin: -8px;\r\n//     border-radius: 4px;\r\n//     transition: background-color 0.2s;\r\n//     flex-shrink: 0;\r\n//   }\r\n\r\n//   .modal-close-btn:hover {\r\n//     background: rgba(0,0,0,0.1);\r\n//   }\r\n\r\n//   .modal-content-scroll {\r\n//     flex: 1;\r\n//     overflow-y: auto;\r\n//     padding: 0 24px;\r\n//   }\r\n\r\n//   .modal-content {\r\n//     padding: 24px 0;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 24px;\r\n//   }\r\n\r\n//   .modal-section {\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 16px;\r\n//   }\r\n\r\n//   .modal-section-title {\r\n//     font-size: 18px;\r\n//     font-weight: 600;\r\n//     color: #172b4d;\r\n//     margin: 0;\r\n//     padding-bottom: 8px;\r\n//     border-bottom: 2px solid #f0f0f0;\r\n//   }\r\n\r\n//   .modal-grid {\r\n//     display: grid;\r\n//     grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n//     gap: 16px;\r\n//   }\r\n\r\n//   .modal-field {\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 6px;\r\n//   }\r\n\r\n//   .modal-field-full {\r\n//     grid-column: 1 / -1;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 6px;\r\n//   }\r\n\r\n//   .modal-label {\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     color: #44546f;\r\n//     margin: 0;\r\n//   }\r\n\r\n//   .modal-input, .modal-select, .modal-textarea {\r\n//     padding: 12px;\r\n//     border: 2px solid #dfe1e6;\r\n//     border-radius: 8px;\r\n//     font-size: 14px;\r\n//     font-family: inherit;\r\n//     transition: border-color 0.2s, box-shadow 0.2s;\r\n//     background: white;\r\n//   }\r\n\r\n//   .modal-input:focus, .modal-select:focus, .modal-textarea:focus {\r\n//     outline: none;\r\n//     border-color: #1976d2;\r\n//     box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);\r\n//   }\r\n\r\n//   .modal-input-disabled {\r\n//     background: #f8f9fa;\r\n//     color: #6b778c;\r\n//     cursor: not-allowed;\r\n//   }\r\n\r\n//   .modal-textarea {\r\n//     resize: vertical;\r\n//     min-height: 80px;\r\n//     line-height: 1.5;\r\n//   }\r\n\r\n//   .modal-actions {\r\n//     display: flex;\r\n//     justify-content: space-between;\r\n//     align-items: center;\r\n//     padding: 20px 24px;\r\n//     background: #f8f9fa;\r\n//     border-top: 1px solid #e1e4e8;\r\n//     gap: 16px;\r\n//     flex-shrink: 0;\r\n//   }\r\n\r\n//   .modal-actions-right {\r\n//     display: flex;\r\n//     gap: 12px;\r\n//     align-items: center;\r\n//   }\r\n\r\n//   .btn-reset {\r\n//     padding: 10px 20px;\r\n//     border: 1px solid #dcdfe4;\r\n//     background: white;\r\n//     color: #44546f;\r\n//     border-radius: 6px;\r\n//     font-weight: 600;\r\n//     cursor: pointer;\r\n//     transition: all 0.2s;\r\n//   }\r\n\r\n//   .btn-reset:hover {\r\n//     background: #f1f2f4;\r\n//     border-color: #c1c7d0;\r\n//   }\r\n\r\n//   .btn-save {\r\n//     padding: 10px 24px;\r\n//     border: none;\r\n//     background: #1976d2;\r\n//     color: white;\r\n//     border-radius: 6px;\r\n//     font-weight: 600;\r\n//     cursor: pointer;\r\n//     transition: background-color 0.2s;\r\n//   }\r\n\r\n//   .btn-save:hover {\r\n//     background: #1565c0;\r\n//   }\r\n\r\n//   .modal-delete-btn {\r\n//     padding: 10px 20px;\r\n//     border: 1px solid #ffcdd2;\r\n//     background: white;\r\n//     color: #d32f2f;\r\n//     border-radius: 6px;\r\n//     font-weight: 600;\r\n//     cursor: pointer;\r\n//     transition: all 0.2s;\r\n//   }\r\n\r\n//   .modal-delete-btn:hover {\r\n//     background: #ffebee;\r\n//     border-color: #ef5350;\r\n//   }\r\n\r\n//   @media (max-width: 767px) {\r\n//     .modal-overlay {\r\n//       padding: 10px;\r\n//     }\r\n    \r\n//     .modal-container.mobile-modal-container {\r\n//       width: 100%;\r\n//       height: 100%;\r\n//       padding: 0;\r\n//     }\r\n\r\n//     .modal.mobile-modal {\r\n//       width: 100%;\r\n//       max-height: 100%;\r\n//       border-radius: 0;\r\n//       margin: 0;\r\n//     }\r\n\r\n//     .modal-header {\r\n//       padding: 16px;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//       cursor: default;\r\n//     }\r\n\r\n//     .modal-close-btn {\r\n//       align-self: flex-end;\r\n//       margin: 0;\r\n//     }\r\n\r\n//     .modal-content-scroll {\r\n//       padding: 0 16px;\r\n//     }\r\n\r\n//     .modal-content {\r\n//       padding: 16px 0;\r\n//       gap: 20px;\r\n//     }\r\n\r\n//     .modal-grid {\r\n//       grid-template-columns: 1fr;\r\n//       gap: 12px;\r\n//     }\r\n\r\n//     .modal-actions {\r\n//       padding: 16px;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//     }\r\n\r\n//     .modal-actions-right {\r\n//       width: 100%;\r\n//       justify-content: space-between;\r\n//     }\r\n\r\n//     .btn-reset, .modal-delete-btn, .btn-save {\r\n//       flex: 1;\r\n//       text-align: center;\r\n//     }\r\n\r\n//     .add-subtask {\r\n//       flex-direction: column;\r\n//     }\r\n\r\n//     .subtasks-list {\r\n//       max-height: 150px;\r\n//     }\r\n//   }\r\n\r\n//   .swimlane-header {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     padding: 12px 16px;\r\n//     background: #fafbfc;\r\n//     border-bottom: 1px solid #dfe5e5;\r\n//     font-weight: 600;\r\n//     font-size: 14px;\r\n//     color: #172b4d;\r\n//   }\r\n//   .swimlane-toggle, .swimlane-icon {\r\n//     color: #5e6c84;\r\n//     margin-right: 8px;\r\n//     cursor: pointer;\r\n//   }\r\n//   .swimlane-toggle {\r\n//     border: none;\r\n//     background: transparent;\r\n//     font-size: 14px;\r\n//   }\r\n//   .swimlane-icon {\r\n//     font-size: 18px;\r\n//   }\r\n//   .swimlane-title-input {\r\n//     border: 1px solid #dfe5e5;\r\n//     border-radius: 4px;\r\n//     padding: 4px 8px;\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     background: white;\r\n//     margin-right: 8px;\r\n//     min-width: 150px;\r\n//     color: #172b4d;\r\n//   }\r\n//   .swimlane-title-input:focus {\r\n//     outline: none;\r\n//     border-color: #1976d2;\r\n//   }\r\n//   .swimlane-count {\r\n//     color: #5e6c84;\r\n//     font-size: 12px;\r\n//     font-weight: normal;\r\n//   }\r\n//   .col-header {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     margin-bottom: 4px;\r\n//     gap: 6px;\r\n//   }\r\n//   .col-title {\r\n//     font-weight: 600;\r\n//     font-size: 12px;\r\n//     color: #5e6c84;\r\n//     text-transform: uppercase;\r\n//     letter-spacing: 0.5px;\r\n//     flex-grow: 1;\r\n//   }\r\n//   .col-count {\r\n//     background: #dfe5e5;\r\n//     color: #5e6c84;\r\n//     border-radius: 12px;\r\n//     padding: 2px 8px;\r\n//     font-size: 11px;\r\n//     font-weight: 600;\r\n//     min-width: 20px;\r\n//     text-align: center;\r\n//   }\r\n//   .col-icons {\r\n//     display: flex;\r\n//     gap: 6px;\r\n//   }\r\n//   .col-icon {\r\n//     cursor: pointer;\r\n//     color: #5e6c84;\r\n//     font-size: 18px;\r\n//     background: none;\r\n//     border: none;\r\n//     padding: 0;\r\n//   }\r\n//   .create-card {\r\n//     background: white;\r\n//     padding: 10px;\r\n//     border-radius: 6px;\r\n//     box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 10px;\r\n//   }\r\n//   button {\r\n//     cursor: pointer;\r\n//     transition: background-color 0.2s;\r\n//   }\r\n//   button:hover {\r\n//     opacity: 0.9;\r\n//   }\r\n//   @media (max-width: 767px) {\r\n//     button, .card-item, .col-icon {\r\n//       min-height: 44px;\r\n//       min-width: 44px;\r\n//     }\r\n//     .card-item {\r\n//       touch-action: manipulation;\r\n//     }\r\n//   }\r\n// `}</style>\r\n\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// const btnStyle = {\r\n//   cancel: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#5e6c84',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   },\r\n//   create: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#1976d2',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   },\r\n//   delete: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#d32f2f',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   }\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// for UI/UX \r\n\r\n\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst mockIssues = [\r\n  { \r\n    id: 'i1', \r\n    epic: 'p1', \r\n    epicName: 'Frontend', \r\n    status: 'todo', \r\n    type: 'Task', \r\n    title: 'Setup repo', \r\n    assignee: 'John Doe', \r\n    storyPoints: 3, \r\n    labels: [], \r\n    dueDate: '2025-09-30', \r\n    reporter: 'admin', \r\n    priority: 'High', \r\n    startDate: '2025-09-15', \r\n    description: 'Setup the initial repository structure and configuration', \r\n    subtasks: [\r\n      { id: 'st1', title: 'Create GitHub repository', completed: true },\r\n      { id: 'st2', title: 'Setup CI/CD pipeline', completed: false },\r\n      { id: 'st3', title: 'Configure linting and formatting', completed: false }\r\n    ], \r\n    comments: 'Initial setup required for the project' \r\n  },\r\n  { \r\n    id: 'i3', \r\n    epic: 'p2', \r\n    epicName: 'Middleware', \r\n    status: 'todo', \r\n    type: 'Subtask', \r\n    title: 'API integration', \r\n    assignee: 'Jane Smith', \r\n    storyPoints: 2, \r\n    labels: [], \r\n    dueDate: '', \r\n    reporter: 'lead-dev', \r\n    priority: 'Low', \r\n    startDate: '2025-09-18', \r\n    description: 'Integrate with external API services', \r\n    subtasks: [\r\n      { id: 'st4', title: 'Design API endpoints', completed: true },\r\n      { id: 'st5', title: 'Implement authentication', completed: false }\r\n    ], \r\n    comments: '' \r\n  }\r\n];\r\n\r\nconst defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\r\nconst mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\r\nconst mockProjects = [\r\n  { id: 'p1', name: 'E-Commerce Platform' },\r\n  { id: 'p2', name: 'API Gateway Service' },\r\n  { id: 'p3', name: 'Mobile App Development' }\r\n];\r\n\r\nconst simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\r\n\r\nconst listIssues = async (projectId) => {\r\n  await simulateApiDelay();\r\n  return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\r\n};\r\nconst listEpics = async () => { await simulateApiDelay(); return mockEpics; };\r\nconst getProjectName = async (projectId) => {\r\n  await simulateApiDelay();\r\n  const project = mockProjects.find(p => p.id === projectId);\r\n  return project ? project.name : 'Untitled Project';\r\n};\r\nconst createEpicAPI = async (epicName) => {\r\n  await simulateApiDelay();\r\n  const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\r\n  mockEpics.push(newEpic);\r\n  return newEpic;\r\n};\r\nconst deleteEpicAPI = async (epicId) => {\r\n  await simulateApiDelay();\r\n  const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\r\n  if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\r\n  const issueIndices = [];\r\n  mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\r\n  issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\r\n};\r\nconst moveIssue = async (issueId, status) => {\r\n  await simulateApiDelay();\r\n  const issue = mockIssues.find(i => i.id === issueId);\r\n  if (!issue) throw new Error('Issue not found');\r\n  issue.status = status;\r\n};\r\nconst createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\r\nconst deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\r\nconst updateIssueAPI = async (updatedIssue) => { \r\n  await simulateApiDelay(); \r\n  const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); \r\n  if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; \r\n};\r\n\r\nconst getSwimlanes = (issues, epics) =>\r\n  epics.map(epic => {\r\n    const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\r\n    return { id: epic.id, title: epic.name, issues: epicIssues };\r\n  });\r\n\r\nexport default function KanbanBoard() {\r\n  const { projectId } = useParams();\r\n  const [issues, setIssues] = useState([]);\r\n  const [epics, setEpics] = useState([]);\r\n  const [projectName, setProjectName] = useState('');\r\n  const [openSwimlanes, setOpenSwimlanes] = useState({});\r\n  const [customTitles, setCustomTitles] = useState({});\r\n  const [createLaneId, setCreateLaneId] = useState(null);\r\n  const [newTaskText, setNewTaskText] = useState('');\r\n  const [newTaskType, setNewTaskType] = useState('Task');\r\n  const [selectedIssue, setSelectedIssue] = useState(null);\r\n  const [editIssue, setEditIssue] = useState(null);\r\n  const [showCreateEpic, setShowCreateEpic] = useState(false);\r\n  const [showDeleteEpic, setShowDeleteEpic] = useState(false);\r\n  const [newEpicName, setNewEpicName] = useState('');\r\n  const [epicToDelete, setEpicToDelete] = useState('');\r\n  const [columnsByLane, setColumnsByLane] = useState({});\r\n  const [columnModal, setColumnModal] = useState(null);\r\n  const [columnInput, setColumnInput] = useState('');\r\n  const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\r\n  const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [activeSwimlane, setActiveSwimlane] = useState(null);\r\n  \r\n  // Draggable modal state\r\n  const [modalDrag, setModalDrag] = useState({\r\n    isDragging: false,\r\n    position: { x: 0, y: 0 },\r\n    startPosition: { x: 0, y: 0 }\r\n  });\r\n  const modalRef = useRef(null);\r\n\r\n  // Subtask management\r\n  const [newSubtaskText, setNewSubtaskText] = useState('');\r\n\r\n  useEffect(() => {\r\n    const checkScreenSize = () => {\r\n      setIsMobile(window.innerWidth < 768);\r\n    };\r\n    checkScreenSize();\r\n    window.addEventListener('resize', checkScreenSize);\r\n    return () => window.removeEventListener('resize', checkScreenSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const projectNameData = projectId ? await getProjectName(projectId) : 'All Projects';\r\n        const [issuesData, epicsData] = await Promise.all([\r\n          listIssues(projectId),\r\n          listEpics()\r\n        ]);\r\n        setIssues(issuesData);\r\n        setEpics(epicsData);\r\n        setProjectName(projectNameData);\r\n        const lanes = getSwimlanes(issuesData, epicsData);\r\n        const initialOpen = {}, initialTitles = {}, initialCols = {};\r\n        lanes.forEach(lane => {\r\n          initialOpen[lane.id] = true;\r\n          initialTitles[lane.id] = lane.title;\r\n          initialCols[lane.id] = defaultStatuses.slice();\r\n        });\r\n        setOpenSwimlanes(initialOpen);\r\n        setCustomTitles(initialTitles);\r\n        setColumnsByLane(initialCols);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [projectId]);\r\n\r\n  // Subtask functions\r\n  const addSubtask = () => {\r\n    if (!newSubtaskText.trim()) return;\r\n    \r\n    const newSubtask = {\r\n      id: `st${Date.now()}`,\r\n      title: newSubtaskText.trim(),\r\n      completed: false\r\n    };\r\n\r\n    setEditIssue(prev => ({\r\n      ...prev,\r\n      subtasks: [...(prev.subtasks || []), newSubtask]\r\n    }));\r\n    \r\n    setNewSubtaskText('');\r\n  };\r\n\r\n  const toggleSubtask = (subtaskId) => {\r\n    setEditIssue(prev => ({\r\n      ...prev,\r\n      subtasks: prev.subtasks.map(subtask =>\r\n        subtask.id === subtaskId \r\n          ? { ...subtask, completed: !subtask.completed }\r\n          : subtask\r\n      )\r\n    }));\r\n  };\r\n\r\n  const deleteSubtask = (subtaskId) => {\r\n    setEditIssue(prev => ({\r\n      ...prev,\r\n      subtasks: prev.subtasks.filter(subtask => subtask.id !== subtaskId)\r\n    }));\r\n  };\r\n\r\n  const handleSubtaskKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      addSubtask();\r\n    }\r\n  };\r\n\r\n  // Draggable modal functions\r\n  const handleModalMouseDown = (e) => {\r\n    if (isMobile) return; // Disable dragging on mobile\r\n    \r\n    // Only start dragging if clicking on the header (not on buttons or inputs)\r\n    if (e.target.closest('.modal-close-btn') || \r\n        e.target.closest('input') || \r\n        e.target.closest('select') || \r\n        e.target.closest('textarea') ||\r\n        e.target.closest('button') ||\r\n        e.target.closest('.subtask-item')) {\r\n      return;\r\n    }\r\n\r\n    setModalDrag({\r\n      isDragging: true,\r\n      position: modalDrag.position,\r\n      startPosition: {\r\n        x: e.clientX - modalDrag.position.x,\r\n        y: e.clientY - modalDrag.position.y\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleModalMouseMove = (e) => {\r\n    if (!modalDrag.isDragging || isMobile) return;\r\n\r\n    const newX = e.clientX - modalDrag.startPosition.x;\r\n    const newY = e.clientY - modalDrag.startPosition.y;\r\n\r\n    setModalDrag(prev => ({\r\n      ...prev,\r\n      position: { x: newX, y: newY }\r\n    }));\r\n  };\r\n\r\n  const handleModalMouseUp = () => {\r\n    if (isMobile) return;\r\n    setModalDrag(prev => ({ ...prev, isDragging: false }));\r\n  };\r\n\r\n  // Reset modal position when closed\r\n  useEffect(() => {\r\n    if (!selectedIssue) {\r\n      setModalDrag({\r\n        isDragging: false,\r\n        position: { x: 0, y: 0 },\r\n        startPosition: { x: 0, y: 0 }\r\n      });\r\n    }\r\n  }, [selectedIssue]);\r\n\r\n  // Add event listeners for dragging\r\n  useEffect(() => {\r\n    if (modalDrag.isDragging) {\r\n      document.addEventListener('mousemove', handleModalMouseMove);\r\n      document.addEventListener('mouseup', handleModalMouseUp);\r\n      document.body.style.cursor = 'grabbing';\r\n      document.body.style.userSelect = 'none';\r\n    } else {\r\n      document.removeEventListener('mousemove', handleModalMouseMove);\r\n      document.removeEventListener('mouseup', handleModalMouseUp);\r\n      document.body.style.cursor = '';\r\n      document.body.style.userSelect = '';\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('mousemove', handleModalMouseMove);\r\n      document.removeEventListener('mouseup', handleModalMouseUp);\r\n      document.body.style.cursor = '';\r\n      document.body.style.userSelect = '';\r\n    };\r\n  }, [modalDrag.isDragging]);\r\n\r\n  const openAddColumnModal = (e, laneId, colIndex) => {\r\n    const rect = e.currentTarget.getBoundingClientRect();\r\n    setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\r\n    setColumnModal({ laneId, colIndex, type: 'add' });\r\n    setColumnInput('');\r\n  };\r\n  const openEditColumnModal = (e, laneId, colIndex, status) => {\r\n    const rect = e.currentTarget.getBoundingClientRect();\r\n    setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\r\n    setColumnModal({ laneId, colIndex, type: 'menu' });\r\n    setColumnInput(status);\r\n  };\r\n  const handleAddColumn = () => {\r\n    const name = columnInput.trim();\r\n    if (!name) return alert('Column name is required');\r\n    setColumnsByLane(prev => {\r\n      const cols = [...prev[columnModal.laneId]];\r\n      if (cols.includes(name.toLowerCase())) alert('Column name already exists');\r\n      else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\r\n      return { ...prev, [columnModal.laneId]: cols };\r\n    });\r\n    setColumnModal(null);\r\n    setColumnInput('');\r\n  };\r\n  const handleEditColumn = () => {\r\n    const name = columnInput.trim();\r\n    if (!name) return alert('Column name is required');\r\n    const { laneId, colIndex } = columnModal;\r\n    const oldCol = columnsByLane[laneId][colIndex];\r\n    if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\r\n      alert('Column name already exists');\r\n      return;\r\n    }\r\n    setColumnsByLane(prev => {\r\n      const cols = [...prev[laneId]];\r\n      cols[colIndex] = name.toLowerCase();\r\n      return { ...prev, [laneId]: cols };\r\n    });\r\n    const updatedIssues = issues.map(issue =>\r\n      (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\r\n    );\r\n    setIssues(updatedIssues);\r\n    setColumnModal(null);\r\n    setColumnInput('');\r\n  };\r\n  const handleDeleteColumn = () => {\r\n    const { laneId, colIndex } = columnModal;\r\n    const removedCol = columnsByLane[laneId][colIndex];\r\n    setColumnsByLane(prev => {\r\n      const cols = [...prev[laneId]];\r\n      cols.splice(colIndex, 1);\r\n      return { ...prev, [laneId]: cols };\r\n    });\r\n    const updatedIssues = issues.map(issue =>\r\n      (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\r\n    );\r\n    setIssues(updatedIssues);\r\n    setColumnModal(null);\r\n    setColumnInput('');\r\n  };\r\n  const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\r\n  const byStatus = (collection, status) => collection.filter(i => i.status === status);\r\n\r\n  const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\r\n  const onDrop = async (e, targetStatus, swimlaneId) => {\r\n    e.preventDefault();\r\n    try {\r\n      const issueId = e.dataTransfer.getData('text/plain');\r\n      const issue = issues.find(i => i.id === issueId);\r\n      const srcLaneId = issue.epic || issue.projectId;\r\n      if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\r\n        await moveIssue(issueId, targetStatus);\r\n        const refreshed = await listIssues(projectId);\r\n        setIssues(refreshed);\r\n      }\r\n    } catch (err) { console.error(err); }\r\n  };\r\n  const onDragOver = e => e.preventDefault();\r\n\r\n  const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\r\n  const handleCreateSubmit = async lane => {\r\n    if (!newTaskText.trim()) { alert('Task title is required'); return; }\r\n    const newIssue = {\r\n      id: Math.random().toString(36).slice(2),\r\n      epic: lane.id,\r\n      projectId: lane.id,\r\n      epicName: lane.title,\r\n      title: newTaskText,\r\n      status: 'backlog',\r\n      assignee: '',\r\n      type: newTaskType,\r\n      storyPoints: '',\r\n      labels: [],\r\n      dueDate: '',\r\n      reporter: 'system',\r\n      priority: 'Medium',\r\n      startDate: new Date().toISOString().split('T')[0],\r\n      description: '',\r\n      subtasks: [],\r\n      comments: ''\r\n    };\r\n    try {\r\n      await createIssueAPI(newIssue);\r\n      const refreshed = await listIssues(projectId);\r\n      setIssues(refreshed);\r\n      setCreateLaneId(null);\r\n    } catch (err) { console.error(err); }\r\n  };\r\n\r\n  const handleOpenModal = (issue) => { \r\n    setSelectedIssue(issue); \r\n    setEditIssue({ ...issue }); \r\n    setNewSubtaskText('');\r\n    // Reset position when opening new modal\r\n    setModalDrag({\r\n      isDragging: false,\r\n      position: { x: 0, y: 0 },\r\n      startPosition: { x: 0, y: 0 }\r\n    });\r\n  };\r\n  const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\r\n  const handleSave = async () => { \r\n    await updateIssueAPI(editIssue); \r\n    const refreshed = await listIssues(projectId); \r\n    setIssues(refreshed); \r\n    setSelectedIssue(null); \r\n    setEditIssue(null); \r\n  };\r\n  const handleReset = () => { setEditIssue({ ...selectedIssue }); };\r\n\r\n  const handleCreateEpic = async () => {\r\n    if (!newEpicName.trim()) {\r\n      alert('Epic name is required');\r\n      return;\r\n    }\r\n    try {\r\n      await createEpicAPI(newEpicName);\r\n      const updatedEpics = await listEpics();\r\n      setEpics(updatedEpics);\r\n      setNewEpicName('');\r\n      setShowCreateEpic(false);\r\n      const newEpic = updatedEpics[updatedEpics.length - 1];\r\n      setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\r\n      setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\r\n      setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\r\n    } catch (error) {\r\n      console.error('Error creating epic:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteEpic = async () => {\r\n    if (!epicToDelete) {\r\n      alert('Please select an epic to delete');\r\n      return;\r\n    }\r\n    if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\r\n      return;\r\n    }\r\n    try {\r\n      await deleteEpicAPI(epicToDelete);\r\n      const [refreshedIssues, refreshedEpics] = await Promise.all([\r\n        listIssues(projectId),\r\n        listEpics()\r\n      ]);\r\n      setIssues(refreshedIssues);\r\n      setEpics(refreshedEpics);\r\n      setEpicToDelete('');\r\n      setShowDeleteEpic(false);\r\n      setColumnsByLane(prev => {\r\n        const copy = { ...prev };\r\n        delete copy[epicToDelete];\r\n        return copy;\r\n      });\r\n      setOpenSwimlanes(prev => {\r\n        const copy = { ...prev };\r\n        delete copy[epicToDelete];\r\n        return copy;\r\n      });\r\n      setCustomTitles(prev => {\r\n        const copy = { ...prev };\r\n        delete copy[epicToDelete];\r\n        return copy;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error deleting epic:', error);\r\n    }\r\n  };\r\n\r\n  const toggleMobileSwimlane = (laneId) => {\r\n    if (activeSwimlane === laneId) {\r\n      setActiveSwimlane(null);\r\n    } else {\r\n      setActiveSwimlane(laneId);\r\n    }\r\n  };\r\n\r\n  const swimlanes = getSwimlanes(issues, epics);\r\n\r\n  // Calculate subtask progress\r\n  const getSubtaskProgress = (subtasks) => {\r\n    if (!subtasks || subtasks.length === 0) return { completed: 0, total: 0, percentage: 0 };\r\n    const completed = subtasks.filter(st => st.completed).length;\r\n    const total = subtasks.length;\r\n    const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;\r\n    return { completed, total, percentage };\r\n  };\r\n\r\n  return (\r\n    <div className=\"board-wrap\">\r\n      {/* Project Name Header */}\r\n      <div className=\"project-header\">\r\n        <h1 className=\"project-title\">{projectName}</h1>\r\n        <div className=\"project-stats\">\r\n          <span className=\"project-stat\">{epics.length} Epics</span>\r\n          <span className=\"project-stat\">{issues.length} Issues</span>\r\n          <span className=\"project-stat\">\r\n            {issues.filter(issue => issue.status === 'done').length} Completed\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      {isMobile && (\r\n        <div className=\"mobile-swimlane-selector\">\r\n          <select\r\n            value={activeSwimlane || ''}\r\n            onChange={(e) => setActiveSwimlane(e.target.value || null)}\r\n            className=\"mobile-select\"\r\n          >\r\n            <option value=\"\">All Swimlanes</option>\r\n            {swimlanes.map(lane => (\r\n              <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      )}\r\n\r\n      {swimlanes.map(lane => {\r\n        const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\r\n        const statuses = columnsByLane[lane.id] || defaultStatuses;\r\n\r\n        if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\r\n          return null;\r\n        }\r\n\r\n        return (\r\n          <section className=\"swimlane\" key={lane.id}>\r\n            <header className=\"swimlane-header\">\r\n              {!isMobile && (\r\n                <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\r\n                  {isOpen ? '▼' : '▶'}\r\n                </button>\r\n              )}\r\n              <span className=\"swimlane-icon\">⚡</span>\r\n              <input\r\n                className=\"swimlane-title-input\"\r\n                value={customTitles[lane.id] || ''}\r\n                onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))}\r\n              />\r\n              <span className=\"swimlane-count\">{lane.issues.length} work items</span>\r\n              {isMobile && (\r\n                <button\r\n                  className=\"mobile-swimlane-toggle\"\r\n                  onClick={() => toggleMobileSwimlane(lane.id)}\r\n                >\r\n                  {activeSwimlane === lane.id ? '▲' : '▼'}\r\n                </button>\r\n              )}\r\n            </header>\r\n            {isOpen && (\r\n              <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\r\n                {statuses.map((status, idx) => {\r\n                  const issuesForStatus = byStatus(lane.issues, status);\r\n                  return (\r\n                    <div\r\n                      className={`kanban-column ${isMobile ? 'mobile-column' : ''}`}\r\n                      key={status}\r\n                      onDragOver={onDragOver}\r\n                      onDrop={e => onDrop(e, status, lane.id)}\r\n                    >\r\n                      <div className=\"col-header\">\r\n                        <span className=\"col-title\">{status.toUpperCase()}</span>\r\n                        {!isMobile && (\r\n                          <span className=\"col-icons\">\r\n                            <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\r\n                            <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\r\n                          </span>\r\n                        )}\r\n                        {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\r\n                      </div>\r\n                      <div className=\"col-create\">\r\n                        {status === 'backlog' && (\r\n                          createLaneId === lane.id ? (\r\n                            <div className=\"create-card\">\r\n                              <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\r\n                              <div className=\"create-actions\">\r\n                                <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\r\n                                  <option>Task</option><option>Subtask</option><option>Bug</option>\r\n                                </select>\r\n                                <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\r\n                                <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\r\n                              </div>\r\n                            </div>\r\n                          ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\r\n                        )}\r\n                      </div>\r\n                      {issuesForStatus.map(issue => {\r\n                        const isHovered = hoveredAssigneeId === issue.id;\r\n                        return (\r\n                          <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\r\n                            <div className=\"card-top\">\r\n                              <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\r\n                              <span className=\"card-id\">{issue.id}</span>\r\n                            </div>\r\n                            <div className=\"card-title\">{issue.title}</div>\r\n                            <div className=\"card-meta\">\r\n                              {issue.assignee && (\r\n                                <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)}>\r\n                                  👤 {issue.assignee}\r\n                                </span>\r\n                              )}\r\n                              {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\r\n                              <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            )}\r\n          </section>\r\n        );\r\n      })}\r\n      {/* Column Add/Edit modal */}\r\n      {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\r\n        <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\r\n          <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\r\n            position: isMobile ? 'fixed' : 'absolute',\r\n            top: isMobile ? '50%' : modalPosition.top,\r\n            left: isMobile ? '50%' : modalPosition.left,\r\n            transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\r\n            minWidth: isMobile ? '90vw' : 280,\r\n            maxWidth: isMobile ? '95vw' : 320,\r\n            padding: 20,\r\n            borderRadius: 10,\r\n            background: 'white',\r\n            boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\r\n            zIndex: 1100\r\n          }}>\r\n            {columnModal.type === 'add' ? (\r\n              <>\r\n                <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\r\n                <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\r\n                <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\r\n                  <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\r\n                  <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\r\n                <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\r\n                <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\r\n                  <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\r\n                  <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\r\n                  <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      {/* Issue modal */}\r\n      {selectedIssue && editIssue && (\r\n        <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\r\n          <div \r\n            className={`modal-container ${isMobile ? 'mobile-modal-container' : ''}`}\r\n            style={\r\n              !isMobile && modalDrag.position.x !== 0 && modalDrag.position.y !== 0\r\n                ? { \r\n                    position: 'fixed',\r\n                    top: modalDrag.position.y,\r\n                    left: modalDrag.position.x,\r\n                    transform: 'none'\r\n                  }\r\n                : {}\r\n            }\r\n            ref={modalRef}\r\n          >\r\n            <div \r\n              className={`modal ${isMobile ? 'mobile-modal' : ''} ${modalDrag.isDragging ? 'modal-dragging' : ''}`}\r\n              onClick={e => e.stopPropagation()}\r\n              onMouseDown={handleModalMouseDown}\r\n            >\r\n              <div className=\"modal-header\">\r\n                <div className=\"modal-header-content\">\r\n                  <span className=\"modal-epic-badge\">{editIssue.epicName}</span>\r\n                  <h2 className=\"modal-title\">{editIssue.title || 'Untitled Issue'}</h2>\r\n                  <div className=\"modal-id-type\">\r\n                    <span className=\"modal-id\">{editIssue.id}</span>\r\n                    <span className={`modal-type modal-type-${editIssue.type.toLowerCase()}`}>{editIssue.type}</span>\r\n                  </div>\r\n                </div>\r\n                <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\r\n              </div>\r\n              \r\n              <div className=\"modal-content-scroll\">\r\n                <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\r\n                  <div className=\"modal-section\">\r\n                    <h3 className=\"modal-section-title\">Details</h3>\r\n                    <div className=\"modal-grid\">\r\n                      <div className=\"modal-field\">\r\n                        <label className=\"modal-label\">Title</label>\r\n                        <input \r\n                          className=\"modal-input\" \r\n                          value={editIssue.title} \r\n                          onChange={e => handleUpdateField('title', e.target.value)} \r\n                          placeholder=\"Enter issue title\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"modal-field\">\r\n                        <label className=\"modal-label\">Status</label>\r\n                        <select \r\n                          className=\"modal-select\"\r\n                          value={editIssue.status} \r\n                          onChange={e => handleUpdateField('status', e.target.value)}\r\n                        >\r\n                          {columnsByLane[editIssue.epic]?.map(st => (\r\n                            <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\r\n                          )) || defaultStatuses.map(st => (\r\n                            <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\r\n                          ))}\r\n                        </select>\r\n                      </div>\r\n                      <div className=\"modal-field\">\r\n                        <label className=\"modal-label\">Assignee</label>\r\n                        <input \r\n                          className=\"modal-input\"\r\n                          value={editIssue.assignee} \r\n                          onChange={e => handleUpdateField('assignee', e.target.value)}\r\n                          placeholder=\"Unassigned\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"modal-field\">\r\n                        <label className=\"modal-label\">Reporter</label>\r\n                        <input \r\n                          className=\"modal-input modal-input-disabled\"\r\n                          disabled \r\n                          value={editIssue.reporter} \r\n                        />\r\n                      </div>\r\n                      <div className=\"modal-field\">\r\n                        <label className=\"modal-label\">Priority</label>\r\n                        <select \r\n                          className=\"modal-select\"\r\n                          value={editIssue.priority} \r\n                          onChange={e => handleUpdateField('priority', e.target.value)}\r\n                        >\r\n                          <option>Low</option>\r\n                          <option>Medium</option>\r\n                          <option>High</option>\r\n                        </select>\r\n                      </div>\r\n                      <div className=\"modal-field\">\r\n                        <label className=\"modal-label\">Story Points</label>\r\n                        <input \r\n                          className=\"modal-input\"\r\n                          type=\"number\" \r\n                          value={editIssue.storyPoints} \r\n                          onChange={e => handleUpdateField('storyPoints', e.target.value)}\r\n                          placeholder=\"0\"\r\n                        />\r\n                      </div>\r\n                      <div className=\"modal-field\">\r\n                        <label className=\"modal-label\">Start Date</label>\r\n                        <input \r\n                          className=\"modal-input\"\r\n                          type=\"date\" \r\n                          value={editIssue.startDate} \r\n                          onChange={e => handleUpdateField('startDate', e.target.value)} \r\n                        />\r\n                      </div>\r\n                      <div className=\"modal-field\">\r\n                        <label className=\"modal-label\">Due Date</label>\r\n                        <input \r\n                          className=\"modal-input\"\r\n                          type=\"date\" \r\n                          value={editIssue.dueDate} \r\n                          onChange={e => handleUpdateField('dueDate', e.target.value)} \r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"modal-section\">\r\n                    <h3 className=\"modal-section-title\">Description</h3>\r\n                    <div className=\"modal-field-full\">\r\n                      <textarea \r\n                        className=\"modal-textarea\"\r\n                        rows=\"4\" \r\n                        value={editIssue.description} \r\n                        onChange={e => handleUpdateField('description', e.target.value)}\r\n                        placeholder=\"Add a detailed description...\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"modal-section\">\r\n                    <h3 className=\"modal-section-title\">Subtasks</h3>\r\n                    <div className=\"modal-field-full\">\r\n                      <div className=\"subtasks-container\">\r\n                        <div className=\"subtasks-header\">\r\n                          <span className=\"subtasks-title\">\r\n                            Subtasks ({getSubtaskProgress(editIssue.subtasks).completed}/{getSubtaskProgress(editIssue.subtasks).total})\r\n                          </span>\r\n                          {editIssue.subtasks && editIssue.subtasks.length > 0 && (\r\n                            <div className=\"subtask-progress-bar\">\r\n                              <div \r\n                                className=\"subtask-progress-fill\" \r\n                                style={{ width: `${getSubtaskProgress(editIssue.subtasks).percentage}%` }}\r\n                              ></div>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        \r\n                        <div className=\"subtasks-list\">\r\n                          {editIssue.subtasks && editIssue.subtasks.length > 0 ? (\r\n                            editIssue.subtasks.map((subtask) => (\r\n                              <div key={subtask.id} className=\"subtask-item\">\r\n                                <label className=\"subtask-checkbox\">\r\n                                  <input\r\n                                    type=\"checkbox\"\r\n                                    checked={subtask.completed}\r\n                                    onChange={() => toggleSubtask(subtask.id)}\r\n                                  />\r\n                                  <span className={`subtask-text ${subtask.completed ? 'completed' : ''}`}>\r\n                                    {subtask.title}\r\n                                  </span>\r\n                                </label>\r\n                                <button\r\n                                  className=\"subtask-delete-btn\"\r\n                                  onClick={() => deleteSubtask(subtask.id)}\r\n                                  title=\"Delete subtask\"\r\n                                >\r\n                                  ✕\r\n                                </button>\r\n                              </div>\r\n                            ))\r\n                          ) : (\r\n                            <div className=\"no-subtasks\">No subtasks added yet</div>\r\n                          )}\r\n                        </div>\r\n\r\n                        <div className=\"add-subtask\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"subtask-input\"\r\n                            placeholder=\"Add a new subtask...\"\r\n                            value={newSubtaskText}\r\n                            onChange={(e) => setNewSubtaskText(e.target.value)}\r\n                            onKeyPress={handleSubtaskKeyPress}\r\n                          />\r\n                          <button\r\n                            className=\"add-subtask-btn\"\r\n                            onClick={addSubtask}\r\n                            disabled={!newSubtaskText.trim()}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"modal-section\">\r\n                    <h3 className=\"modal-section-title\">Comments</h3>\r\n                    <div className=\"modal-field-full\">\r\n                      <textarea \r\n                        className=\"modal-textarea\"\r\n                        rows=\"3\" \r\n                        value={editIssue.comments} \r\n                        onChange={e => handleUpdateField('comments', e.target.value)}\r\n                        placeholder=\"Add comments...\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"modal-actions\">\r\n                <button className=\"btn-reset\" onClick={handleReset}>Reset Changes</button>\r\n                <div className=\"modal-actions-right\">\r\n                  <button \r\n                    className=\"modal-delete-btn\" \r\n                    onClick={async () => {\r\n                      if (window.confirm('Are you sure you want to delete this issue?')) {\r\n                        await deleteIssueAPI(selectedIssue.id);\r\n                        const refreshed = await listIssues(projectId);\r\n                        setIssues(refreshed);\r\n                        setSelectedIssue(null);\r\n                      }\r\n                    }}\r\n                  >\r\n                    Delete Issue\r\n                  </button>\r\n                  <button className=\"btn-save\" onClick={handleSave}>Save Changes</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Inline CSS styles */}\r\n<style>{`\r\n\r\n\r\n  body {\r\n    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif;\r\n    background-color: #D0F0F4; /* changed to requested color */\r\n    margin: 0;\r\n    padding: 16px;\r\n  }\r\n  .board-wrap {\r\n    max-width: 100%;\r\n    overflow-x: auto;\r\n  }\r\n  .project-header {\r\n    background: #dbeafe;\r\n    border-radius: 8px;\r\n    padding: 20px 24px;\r\n    margin-bottom: 20px;\r\n    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n    border-left: 4px solid #1976d2;\r\n  }\r\n  .project-title {\r\n    margin: 0 0 12px 0;\r\n    font-size: 28px;\r\n    font-weight: 700;\r\n    color: #172b4d;\r\n    line-height: 1.2;\r\n  }\r\n  .project-stats {\r\n    display: flex;\r\n    gap: 20px;\r\n    flex-wrap: wrap;\r\n  }\r\n  .project-stat {\r\n    background: #dbeafe;\r\n    padding: 6px 12px;\r\n    border-radius: 16px;\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    color: #5e6c84;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 4px;\r\n  }\r\n  .project-stat:before {\r\n    content: \"•\";\r\n    color: #1976d2;\r\n    font-weight: bold;\r\n  }\r\n  @media (min-width: 768px) {\r\n    .swimlane {\r\n      background: #dbeafe;\r\n      border-radius: 8px;\r\n      margin-bottom: 16px;\r\n      box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n      overflow: hidden;\r\n    }\r\n    .kanban-row {\r\n      display: flex;\r\n      padding: 16px;\r\n      gap: 12px;\r\n      overflow-x: auto;\r\n    }\r\n    .kanban-column {\r\n      flex: 0 0 260px;\r\n      background: #f5f6f8;\r\n      border-radius: 6px;\r\n      padding: 12px;\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 12px;\r\n      border: 1px solid #dfe5e5;\r\n      user-select: none;\r\n      min-height: 400px;\r\n    }\r\n  }\r\n  @media (max-width: 767px) {\r\n    body {\r\n      padding: 8px;\r\n    }\r\n    .project-header {\r\n      padding: 16px;\r\n      margin-bottom: 16px;\r\n      border-left-width: 3px;\r\n    }\r\n    .project-title {\r\n      font-size: 22px;\r\n      margin-bottom: 10px;\r\n    }\r\n    .project-stats {\r\n      gap: 12px;\r\n    }\r\n    .project-stat {\r\n      font-size: 12px;\r\n      padding: 4px 10px;\r\n    }\r\n    .mobile-swimlane-selector {\r\n      margin-bottom: 16px;\r\n      position: sticky;\r\n      top: 0;\r\n      background: white;\r\n      padding: 12px;\r\n      border-radius: 8px;\r\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n      z-index: 100;\r\n    }\r\n    .mobile-select {\r\n      width: 100%;\r\n      padding: 12px;\r\n      border: 1px solid #dfe5e5;\r\n      border-radius: 6px;\r\n      font-size: 16px;\r\n      background: white;\r\n    }\r\n    .swimlane {\r\n      background: #dbeafe;\r\n      border-radius: 8px;\r\n      margin-bottom: 12px;\r\n      box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n      overflow: hidden;\r\n    }\r\n    .swimlane-header {\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 12px;\r\n      background: #fafbfc;\r\n      border-bottom: 1px solid #dfe5e5;\r\n      font-weight: 600;\r\n      font-size: 14px;\r\n      color: #172b4d;\r\n      position: relative;\r\n    }\r\n    .mobile-swimlane-toggle {\r\n      background:#dbeafe;\r\n      border: none;\r\n      font-size: 16px;\r\n      color: #5e6c84;\r\n      margin-left: auto;\r\n      padding: 4px 8px;\r\n    }\r\n    .kanban-row.mobile-view {\r\n      display: block;\r\n      padding: 8px;\r\n      overflow-x: auto;\r\n      white-space: nowrap;\r\n    }\r\n    .kanban-column.mobile-column {\r\n      display: inline-block;\r\n      vertical-align: top;\r\n      width: 280px;\r\n      margin-right: 8px;\r\n      background: #dbeafe;\r\n      border-radius: 6px;\r\n      padding: 8px;\r\n      border: 1px solid #dfe5e5;\r\n      user-select: none;\r\n      min-height: 300px;\r\n    }\r\n    .col-header {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 8px;\r\n      gap: 6px;\r\n    }\r\n    .col-title {\r\n      font-weight: 600;\r\n      font-size: 11px;\r\n      color: #5e6c84;\r\n      text-transform: uppercase;\r\n      letter-spacing: 0.5px;\r\n      flex-grow: 1;\r\n    }\r\n    .card-item {\r\n      background: #dbeafe;\r\n      border-radius: 6px;\r\n      padding: 10px;\r\n      box-shadow: 0 0 2px rgba(0,0,0,0.1);\r\n      cursor: pointer;\r\n      user-select: none;\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 6px;\r\n      border: 1px solid #dfe5e5;\r\n      margin-bottom: 8px;\r\n    }\r\n    .card-title {\r\n      font-weight: 600;\r\n      font-size: 13px;\r\n      color: #2b3a59;\r\n      line-height: 1.3;\r\n    }\r\n    .card-meta {\r\n      display: flex;\r\n      gap: 6px;\r\n      font-size: 10px;\r\n      color: #6b7c93;\r\n      align-items: center;\r\n      flex-wrap: wrap;\r\n    }\r\n    .modal.mobile-modal {\r\n      width: 100%;\r\n      max-height: 90vh;\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n    .modal-content.mobile-modal-content {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 12px;\r\n      overflow-y: auto;\r\n    }\r\n    .modal-field {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 4px;\r\n    }\r\n    .modal-field input, .modal-field textarea, .modal-field select {\r\n      padding: 10px;\r\n      font-size: 16px;\r\n    }\r\n    .modal-actions {\r\n      display: flex;\r\n      gap: 8px;\r\n      justify-content: space-between;\r\n      margin-top: 16px;\r\n    }\r\n    .modal-actions button {\r\n      flex: 1;\r\n      padding: 12px;\r\n      font-size: 16px;\r\n    }\r\n  }\r\n\r\n  /* Card Styles - Only Title, Assignee, Due Date, and Priority */\r\n  .card-item {\r\n    background: white;\r\n    border-radius: 8px;\r\n    padding: 12px;\r\n    box-shadow: 0 0 2px rgba(0,0,0,0.1);\r\n    cursor: pointer;\r\n    user-select: none;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 8px;\r\n    border: 1px solid #dfe5e5;\r\n    transition: box-shadow 0.2s ease, border-color 0.2s ease;\r\n  }\r\n\r\n  .card-item:hover {\r\n    box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\r\n    border-color: #a2adba;\r\n  }\r\n\r\n  .card-top {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-start;\r\n    gap: 8px;\r\n  }\r\n\r\n  .card-tag {\r\n    padding: 2px 6px;\r\n    border-radius: 4px;\r\n    font-size: 10px;\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n  }\r\n\r\n  .card-tag-task { background: #e3f2fd; color: #1976d2; }\r\n  .card-tag-subtask { background: #f3e5f5; color: #7b1fa2; }\r\n  .card-tag-bug { background: #ffebee; color: #d32f2f; }\r\n\r\n  .card-id {\r\n    font-size: 10px;\r\n    color: #6b7c93;\r\n    font-family: 'Monaco', 'Menlo', monospace;\r\n    font-weight: 600;\r\n  }\r\n\r\n  .card-title {\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n    color: #2b3a59;\r\n    line-height: 1.3;\r\n    margin: 0;\r\n    word-break: break-word;\r\n  }\r\n\r\n  .card-meta {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 6px;\r\n  }\r\n\r\n  .card-assignee {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 4px;\r\n    font-size: 11px;\r\n    color: #5e6c84;\r\n    font-weight: 500;\r\n  }\r\n\r\n  .card-due {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 4px;\r\n    font-size: 11px;\r\n    color: #d32f2f;\r\n    font-weight: 500;\r\n  }\r\n\r\n  .card-priority {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 4px;\r\n    font-size: 11px;\r\n    font-weight: 600;\r\n    padding: 2px 6px;\r\n    border-radius: 4px;\r\n    width: fit-content;\r\n  }\r\n\r\n  .card-priority.high { background: #ffebee; color: #d32f2f; }\r\n  .card-priority.medium { background: #fff3e0; color: #f57c00; }\r\n  .card-priority.low { background: #e8f5e8; color: #388e3c; }\r\n\r\n  /* Modal Subtasks Styles */\r\n  .subtasks-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 12px;\r\n  }\r\n\r\n  .subtasks-header {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 8px;\r\n  }\r\n\r\n  .subtasks-title {\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    color: #44546f;\r\n  }\r\n\r\n  .subtasks-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 8px;\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n  }\r\n\r\n  .subtask-item {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 8px 12px;\r\n    background: #f8f9fa;\r\n    border-radius: 6px;\r\n    border: 1px solid #e1e4e8;\r\n    transition: background-color 0.2s;\r\n  }\r\n\r\n  .subtask-item:hover {\r\n    background: #f1f2f4;\r\n  }\r\n\r\n  .subtask-checkbox {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n    flex: 1;\r\n    cursor: pointer;\r\n    margin: 0;\r\n  }\r\n\r\n  .subtask-checkbox input[type=\"checkbox\"] {\r\n    margin: 0;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .subtask-text {\r\n    font-size: 14px;\r\n    color: #44546f;\r\n    transition: all 0.2s;\r\n  }\r\n\r\n  .subtask-text.completed {\r\n    text-decoration: line-through;\r\n    color: #8b9cb1;\r\n  }\r\n\r\n  .subtask-delete-btn {\r\n    background: none;\r\n    border: none;\r\n    color: #d32f2f;\r\n    cursor: pointer;\r\n    padding: 4px;\r\n    border-radius: 4px;\r\n    font-size: 12px;\r\n    transition: background-color 0.2s;\r\n  }\r\n\r\n  .subtask-delete-btn:hover {\r\n    background: #ffebee;\r\n  }\r\n\r\n  .no-subtasks {\r\n    text-align: center;\r\n    color: #8b9cb1;\r\n    font-style: italic;\r\n    padding: 16px;\r\n    font-size: 14px;\r\n  }\r\n\r\n  .add-subtask {\r\n    display: flex;\r\n    gap: 8px;\r\n  }\r\n\r\n  .subtask-input {\r\n    flex: 1;\r\n    padding: 8px 12px;\r\n    border: 2px solid #dfe1e6;\r\n    border-radius: 6px;\r\n    font-size: 14px;\r\n    transition: border-color 0.2s;\r\n  }\r\n\r\n  .subtask-input:focus {\r\n    outline: none;\r\n    border-color: #1976d2;\r\n  }\r\n\r\n  .add-subtask-btn {\r\n    padding: 8px 16px;\r\n    background: #1976d2;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 6px;\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    cursor: pointer;\r\n    transition: background-color 0.2s;\r\n  }\r\n\r\n  .add-subtask-btn:hover:not(:disabled) {\r\n    background: #1565c0;\r\n  }\r\n\r\n  .add-subtask-btn:disabled {\r\n    background: #b0bec5;\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  /* Enhanced Modal Styles - Fixed Positioning with Dragging */\r\n  .modal-overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background: rgba(0,0,0,0.6);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    z-index: 10000;\r\n    padding: 20px;\r\n  }\r\n\r\n  .modal-container {\r\n    width: 100%;\r\n    max-width: 1000px;\r\n    max-height: 85vh;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: none;\r\n  }\r\n\r\n  .modal {\r\n    background: white;\r\n    border-radius: 12px;\r\n    width: 100%;\r\n    max-height: 85vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n    box-shadow: 0 20px 60px rgba(0,0,0,0.3);\r\n    margin: 0 auto;\r\n    transition: box-shadow 0.2s ease;\r\n  }\r\n\r\n  .modal-dragging {\r\n    box-shadow: 0 25px 80px rgba(0,0,0,0.4);\r\n    cursor: grabbing;\r\n  }\r\n\r\n  .modal-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-start;\r\n    padding: 24px;\r\n    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\r\n    border-bottom: 1px solid #e1e4e8;\r\n    flex-shrink: 0;\r\n    cursor: grab;\r\n    transition: background-color 0.2s ease;\r\n  }\r\n\r\n  .modal-header:hover {\r\n    background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);\r\n  }\r\n\r\n  .modal-dragging .modal-header {\r\n    cursor: grabbing;\r\n    background: linear-gradient(135deg, #dee2e6 0%, #ced4da 100%);\r\n  }\r\n\r\n  .modal-header-content {\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n\r\n  .modal-epic-badge {\r\n    display: inline-block;\r\n    background: #1976d2;\r\n    color: white;\r\n    padding: 4px 12px;\r\n    border-radius: 16px;\r\n    font-size: 12px;\r\n    font-weight: 600;\r\n    margin-bottom: 8px;\r\n  }\r\n\r\n  .modal-title {\r\n    margin: 0 0 8px 0;\r\n    font-size: 24px;\r\n    font-weight: 700;\r\n    color: #172b4d;\r\n    line-height: 1.3;\r\n    word-wrap: break-word;\r\n  }\r\n\r\n  .modal-id-type {\r\n    display: flex;\r\n    gap: 12px;\r\n    align-items: center;\r\n  }\r\n\r\n  .modal-id {\r\n    font-size: 14px;\r\n    color: #5e6c84;\r\n    font-family: 'Monaco', 'Menlo', monospace;\r\n  }\r\n\r\n  .modal-type {\r\n    padding: 2px 8px;\r\n    border-radius: 4px;\r\n    font-size: 12px;\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n  }\r\n\r\n  .modal-type-task { background: #e3f2fd; color: #1976d2; }\r\n  .modal-type-subtask { background: #f3e5f5; color: #7b1fa2; }\r\n  .modal-type-bug { background: #ffebee; color: #d32f2f; }\r\n\r\n  .modal-close-btn {\r\n    background: none;\r\n    border: none;\r\n    font-size: 20px;\r\n    color: #5e6c84;\r\n    cursor: pointer;\r\n    padding: 8px;\r\n    margin: -8px;\r\n    border-radius: 4px;\r\n    transition: background-color 0.2s;\r\n    flex-shrink: 0;\r\n  }\r\n\r\n  .modal-close-btn:hover {\r\n    background: rgba(0,0,0,0.1);\r\n  }\r\n\r\n  .modal-content-scroll {\r\n    flex: 1;\r\n    overflow-y: auto;\r\n    padding: 0 24px;\r\n  }\r\n\r\n  .modal-content {\r\n    padding: 24px 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 24px;\r\n  }\r\n\r\n  .modal-section {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 16px;\r\n  }\r\n\r\n  .modal-section-title {\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #172b4d;\r\n    margin: 0;\r\n    padding-bottom: 8px;\r\n    border-bottom: 2px solid #f0f0f0;\r\n  }\r\n\r\n  .modal-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n    gap: 16px;\r\n  }\r\n\r\n  .modal-field {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 6px;\r\n  }\r\n\r\n  .modal-field-full {\r\n    grid-column: 1 / -1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 6px;\r\n  }\r\n\r\n  .modal-label {\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    color: #44546f;\r\n    margin: 0;\r\n  }\r\n\r\n  .modal-input, .modal-select, .modal-textarea {\r\n    padding: 12px;\r\n    border: 2px solid #dfe1e6;\r\n    border-radius: 8px;\r\n    font-size: 14px;\r\n    font-family: inherit;\r\n    transition: border-color 0.2s, box-shadow 0.2s;\r\n    background: white;\r\n  }\r\n\r\n  .modal-input:focus, .modal-select:focus, .modal-textarea:focus {\r\n    outline: none;\r\n    border-color: #1976d2;\r\n    box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);\r\n  }\r\n\r\n  .modal-input-disabled {\r\n    background: #f8f9fa;\r\n    color: #6b778c;\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  .modal-textarea {\r\n    resize: vertical;\r\n    min-height: 80px;\r\n    line-height: 1.5;\r\n  }\r\n\r\n  .modal-actions {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px 24px;\r\n    background: #f8f9fa;\r\n    border-top: 1px solid #e1e4e8;\r\n    gap: 16px;\r\n    flex-shrink: 0;\r\n  }\r\n\r\n  .modal-actions-right {\r\n    display: flex;\r\n    gap: 12px;\r\n    align-items: center;\r\n  }\r\n\r\n  .btn-reset {\r\n    padding: 10px 20px;\r\n    border: 1px solid #dcdfe4;\r\n    background: white;\r\n    color: #44546f;\r\n    border-radius: 6px;\r\n    font-weight: 600;\r\n    cursor: pointer;\r\n    transition: all 0.2s;\r\n  }\r\n\r\n  .btn-reset:hover {\r\n    background: #f1f2f4;\r\n    border-color: #c1c7d0;\r\n  }\r\n\r\n  .btn-save {\r\n    padding: 10px 24px;\r\n    border: none;\r\n    background: #1976d2;\r\n    color: white;\r\n    border-radius: 6px;\r\n    font-weight: 600;\r\n    cursor: pointer;\r\n    transition: background-color 0.2s;\r\n  }\r\n\r\n  .btn-save:hover {\r\n    background: #1565c0;\r\n  }\r\n\r\n  .modal-delete-btn {\r\n    padding: 10px 20px;\r\n    border: 1px solid #ffcdd2;\r\n    background: white;\r\n    color: #d32f2f;\r\n    border-radius: 6px;\r\n    font-weight: 600;\r\n    cursor: pointer;\r\n    transition: all 0.2s;\r\n  }\r\n\r\n  .modal-delete-btn:hover {\r\n    background: #ffebee;\r\n    border-color: #ef5350;\r\n  }\r\n\r\n  @media (max-width: 767px) {\r\n    .modal-overlay {\r\n      padding: 10px;\r\n    }\r\n    \r\n    .modal-container.mobile-modal-container {\r\n      width: 100%;\r\n      height: 100%;\r\n      padding: 0;\r\n    }\r\n\r\n    .modal.mobile-modal {\r\n      width: 100%;\r\n      max-height: 100%;\r\n      border-radius: 0;\r\n      margin: 0;\r\n    }\r\n\r\n    .modal-header {\r\n      padding: 16px;\r\n      flex-direction: column;\r\n      gap: 12px;\r\n      cursor: default;\r\n    }\r\n\r\n    .modal-close-btn {\r\n      align-self: flex-end;\r\n      margin: 0;\r\n    }\r\n\r\n    .modal-content-scroll {\r\n      padding: 0 16px;\r\n    }\r\n\r\n    .modal-content {\r\n      padding: 16px 0;\r\n      gap: 20px;\r\n    }\r\n\r\n    .modal-grid {\r\n      grid-template-columns: 1fr;\r\n      gap: 12px;\r\n    }\r\n\r\n    .modal-actions {\r\n      padding: 16px;\r\n      flex-direction: column;\r\n      gap: 12px;\r\n    }\r\n\r\n    .modal-actions-right {\r\n      width: 100%;\r\n      justify-content: space-between;\r\n    }\r\n\r\n    .btn-reset, .modal-delete-btn, .btn-save {\r\n      flex: 1;\r\n      text-align: center;\r\n    }\r\n\r\n    .add-subtask {\r\n      flex-direction: column;\r\n    }\r\n\r\n    .subtasks-list {\r\n      max-height: 150px;\r\n    }\r\n  }\r\n\r\n  .swimlane-header {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 12px 16px;\r\n    background: #fafbfc;\r\n    border-bottom: 1px solid #dfe5e5;\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n    color: #172b4d;\r\n  }\r\n  .swimlane-toggle, .swimlane-icon {\r\n    color: #5e6c84;\r\n    margin-right: 8px;\r\n    cursor: pointer;\r\n  }\r\n  .swimlane-toggle {\r\n    border: none;\r\n    background: transparent;\r\n    font-size: 14px;\r\n  }\r\n  .swimlane-icon {\r\n    font-size: 18px;\r\n  }\r\n  .swimlane-title-input {\r\n    border: 1px solid #dfe5e5;\r\n    border-radius: 4px;\r\n    padding: 4px 8px;\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    background: white;\r\n    margin-right: 8px;\r\n    min-width: 150px;\r\n    color: #172b4d;\r\n  }\r\n  .swimlane-title-input:focus {\r\n    outline: none;\r\n    border-color: #1976d2;\r\n  }\r\n  .swimlane-count {\r\n    color: #5e6c84;\r\n    font-size: 12px;\r\n    font-weight: normal;\r\n  }\r\n  .col-header {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 4px;\r\n    gap: 6px;\r\n  }\r\n  .col-title {\r\n    font-weight: 600;\r\n    font-size: 12px;\r\n    color: #5e6c84;\r\n    text-transform: uppercase;\r\n    letter-spacing: 0.5px;\r\n    flex-grow: 1;\r\n  }\r\n  .col-count {\r\n    background: #dfe5e5;\r\n    color: #5e6c84;\r\n    border-radius: 12px;\r\n    padding: 2px 8px;\r\n    font-size: 11px;\r\n    font-weight: 600;\r\n    min-width: 20px;\r\n    text-align: center;\r\n  }\r\n  .col-icons {\r\n    display: flex;\r\n    gap: 6px;\r\n  }\r\n  .col-icon {\r\n    cursor: pointer;\r\n    color: #5e6c84;\r\n    font-size: 18px;\r\n    background: none;\r\n    border: none;\r\n    padding: 0;\r\n  }\r\n  .create-card {\r\n    background: white;\r\n    padding: 10px;\r\n    border-radius: 6px;\r\n    box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    transition: background-color 0.2s;\r\n  }\r\n  button:hover {\r\n    opacity: 0.9;\r\n  }\r\n  @media (max-width: 767px) {\r\n    button, .card-item, .col-icon {\r\n      min-height: 44px;\r\n      min-width: 44px;\r\n    }\r\n    .card-item {\r\n      touch-action: manipulation;\r\n    }\r\n  }\r\n`}</style>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nconst btnStyle = {\r\n  cancel: {\r\n    padding: '10px 18px',\r\n    borderRadius: '6px',\r\n    border: 'none',\r\n    backgroundColor: '#5e6c84',\r\n    color: 'white',\r\n    fontWeight: '600',\r\n    fontSize: '14px',\r\n    cursor: 'pointer'\r\n  },\r\n  create: {\r\n    padding: '10px 18px',\r\n    borderRadius: '6px',\r\n    border: 'none',\r\n    backgroundColor: '#1976d2',\r\n    color: 'white',\r\n    fontWeight: '600',\r\n    fontSize: '14px',\r\n    cursor: 'pointer'\r\n  },\r\n  delete: {\r\n    padding: '10px 18px',\r\n    borderRadius: '6px',\r\n    border: 'none',\r\n    backgroundColor: '#d32f2f',\r\n    color: 'white',\r\n    fontWeight: '600',\r\n    fontSize: '14px',\r\n    cursor: 'pointer'\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// for full code \n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import \"dhtmlx-gantt/codebase/dhtmlxgantt.css\";\n// import gantt from \"dhtmlx-gantt\";\n// import { useProjects } from \"../../context/ProjectContext\";\n\n// const priorityOptions = [\n//   { value: \"Low\", label: \"Low\" },\n//   { value: \"Medium\", label: \"Medium\" },\n//   { value: \"High\", label: \"High\" },\n//   { value: \"Critical\", label: \"Critical\" },\n// ];\n\n// const Timeline = () => {\n//   const ganttContainer = useRef(null);\n//   const { projects, addProject } = useProjects();\n//   const [newProjectText, setNewProjectText] = useState(\"\");\n//   const [newProjectDate, setNewProjectDate] = useState(\"\");\n//   const [newProjectTime, setNewProjectTime] = useState(\"\");\n//   const [newProjectDuration, setNewProjectDuration] = useState(\"\");\n//   const [newProjectPriority, setNewProjectPriority] = useState(\"Low\");\n//   const [hover, setHover] = useState(false);\n//   const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n//   const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\n//   const [isSmallMobile, setIsSmallMobile] = useState(window.innerWidth <= 480);\n//   const [currentTime, setCurrentTime] = useState(new Date());\n//   const [lastAddedId, setLastAddedId] = useState(null);\n\n//   useEffect(() => {\n//     gantt.config.xml_date = \"%Y-%m-%d %H:%i\";\n//     gantt.config.readonly = false;\n//     gantt.config.drag_move = true;\n//     gantt.config.drag_resize = true;\n//     gantt.config.drag_links = true;\n//     gantt.config.auto_scheduling = true;\n//     gantt.config.show_errors = false;\n//     gantt.config.highlight_critical_path = true;\n//     gantt.config.scale_unit = windowWidth > 768 ? \"month\" : \"week\";\n//     gantt.config.date_scale = windowWidth > 768 ? \"%F, %Y\" : \"%M %d\";\n//     gantt.config.subscales =\n//       windowWidth > 768\n//         ? [{ unit: \"week\", step: 1, date: \"%j, %D\" }]\n//         : [{ unit: \"day\", step: 1, date: \"%d\" }];\n\n//     // Add grid columns, including new Priority column\n//     gantt.config.columns = [\n//       { name: \"text\", label: \"Task name\", tree: true, width: \"*\" },\n//       {\n//         name: \"start_date\",\n//         label: \"Start time\",\n//         align: \"center\",\n//         width: 100,\n//         template: (task) =>\n//           task.start_date ? gantt.templates.date_grid(task.start_date) : \"\",\n//       },\n//       { name: \"duration\", label: \"Duration\", align: \"center\", width: 70 },\n//       {\n//         name: \"time\",\n//         label: \"Time\",\n//         align: \"center\",\n//         width: 70,\n//         template: function (task) {\n//           if (!task.start_date) return \"\";\n//           const d = gantt.date.parseDate(task.start_date, \"%Y-%m-%d %H:%i\");\n//           const hh = d.getHours().toString().padStart(2, \"0\");\n//           const mm = d.getMinutes().toString().padStart(2, \"0\");\n//           return `${hh}:${mm}`;\n//         },\n//       },\n//       {\n//         name: \"priority\",\n//         label: \"Priority\",\n//         align: \"center\",\n//         width: 90,\n//         template: function (task) {\n//           return task.priority || \"Low\";\n//         },\n//       },\n//       { name: \"add\", label: \"\", width: 44 },\n//     ];\n\n//     gantt.init(ganttContainer.current);\n//     gantt.clearAll();\n//     gantt.parse({\n//       data: projects,\n//       links: [\n//         { id: 1, source: 1, target: 2, type: \"0\" },\n//         { id: 2, source: 2, target: 3, type: \"0\" },\n//         { id: 3, source: 3, target: 4, type: \"0\" },\n//         { id: 4, source: 4, target: 5, type: \"0\" },\n//       ],\n//     });\n//     gantt.render();\n//   }, [projects, windowWidth]);\n\n//   useEffect(() => {\n//     const handleResize = () => {\n//       const width = window.innerWidth;\n//       setWindowWidth(width);\n//       setIsMobile(width <= 768);\n//       setIsSmallMobile(width <= 480);\n//     };\n//     window.addEventListener(\"resize\", handleResize);\n//     return () => window.removeEventListener(\"resize\", handleResize);\n//   }, []);\n\n//   // Timer to update currentTime every second\n//   useEffect(() => {\n//     const timer = setInterval(() => {\n//       setCurrentTime(new Date());\n//     }, 1000);\n//     return () => clearInterval(timer);\n//   }, []);\n\n//   // Update the start_date of the last added task to the current time, every second\n//   useEffect(() => {\n//     if (lastAddedId === null) return;\n//     const ganttTask = gantt.getTask(lastAddedId);\n//     if (!ganttTask) return;\n\n//     const parsedStartDate = gantt.date.parseDate(ganttTask.start_date, \"%Y-%m-%d %H:%i\");\n//     if (!parsedStartDate) return;\n\n//     // Only update if start_date differs from currentTime (ignoring seconds for smoothness)\n//     const timeDiff =\n//       Math.abs(parsedStartDate.getTime() - currentTime.getTime());\n\n//     if (timeDiff >= 1000) {\n//       gantt.getTask(lastAddedId).start_date = currentTime;\n//       gantt.updateTask(lastAddedId);\n//     }\n//   }, [currentTime, lastAddedId]);\n\n//   const formatDateTime = (date) => {\n//     // Format date to gantt xml_date format \"YYYY-MM-DD HH:ii\"\n//     const year = date.getFullYear();\n//     const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n//     const day = date.getDate().toString().padStart(2, \"0\");\n//     const hours = date.getHours().toString().padStart(2, \"0\");\n//     const mins = date.getMinutes().toString().padStart(2, \"0\");\n//     return `${year}-${month}-${day} ${hours}:${mins}`;\n//   };\n\n//   const handleCreateProject = () => {\n//     if (!newProjectText.trim()) return;\n//     const now = new Date();\n//     const formattedCurrentDate = formatDateTime(now);\n//     const newProject = {\n//       id: Date.now(),\n//       text: newProjectText,\n//       start_date: formattedCurrentDate,\n//       duration: newProjectDuration ? parseInt(newProjectDuration) : 10,\n//       priority: newProjectPriority,\n//       progress: 0,\n//     };\n//     addProject(newProject);\n//     setLastAddedId(newProject.id);\n//     setNewProjectText(\"\");\n//     setNewProjectDate(\"\");\n//     setNewProjectTime(\"\");\n//     setNewProjectDuration(\"\");\n//     setNewProjectPriority(\"Low\");\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\") {\n//       handleCreateProject();\n//     }\n//   };\n\n//   const containerStyle = {\n//     margin: isMobile ? \"15px 10px\" : \"30px auto\",\n//     maxWidth: \"1200px\",\n//     borderRadius: \"16px\",\n//     boxShadow: \"0 20px 40px rgba(0,0,0,0.2)\",\n//     overflow: \"hidden\",\n//     background: \"#D0F0F4\",\n//     fontFamily: \"Segoe UI, sans-serif\",\n//     transform: \"perspective(1000px)\",\n//     transition: \"transform 0.3s ease-in-out\",\n//   };\n\n//   const headerStyle = {\n//     padding: isMobile ? \"18px 15px\" : \"25px\",\n//     background: \"linear-gradient(to right, #6a11cb, #2575fc)\",\n//     color: \"#fff\",\n//     fontSize: isMobile ? \"22px\" : \"28px\",\n//     fontWeight: \"700\",\n//     textAlign: \"center\",\n//     letterSpacing: \"0.8px\",\n//     boxShadow: \"0 4px 12px rgba(0,0,0,0.3)\",\n//     textShadow: \"1px 1px 2px rgba(0,0,0,0.2)\",\n//   };\n\n//   const ganttStyle = {\n//     height: isMobile ? (isSmallMobile ? \"350px\" : \"400px\") : \"600px\",\n//     width: \"100%\",\n//     borderTop: \"1px solid #ccc\",\n//     overflow: \"auto\",\n//   };\n\n//   const inputContainerStyle = {\n//     padding: isMobile ? \"15px\" : \"20px\",\n//     display: \"flex\",\n//     gap: \"12px\",\n//     flexDirection: isSmallMobile ? \"column\" : \"row\",\n//     alignItems: isSmallMobile ? \"stretch\" : \"center\",\n//     flexWrap: \"wrap\",\n//   };\n\n//   const inputStyle = {\n//     flex: \"1\",\n//     padding: isMobile ? \"10px 14px\" : \"12px 16px\",\n//     fontSize: isMobile ? \"14px\" : \"16px\",\n//     borderRadius: \"8px\",\n//     border: \"1px solid #ccc\",\n//     boxShadow: \"inset 0 2px 4px rgba(0,0,0,0.1)\",\n//     transition: \"all 0.3s ease\",\n//     outline: \"none\",\n//     minWidth: \"0\",\n//   };\n\n//   const selectStyle = {\n//     ...inputStyle,\n//     minWidth: \"auto\",\n//   };\n\n//   const buttonStyle = {\n//     padding: isMobile ? \"10px 16px\" : \"12px 20px\",\n//     fontSize: isMobile ? \"14px\" : \"16px\",\n//     borderRadius: \"8px\",\n//     background: \"#8c6deaff\",\n//     color: \"#fff\",\n//     border: \"none\",\n//     cursor: \"pointer\",\n//     boxShadow: \"0 4px 12px rgba(0,0,0,0.2)\",\n//     transition: \"transform 0.2s ease, box-shadow 0.2s ease\",\n//     whiteSpace: \"nowrap\",\n//     minWidth: isSmallMobile ? \"100%\" : \"auto\",\n//   };\n\n//   const buttonHoverStyle = {\n//     transform: \"scale(1.05)\",\n//     boxShadow: \"0 6px 16px rgba(0,0,0,0.3)\",\n//   };\n\n//   return (\n//     <div style={containerStyle}>\n//       <div style={headerStyle}>{isMobile ? \"ðŸ“… Timeline\" : \"ðŸ“… Project Timeline\"}</div>\n//       <div style={inputContainerStyle}>\n//         <input\n//           type=\"text\"\n//           value={newProjectText}\n//           onChange={(e) => setNewProjectText(e.target.value)}\n//           onKeyPress={handleKeyPress}\n//           placeholder={isMobile ? \"New project...\" : \"Enter project name...\"}\n//           style={inputStyle}\n//           aria-label=\"New project name\"\n//         />\n\n//         <input\n//           type=\"number\"\n//           value={newProjectDuration}\n//           onChange={(e) => setNewProjectDuration(e.target.value)}\n//           placeholder=\"Duration (days)\"\n//           style={inputStyle}\n//           aria-label=\"Project duration\"\n//           min=\"1\"\n//         />\n//         <select\n//           value={newProjectPriority}\n//           onChange={(e) => setNewProjectPriority(e.target.value)}\n//           style={selectStyle}\n//           aria-label=\"Project priority\"\n//         >\n//           {priorityOptions.map((option) => (\n//             <option key={option.value} value={option.value}>\n//               {option.label}\n//             </option>\n//           ))}\n//         </select>\n//         <button\n//           onClick={handleCreateProject}\n//           style={hover ? { ...buttonStyle, ...buttonHoverStyle } : buttonStyle}\n//           onMouseEnter={() => setHover(true)}\n//           onMouseLeave={() => setHover(false)}\n//           aria-label=\"Add new project\"\n//         >\n//           {isMobile ? \"âž• Add\" : \"âž• Add\"}\n//         </button>\n//       </div>\n//       <div ref={ganttContainer} style={ganttStyle} className=\"gantt-container\"></div>\n//     </div>\n//   );\n// };\n\n// export default Timeline;\n\n// by using figma","map":{"version":3,"names":[],"sources":["C:/Users/battina srinuvasurao/OneDrive/Desktop/userstool/src/components/timeline/Timeline.js"],"sourcesContent":["// for full code \r\n\r\n\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import \"dhtmlx-gantt/codebase/dhtmlxgantt.css\";\r\n// import gantt from \"dhtmlx-gantt\";\r\n// import { useProjects } from \"../../context/ProjectContext\";\r\n\r\n// const priorityOptions = [\r\n//   { value: \"Low\", label: \"Low\" },\r\n//   { value: \"Medium\", label: \"Medium\" },\r\n//   { value: \"High\", label: \"High\" },\r\n//   { value: \"Critical\", label: \"Critical\" },\r\n// ];\r\n\r\n// const Timeline = () => {\r\n//   const ganttContainer = useRef(null);\r\n//   const { projects, addProject } = useProjects();\r\n//   const [newProjectText, setNewProjectText] = useState(\"\");\r\n//   const [newProjectDate, setNewProjectDate] = useState(\"\");\r\n//   const [newProjectTime, setNewProjectTime] = useState(\"\");\r\n//   const [newProjectDuration, setNewProjectDuration] = useState(\"\");\r\n//   const [newProjectPriority, setNewProjectPriority] = useState(\"Low\");\r\n//   const [hover, setHover] = useState(false);\r\n//   const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n//   const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\r\n//   const [isSmallMobile, setIsSmallMobile] = useState(window.innerWidth <= 480);\r\n//   const [currentTime, setCurrentTime] = useState(new Date());\r\n//   const [lastAddedId, setLastAddedId] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     gantt.config.xml_date = \"%Y-%m-%d %H:%i\";\r\n//     gantt.config.readonly = false;\r\n//     gantt.config.drag_move = true;\r\n//     gantt.config.drag_resize = true;\r\n//     gantt.config.drag_links = true;\r\n//     gantt.config.auto_scheduling = true;\r\n//     gantt.config.show_errors = false;\r\n//     gantt.config.highlight_critical_path = true;\r\n//     gantt.config.scale_unit = windowWidth > 768 ? \"month\" : \"week\";\r\n//     gantt.config.date_scale = windowWidth > 768 ? \"%F, %Y\" : \"%M %d\";\r\n//     gantt.config.subscales =\r\n//       windowWidth > 768\r\n//         ? [{ unit: \"week\", step: 1, date: \"%j, %D\" }]\r\n//         : [{ unit: \"day\", step: 1, date: \"%d\" }];\r\n\r\n//     // Add grid columns, including new Priority column\r\n//     gantt.config.columns = [\r\n//       { name: \"text\", label: \"Task name\", tree: true, width: \"*\" },\r\n//       {\r\n//         name: \"start_date\",\r\n//         label: \"Start time\",\r\n//         align: \"center\",\r\n//         width: 100,\r\n//         template: (task) =>\r\n//           task.start_date ? gantt.templates.date_grid(task.start_date) : \"\",\r\n//       },\r\n//       { name: \"duration\", label: \"Duration\", align: \"center\", width: 70 },\r\n//       {\r\n//         name: \"time\",\r\n//         label: \"Time\",\r\n//         align: \"center\",\r\n//         width: 70,\r\n//         template: function (task) {\r\n//           if (!task.start_date) return \"\";\r\n//           const d = gantt.date.parseDate(task.start_date, \"%Y-%m-%d %H:%i\");\r\n//           const hh = d.getHours().toString().padStart(2, \"0\");\r\n//           const mm = d.getMinutes().toString().padStart(2, \"0\");\r\n//           return `${hh}:${mm}`;\r\n//         },\r\n//       },\r\n//       {\r\n//         name: \"priority\",\r\n//         label: \"Priority\",\r\n//         align: \"center\",\r\n//         width: 90,\r\n//         template: function (task) {\r\n//           return task.priority || \"Low\";\r\n//         },\r\n//       },\r\n//       { name: \"add\", label: \"\", width: 44 },\r\n//     ];\r\n\r\n//     gantt.init(ganttContainer.current);\r\n//     gantt.clearAll();\r\n//     gantt.parse({\r\n//       data: projects,\r\n//       links: [\r\n//         { id: 1, source: 1, target: 2, type: \"0\" },\r\n//         { id: 2, source: 2, target: 3, type: \"0\" },\r\n//         { id: 3, source: 3, target: 4, type: \"0\" },\r\n//         { id: 4, source: 4, target: 5, type: \"0\" },\r\n//       ],\r\n//     });\r\n//     gantt.render();\r\n//   }, [projects, windowWidth]);\r\n\r\n//   useEffect(() => {\r\n//     const handleResize = () => {\r\n//       const width = window.innerWidth;\r\n//       setWindowWidth(width);\r\n//       setIsMobile(width <= 768);\r\n//       setIsSmallMobile(width <= 480);\r\n//     };\r\n//     window.addEventListener(\"resize\", handleResize);\r\n//     return () => window.removeEventListener(\"resize\", handleResize);\r\n//   }, []);\r\n\r\n//   // Timer to update currentTime every second\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       setCurrentTime(new Date());\r\n//     }, 1000);\r\n//     return () => clearInterval(timer);\r\n//   }, []);\r\n\r\n//   // Update the start_date of the last added task to the current time, every second\r\n//   useEffect(() => {\r\n//     if (lastAddedId === null) return;\r\n//     const ganttTask = gantt.getTask(lastAddedId);\r\n//     if (!ganttTask) return;\r\n\r\n//     const parsedStartDate = gantt.date.parseDate(ganttTask.start_date, \"%Y-%m-%d %H:%i\");\r\n//     if (!parsedStartDate) return;\r\n\r\n//     // Only update if start_date differs from currentTime (ignoring seconds for smoothness)\r\n//     const timeDiff =\r\n//       Math.abs(parsedStartDate.getTime() - currentTime.getTime());\r\n\r\n//     if (timeDiff >= 1000) {\r\n//       gantt.getTask(lastAddedId).start_date = currentTime;\r\n//       gantt.updateTask(lastAddedId);\r\n//     }\r\n//   }, [currentTime, lastAddedId]);\r\n\r\n//   const formatDateTime = (date) => {\r\n//     // Format date to gantt xml_date format \"YYYY-MM-DD HH:ii\"\r\n//     const year = date.getFullYear();\r\n//     const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n//     const day = date.getDate().toString().padStart(2, \"0\");\r\n//     const hours = date.getHours().toString().padStart(2, \"0\");\r\n//     const mins = date.getMinutes().toString().padStart(2, \"0\");\r\n//     return `${year}-${month}-${day} ${hours}:${mins}`;\r\n//   };\r\n\r\n//   const handleCreateProject = () => {\r\n//     if (!newProjectText.trim()) return;\r\n//     const now = new Date();\r\n//     const formattedCurrentDate = formatDateTime(now);\r\n//     const newProject = {\r\n//       id: Date.now(),\r\n//       text: newProjectText,\r\n//       start_date: formattedCurrentDate,\r\n//       duration: newProjectDuration ? parseInt(newProjectDuration) : 10,\r\n//       priority: newProjectPriority,\r\n//       progress: 0,\r\n//     };\r\n//     addProject(newProject);\r\n//     setLastAddedId(newProject.id);\r\n//     setNewProjectText(\"\");\r\n//     setNewProjectDate(\"\");\r\n//     setNewProjectTime(\"\");\r\n//     setNewProjectDuration(\"\");\r\n//     setNewProjectPriority(\"Low\");\r\n//   };\r\n\r\n//   const handleKeyPress = (e) => {\r\n//     if (e.key === \"Enter\") {\r\n//       handleCreateProject();\r\n//     }\r\n//   };\r\n\r\n//   const containerStyle = {\r\n//     margin: isMobile ? \"15px 10px\" : \"30px auto\",\r\n//     maxWidth: \"1200px\",\r\n//     borderRadius: \"16px\",\r\n//     boxShadow: \"0 20px 40px rgba(0,0,0,0.2)\",\r\n//     overflow: \"hidden\",\r\n//     background: \"#D0F0F4\",\r\n//     fontFamily: \"Segoe UI, sans-serif\",\r\n//     transform: \"perspective(1000px)\",\r\n//     transition: \"transform 0.3s ease-in-out\",\r\n//   };\r\n\r\n//   const headerStyle = {\r\n//     padding: isMobile ? \"18px 15px\" : \"25px\",\r\n//     background: \"linear-gradient(to right, #6a11cb, #2575fc)\",\r\n//     color: \"#fff\",\r\n//     fontSize: isMobile ? \"22px\" : \"28px\",\r\n//     fontWeight: \"700\",\r\n//     textAlign: \"center\",\r\n//     letterSpacing: \"0.8px\",\r\n//     boxShadow: \"0 4px 12px rgba(0,0,0,0.3)\",\r\n//     textShadow: \"1px 1px 2px rgba(0,0,0,0.2)\",\r\n//   };\r\n\r\n//   const ganttStyle = {\r\n//     height: isMobile ? (isSmallMobile ? \"350px\" : \"400px\") : \"600px\",\r\n//     width: \"100%\",\r\n//     borderTop: \"1px solid #ccc\",\r\n//     overflow: \"auto\",\r\n//   };\r\n\r\n//   const inputContainerStyle = {\r\n//     padding: isMobile ? \"15px\" : \"20px\",\r\n//     display: \"flex\",\r\n//     gap: \"12px\",\r\n//     flexDirection: isSmallMobile ? \"column\" : \"row\",\r\n//     alignItems: isSmallMobile ? \"stretch\" : \"center\",\r\n//     flexWrap: \"wrap\",\r\n//   };\r\n\r\n//   const inputStyle = {\r\n//     flex: \"1\",\r\n//     padding: isMobile ? \"10px 14px\" : \"12px 16px\",\r\n//     fontSize: isMobile ? \"14px\" : \"16px\",\r\n//     borderRadius: \"8px\",\r\n//     border: \"1px solid #ccc\",\r\n//     boxShadow: \"inset 0 2px 4px rgba(0,0,0,0.1)\",\r\n//     transition: \"all 0.3s ease\",\r\n//     outline: \"none\",\r\n//     minWidth: \"0\",\r\n//   };\r\n\r\n//   const selectStyle = {\r\n//     ...inputStyle,\r\n//     minWidth: \"auto\",\r\n//   };\r\n\r\n//   const buttonStyle = {\r\n//     padding: isMobile ? \"10px 16px\" : \"12px 20px\",\r\n//     fontSize: isMobile ? \"14px\" : \"16px\",\r\n//     borderRadius: \"8px\",\r\n//     background: \"#8c6deaff\",\r\n//     color: \"#fff\",\r\n//     border: \"none\",\r\n//     cursor: \"pointer\",\r\n//     boxShadow: \"0 4px 12px rgba(0,0,0,0.2)\",\r\n//     transition: \"transform 0.2s ease, box-shadow 0.2s ease\",\r\n//     whiteSpace: \"nowrap\",\r\n//     minWidth: isSmallMobile ? \"100%\" : \"auto\",\r\n//   };\r\n\r\n//   const buttonHoverStyle = {\r\n//     transform: \"scale(1.05)\",\r\n//     boxShadow: \"0 6px 16px rgba(0,0,0,0.3)\",\r\n//   };\r\n\r\n//   return (\r\n//     <div style={containerStyle}>\r\n//       <div style={headerStyle}>{isMobile ? \"ðŸ“… Timeline\" : \"ðŸ“… Project Timeline\"}</div>\r\n//       <div style={inputContainerStyle}>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={newProjectText}\r\n//           onChange={(e) => setNewProjectText(e.target.value)}\r\n//           onKeyPress={handleKeyPress}\r\n//           placeholder={isMobile ? \"New project...\" : \"Enter project name...\"}\r\n//           style={inputStyle}\r\n//           aria-label=\"New project name\"\r\n//         />\r\n\r\n//         <input\r\n//           type=\"number\"\r\n//           value={newProjectDuration}\r\n//           onChange={(e) => setNewProjectDuration(e.target.value)}\r\n//           placeholder=\"Duration (days)\"\r\n//           style={inputStyle}\r\n//           aria-label=\"Project duration\"\r\n//           min=\"1\"\r\n//         />\r\n//         <select\r\n//           value={newProjectPriority}\r\n//           onChange={(e) => setNewProjectPriority(e.target.value)}\r\n//           style={selectStyle}\r\n//           aria-label=\"Project priority\"\r\n//         >\r\n//           {priorityOptions.map((option) => (\r\n//             <option key={option.value} value={option.value}>\r\n//               {option.label}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//         <button\r\n//           onClick={handleCreateProject}\r\n//           style={hover ? { ...buttonStyle, ...buttonHoverStyle } : buttonStyle}\r\n//           onMouseEnter={() => setHover(true)}\r\n//           onMouseLeave={() => setHover(false)}\r\n//           aria-label=\"Add new project\"\r\n//         >\r\n//           {isMobile ? \"âž• Add\" : \"âž• Add\"}\r\n//         </button>\r\n//       </div>\r\n//       <div ref={ganttContainer} style={ganttStyle} className=\"gantt-container\"></div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Timeline;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// by using figma \r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAuBA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vmoun\\\\OneDrive\\\\Desktop\\\\forusers\\\\userspage\\\\src\\\\components\\\\boards\\\\KanbanBoard.js\",\n  _s = $RefreshSig$();\n// //////////////////////////////////////////////////////////////////\n// //for updated the ticket\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\n// };\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n//   const [columnsByLane, setColumnsByLane] = useState({});\n//   const [columnModal, setColumnModal] = useState(null);\n//   const [columnInput, setColumnInput] = useState('');\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const [issuesData, epicsData] = await Promise.all([listIssues(projectId), listEpics()]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//           initialCols[lane.id] = defaultStatuses.slice();\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//         setColumnsByLane(initialCols);\n//       } catch (err) { console.error(err); }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const openAddColumnModal = (e, laneId, colIndex) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'add' });\n//     setColumnInput('');\n//   };\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\n//     setColumnInput(status);\n//   };\n//   const handleAddColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[columnModal.laneId]];\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\n//       return { ...prev, [columnModal.laneId]: cols };\n//     });\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleEditColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     const { laneId, colIndex } = columnModal;\n//     const oldCol = columnsByLane[laneId][colIndex];\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\n//       alert('Column name already exists');\n//       return;\n//     }\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols[colIndex] = name.toLowerCase();\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleDeleteColumn = () => {\n//     const { laneId, colIndex } = columnModal;\n//     const removedCol = columnsByLane[laneId][colIndex];\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols.splice(colIndex, 1);\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) { console.error(err); }\n//   };\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error(err); }\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   // Create Epic Modal Handlers\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) {\n//       alert('Epic name is required');\n//       return;\n//     }\n//     try {\n//       await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\n//     } catch (error) {\n//       console.error('Error creating epic:', error);\n//     }\n//   };\n\n//   // Delete Epic Modal Handler\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) {\n//       alert('Please select an epic to delete');\n//       return;\n//     }\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//       setColumnsByLane(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setOpenSwimlanes(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setCustomTitles(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//     } catch (error) {\n//       console.error('Error deleting epic:', error);\n//     }\n//   };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Epic management buttons */}\n//       <div className=\"epic-management-section\">\n//         <div className=\"epic-buttons-container\">\n//           {/* <button className=\"create-epic-btn\" onClick={() => { setShowCreateEpic(true); setShowDeleteEpic(false); }}>+ Create Epic</button>\n//           <button className=\"delete-epic-btn\" onClick={() => { setShowDeleteEpic(true); setShowCreateEpic(false); }}>🗑 Delete Epic</button> */}\n//         </div>\n\n//       </div>\n\n//       {/* Swimlanes and columns */}\n//       {swimlanes.map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>{isOpen ? '▼' : '▶'}</button>\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input className=\"swimlane-title-input\" value={customTitles[lane.id] || ''} onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))} />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\">\n//                 {statuses.map((status, idx) => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div className=\"kanban-column\" key={status} onDragOver={onDragOver} onDrop={e => onDrop(e, status, lane.id)}>\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         <span className=\"col-icons\">\n//                           <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\n//                           <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\n//                         </span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => {\n//                         const isHovered = hoveredAssigneeId === issue.id;\n//                         return (\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                             <div className=\"card-top\">\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                               <span className=\"card-id\">{issue.id}</span>\n//                             </div>\n//                             <div className=\"card-title\">{issue.title}</div>\n//                             <div className=\"card-meta\">\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\n//                               {issue.assignee && (\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\n//                                   👤\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\n//                                 </span>\n//                               )}\n//                             </div>\n//                           </div>\n//                         );\n//                       })}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Column Add/Edit modal */}\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\n//             position: 'absolute',\n//             top: modalPosition.top,\n//             left: modalPosition.left,\n//             transform: 'translateX(-50%)',\n//             minWidth: 280,\n//             maxWidth: 320,\n//             padding: 20,\n//             borderRadius: 10,\n//             background: 'white',\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\n//             zIndex: 1100\n//           }}>\n//             {columnModal.type === 'add' ? (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12 }}>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12 }}>\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                 </div>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Issue modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className=\"modal\" onClick={e => e.stopPropagation()}>\n//             <div className=\"modal-header\">\n//               <h2>{editIssue.epicName}</h2>\n//               <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\n//             </div>\n//             <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Status</label>\n//               <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\n//                 {columnsByLane[editIssue.epic]?.map(st => <option key={st} value={st}>{st}</option>) || defaultStatuses.map(st => <option key={st} value={st}>{st}</option>)}\n//               </select>\n//             </div>\n//             <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//             <div className=\"modal-field\"><label>Priority</label>\n//               <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                 <option>Low</option><option>Medium</option><option>High</option>\n//               </select>\n//             </div>\n//             <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\", alignItems: 'center' }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//               <button className=\"modal-delete-btn\" onClick={async () => {\n//                 if (window.confirm('Delete this issue?')) {\n//                   await deleteIssueAPI(selectedIssue.id);\n//                   const refreshed = await listIssues(projectId);\n//                   setIssues(refreshed);\n//                   setSelectedIssue(null);\n//                 }\n//               }}>🗑</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Inline CSS styles */}\n//       <style>{`\n//         /* Include the full CSS from the previous answer - Kanban board styling, tooltip, modals, buttons */\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f5f6f8;\n//           margin: 0;\n//           padding: 16px;\n//         }\n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n// body {\n//   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//   background-color: #f5f6f8;\n//   margin: 0;\n//   padding: 16px;\n// }\n// .board-wrap {\n//   max-width: 100%;\n//   overflow-x: auto;\n// }\n// .swimlane {\n//   background: white;\n//   border-radius: 8px;\n//   margin-bottom: 16px;\n//   box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//   overflow: hidden;\n// }\n// .swimlane-header {\n//   display: flex;\n//   align-items: center;\n//   padding: 12px 16px;\n//   background: #fafbfc;\n//   border-bottom: 1px solid #dfe5e5;\n//   font-weight: 600;\n//   font-size: 14px;\n//   color: #172b4d;\n// }\n// .swimlane-toggle, .swimlane-icon {\n//   color: #5e6c84;\n//   margin-right: 8px;\n//   cursor: pointer;\n// }\n// .swimlane-toggle {\n//   border: none;\n//   background: transparent;\n//   font-size: 14px;\n// }\n// .swimlane-icon {\n//   font-size: 18px;\n// }\n// .swimlane-title-input {\n//   border: 1px solid #dfe5e5;\n//   border-radius: 4px;\n//   padding: 4px 8px;\n//   font-size: 14px;\n//   font-weight: 600;\n//   background: white;\n//   margin-right: 8px;\n//   min-width: 150px;\n//   color: #172b4d;\n// }\n// .swimlane-title-input:focus {\n//   outline: none;\n//   border-color: #1976d2;\n// }\n// .swimlane-title-input::placeholder {\n//   color: #a2adba;\n// }\n// .swimlane-title-input:hover {\n//   border-color: #a2adba;\n// }\n// .swimlane-title-input:disabled {\n//   background: #f5f6f8;\n//   color: #a2adba;\n// }\n// .swimlane-count {\n//   color: #5e6c84;\n//   font-size: 12px;\n//   font-weight: normal;\n//   user-select: none;\n// }\n// .kanban-row {\n//   display: flex;\n//   padding: 16px;\n//   gap: 12px;\n//   overflow-x: auto;\n// }\n// .kanban-column {\n//   flex: 0 0 260px;\n//   background: #f5f6f8;\n//   border-radius: 6px;\n//   padding: 12px;\n//   display: flex;\n//   flex-direction: column;\n//   gap: 12px;\n//   border: 1px solid #dfe5e5;\n//   user-select: none;\n// }\n// .col-header {\n//   display: flex;\n//   align-items: center;\n//   margin-bottom: 4px;\n//   gap: 6px;\n// }\n// .col-title {\n//   font-weight: 600;\n//   font-size: 12px;\n//   color: #5e6c84;\n//   text-transform: uppercase;\n//   letter-spacing: 0.5px;\n//   flex-grow: 1;\n//   user-select: none;\n// }\n// .col-title:empty {\n//   height: 20px;\n// }\n// .col-count {\n//   background: #dfe5e5;\n//   color: #5e6c84;\n//   border-radius: 12px;\n//   padding: 2px 8px;\n//   font-size: 11px;\n//   font-weight: 600;\n//   user-select: none;\n//   min-width: 20px;\n//   text-align: center;\n// }\n// .col-icons {\n//   display: flex;\n//   gap: 6px;\n// }\n// .col-icon {\n//   cursor: pointer;\n//   color: #5e6c84;\n//   font-size: 18px;\n//   background: none;\n//   border: none;\n//   padding: 0;\n//   user-select: none;\n// }\n// .col-icon:hover {\n//   color: #1976d2;\n// }\n// .create-card {\n//   background: white;\n//   padding: 10px;\n//   border-radius: 6px;\n//   box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n//   display: flex;\n//   flex-direction: column;\n//   gap: 10px;\n// }\n// .create-card textarea {\n//   resize: vertical;\n//   min-height: 50px;\n//   font-size: 14px;\n//   padding: 8px;\n//   border-radius: 5px;\n//   border: 1px solid #dfe5e5;\n//   font-family: inherit;\n// }\n// .create-card textarea:focus {\n//   outline: none;\n//   border-color: #1976d2;\n// }\n// .create-card .create-actions {\n//   display: flex;\n//   align-items: center;\n//   gap: 12px;\n// }\n// .create-card .create-actions select {\n//   flex-grow: 1;\n//   padding: 8px;\n//   border: 1px solid #dfe5e5;\n//   border-radius: 5px;\n//   font-size: 14px;\n// }\n// .create-card button {\n//   padding: 8px 12px;\n//   font-size: 14px;\n//   cursor: pointer;\n//   border-radius: 5px;\n//   border: 1px solid #dfe5e5;\n//   background: #f5f6f8;\n//   user-select: none;\n//   transition: background-color 0.2s;\n// }\n// .create-card button:hover {\n//   background: #e1e7f0;\n// }\n// .card-item {\n//   background: white;\n//   border-radius: 8px;\n//   padding: 12px;\n//   box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//   cursor: pointer;\n//   user-select: none;\n//   display: flex;\n//   flex-direction: column;\n//   gap: 6px;\n//   border: 1px solid #dfe5e5;\n//   transition: box-shadow 0.2s ease, border-color 0.2s ease;\n// }\n// .card-item:hover {\n//   box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\n//   border-color: #a2adba;\n// }\n// .card-item .card-top {\n//   display: flex;\n//   justify-content: space-between;\n//   align-items: center;\n//   font-size: 12px;\n//   font-weight: 600;\n//   color: #5e6c84;\n//   gap: 10px;\n// }\n// .card-item .card-top .card-id {\n//   font-family: monospace;\n//   color: #a2adba;\n//   user-select: text;\n// }\n// .card-item .card-tags .tag {\n//   border-radius: 6px;\n//   padding: 3px 7px;\n//   font-size: 11px;\n//   font-weight: 600;\n//   text-transform: uppercase;\n//   white-space: nowrap;\n//   user-select: none;\n//   margin-right: 6px;\n// }\n// .tag-task {\n//   background: #e1efff;\n//   color: #1976d2;\n// }\n// .tag-bug {\n//   background: #ffebec;\n//   color: #d62127;\n// }\n// .tag-subtask {\n//   background: #f5e6ff;\n//   color: #772da0;\n// }\n// .card-item .card-title {\n//   font-weight: 600;\n//   font-size: 14px;\n//   color: #2b3a59;\n// }\n// .card-item .card-meta {\n//   display: flex;\n//   gap: 10px;\n//   font-size: 12px;\n//   color: #6b7c93;\n//   align-items: center;\n//   user-select: none;\n// }\n// .card-item .card-meta span {\n//   background: #f5f7fa;\n//   color: #6b7c93;\n//   padding: 3px 8px;\n//   border-radius: 12px;\n// }\n// .card-item .card-meta .card-priority.low {\n//   background: #d4edda;\n//   color: #155724;\n// }\n// .card-item .card-meta .card-priority.medium {\n//   background: #fff3cd;\n//   color: #856404;\n// }\n// .card-item .card-meta .card-priority.high {\n//   background: #f8d7da;\n//   color: #721c24;\n// }\n// .card-item .card-meta .card-assignee {\n//   position: relative;\n//   cursor: default;\n//   padding-left: 18px;\n// }\n// .card-item .card-meta .card-assignee:hover .tooltip {\n//   display: block;\n// }\n// .card-item .card-meta .tooltip {\n//   position: absolute;\n//   top: -30px;\n//   left: 50%;\n//   transform: translateX(-50%);\n//   background: #222;\n//   color: white;\n//   border-radius: 4px;\n//   padding: 4px 8px;\n//   font-size: 11px;\n//   white-space: nowrap;\n//   z-index: 10;\n//   display: none;\n//   user-select: none;\n// }\n// .modal-overlay {\n//   position: fixed;\n//   top: 0; left: 0; right: 0; bottom: 0;\n//   background: rgba(0,0,0,0.5);\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   z-index: 1000;\n// }\n// .modal {\n//   background: white;\n//   border-radius: 8px;\n//   padding: 24px;\n//   width: 700px;\n//   max-height: 80vh;\n//   display: grid;\n//   grid-template-columns: 1fr 1fr 1fr;\n//   gap: 16px;\n//   overflow-y: auto;\n//   position: relative;\n// }\n// .modal-header {\n//   grid-column: 1 / -1;\n//   display: flex;\n//   justify-content: space-between;\n//   align-items: center;\n//   font-weight: 700;\n//   font-size: 20px;\n//   color: #2b3a59;\n// }\n// .modal-header button {\n//   background: none;\n//   border: none;\n//   font-size: 22px;\n//   cursor: pointer;\n//   color: #a2adba;\n// }\n// .modal-header button:hover {\n//   color: #485fc7;\n// }\n// .modal-field {\n//   display: flex;\n//   flex-direction: column;\n//   gap: 6px;\n// }\n// .modal-field label {\n//   font-size: 12px;\n//   font-weight: 600;\n//   color: #6b7c93;\n//   user-select: none;\n// }\n// .modal-field input, .modal-field textarea, .modal-field select {\n//   padding: 8px 10px;\n//   border-radius: 6px;\n//   border: 1px solid #dfe5e5;\n//   font-size: 14px;\n//   color: #2b3a59;\n//   font-family: inherit;\n// }\n// .modal-field input:focus, .modal-field textarea:focus, .modal-field select:focus {\n//   outline: none;\n//   border-color: #485fc7;\n//   background: #f8fcff;\n// }\n// .modal-actions {\n//   grid-column: 1 / -1;\n//   display: flex;\n//   justify-content: flex-end;\n//   gap: 12px;\n//   align-items: center;\n//   margin-top: 12px;\n// }\n// button.btn-reset {\n//   background: #5e6c84;\n//   color: white;\n//   font-weight: 600;\n//   border: none;\n//   padding: 8px 16px;\n//   border-radius: 6px;\n//   cursor: pointer;\n// }\n// button.btn-reset:hover {\n//   background: #485fc7;\n// }\n// button.btn-save {\n//   background: #485fc7;\n//   color: white;\n//   font-weight: 600;\n//   border: none;\n//   padding: 8px 16px;\n//   border-radius: 6px;\n//   cursor: pointer;\n// }\n// button.btn-save:hover {\n//   background: #374cac;\n// }\n// button.btn-delete {\n//   background: #d94343;\n//   color: white;\n//   font-weight: 600;\n//   border: none;\n//   padding: 8px 16px;\n//   border-radius: 6px;\n//   cursor: pointer;\n// }\n// button.btn-delete:hover {\n//   background: #b83232;\n// }\n// input[disabled] {\n//   background: #efeff1;\n//   cursor: not-allowed;\n//   color: #b3b3b3;\n// }\n// .epic-modal-overlay {\n//   position: fixed;\n//   top: 0; left: 0; right: 0; bottom: 0;\n//   background: rgba(0,0,0,0.5);\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   z-index: 1000;\n// }\n// .epic-modal {\n//   background: white;\n//   border-radius: 8px;\n//   width: 350px;\n//   padding: 20px;\n//   box-shadow: 0 0 10px rgba(0,0,0,0.2);\n//   position: relative;\n// }\n// .epic-modal-content h3 {\n//   margin: 0 0 20px 0;\n//   font-weight: 700;\n//   font-size: 20px;\n//   color: #2b3a59;\n//   user-select: none;\n// }\n// .epic-modal-content p.delete-warning {\n//   background: #ffe6e6;\n//   padding: 10px;\n//   color: #d94343;\n//   font-size: 14px;\n//   margin-bottom: 15px;\n//   border-radius: 6px;\n// }\n// .epic-modal-input, .epic-modal-select {\n//   width: 100%;\n//   padding: 10px;\n//   font-size: 14px;\n//   margin-bottom: 20px;\n//   border-radius: 6px;\n//   border: 1px solid #dfe5e5;\n//   box-sizing: border-box;\n//   font-family: inherit;\n// }\n// .epic-modal-input:focus, .epic-modal-select:focus {\n//   outline: none;\n//   border-color: #485fc7;\n// }\n// .epic-modal-actions {\n//   display: flex;\n//   justify-content: space-between;\n//   gap: 15px;\n// }\n// button.create-epic-btn, button.delete-epic-btn {\n//   background: #485fc7;\n//   color: white;\n//   font-weight: 600;\n//   border: none;\n//   padding: 10px 20px;\n//   border-radius: 8px;\n//   cursor: pointer;\n//   font-size: 15px;\n//   user-select: none;\n// }\n// button.create-epic-btn:hover, button.delete-epic-btn:hover {\n//   background: #374cac;\n// }\n// button.delete-epic-btn {\n//   background: #d94343;\n// }\n// button.delete-epic-btn:hover {\n//   background: #b83232;\n// }\n\n//       `}</style>\n\n//     </div>\n//   );\n// }\n\n// const btnStyle = {\n//   cancel: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#5e6c84',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   // create: {\n//   //   padding: '10px 18px',\n//   //   borderRadius: '6px',\n//   //   border: 'none',\n//   //   backgroundColor: '#1976d2',\n//   //   color: 'white',\n//   //   fontWeight: '600',\n//   //   fontSize: '14px',\n//   //   cursor: 'pointer'\n//   // },\n//   delete: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#d32f2f',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   }\n// };\n\n//======================================================================================\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\n// };\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n//   const [columnsByLane, setColumnsByLane] = useState({});\n//   const [columnModal, setColumnModal] = useState(null);\n//   const [columnInput, setColumnInput] = useState('');\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\n//   const [isMobile, setIsMobile] = useState(false);\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\n\n//   // Detect mobile screen size\n//   useEffect(() => {\n//     const checkScreenSize = () => {\n//       setIsMobile(window.innerWidth < 768);\n//     };\n\n//     checkScreenSize();\n//     window.addEventListener('resize', checkScreenSize);\n\n//     return () => window.removeEventListener('resize', checkScreenSize);\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const [issuesData, epicsData] = await Promise.all([listIssues(projectId), listEpics()]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//           initialCols[lane.id] = defaultStatuses.slice();\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//         setColumnsByLane(initialCols);\n//       } catch (err) { console.error(err); }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const openAddColumnModal = (e, laneId, colIndex) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'add' });\n//     setColumnInput('');\n//   };\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\n//     setColumnInput(status);\n//   };\n//   const handleAddColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[columnModal.laneId]];\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\n//       return { ...prev, [columnModal.laneId]: cols };\n//     });\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleEditColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     const { laneId, colIndex } = columnModal;\n//     const oldCol = columnsByLane[laneId][colIndex];\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\n//       alert('Column name already exists');\n//       return;\n//     }\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols[colIndex] = name.toLowerCase();\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleDeleteColumn = () => {\n//     const { laneId, colIndex } = columnModal;\n//     const removedCol = columnsByLane[laneId][colIndex];\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols.splice(colIndex, 1);\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) { console.error(err); }\n//   };\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error(err); }\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   // Create Epic Modal Handlers\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) {\n//       alert('Epic name is required');\n//       return;\n//     }\n//     try {\n//       await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\n//     } catch (error) {\n//       console.error('Error creating epic:', error);\n//     }\n//   };\n\n//   // Delete Epic Modal Handler\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) {\n//       alert('Please select an epic to delete');\n//       return;\n//     }\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//       setColumnsByLane(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setOpenSwimlanes(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setCustomTitles(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//     } catch (error) {\n//       console.error('Error deleting epic:', error);\n//     }\n//   };\n\n//   // Mobile-specific functions\n//   const toggleMobileSwimlane = (laneId) => {\n//     if (activeSwimlane === laneId) {\n//       setActiveSwimlane(null);\n//     } else {\n//       setActiveSwimlane(laneId);\n//     }\n//   };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Mobile swimlane selector */}\n//       {isMobile && (\n//         <div className=\"mobile-swimlane-selector\">\n//           <select \n//             value={activeSwimlane || ''} \n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\n//             className=\"mobile-select\"\n//           >\n//             <option value=\"\">All Swimlanes</option>\n//             {swimlanes.map(lane => (\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       {/* Swimlanes and columns */}\n//       {swimlanes.map(lane => {\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\n\n//         // Skip rendering if mobile and this isn't the active swimlane\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\n//           return null;\n//         }\n\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               {!isMobile && (\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                   {isOpen ? '▼' : '▶'}\n//                 </button>\n//               )}\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input \n//                 className=\"swimlane-title-input\" \n//                 value={customTitles[lane.id] || ''} \n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))} \n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//               {isMobile && (\n//                 <button \n//                   className=\"mobile-swimlane-toggle\"\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\n//                 >\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\n//                 </button>\n//               )}\n//             </header>\n//             {isOpen && (\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\n//                 {statuses.map((status, idx) => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div \n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`} \n//                       key={status} \n//                       onDragOver={onDragOver} \n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {!isMobile && (\n//                           <span className=\"col-icons\">\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\n//                           </span>\n//                         )}\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => {\n//                         const isHovered = hoveredAssigneeId === issue.id;\n//                         return (\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                             <div className=\"card-top\">\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                               <span className=\"card-id\">{issue.id}</span>\n//                             </div>\n//                             <div className=\"card-title\">{issue.title}</div>\n//                             <div className=\"card-meta\">\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\n//                               {issue.assignee && (\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\n//                                   👤\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\n//                                 </span>\n//                               )}\n//                             </div>\n//                           </div>\n//                         );\n//                       })}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Column Add/Edit modal */}\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\n//             position: isMobile ? 'fixed' : 'absolute',\n//             top: isMobile ? '50%' : modalPosition.top,\n//             left: isMobile ? '50%' : modalPosition.left,\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\n//             minWidth: isMobile ? '90vw' : 280,\n//             maxWidth: isMobile ? '95vw' : 320,\n//             padding: 20,\n//             borderRadius: 10,\n//             background: 'white',\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\n//             zIndex: 1100\n//           }}>\n//             {columnModal.type === 'add' ? (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                 </div>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Issue modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className={`modal ${isMobile ? 'mobile-modal' : ''}`} onClick={e => e.stopPropagation()}>\n//             <div className=\"modal-header\">\n//               <h2>{editIssue.epicName}</h2>\n//               <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\n//             </div>\n//             <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\n//               <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Status</label>\n//                 <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\n//                   {columnsByLane[editIssue.epic]?.map(st => <option key={st} value={st}>{st}</option>) || defaultStatuses.map(st => <option key={st} value={st}>{st}</option>)}\n//                 </select>\n//               </div>\n//               <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//               <div className=\"modal-field\"><label>Priority</label>\n//                 <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                   <option>Low</option><option>Medium</option><option>High</option>\n//                 </select>\n//               </div>\n//               <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n//             </div>\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\", alignItems: 'center' }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//               <button className=\"modal-delete-btn\" onClick={async () => {\n//                 if (window.confirm('Delete this issue?')) {\n//                   await deleteIssueAPI(selectedIssue.id);\n//                   const refreshed = await listIssues(projectId);\n//                   setIssues(refreshed);\n//                   setSelectedIssue(null);\n//                 }\n//               }}>🗑</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Inline CSS styles */}\n//       <style>{`\n//         /* Base styles */\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f5f6f8;\n//           margin: 0;\n//           padding: 16px;\n//         }\n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n\n//         /* Desktop styles */\n//         @media (min-width: 768px) {\n//           .swimlane {\n//             background: white;\n//             border-radius: 8px;\n//             margin-bottom: 16px;\n//             box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//             overflow: hidden;\n//           }\n\n//           .kanban-row {\n//             display: flex;\n//             padding: 16px;\n//             gap: 12px;\n//             overflow-x: auto;\n//           }\n\n//           .kanban-column {\n//             flex: 0 0 260px;\n//             background: #f5f6f8;\n//             border-radius: 6px;\n//             padding: 12px;\n//             display: flex;\n//             flex-direction: column;\n//             gap: 12px;\n//             border: 1px solid #dfe5e5;\n//             user-select: none;\n//             min-height: 400px;\n//           }\n\n//           .modal {\n//             background: white;\n//             border-radius: 8px;\n//             padding: 24px;\n//             width: 700px;\n//             max-height: 80vh;\n//             display: grid;\n//             grid-template-columns: 1fr 1fr 1fr;\n//             gap: 16px;\n//             overflow-y: auto;\n//             position: relative;\n//           }\n//         }\n\n//         /* Mobile styles */\n//         @media (max-width: 767px) {\n//           body {\n//             padding: 8px;\n//           }\n\n//           .mobile-swimlane-selector {\n//             margin-bottom: 16px;\n//             position: sticky;\n//             top: 0;\n//             background: white;\n//             padding: 12px;\n//             border-radius: 8px;\n//             box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n//             z-index: 100;\n//           }\n\n//           .mobile-select {\n//             width: 100%;\n//             padding: 12px;\n//             border: 1px solid #dfe5e5;\n//             border-radius: 6px;\n//             font-size: 16px;\n//             background: white;\n//           }\n\n//           .swimlane {\n//             background: white;\n//             border-radius: 8px;\n//             margin-bottom: 12px;\n//             box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//             overflow: hidden;\n//           }\n\n//           .swimlane-header {\n//             display: flex;\n//             align-items: center;\n//             padding: 12px;\n//             background: #fafbfc;\n//             border-bottom: 1px solid #dfe5e5;\n//             font-weight: 600;\n//             font-size: 14px;\n//             color: #172b4d;\n//             position: relative;\n//           }\n\n//           .mobile-swimlane-toggle {\n//             background: none;\n//             border: none;\n//             font-size: 16px;\n//             color: #5e6c84;\n//             margin-left: auto;\n//             padding: 4px 8px;\n//           }\n\n//           .kanban-row.mobile-view {\n//             display: block;\n//             padding: 8px;\n//             overflow-x: auto;\n//             white-space: nowrap;\n//           }\n\n//           .kanban-column.mobile-column {\n//             display: inline-block;\n//             vertical-align: top;\n//             width: 280px;\n//             margin-right: 8px;\n//             background: #f5f6f8;\n//             border-radius: 6px;\n//             padding: 8px;\n//             border: 1px solid #dfe5e5;\n//             user-select: none;\n//             min-height: 300px;\n//           }\n\n//           .col-header {\n//             display: flex;\n//             align-items: center;\n//             margin-bottom: 8px;\n//             gap: 6px;\n//           }\n\n//           .col-title {\n//             font-weight: 600;\n//             font-size: 11px;\n//             color: #5e6c84;\n//             text-transform: uppercase;\n//             letter-spacing: 0.5px;\n//             flex-grow: 1;\n//           }\n\n//           .card-item {\n//             background: white;\n//             border-radius: 6px;\n//             padding: 10px;\n//             box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//             cursor: pointer;\n//             user-select: none;\n//             display: flex;\n//             flex-direction: column;\n//             gap: 6px;\n//             border: 1px solid #dfe5e5;\n//             margin-bottom: 8px;\n//           }\n\n//           .card-title {\n//             font-weight: 600;\n//             font-size: 13px;\n//             color: #2b3a59;\n//             line-height: 1.3;\n//           }\n\n//           .card-meta {\n//             display: flex;\n//             gap: 6px;\n//             font-size: 10px;\n//             color: #6b7c93;\n//             align-items: center;\n//             flex-wrap: wrap;\n//           }\n\n//           .modal.mobile-modal {\n//             width: 95vw;\n//             max-height: 90vh;\n//             padding: 16px;\n//             display: flex;\n//             flex-direction: column;\n//           }\n\n//           .modal-content.mobile-modal-content {\n//             display: flex;\n//             flex-direction: column;\n//             gap: 12px;\n//             overflow-y: auto;\n//           }\n\n//           .modal-field {\n//             display: flex;\n//             flex-direction: column;\n//             gap: 4px;\n//           }\n\n//           .modal-field input, .modal-field textarea, .modal-field select {\n//             padding: 10px;\n//             font-size: 16px; /* Better for mobile touch */\n//           }\n\n//           .modal-actions {\n//             display: flex;\n//             gap: 8px;\n//             justify-content: space-between;\n//             margin-top: 16px;\n//           }\n\n//           .modal-actions button {\n//             flex: 1;\n//             padding: 12px;\n//             font-size: 16px;\n//           }\n//         }\n\n//         /* Common styles (applied to both desktop and mobile) */\n//         .swimlane-header {\n//           display: flex;\n//           align-items: center;\n//           padding: 12px 16px;\n//           background: #fafbfc;\n//           border-bottom: 1px solid #dfe5e5;\n//           font-weight: 600;\n//           font-size: 14px;\n//           color: #172b4d;\n//         }\n\n//         .swimlane-toggle, .swimlane-icon {\n//           color: #5e6c84;\n//           margin-right: 8px;\n//           cursor: pointer;\n//         }\n\n//         .swimlane-toggle {\n//           border: none;\n//           background: transparent;\n//           font-size: 14px;\n//         }\n\n//         .swimlane-icon {\n//           font-size: 18px;\n//         }\n\n//         .swimlane-title-input {\n//           border: 1px solid #dfe5e5;\n//           border-radius: 4px;\n//           padding: 4px 8px;\n//           font-size: 14px;\n//           font-weight: 600;\n//           background: white;\n//           margin-right: 8px;\n//           min-width: 150px;\n//           color: #172b4d;\n//         }\n\n//         .swimlane-title-input:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n\n//         .swimlane-count {\n//           color: #5e6c84;\n//           font-size: 12px;\n//           font-weight: normal;\n//         }\n\n//         .col-header {\n//           display: flex;\n//           align-items: center;\n//           margin-bottom: 4px;\n//           gap: 6px;\n//         }\n\n//         .col-title {\n//           font-weight: 600;\n//           font-size: 12px;\n//           color: #5e6c84;\n//           text-transform: uppercase;\n//           letter-spacing: 0.5px;\n//           flex-grow: 1;\n//         }\n\n//         .col-count {\n//           background: #dfe5e5;\n//           color: #5e6c84;\n//           border-radius: 12px;\n//           padding: 2px 8px;\n//           font-size: 11px;\n//           font-weight: 600;\n//           min-width: 20px;\n//           text-align: center;\n//         }\n\n//         .col-icons {\n//           display: flex;\n//           gap: 6px;\n//         }\n\n//         .col-icon {\n//           cursor: pointer;\n//           color: #5e6c84;\n//           font-size: 18px;\n//           background: none;\n//           border: none;\n//           padding: 0;\n//         }\n\n//         .create-card {\n//           background: white;\n//           padding: 10px;\n//           border-radius: 6px;\n//           box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n//           display: flex;\n//           flex-direction: column;\n//           gap: 10px;\n//         }\n\n//         .card-item {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 12px;\n//           box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//           cursor: pointer;\n//           user-select: none;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 6px;\n//           border: 1px solid #dfe5e5;\n//           transition: box-shadow 0.2s ease, border-color 0.2s ease;\n//         }\n\n//         .card-item:hover {\n//           box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\n//           border-color: #a2adba;\n//         }\n\n//         .modal-overlay {\n//           position: fixed;\n//           top: 0; left: 0; right: 0; bottom: 0;\n//           background: rgba(0,0,0,0.5);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//         }\n\n//         /* Button styles */\n//         button {\n//           cursor: pointer;\n//           transition: background-color 0.2s;\n//         }\n\n//         button:hover {\n//           opacity: 0.9;\n//         }\n\n//         /* Touch improvements for mobile */\n//         @media (max-width: 767px) {\n//           button, .card-item, .col-icon {\n//             min-height: 44px;\n//             min-width: 44px;\n//           }\n\n//           .card-item {\n//             touch-action: manipulation;\n//           }\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n\n// const btnStyle = {\n//   cancel: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#5e6c84',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   create: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#1976d2',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   delete: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#d32f2f',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   }\n// };\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\n// const mockProjects = [\n//   { id: 'p1', name: 'E-Commerce Platform' },\n//   { id: 'p2', name: 'API Gateway Service' },\n//   { id: 'p3', name: 'Mobile App Development' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\n// const getProjectName = async (projectId) => {\n//   await simulateApiDelay();\n//   const project = mockProjects.find(p => p.id === projectId);\n//   return project ? project.name : 'Untitled Project';\n// };\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\n// };\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [projectName, setProjectName] = useState('');\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n//   const [columnsByLane, setColumnsByLane] = useState({});\n//   const [columnModal, setColumnModal] = useState(null);\n//   const [columnInput, setColumnInput] = useState('');\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\n//   const [isMobile, setIsMobile] = useState(false);\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\n\n//   // Detect mobile screen size\n//   useEffect(() => {\n//     const checkScreenSize = () => {\n//       setIsMobile(window.innerWidth < 768);\n//     };\n\n//     checkScreenSize();\n//     window.addEventListener('resize', checkScreenSize);\n\n//     return () => window.removeEventListener('resize', checkScreenSize);\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const [issuesData, epicsData, projectNameData] = await Promise.all([\n//           listIssues(projectId), \n//           listEpics(), \n//           projectId ? getProjectName(projectId) : Promise.resolve('All Projects')\n//         ]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         setProjectName(projectNameData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//           initialCols[lane.id] = defaultStatuses.slice();\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//         setColumnsByLane(initialCols);\n//       } catch (err) { console.error(err); }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const openAddColumnModal = (e, laneId, colIndex) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'add' });\n//     setColumnInput('');\n//   };\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\n//     setColumnInput(status);\n//   };\n//   const handleAddColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[columnModal.laneId]];\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\n//       return { ...prev, [columnModal.laneId]: cols };\n//     });\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleEditColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     const { laneId, colIndex } = columnModal;\n//     const oldCol = columnsByLane[laneId][colIndex];\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\n//       alert('Column name already exists');\n//       return;\n//     }\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols[colIndex] = name.toLowerCase();\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleDeleteColumn = () => {\n//     const { laneId, colIndex } = columnModal;\n//     const removedCol = columnsByLane[laneId][colIndex];\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols.splice(colIndex, 1);\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) { console.error(err); }\n//   };\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error(err); }\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   // Create Epic Modal Handlers\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) {\n//       alert('Epic name is required');\n//       return;\n//     }\n//     try {\n//       await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\n//     } catch (error) {\n//       console.error('Error creating epic:', error);\n//     }\n//   };\n\n//   // Delete Epic Modal Handler\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) {\n//       alert('Please select an epic to delete');\n//       return;\n//     }\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//       setColumnsByLane(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setOpenSwimlanes(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setCustomTitles(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//     } catch (error) {\n//       console.error('Error deleting epic:', error);\n//     }\n//   };\n\n//   // Mobile-specific functions\n//   const toggleMobileSwimlane = (laneId) => {\n//     if (activeSwimlane === laneId) {\n//       setActiveSwimlane(null);\n//     } else {\n//       setActiveSwimlane(laneId);\n//     }\n//   };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Project Name Header */}\n//       <div className=\"project-header\">\n//         <h1 className=\"project-title\">{projectName}</h1>\n//         <div className=\"project-stats\">\n//           <span className=\"project-stat\">{epics.length} Epics</span>\n//           <span className=\"project-stat\">{issues.length} Issues</span>\n//           <span className=\"project-stat\">\n//             {issues.filter(issue => issue.status === 'done').length} Completed\n//           </span>\n//         </div>\n//       </div>\n\n//       {/* Mobile swimlane selector */}\n//       {isMobile && (\n//         <div className=\"mobile-swimlane-selector\">\n//           <select \n//             value={activeSwimlane || ''} \n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\n//             className=\"mobile-select\"\n//           >\n//             <option value=\"\">All Swimlanes</option>\n//             {swimlanes.map(lane => (\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       {/* Swimlanes and columns */}\n//       {swimlanes.map(lane => {\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\n\n//         // Skip rendering if mobile and this isn't the active swimlane\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\n//           return null;\n//         }\n\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               {!isMobile && (\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                   {isOpen ? '▼' : '▶'}\n//                 </button>\n//               )}\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input \n//                 className=\"swimlane-title-input\" \n//                 value={customTitles[lane.id] || ''} \n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))} \n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//               {isMobile && (\n//                 <button \n//                   className=\"mobile-swimlane-toggle\"\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\n//                 >\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\n//                 </button>\n//               )}\n//             </header>\n//             {isOpen && (\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\n//                 {statuses.map((status, idx) => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div \n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`} \n//                       key={status} \n//                       onDragOver={onDragOver} \n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {!isMobile && (\n//                           <span className=\"col-icons\">\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\n//                           </span>\n//                         )}\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => {\n//                         const isHovered = hoveredAssigneeId === issue.id;\n//                         return (\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                             <div className=\"card-top\">\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                               <span className=\"card-id\">{issue.id}</span>\n//                             </div>\n//                             <div className=\"card-title\">{issue.title}</div>\n//                             <div className=\"card-meta\">\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\n//                               {issue.assignee && (\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\n//                                   👤\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\n//                                 </span>\n//                               )}\n//                             </div>\n//                           </div>\n//                         );\n//                       })}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Column Add/Edit modal */}\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\n//             position: isMobile ? 'fixed' : 'absolute',\n//             top: isMobile ? '50%' : modalPosition.top,\n//             left: isMobile ? '50%' : modalPosition.left,\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\n//             minWidth: isMobile ? '90vw' : 280,\n//             maxWidth: isMobile ? '95vw' : 320,\n//             padding: 20,\n//             borderRadius: 10,\n//             background: 'white',\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\n//             zIndex: 1100\n//           }}>\n//             {columnModal.type === 'add' ? (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                 </div>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Issue modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className={`modal ${isMobile ? 'mobile-modal' : ''}`} onClick={e => e.stopPropagation()}>\n//             <div className=\"modal-header\">\n//               <h2>{editIssue.epicName}</h2>\n//               <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\n//             </div>\n//             <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\n//               <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Status</label>\n//                 <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\n//                   {columnsByLane[editIssue.epic]?.map(st => <option key={st} value={st}>{st}</option>) || defaultStatuses.map(st => <option key={st} value={st}>{st}</option>)}\n//                 </select>\n//               </div>\n//               <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//               <div className=\"modal-field\"><label>Priority</label>\n//                 <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                   <option>Low</option><option>Medium</option><option>High</option>\n//                 </select>\n//               </div>\n//               <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n//             </div>\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\", alignItems: 'center' }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//               <button className=\"modal-delete-btn\" onClick={async () => {\n//                 if (window.confirm('Delete this issue?')) {\n//                   await deleteIssueAPI(selectedIssue.id);\n//                   const refreshed = await listIssues(projectId);\n//                   setIssues(refreshed);\n//                   setSelectedIssue(null);\n//                 }\n//               }}>🗑</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Inline CSS styles */}\n//       <style>{`\n//         /* Base styles */\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f5f6f8;\n//           margin: 0;\n//           padding: 16px;\n//         }\n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n\n//         /* Project Header Styles */\n//         .project-header {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 20px 24px;\n//           margin-bottom: 20px;\n//           box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//           border-left: 4px solid #1976d2;\n//         }\n\n//         .project-title {\n//           margin: 0 0 12px 0;\n//           font-size: 28px;\n//           font-weight: 700;\n//           color: #172b4d;\n//           line-height: 1.2;\n//         }\n\n//         .project-stats {\n//           display: flex;\n//           gap: 20px;\n//           flex-wrap: wrap;\n//         }\n\n//         .project-stat {\n//           background: #f5f6f8;\n//           padding: 6px 12px;\n//           border-radius: 16px;\n//           font-size: 14px;\n//           font-weight: 600;\n//           color: #5e6c84;\n//           display: flex;\n//           align-items: center;\n//           gap: 4px;\n//         }\n\n//         .project-stat:before {\n//           content: \"•\";\n//           color: #1976d2;\n//           font-weight: bold;\n//         }\n\n//         /* Desktop styles */\n//         @media (min-width: 768px) {\n//           .swimlane {\n//             background: white;\n//             border-radius: 8px;\n//             margin-bottom: 16px;\n//             box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//             overflow: hidden;\n//           }\n\n//           .kanban-row {\n//             display: flex;\n//             padding: 16px;\n//             gap: 12px;\n//             overflow-x: auto;\n//           }\n\n//           .kanban-column {\n//             flex: 0 0 260px;\n//             background: #f5f6f8;\n//             border-radius: 6px;\n//             padding: 12px;\n//             display: flex;\n//             flex-direction: column;\n//             gap: 12px;\n//             border: 1px solid #dfe5e5;\n//             user-select: none;\n//             min-height: 400px;\n//           }\n\n//           .modal {\n//             background: white;\n//             border-radius: 8px;\n//             padding: 24px;\n//             width: 700px;\n//             max-height: 80vh;\n//             display: grid;\n//             grid-template-columns: 1fr 1fr 1fr;\n//             gap: 16px;\n//             overflow-y: auto;\n//             position: relative;\n//           }\n//         }\n\n//         /* Mobile styles */\n//         @media (max-width: 767px) {\n//           body {\n//             padding: 8px;\n//           }\n\n//           .project-header {\n//             padding: 16px;\n//             margin-bottom: 16px;\n//             border-left-width: 3px;\n//           }\n\n//           .project-title {\n//             font-size: 22px;\n//             margin-bottom: 10px;\n//           }\n\n//           .project-stats {\n//             gap: 12px;\n//           }\n\n//           .project-stat {\n//             font-size: 12px;\n//             padding: 4px 10px;\n//           }\n\n//           .mobile-swimlane-selector {\n//             margin-bottom: 16px;\n//             position: sticky;\n//             top: 0;\n//             background: white;\n//             padding: 12px;\n//             border-radius: 8px;\n//             box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n//             z-index: 100;\n//           }\n\n//           .mobile-select {\n//             width: 100%;\n//             padding: 12px;\n//             border: 1px solid #dfe5e5;\n//             border-radius: 6px;\n//             font-size: 16px;\n//             background: white;\n//           }\n\n//           .swimlane {\n//             background: white;\n//             border-radius: 8px;\n//             margin-bottom: 12px;\n//             box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//             overflow: hidden;\n//           }\n\n//           .swimlane-header {\n//             display: flex;\n//             align-items: center;\n//             padding: 12px;\n//             background: #fafbfc;\n//             border-bottom: 1px solid #dfe5e5;\n//             font-weight: 600;\n//             font-size: 14px;\n//             color: #172b4d;\n//             position: relative;\n//           }\n\n//           .mobile-swimlane-toggle {\n//             background: none;\n//             border: none;\n//             font-size: 16px;\n//             color: #5e6c84;\n//             margin-left: auto;\n//             padding: 4px 8px;\n//           }\n\n//           .kanban-row.mobile-view {\n//             display: block;\n//             padding: 8px;\n//             overflow-x: auto;\n//             white-space: nowrap;\n//           }\n\n//           .kanban-column.mobile-column {\n//             display: inline-block;\n//             vertical-align: top;\n//             width: 280px;\n//             margin-right: 8px;\n//             background: #f5f6f8;\n//             border-radius: 6px;\n//             padding: 8px;\n//             border: 1px solid #dfe5e5;\n//             user-select: none;\n//             min-height: 300px;\n//           }\n\n//           .col-header {\n//             display: flex;\n//             align-items: center;\n//             margin-bottom: 8px;\n//             gap: 6px;\n//           }\n\n//           .col-title {\n//             font-weight: 600;\n//             font-size: 11px;\n//             color: #5e6c84;\n//             text-transform: uppercase;\n//             letter-spacing: 0.5px;\n//             flex-grow: 1;\n//           }\n\n//           .card-item {\n//             background: white;\n//             border-radius: 6px;\n//             padding: 10px;\n//             box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//             cursor: pointer;\n//             user-select: none;\n//             display: flex;\n//             flex-direction: column;\n//             gap: 6px;\n//             border: 1px solid #dfe5e5;\n//             margin-bottom: 8px;\n//           }\n\n//           .card-title {\n//             font-weight: 600;\n//             font-size: 13px;\n//             color: #2b3a59;\n//             line-height: 1.3;\n//           }\n\n//           .card-meta {\n//             display: flex;\n//             gap: 6px;\n//             font-size: 10px;\n//             color: #6b7c93;\n//             align-items: center;\n//             flex-wrap: wrap;\n//           }\n\n//           .modal.mobile-modal {\n//             width: 95vw;\n//             max-height: 90vh;\n//             padding: 16px;\n//             display: flex;\n//             flex-direction: column;\n//           }\n\n//           .modal-content.mobile-modal-content {\n//             display: flex;\n//             flex-direction: column;\n//             gap: 12px;\n//             overflow-y: auto;\n//           }\n\n//           .modal-field {\n//             display: flex;\n//             flex-direction: column;\n//             gap: 4px;\n//           }\n\n//           .modal-field input, .modal-field textarea, .modal-field select {\n//             padding: 10px;\n//             font-size: 16px; /* Better for mobile touch */\n//           }\n\n//           .modal-actions {\n//             display: flex;\n//             gap: 8px;\n//             justify-content: space-between;\n//             margin-top: 16px;\n//           }\n\n//           .modal-actions button {\n//             flex: 1;\n//             padding: 12px;\n//             font-size: 16px;\n//           }\n//         }\n\n//         /* Common styles (applied to both desktop and mobile) */\n//         .swimlane-header {\n//           display: flex;\n//           align-items: center;\n//           padding: 12px 16px;\n//           background: #fafbfc;\n//           border-bottom: 1px solid #dfe5e5;\n//           font-weight: 600;\n//           font-size: 14px;\n//           color: #172b4d;\n//         }\n\n//         .swimlane-toggle, .swimlane-icon {\n//           color: #5e6c84;\n//           margin-right: 8px;\n//           cursor: pointer;\n//         }\n\n//         .swimlane-toggle {\n//           border: none;\n//           background: transparent;\n//           font-size: 14px;\n//         }\n\n//         .swimlane-icon {\n//           font-size: 18px;\n//         }\n\n//         .swimlane-title-input {\n//           border: 1px solid #dfe5e5;\n//           border-radius: 4px;\n//           padding: 4px 8px;\n//           font-size: 14px;\n//           font-weight: 600;\n//           background: white;\n//           margin-right: 8px;\n//           min-width: 150px;\n//           color: #172b4d;\n//         }\n\n//         .swimlane-title-input:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n\n//         .swimlane-count {\n//           color: #5e6c84;\n//           font-size: 12px;\n//           font-weight: normal;\n//         }\n\n//         .col-header {\n//           display: flex;\n//           align-items: center;\n//           margin-bottom: 4px;\n//           gap: 6px;\n//         }\n\n//         .col-title {\n//           font-weight: 600;\n//           font-size: 12px;\n//           color: #5e6c84;\n//           text-transform: uppercase;\n//           letter-spacing: 0.5px;\n//           flex-grow: 1;\n//         }\n\n//         .col-count {\n//           background: #dfe5e5;\n//           color: #5e6c84;\n//           border-radius: 12px;\n//           padding: 2px 8px;\n//           font-size: 11px;\n//           font-weight: 600;\n//           min-width: 20px;\n//           text-align: center;\n//         }\n\n//         .col-icons {\n//           display: flex;\n//           gap: 6px;\n//         }\n\n//         .col-icon {\n//           cursor: pointer;\n//           color: #5e6c84;\n//           font-size: 18px;\n//           background: none;\n//           border: none;\n//           padding: 0;\n//         }\n\n//         .create-card {\n//           background: white;\n//           padding: 10px;\n//           border-radius: 6px;\n//           box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n//           display: flex;\n//           flex-direction: column;\n//           gap: 10px;\n//         }\n\n//         .card-item {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 12px;\n//           box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//           cursor: pointer;\n//           user-select: none;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 6px;\n//           border: 1px solid #dfe5e5;\n//           transition: box-shadow 0.2s ease, border-color 0.2s ease;\n//         }\n\n//         .card-item:hover {\n//           box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\n//           border-color: #a2adba;\n//         }\n\n//         .modal-overlay {\n//           position: fixed;\n//           top: 0; left: 0; right: 0; bottom: 0;\n//           background: rgba(0,0,0,0.5);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//         }\n\n//         /* Button styles */\n//         button {\n//           cursor: pointer;\n//           transition: background-color 0.2s;\n//         }\n\n//         button:hover {\n//           opacity: 0.9;\n//         }\n\n//         /* Touch improvements for mobile */\n//         @media (max-width: 767px) {\n//           button, .card-item, .col-icon {\n//             min-height: 44px;\n//             min-width: 44px;\n//           }\n\n//           .card-item {\n//             touch-action: manipulation;\n//           }\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n\n// const btnStyle = {\n//   cancel: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#5e6c84',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   create: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#1976d2',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   delete: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#d32f2f',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   }\n// };\n\nimport React, { useEffect, useState } from 'react';\nimport { useAuth } from \"../../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ForYou() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [recentlyViewed, setRecentlyViewed] = useState([]);\n  const [yourBoards, setYourBoards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [particles, setParticles] = useState([]);\n  const [orbs, setOrbs] = useState([]);\n  const [isMobile, setIsMobile] = useState(false);\n  const {\n    user: authUser\n  } = useAuth();\n  useEffect(() => {\n    // Check if mobile on mount and resize\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n\n    // Create floating particles (fewer on mobile)\n    const particleCount = window.innerWidth < 768 ? 8 : 15;\n    const newParticles = Array.from({\n      length: particleCount\n    }, (_, i) => ({\n      id: i,\n      size: Math.random() * 3 + 1,\n      left: Math.random() * 100,\n      animationDelay: Math.random() * 20,\n      duration: Math.random() * 15 + 10,\n      opacity: Math.random() * 0.6 + 0.2\n    }));\n    setParticles(newParticles);\n\n    // Create floating orbs (fewer and smaller on mobile)\n    const orbCount = window.innerWidth < 768 ? 3 : 6;\n    const orbSize = window.innerWidth < 768 ? Math.random() * 60 + 20 : Math.random() * 120 + 40;\n    const newOrbs = Array.from({\n      length: orbCount\n    }, (_, i) => ({\n      id: i,\n      size: orbSize,\n      left: Math.random() * 100,\n      top: Math.random() * 100,\n      animationDelay: Math.random() * 10,\n      duration: Math.random() * 20 + 15\n    }));\n    setOrbs(newOrbs);\n\n    // Mouse move handler (desktop only)\n    const handleMouseMove = e => {\n      if (window.innerWidth >= 768) {\n        setMousePosition({\n          x: e.clientX / window.innerWidth * 100,\n          y: e.clientY / window.innerHeight * 100\n        });\n      }\n    };\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener('resize', checkMobile);\n    };\n  }, []);\n  useEffect(() => {\n    // Initialize empty data structures\n    setRecentlyViewed([]);\n    setYourBoards([]);\n\n    // Simulate API call to backend\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n\n        // Use auth user data if available\n        if (authUser) {\n          setUser(authUser);\n        } else {\n          setUser({\n            name: \"\"\n          });\n        }\n        setTimeout(() => {\n          setLoading(false);\n        }, 1000);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [authUser]);\n  const styles = {\n    container: {\n      minHeight: \"100vh\",\n      backgroundColor: \"#0a0a0f\",\n      background: `\n        radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),\n        radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),\n        radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%),\n        linear-gradient(135deg, #0a0a0f 0%, #1a1a2e 25%, #16213e 50%, #0a0a0f 100%)\n      `,\n      padding: isMobile ? \"1rem\" : \"2rem\",\n      fontFamily: \"'Inter', -apple-system, BlinkMacSystemFont, sans-serif\",\n      position: \"relative\",\n      overflow: \"hidden\"\n    },\n    backgroundOverlay: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      background: isMobile ? \"radial-gradient(circle at 50% 50%, rgba(59, 130, 246, 0.1) 0%, transparent 50%)\" : `radial-gradient(circle at ${mousePosition.x}% ${mousePosition.y}%, rgba(59, 130, 246, 0.1) 0%, transparent 50%)`,\n      transition: isMobile ? \"none\" : \"background 0.3s ease\",\n      pointerEvents: \"none\"\n    },\n    meshGradient: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      background: `\n        conic-gradient(from 180deg at 50% 50%, \n          rgba(59, 130, 246, 0.1) 0deg,\n          rgba(168, 85, 247, 0.1) 60deg,\n          rgba(236, 72, 153, 0.1) 120deg,\n          rgba(59, 130, 246, 0.1) 180deg,\n          rgba(34, 197, 94, 0.1) 240deg,\n          rgba(59, 130, 246, 0.1) 360deg\n        )\n      `,\n      animation: \"rotateMesh 30s linear infinite\",\n      opacity: isMobile ? 0.3 : 0.6,\n      pointerEvents: \"none\"\n    },\n    particlesContainer: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      pointerEvents: \"none\",\n      zIndex: 1\n    },\n    particle: {\n      position: \"absolute\",\n      background: \"linear-gradient(45deg, #60a5fa, #a855f7)\",\n      borderRadius: \"50%\",\n      animation: \"floatParticles 20s infinite linear\",\n      filter: \"blur(1px)\"\n    },\n    orb: {\n      position: \"absolute\",\n      borderRadius: \"50%\",\n      filter: isMobile ? \"blur(20px)\" : \"blur(40px)\",\n      animation: \"floatOrbs 25s infinite ease-in-out alternate\",\n      opacity: isMobile ? 0.2 : 0.4\n    },\n    content: {\n      position: \"relative\",\n      zIndex: 10,\n      maxWidth: \"1400px\",\n      margin: \"0 auto\"\n    },\n    welcomeTitle: {\n      fontSize: isMobile ? \"2rem\" : \"3rem\",\n      fontWeight: \"800\",\n      background: \"linear-gradient(135deg, #60A5FA 0%, #A855F7 50%, #EC4899 100%)\",\n      WebkitBackgroundClip: \"text\",\n      WebkitTextFillColor: \"transparent\",\n      backgroundClip: \"text\",\n      margin: \"0 0 0.5rem 0\",\n      animation: \"fadeInUp 1s ease-out, textShimmer 3s ease-in-out infinite\",\n      textShadow: \"0 2px 20px rgba(96, 165, 250, 0.3)\",\n      textAlign: isMobile ? \"center\" : \"left\",\n      lineHeight: isMobile ? \"1.2\" : \"1.3\"\n    },\n    subtitle: {\n      color: \"rgba(255, 255, 255, 0.8)\",\n      fontSize: isMobile ? \"1rem\" : \"1.2rem\",\n      fontWeight: \"400\",\n      margin: \"0 0 2rem 0\",\n      animation: \"fadeInUp 1.2s ease-out\",\n      textAlign: isMobile ? \"center\" : \"left\"\n    },\n    cardsContainer: {\n      display: \"grid\",\n      gridTemplateColumns: isMobile ? \"1fr\" : \"1fr 1fr\",\n      gap: isMobile ? \"1rem\" : \"2rem\",\n      marginBottom: \"2rem\"\n    },\n    card: {\n      backdropFilter: \"blur(25px)\",\n      padding: isMobile ? \"1.5rem\" : \"2.5rem\",\n      borderRadius: isMobile ? \"16px\" : \"24px\",\n      border: \"1px solid rgba(255, 255, 255, 0.08)\",\n      boxShadow: `\n        0 32px 64px -12px rgba(0, 0, 0, 0.4),\n        inset 0 1px 0 rgba(255, 255, 255, 0.1),\n        0 0 0 1px rgba(255, 255, 255, 0.05)\n      `,\n      position: \"relative\",\n      animation: \"slideUp 1.4s ease-out\",\n      overflow: \"hidden\"\n    },\n    cardGlow: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      right: 0,\n      height: \"2px\",\n      background: \"linear-gradient(90deg, transparent, #60a5fa, #a855f7, transparent)\",\n      animation: \"cardGlow 4s ease-in-out infinite\",\n      borderRadius: isMobile ? \"16px 16px 0 0\" : \"24px 24px 0 0\"\n    },\n    cardHeader: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: isMobile ? \"flex-start\" : \"center\",\n      marginBottom: isMobile ? \"1.5rem\" : \"2rem\",\n      flexDirection: isMobile ? \"column\" : \"row\",\n      gap: isMobile ? \"1rem\" : \"0\"\n    },\n    cardTitle: {\n      fontSize: isMobile ? \"1.25rem\" : \"1.5rem\",\n      fontWeight: \"700\",\n      color: \"#F1F5F9\",\n      margin: \"0\",\n      display: \"flex\",\n      alignItems: \"center\",\n      gap: \"0.5rem\"\n    },\n    boardList: {\n      listStyle: \"none\",\n      padding: \"0\",\n      margin: \"0\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: isMobile ? \"0.75rem\" : \"1rem\"\n    },\n    boardItem: {\n      padding: isMobile ? \"1rem\" : \"1.25rem\",\n      background: \"rgba(255, 255, 255, 0.05)\",\n      borderRadius: isMobile ? \"12px\" : \"16px\",\n      border: \"1px solid rgba(255, 255, 255, 0.08)\",\n      transition: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\",\n      cursor: \"pointer\",\n      backdropFilter: \"blur(10px)\"\n    },\n    boardItemHover: {\n      background: \"rgba(96, 165, 250, 0.1)\",\n      borderColor: \"rgba(96, 165, 250, 0.3)\",\n      transform: isMobile ? \"scale(1.02)\" : \"translateY(-2px)\",\n      boxShadow: \"0 8px 32px rgba(96, 165, 250, 0.2)\"\n    },\n    boardTitle: {\n      fontSize: isMobile ? \"0.9rem\" : \"1rem\",\n      fontWeight: \"600\",\n      color: \"#F1F5F9\",\n      margin: \"0 0 0.5rem 0\",\n      display: \"flex\",\n      alignItems: \"center\",\n      gap: \"0.75rem\"\n    },\n    boardMeta: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      fontSize: isMobile ? \"0.75rem\" : \"0.85rem\",\n      flexDirection: isMobile ? \"column\" : \"row\",\n      gap: isMobile ? \"0.5rem\" : \"0\",\n      alignItems: isMobile ? \"flex-start\" : \"center\"\n    },\n    teamBadge: {\n      padding: isMobile ? \"0.25rem 0.5rem\" : \"0.3rem 0.75rem\",\n      borderRadius: isMobile ? \"8px\" : \"12px\",\n      fontSize: isMobile ? \"0.7rem\" : \"0.8rem\",\n      fontWeight: \"600\",\n      background: \"rgba(96, 165, 250, 0.2)\",\n      color: \"#60A5FA\",\n      border: \"1px solid rgba(96, 165, 250, 0.3)\"\n    },\n    itemsCount: {\n      padding: isMobile ? \"0.25rem 0.5rem\" : \"0.3rem 0.75rem\",\n      borderRadius: isMobile ? \"8px\" : \"12px\",\n      fontSize: isMobile ? \"0.7rem\" : \"0.8rem\",\n      fontWeight: \"600\",\n      background: \"rgba(168, 85, 247, 0.2)\",\n      color: \"#A855F7\",\n      border: \"1px solid rgba(168, 85, 247, 0.3)\"\n    },\n    colorIndicator: {\n      width: \"4px\",\n      height: isMobile ? \"16px\" : \"20px\",\n      borderRadius: \"2px\",\n      background: \"linear-gradient(135deg, #60A5FA, #A855F7)\"\n    },\n    emptyState: {\n      textAlign: \"center\",\n      color: \"rgba(255, 255, 255, 0.6)\",\n      padding: isMobile ? \"2rem 1rem\" : \"3rem 1rem\",\n      fontSize: isMobile ? \"0.9rem\" : \"1rem\",\n      fontStyle: \"italic\"\n    },\n    loadingSpinner: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      padding: isMobile ? \"3rem\" : \"5rem\",\n      color: \"#FFFFFF\",\n      position: \"relative\",\n      zIndex: 10\n    },\n    spinner: {\n      width: isMobile ? \"40px\" : \"50px\",\n      height: isMobile ? \"40px\" : \"50px\",\n      border: \"3px solid rgba(255, 255, 255, 0.3)\",\n      borderTop: \"3px solid #60A5FA\",\n      borderRadius: \"50%\",\n      animation: \"spin 1s linear infinite\"\n    },\n    viewAllButton: {\n      background: \"rgba(96, 165, 250, 0.1)\",\n      border: \"1px solid rgba(96, 165, 250, 0.3)\",\n      color: \"#60A5FA\",\n      padding: isMobile ? \"0.4rem 0.8rem\" : \"0.5rem 1rem\",\n      borderRadius: isMobile ? \"8px\" : \"12px\",\n      fontSize: isMobile ? \"0.8rem\" : \"0.9rem\",\n      fontWeight: \"600\",\n      cursor: \"pointer\",\n      transition: \"all 0.3s ease\",\n      width: isMobile ? \"100%\" : \"auto\",\n      textAlign: \"center\"\n    },\n    viewAllButtonHover: {\n      background: \"rgba(96, 165, 250, 0.2)\",\n      transform: isMobile ? \"scale(1.02)\" : \"translateY(-1px)\"\n    }\n  };\n  const [hoveredBoard, setHoveredBoard] = useState(null);\n  const [isViewAllHovered, setIsViewAllHovered] = useState(false);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.backgroundOverlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.meshGradient\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.particlesContainer,\n        children: orbs.map(orb => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            ...styles.orb,\n            width: `${orb.size}px`,\n            height: `${orb.size}px`,\n            left: `${orb.left}%`,\n            top: `${orb.top}%`,\n            background: orb.id % 3 === 0 ? \"radial-gradient(circle, #60a5fa, #3b82f6)\" : orb.id % 3 === 1 ? \"radial-gradient(circle, #a855f7, #8b5cf6)\" : \"radial-gradient(circle, #ec4899, #f43f5e)\",\n            animationDelay: `${orb.animationDelay}s`,\n            animationDuration: `${orb.duration}s`\n          }\n        }, `orb-${orb.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3241,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.loadingSpinner,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.spinner\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3263,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n        children: `\n            @keyframes spin {\n              0% { transform: rotate(0deg); }\n              100% { transform: rotate(360deg); }\n            }\n          `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3235,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.backgroundOverlay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.meshGradient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.particlesContainer,\n      children: orbs.map(orb => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.orb,\n          width: `${orb.size}px`,\n          height: `${orb.size}px`,\n          left: `${orb.left}%`,\n          top: `${orb.top}%`,\n          background: orb.id % 3 === 0 ? \"radial-gradient(circle, #60a5fa, #3b82f6)\" : orb.id % 3 === 1 ? \"radial-gradient(circle, #a855f7, #8b5cf6)\" : \"radial-gradient(circle, #ec4899, #f43f5e)\",\n          animationDelay: `${orb.animationDelay}s`,\n          animationDuration: `${orb.duration}s`\n        }\n      }, `orb-${orb.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3287,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.particlesContainer,\n      children: particles.map(particle => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.particle,\n          width: `${particle.size}px`,\n          height: `${particle.size}px`,\n          left: `${particle.left}%`,\n          top: \"-20px\",\n          opacity: particle.opacity,\n          animationDelay: `${particle.animationDelay}s`,\n          animationDuration: `${particle.duration}s`\n        }\n      }, particle.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3311,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: styles.welcomeTitle,\n        children: \"\\uD83D\\uDC4B MathBoard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: styles.subtitle,\n        children: \"Your workspace at a glance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.cardsContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.card,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.cardGlow\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3338,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.cardHeader,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              style: styles.cardTitle,\n              children: \"\\uD83D\\uDD52 Recently Viewed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3340,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                ...styles.viewAllButton,\n                ...(isViewAllHovered ? styles.viewAllButtonHover : {})\n              },\n              onMouseEnter: () => setIsViewAllHovered(true),\n              onMouseLeave: () => setIsViewAllHovered(false),\n              onTouchStart: () => setIsViewAllHovered(true),\n              onTouchEnd: () => setIsViewAllHovered(false),\n              children: \"View All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3341,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: styles.boardList,\n            children: recentlyViewed.length > 0 ? recentlyViewed.map(board => /*#__PURE__*/_jsxDEV(\"li\", {\n              style: {\n                ...styles.boardItem,\n                ...(hoveredBoard === board.id ? styles.boardItemHover : {})\n              },\n              onMouseEnter: () => !isMobile && setHoveredBoard(board.id),\n              onMouseLeave: () => !isMobile && setHoveredBoard(null),\n              onTouchStart: () => isMobile && setHoveredBoard(board.id),\n              onTouchEnd: () => isMobile && setHoveredBoard(null),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: styles.boardTitle,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: styles.colorIndicator\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3369,\n                  columnNumber: 23\n                }, this), board.title]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 3368,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: styles.boardMeta,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  style: styles.teamBadge,\n                  children: board.team || \"Team\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3373,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: \"rgba(255, 255, 255, 0.7)\"\n                  },\n                  children: [\"Viewed \", board.lastViewed || \"recently\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3374,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 3372,\n                columnNumber: 21\n              }, this)]\n            }, board.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 3357,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n              style: styles.emptyState,\n              children: \"No recently viewed boards\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3381,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3354,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3337,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.card,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.cardGlow\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3388,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.cardHeader,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              style: styles.cardTitle,\n              children: \"\\uD83D\\uDDC2\\uFE0F Your Boards\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3390,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                ...styles.viewAllButton,\n                ...(isViewAllHovered ? styles.viewAllButtonHover : {})\n              },\n              onMouseEnter: () => setIsViewAllHovered(true),\n              onMouseLeave: () => setIsViewAllHovered(false),\n              onTouchStart: () => setIsViewAllHovered(true),\n              onTouchEnd: () => setIsViewAllHovered(false),\n              children: \"View All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3391,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3389,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: styles.boardList,\n            children: yourBoards.length > 0 ? yourBoards.map(board => /*#__PURE__*/_jsxDEV(\"li\", {\n              style: {\n                ...styles.boardItem,\n                ...(hoveredBoard === board.id ? styles.boardItemHover : {})\n              },\n              onMouseEnter: () => !isMobile && setHoveredBoard(board.id),\n              onMouseLeave: () => !isMobile && setHoveredBoard(null),\n              onTouchStart: () => isMobile && setHoveredBoard(board.id),\n              onTouchEnd: () => isMobile && setHoveredBoard(null),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: styles.boardTitle,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: styles.colorIndicator\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3419,\n                  columnNumber: 23\n                }, this), board.title]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 3418,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: styles.boardMeta,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  style: styles.itemsCount,\n                  children: [board.items || 0, \" items\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3423,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: \"rgba(255, 255, 255, 0.7)\"\n                  },\n                  children: [\"Updated \", board.updated || \"recently\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3426,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 3422,\n                columnNumber: 21\n              }, this)]\n            }, board.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 3407,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n              style: styles.emptyState,\n              children: \"No boards created yet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3433,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3404,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3387,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3335,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3327,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n          @keyframes floatParticles {\n            0% {\n              transform: translateY(0) rotate(0deg);\n              opacity: 0;\n            }\n            10% {\n              opacity: 1;\n            }\n            90% {\n              opacity: 1;\n            }\n            100% {\n              transform: translateY(100vh) rotate(360deg);\n              opacity: 0;\n            }\n          }\n\n          @keyframes floatOrbs {\n            0% {\n              transform: translateY(0px) translateX(0px) scale(1);\n            }\n            50% {\n              transform: translateY(-50px) translateX(30px) scale(1.1);\n            }\n            100% {\n              transform: translateY(-20px) translateX(-20px) scale(0.9);\n            }\n          }\n\n          @keyframes rotateMesh {\n            0% {\n              transform: rotate(0deg);\n            }\n            100% {\n              transform: rotate(360deg);\n            }\n          }\n\n          @keyframes textShimmer {\n            0%, 100% {\n              background-position: 0% 50%;\n            }\n            50% {\n              background-position: 100% 50%;\n            }\n          }\n\n          @keyframes cardGlow {\n            0%, 100% {\n              opacity: 0.5;\n              transform: scaleX(0.8);\n            }\n            50% {\n              opacity: 1;\n              transform: scaleX(1);\n            }\n          }\n\n          @keyframes slideUp {\n            0% {\n              opacity: 0;\n              transform: translateY(40px) scale(0.95);\n            }\n            100% {\n              opacity: 1;\n              transform: translateY(0) scale(1);\n            }\n          }\n\n          @keyframes fadeInUp {\n            0% {\n              opacity: 0;\n              transform: translateY(20px);\n            }\n            100% {\n              opacity: 1;\n              transform: translateY(0);\n            }\n          }\n\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n\n          button:hover:not(:disabled) {\n            transform: ${isMobile ? 'scale(1.02)' : 'translateY(-1px)'} !important;\n          }\n\n          /* Mobile-specific optimizations */\n          @media (max-width: 768px) {\n            body {\n              -webkit-tap-highlight-color: transparent;\n            }\n            \n            button:active {\n              transform: scale(0.98) !important;\n            }\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3441,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3279,\n    columnNumber: 5\n  }, this);\n}\n_s(ForYou, \"2y/uSfPZKifgrV712Bc0njv2yqY=\", false, function () {\n  return [useAuth];\n});\n_c = ForYou;\nvar _c;\n$RefreshReg$(_c, \"ForYou\");","map":{"version":3,"names":["React","useEffect","useState","useAuth","jsxDEV","_jsxDEV","ForYou","_s","user","setUser","recentlyViewed","setRecentlyViewed","yourBoards","setYourBoards","loading","setLoading","mousePosition","setMousePosition","x","y","particles","setParticles","orbs","setOrbs","isMobile","setIsMobile","authUser","checkMobile","window","innerWidth","addEventListener","particleCount","newParticles","Array","from","length","_","i","id","size","Math","random","left","animationDelay","duration","opacity","orbCount","orbSize","newOrbs","top","handleMouseMove","e","clientX","clientY","innerHeight","removeEventListener","fetchData","name","setTimeout","error","console","styles","container","minHeight","backgroundColor","background","padding","fontFamily","position","overflow","backgroundOverlay","width","height","transition","pointerEvents","meshGradient","animation","particlesContainer","zIndex","particle","borderRadius","filter","orb","content","maxWidth","margin","welcomeTitle","fontSize","fontWeight","WebkitBackgroundClip","WebkitTextFillColor","backgroundClip","textShadow","textAlign","lineHeight","subtitle","color","cardsContainer","display","gridTemplateColumns","gap","marginBottom","card","backdropFilter","border","boxShadow","cardGlow","right","cardHeader","justifyContent","alignItems","flexDirection","cardTitle","boardList","listStyle","boardItem","cursor","boardItemHover","borderColor","transform","boardTitle","boardMeta","teamBadge","itemsCount","colorIndicator","emptyState","fontStyle","loadingSpinner","spinner","borderTop","viewAllButton","viewAllButtonHover","hoveredBoard","setHoveredBoard","isViewAllHovered","setIsViewAllHovered","style","children","fileName","_jsxFileName","lineNumber","columnNumber","map","animationDuration","onMouseEnter","onMouseLeave","onTouchStart","onTouchEnd","board","title","team","lastViewed","items","updated","_c","$RefreshReg$"],"sources":["C:/Users/vmoun/OneDrive/Desktop/forusers/userspage/src/components/boards/KanbanBoard.js"],"sourcesContent":["\n// //////////////////////////////////////////////////////////////////\n// //for updated the ticket\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\n// };\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n//   const [columnsByLane, setColumnsByLane] = useState({});\n//   const [columnModal, setColumnModal] = useState(null);\n//   const [columnInput, setColumnInput] = useState('');\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const [issuesData, epicsData] = await Promise.all([listIssues(projectId), listEpics()]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//           initialCols[lane.id] = defaultStatuses.slice();\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//         setColumnsByLane(initialCols);\n//       } catch (err) { console.error(err); }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const openAddColumnModal = (e, laneId, colIndex) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'add' });\n//     setColumnInput('');\n//   };\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\n//     setColumnInput(status);\n//   };\n//   const handleAddColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[columnModal.laneId]];\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\n//       return { ...prev, [columnModal.laneId]: cols };\n//     });\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleEditColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     const { laneId, colIndex } = columnModal;\n//     const oldCol = columnsByLane[laneId][colIndex];\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\n//       alert('Column name already exists');\n//       return;\n//     }\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols[colIndex] = name.toLowerCase();\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleDeleteColumn = () => {\n//     const { laneId, colIndex } = columnModal;\n//     const removedCol = columnsByLane[laneId][colIndex];\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols.splice(colIndex, 1);\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) { console.error(err); }\n//   };\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error(err); }\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   // Create Epic Modal Handlers\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) {\n//       alert('Epic name is required');\n//       return;\n//     }\n//     try {\n//       await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\n//     } catch (error) {\n//       console.error('Error creating epic:', error);\n//     }\n//   };\n\n//   // Delete Epic Modal Handler\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) {\n//       alert('Please select an epic to delete');\n//       return;\n//     }\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//       setColumnsByLane(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setOpenSwimlanes(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setCustomTitles(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//     } catch (error) {\n//       console.error('Error deleting epic:', error);\n//     }\n//   };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Epic management buttons */}\n//       <div className=\"epic-management-section\">\n//         <div className=\"epic-buttons-container\">\n//           {/* <button className=\"create-epic-btn\" onClick={() => { setShowCreateEpic(true); setShowDeleteEpic(false); }}>+ Create Epic</button>\n//           <button className=\"delete-epic-btn\" onClick={() => { setShowDeleteEpic(true); setShowCreateEpic(false); }}>🗑 Delete Epic</button> */}\n//         </div>\n        \n//       </div>\n\n//       {/* Swimlanes and columns */}\n//       {swimlanes.map(lane => {\n//         const isOpen = openSwimlanes[lane.id];\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>{isOpen ? '▼' : '▶'}</button>\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input className=\"swimlane-title-input\" value={customTitles[lane.id] || ''} onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))} />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//             </header>\n//             {isOpen && (\n//               <div className=\"kanban-row\">\n//                 {statuses.map((status, idx) => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div className=\"kanban-column\" key={status} onDragOver={onDragOver} onDrop={e => onDrop(e, status, lane.id)}>\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         <span className=\"col-icons\">\n//                           <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\n//                           <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\n//                         </span>\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => {\n//                         const isHovered = hoveredAssigneeId === issue.id;\n//                         return (\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                             <div className=\"card-top\">\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                               <span className=\"card-id\">{issue.id}</span>\n//                             </div>\n//                             <div className=\"card-title\">{issue.title}</div>\n//                             <div className=\"card-meta\">\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\n//                               {issue.assignee && (\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\n//                                   👤\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\n//                                 </span>\n//                               )}\n//                             </div>\n//                           </div>\n//                         );\n//                       })}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Column Add/Edit modal */}\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\n//             position: 'absolute',\n//             top: modalPosition.top,\n//             left: modalPosition.left,\n//             transform: 'translateX(-50%)',\n//             minWidth: 280,\n//             maxWidth: 320,\n//             padding: 20,\n//             borderRadius: 10,\n//             background: 'white',\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\n//             zIndex: 1100\n//           }}>\n//             {columnModal.type === 'add' ? (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12 }}>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12 }}>\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                 </div>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Issue modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className=\"modal\" onClick={e => e.stopPropagation()}>\n//             <div className=\"modal-header\">\n//               <h2>{editIssue.epicName}</h2>\n//               <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\n//             </div>\n//             <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Status</label>\n//               <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\n//                 {columnsByLane[editIssue.epic]?.map(st => <option key={st} value={st}>{st}</option>) || defaultStatuses.map(st => <option key={st} value={st}>{st}</option>)}\n//               </select>\n//             </div>\n//             <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//             <div className=\"modal-field\"><label>Priority</label>\n//               <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                 <option>Low</option><option>Medium</option><option>High</option>\n//               </select>\n//             </div>\n//             <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//             <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\", alignItems: 'center' }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//               <button className=\"modal-delete-btn\" onClick={async () => {\n//                 if (window.confirm('Delete this issue?')) {\n//                   await deleteIssueAPI(selectedIssue.id);\n//                   const refreshed = await listIssues(projectId);\n//                   setIssues(refreshed);\n//                   setSelectedIssue(null);\n//                 }\n//               }}>🗑</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Inline CSS styles */}\n//       <style>{`\n//         /* Include the full CSS from the previous answer - Kanban board styling, tooltip, modals, buttons */\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f5f6f8;\n//           margin: 0;\n//           padding: 16px;\n//         }\n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n// body {\n//   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//   background-color: #f5f6f8;\n//   margin: 0;\n//   padding: 16px;\n// }\n// .board-wrap {\n//   max-width: 100%;\n//   overflow-x: auto;\n// }\n// .swimlane {\n//   background: white;\n//   border-radius: 8px;\n//   margin-bottom: 16px;\n//   box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//   overflow: hidden;\n// }\n// .swimlane-header {\n//   display: flex;\n//   align-items: center;\n//   padding: 12px 16px;\n//   background: #fafbfc;\n//   border-bottom: 1px solid #dfe5e5;\n//   font-weight: 600;\n//   font-size: 14px;\n//   color: #172b4d;\n// }\n// .swimlane-toggle, .swimlane-icon {\n//   color: #5e6c84;\n//   margin-right: 8px;\n//   cursor: pointer;\n// }\n// .swimlane-toggle {\n//   border: none;\n//   background: transparent;\n//   font-size: 14px;\n// }\n// .swimlane-icon {\n//   font-size: 18px;\n// }\n// .swimlane-title-input {\n//   border: 1px solid #dfe5e5;\n//   border-radius: 4px;\n//   padding: 4px 8px;\n//   font-size: 14px;\n//   font-weight: 600;\n//   background: white;\n//   margin-right: 8px;\n//   min-width: 150px;\n//   color: #172b4d;\n// }\n// .swimlane-title-input:focus {\n//   outline: none;\n//   border-color: #1976d2;\n// }\n// .swimlane-title-input::placeholder {\n//   color: #a2adba;\n// }\n// .swimlane-title-input:hover {\n//   border-color: #a2adba;\n// }\n// .swimlane-title-input:disabled {\n//   background: #f5f6f8;\n//   color: #a2adba;\n// }\n// .swimlane-count {\n//   color: #5e6c84;\n//   font-size: 12px;\n//   font-weight: normal;\n//   user-select: none;\n// }\n// .kanban-row {\n//   display: flex;\n//   padding: 16px;\n//   gap: 12px;\n//   overflow-x: auto;\n// }\n// .kanban-column {\n//   flex: 0 0 260px;\n//   background: #f5f6f8;\n//   border-radius: 6px;\n//   padding: 12px;\n//   display: flex;\n//   flex-direction: column;\n//   gap: 12px;\n//   border: 1px solid #dfe5e5;\n//   user-select: none;\n// }\n// .col-header {\n//   display: flex;\n//   align-items: center;\n//   margin-bottom: 4px;\n//   gap: 6px;\n// }\n// .col-title {\n//   font-weight: 600;\n//   font-size: 12px;\n//   color: #5e6c84;\n//   text-transform: uppercase;\n//   letter-spacing: 0.5px;\n//   flex-grow: 1;\n//   user-select: none;\n// }\n// .col-title:empty {\n//   height: 20px;\n// }\n// .col-count {\n//   background: #dfe5e5;\n//   color: #5e6c84;\n//   border-radius: 12px;\n//   padding: 2px 8px;\n//   font-size: 11px;\n//   font-weight: 600;\n//   user-select: none;\n//   min-width: 20px;\n//   text-align: center;\n// }\n// .col-icons {\n//   display: flex;\n//   gap: 6px;\n// }\n// .col-icon {\n//   cursor: pointer;\n//   color: #5e6c84;\n//   font-size: 18px;\n//   background: none;\n//   border: none;\n//   padding: 0;\n//   user-select: none;\n// }\n// .col-icon:hover {\n//   color: #1976d2;\n// }\n// .create-card {\n//   background: white;\n//   padding: 10px;\n//   border-radius: 6px;\n//   box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n//   display: flex;\n//   flex-direction: column;\n//   gap: 10px;\n// }\n// .create-card textarea {\n//   resize: vertical;\n//   min-height: 50px;\n//   font-size: 14px;\n//   padding: 8px;\n//   border-radius: 5px;\n//   border: 1px solid #dfe5e5;\n//   font-family: inherit;\n// }\n// .create-card textarea:focus {\n//   outline: none;\n//   border-color: #1976d2;\n// }\n// .create-card .create-actions {\n//   display: flex;\n//   align-items: center;\n//   gap: 12px;\n// }\n// .create-card .create-actions select {\n//   flex-grow: 1;\n//   padding: 8px;\n//   border: 1px solid #dfe5e5;\n//   border-radius: 5px;\n//   font-size: 14px;\n// }\n// .create-card button {\n//   padding: 8px 12px;\n//   font-size: 14px;\n//   cursor: pointer;\n//   border-radius: 5px;\n//   border: 1px solid #dfe5e5;\n//   background: #f5f6f8;\n//   user-select: none;\n//   transition: background-color 0.2s;\n// }\n// .create-card button:hover {\n//   background: #e1e7f0;\n// }\n// .card-item {\n//   background: white;\n//   border-radius: 8px;\n//   padding: 12px;\n//   box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//   cursor: pointer;\n//   user-select: none;\n//   display: flex;\n//   flex-direction: column;\n//   gap: 6px;\n//   border: 1px solid #dfe5e5;\n//   transition: box-shadow 0.2s ease, border-color 0.2s ease;\n// }\n// .card-item:hover {\n//   box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\n//   border-color: #a2adba;\n// }\n// .card-item .card-top {\n//   display: flex;\n//   justify-content: space-between;\n//   align-items: center;\n//   font-size: 12px;\n//   font-weight: 600;\n//   color: #5e6c84;\n//   gap: 10px;\n// }\n// .card-item .card-top .card-id {\n//   font-family: monospace;\n//   color: #a2adba;\n//   user-select: text;\n// }\n// .card-item .card-tags .tag {\n//   border-radius: 6px;\n//   padding: 3px 7px;\n//   font-size: 11px;\n//   font-weight: 600;\n//   text-transform: uppercase;\n//   white-space: nowrap;\n//   user-select: none;\n//   margin-right: 6px;\n// }\n// .tag-task {\n//   background: #e1efff;\n//   color: #1976d2;\n// }\n// .tag-bug {\n//   background: #ffebec;\n//   color: #d62127;\n// }\n// .tag-subtask {\n//   background: #f5e6ff;\n//   color: #772da0;\n// }\n// .card-item .card-title {\n//   font-weight: 600;\n//   font-size: 14px;\n//   color: #2b3a59;\n// }\n// .card-item .card-meta {\n//   display: flex;\n//   gap: 10px;\n//   font-size: 12px;\n//   color: #6b7c93;\n//   align-items: center;\n//   user-select: none;\n// }\n// .card-item .card-meta span {\n//   background: #f5f7fa;\n//   color: #6b7c93;\n//   padding: 3px 8px;\n//   border-radius: 12px;\n// }\n// .card-item .card-meta .card-priority.low {\n//   background: #d4edda;\n//   color: #155724;\n// }\n// .card-item .card-meta .card-priority.medium {\n//   background: #fff3cd;\n//   color: #856404;\n// }\n// .card-item .card-meta .card-priority.high {\n//   background: #f8d7da;\n//   color: #721c24;\n// }\n// .card-item .card-meta .card-assignee {\n//   position: relative;\n//   cursor: default;\n//   padding-left: 18px;\n// }\n// .card-item .card-meta .card-assignee:hover .tooltip {\n//   display: block;\n// }\n// .card-item .card-meta .tooltip {\n//   position: absolute;\n//   top: -30px;\n//   left: 50%;\n//   transform: translateX(-50%);\n//   background: #222;\n//   color: white;\n//   border-radius: 4px;\n//   padding: 4px 8px;\n//   font-size: 11px;\n//   white-space: nowrap;\n//   z-index: 10;\n//   display: none;\n//   user-select: none;\n// }\n// .modal-overlay {\n//   position: fixed;\n//   top: 0; left: 0; right: 0; bottom: 0;\n//   background: rgba(0,0,0,0.5);\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   z-index: 1000;\n// }\n// .modal {\n//   background: white;\n//   border-radius: 8px;\n//   padding: 24px;\n//   width: 700px;\n//   max-height: 80vh;\n//   display: grid;\n//   grid-template-columns: 1fr 1fr 1fr;\n//   gap: 16px;\n//   overflow-y: auto;\n//   position: relative;\n// }\n// .modal-header {\n//   grid-column: 1 / -1;\n//   display: flex;\n//   justify-content: space-between;\n//   align-items: center;\n//   font-weight: 700;\n//   font-size: 20px;\n//   color: #2b3a59;\n// }\n// .modal-header button {\n//   background: none;\n//   border: none;\n//   font-size: 22px;\n//   cursor: pointer;\n//   color: #a2adba;\n// }\n// .modal-header button:hover {\n//   color: #485fc7;\n// }\n// .modal-field {\n//   display: flex;\n//   flex-direction: column;\n//   gap: 6px;\n// }\n// .modal-field label {\n//   font-size: 12px;\n//   font-weight: 600;\n//   color: #6b7c93;\n//   user-select: none;\n// }\n// .modal-field input, .modal-field textarea, .modal-field select {\n//   padding: 8px 10px;\n//   border-radius: 6px;\n//   border: 1px solid #dfe5e5;\n//   font-size: 14px;\n//   color: #2b3a59;\n//   font-family: inherit;\n// }\n// .modal-field input:focus, .modal-field textarea:focus, .modal-field select:focus {\n//   outline: none;\n//   border-color: #485fc7;\n//   background: #f8fcff;\n// }\n// .modal-actions {\n//   grid-column: 1 / -1;\n//   display: flex;\n//   justify-content: flex-end;\n//   gap: 12px;\n//   align-items: center;\n//   margin-top: 12px;\n// }\n// button.btn-reset {\n//   background: #5e6c84;\n//   color: white;\n//   font-weight: 600;\n//   border: none;\n//   padding: 8px 16px;\n//   border-radius: 6px;\n//   cursor: pointer;\n// }\n// button.btn-reset:hover {\n//   background: #485fc7;\n// }\n// button.btn-save {\n//   background: #485fc7;\n//   color: white;\n//   font-weight: 600;\n//   border: none;\n//   padding: 8px 16px;\n//   border-radius: 6px;\n//   cursor: pointer;\n// }\n// button.btn-save:hover {\n//   background: #374cac;\n// }\n// button.btn-delete {\n//   background: #d94343;\n//   color: white;\n//   font-weight: 600;\n//   border: none;\n//   padding: 8px 16px;\n//   border-radius: 6px;\n//   cursor: pointer;\n// }\n// button.btn-delete:hover {\n//   background: #b83232;\n// }\n// input[disabled] {\n//   background: #efeff1;\n//   cursor: not-allowed;\n//   color: #b3b3b3;\n// }\n// .epic-modal-overlay {\n//   position: fixed;\n//   top: 0; left: 0; right: 0; bottom: 0;\n//   background: rgba(0,0,0,0.5);\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   z-index: 1000;\n// }\n// .epic-modal {\n//   background: white;\n//   border-radius: 8px;\n//   width: 350px;\n//   padding: 20px;\n//   box-shadow: 0 0 10px rgba(0,0,0,0.2);\n//   position: relative;\n// }\n// .epic-modal-content h3 {\n//   margin: 0 0 20px 0;\n//   font-weight: 700;\n//   font-size: 20px;\n//   color: #2b3a59;\n//   user-select: none;\n// }\n// .epic-modal-content p.delete-warning {\n//   background: #ffe6e6;\n//   padding: 10px;\n//   color: #d94343;\n//   font-size: 14px;\n//   margin-bottom: 15px;\n//   border-radius: 6px;\n// }\n// .epic-modal-input, .epic-modal-select {\n//   width: 100%;\n//   padding: 10px;\n//   font-size: 14px;\n//   margin-bottom: 20px;\n//   border-radius: 6px;\n//   border: 1px solid #dfe5e5;\n//   box-sizing: border-box;\n//   font-family: inherit;\n// }\n// .epic-modal-input:focus, .epic-modal-select:focus {\n//   outline: none;\n//   border-color: #485fc7;\n// }\n// .epic-modal-actions {\n//   display: flex;\n//   justify-content: space-between;\n//   gap: 15px;\n// }\n// button.create-epic-btn, button.delete-epic-btn {\n//   background: #485fc7;\n//   color: white;\n//   font-weight: 600;\n//   border: none;\n//   padding: 10px 20px;\n//   border-radius: 8px;\n//   cursor: pointer;\n//   font-size: 15px;\n//   user-select: none;\n// }\n// button.create-epic-btn:hover, button.delete-epic-btn:hover {\n//   background: #374cac;\n// }\n// button.delete-epic-btn {\n//   background: #d94343;\n// }\n// button.delete-epic-btn:hover {\n//   background: #b83232;\n// }\n\n//       `}</style>\n\n//     </div>\n//   );\n// }\n\n// const btnStyle = {\n//   cancel: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#5e6c84',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   // create: {\n//   //   padding: '10px 18px',\n//   //   borderRadius: '6px',\n//   //   border: 'none',\n//   //   backgroundColor: '#1976d2',\n//   //   color: 'white',\n//   //   fontWeight: '600',\n//   //   fontSize: '14px',\n//   //   cursor: 'pointer'\n//   // },\n//   delete: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#d32f2f',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   }\n// };\n\n\n\n\n\n\n\n//======================================================================================\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\n// };\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n//   const [columnsByLane, setColumnsByLane] = useState({});\n//   const [columnModal, setColumnModal] = useState(null);\n//   const [columnInput, setColumnInput] = useState('');\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\n//   const [isMobile, setIsMobile] = useState(false);\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\n\n//   // Detect mobile screen size\n//   useEffect(() => {\n//     const checkScreenSize = () => {\n//       setIsMobile(window.innerWidth < 768);\n//     };\n    \n//     checkScreenSize();\n//     window.addEventListener('resize', checkScreenSize);\n    \n//     return () => window.removeEventListener('resize', checkScreenSize);\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const [issuesData, epicsData] = await Promise.all([listIssues(projectId), listEpics()]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//           initialCols[lane.id] = defaultStatuses.slice();\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//         setColumnsByLane(initialCols);\n//       } catch (err) { console.error(err); }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const openAddColumnModal = (e, laneId, colIndex) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'add' });\n//     setColumnInput('');\n//   };\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\n//     setColumnInput(status);\n//   };\n//   const handleAddColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[columnModal.laneId]];\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\n//       return { ...prev, [columnModal.laneId]: cols };\n//     });\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleEditColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     const { laneId, colIndex } = columnModal;\n//     const oldCol = columnsByLane[laneId][colIndex];\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\n//       alert('Column name already exists');\n//       return;\n//     }\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols[colIndex] = name.toLowerCase();\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleDeleteColumn = () => {\n//     const { laneId, colIndex } = columnModal;\n//     const removedCol = columnsByLane[laneId][colIndex];\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols.splice(colIndex, 1);\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) { console.error(err); }\n//   };\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error(err); }\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   // Create Epic Modal Handlers\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) {\n//       alert('Epic name is required');\n//       return;\n//     }\n//     try {\n//       await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\n//     } catch (error) {\n//       console.error('Error creating epic:', error);\n//     }\n//   };\n\n//   // Delete Epic Modal Handler\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) {\n//       alert('Please select an epic to delete');\n//       return;\n//     }\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//       setColumnsByLane(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setOpenSwimlanes(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setCustomTitles(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//     } catch (error) {\n//       console.error('Error deleting epic:', error);\n//     }\n//   };\n\n//   // Mobile-specific functions\n//   const toggleMobileSwimlane = (laneId) => {\n//     if (activeSwimlane === laneId) {\n//       setActiveSwimlane(null);\n//     } else {\n//       setActiveSwimlane(laneId);\n//     }\n//   };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Mobile swimlane selector */}\n//       {isMobile && (\n//         <div className=\"mobile-swimlane-selector\">\n//           <select \n//             value={activeSwimlane || ''} \n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\n//             className=\"mobile-select\"\n//           >\n//             <option value=\"\">All Swimlanes</option>\n//             {swimlanes.map(lane => (\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       {/* Swimlanes and columns */}\n//       {swimlanes.map(lane => {\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\n        \n//         // Skip rendering if mobile and this isn't the active swimlane\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\n//           return null;\n//         }\n\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               {!isMobile && (\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                   {isOpen ? '▼' : '▶'}\n//                 </button>\n//               )}\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input \n//                 className=\"swimlane-title-input\" \n//                 value={customTitles[lane.id] || ''} \n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))} \n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//               {isMobile && (\n//                 <button \n//                   className=\"mobile-swimlane-toggle\"\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\n//                 >\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\n//                 </button>\n//               )}\n//             </header>\n//             {isOpen && (\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\n//                 {statuses.map((status, idx) => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div \n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`} \n//                       key={status} \n//                       onDragOver={onDragOver} \n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {!isMobile && (\n//                           <span className=\"col-icons\">\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\n//                           </span>\n//                         )}\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => {\n//                         const isHovered = hoveredAssigneeId === issue.id;\n//                         return (\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                             <div className=\"card-top\">\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                               <span className=\"card-id\">{issue.id}</span>\n//                             </div>\n//                             <div className=\"card-title\">{issue.title}</div>\n//                             <div className=\"card-meta\">\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\n//                               {issue.assignee && (\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\n//                                   👤\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\n//                                 </span>\n//                               )}\n//                             </div>\n//                           </div>\n//                         );\n//                       })}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Column Add/Edit modal */}\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\n//             position: isMobile ? 'fixed' : 'absolute',\n//             top: isMobile ? '50%' : modalPosition.top,\n//             left: isMobile ? '50%' : modalPosition.left,\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\n//             minWidth: isMobile ? '90vw' : 280,\n//             maxWidth: isMobile ? '95vw' : 320,\n//             padding: 20,\n//             borderRadius: 10,\n//             background: 'white',\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\n//             zIndex: 1100\n//           }}>\n//             {columnModal.type === 'add' ? (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                 </div>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Issue modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className={`modal ${isMobile ? 'mobile-modal' : ''}`} onClick={e => e.stopPropagation()}>\n//             <div className=\"modal-header\">\n//               <h2>{editIssue.epicName}</h2>\n//               <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\n//             </div>\n//             <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\n//               <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Status</label>\n//                 <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\n//                   {columnsByLane[editIssue.epic]?.map(st => <option key={st} value={st}>{st}</option>) || defaultStatuses.map(st => <option key={st} value={st}>{st}</option>)}\n//                 </select>\n//               </div>\n//               <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//               <div className=\"modal-field\"><label>Priority</label>\n//                 <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                   <option>Low</option><option>Medium</option><option>High</option>\n//                 </select>\n//               </div>\n//               <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n//             </div>\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\", alignItems: 'center' }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//               <button className=\"modal-delete-btn\" onClick={async () => {\n//                 if (window.confirm('Delete this issue?')) {\n//                   await deleteIssueAPI(selectedIssue.id);\n//                   const refreshed = await listIssues(projectId);\n//                   setIssues(refreshed);\n//                   setSelectedIssue(null);\n//                 }\n//               }}>🗑</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Inline CSS styles */}\n//       <style>{`\n//         /* Base styles */\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f5f6f8;\n//           margin: 0;\n//           padding: 16px;\n//         }\n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n\n//         /* Desktop styles */\n//         @media (min-width: 768px) {\n//           .swimlane {\n//             background: white;\n//             border-radius: 8px;\n//             margin-bottom: 16px;\n//             box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//             overflow: hidden;\n//           }\n          \n//           .kanban-row {\n//             display: flex;\n//             padding: 16px;\n//             gap: 12px;\n//             overflow-x: auto;\n//           }\n          \n//           .kanban-column {\n//             flex: 0 0 260px;\n//             background: #f5f6f8;\n//             border-radius: 6px;\n//             padding: 12px;\n//             display: flex;\n//             flex-direction: column;\n//             gap: 12px;\n//             border: 1px solid #dfe5e5;\n//             user-select: none;\n//             min-height: 400px;\n//           }\n          \n//           .modal {\n//             background: white;\n//             border-radius: 8px;\n//             padding: 24px;\n//             width: 700px;\n//             max-height: 80vh;\n//             display: grid;\n//             grid-template-columns: 1fr 1fr 1fr;\n//             gap: 16px;\n//             overflow-y: auto;\n//             position: relative;\n//           }\n//         }\n\n//         /* Mobile styles */\n//         @media (max-width: 767px) {\n//           body {\n//             padding: 8px;\n//           }\n          \n//           .mobile-swimlane-selector {\n//             margin-bottom: 16px;\n//             position: sticky;\n//             top: 0;\n//             background: white;\n//             padding: 12px;\n//             border-radius: 8px;\n//             box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n//             z-index: 100;\n//           }\n          \n//           .mobile-select {\n//             width: 100%;\n//             padding: 12px;\n//             border: 1px solid #dfe5e5;\n//             border-radius: 6px;\n//             font-size: 16px;\n//             background: white;\n//           }\n          \n//           .swimlane {\n//             background: white;\n//             border-radius: 8px;\n//             margin-bottom: 12px;\n//             box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//             overflow: hidden;\n//           }\n          \n//           .swimlane-header {\n//             display: flex;\n//             align-items: center;\n//             padding: 12px;\n//             background: #fafbfc;\n//             border-bottom: 1px solid #dfe5e5;\n//             font-weight: 600;\n//             font-size: 14px;\n//             color: #172b4d;\n//             position: relative;\n//           }\n          \n//           .mobile-swimlane-toggle {\n//             background: none;\n//             border: none;\n//             font-size: 16px;\n//             color: #5e6c84;\n//             margin-left: auto;\n//             padding: 4px 8px;\n//           }\n          \n//           .kanban-row.mobile-view {\n//             display: block;\n//             padding: 8px;\n//             overflow-x: auto;\n//             white-space: nowrap;\n//           }\n          \n//           .kanban-column.mobile-column {\n//             display: inline-block;\n//             vertical-align: top;\n//             width: 280px;\n//             margin-right: 8px;\n//             background: #f5f6f8;\n//             border-radius: 6px;\n//             padding: 8px;\n//             border: 1px solid #dfe5e5;\n//             user-select: none;\n//             min-height: 300px;\n//           }\n          \n//           .col-header {\n//             display: flex;\n//             align-items: center;\n//             margin-bottom: 8px;\n//             gap: 6px;\n//           }\n          \n//           .col-title {\n//             font-weight: 600;\n//             font-size: 11px;\n//             color: #5e6c84;\n//             text-transform: uppercase;\n//             letter-spacing: 0.5px;\n//             flex-grow: 1;\n//           }\n          \n//           .card-item {\n//             background: white;\n//             border-radius: 6px;\n//             padding: 10px;\n//             box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//             cursor: pointer;\n//             user-select: none;\n//             display: flex;\n//             flex-direction: column;\n//             gap: 6px;\n//             border: 1px solid #dfe5e5;\n//             margin-bottom: 8px;\n//           }\n          \n//           .card-title {\n//             font-weight: 600;\n//             font-size: 13px;\n//             color: #2b3a59;\n//             line-height: 1.3;\n//           }\n          \n//           .card-meta {\n//             display: flex;\n//             gap: 6px;\n//             font-size: 10px;\n//             color: #6b7c93;\n//             align-items: center;\n//             flex-wrap: wrap;\n//           }\n          \n//           .modal.mobile-modal {\n//             width: 95vw;\n//             max-height: 90vh;\n//             padding: 16px;\n//             display: flex;\n//             flex-direction: column;\n//           }\n          \n//           .modal-content.mobile-modal-content {\n//             display: flex;\n//             flex-direction: column;\n//             gap: 12px;\n//             overflow-y: auto;\n//           }\n          \n//           .modal-field {\n//             display: flex;\n//             flex-direction: column;\n//             gap: 4px;\n//           }\n          \n//           .modal-field input, .modal-field textarea, .modal-field select {\n//             padding: 10px;\n//             font-size: 16px; /* Better for mobile touch */\n//           }\n          \n//           .modal-actions {\n//             display: flex;\n//             gap: 8px;\n//             justify-content: space-between;\n//             margin-top: 16px;\n//           }\n          \n//           .modal-actions button {\n//             flex: 1;\n//             padding: 12px;\n//             font-size: 16px;\n//           }\n//         }\n\n//         /* Common styles (applied to both desktop and mobile) */\n//         .swimlane-header {\n//           display: flex;\n//           align-items: center;\n//           padding: 12px 16px;\n//           background: #fafbfc;\n//           border-bottom: 1px solid #dfe5e5;\n//           font-weight: 600;\n//           font-size: 14px;\n//           color: #172b4d;\n//         }\n        \n//         .swimlane-toggle, .swimlane-icon {\n//           color: #5e6c84;\n//           margin-right: 8px;\n//           cursor: pointer;\n//         }\n        \n//         .swimlane-toggle {\n//           border: none;\n//           background: transparent;\n//           font-size: 14px;\n//         }\n        \n//         .swimlane-icon {\n//           font-size: 18px;\n//         }\n        \n//         .swimlane-title-input {\n//           border: 1px solid #dfe5e5;\n//           border-radius: 4px;\n//           padding: 4px 8px;\n//           font-size: 14px;\n//           font-weight: 600;\n//           background: white;\n//           margin-right: 8px;\n//           min-width: 150px;\n//           color: #172b4d;\n//         }\n        \n//         .swimlane-title-input:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n        \n//         .swimlane-count {\n//           color: #5e6c84;\n//           font-size: 12px;\n//           font-weight: normal;\n//         }\n        \n//         .col-header {\n//           display: flex;\n//           align-items: center;\n//           margin-bottom: 4px;\n//           gap: 6px;\n//         }\n        \n//         .col-title {\n//           font-weight: 600;\n//           font-size: 12px;\n//           color: #5e6c84;\n//           text-transform: uppercase;\n//           letter-spacing: 0.5px;\n//           flex-grow: 1;\n//         }\n        \n//         .col-count {\n//           background: #dfe5e5;\n//           color: #5e6c84;\n//           border-radius: 12px;\n//           padding: 2px 8px;\n//           font-size: 11px;\n//           font-weight: 600;\n//           min-width: 20px;\n//           text-align: center;\n//         }\n        \n//         .col-icons {\n//           display: flex;\n//           gap: 6px;\n//         }\n        \n//         .col-icon {\n//           cursor: pointer;\n//           color: #5e6c84;\n//           font-size: 18px;\n//           background: none;\n//           border: none;\n//           padding: 0;\n//         }\n        \n//         .create-card {\n//           background: white;\n//           padding: 10px;\n//           border-radius: 6px;\n//           box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n//           display: flex;\n//           flex-direction: column;\n//           gap: 10px;\n//         }\n        \n//         .card-item {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 12px;\n//           box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//           cursor: pointer;\n//           user-select: none;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 6px;\n//           border: 1px solid #dfe5e5;\n//           transition: box-shadow 0.2s ease, border-color 0.2s ease;\n//         }\n        \n//         .card-item:hover {\n//           box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\n//           border-color: #a2adba;\n//         }\n        \n//         .modal-overlay {\n//           position: fixed;\n//           top: 0; left: 0; right: 0; bottom: 0;\n//           background: rgba(0,0,0,0.5);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//         }\n        \n//         /* Button styles */\n//         button {\n//           cursor: pointer;\n//           transition: background-color 0.2s;\n//         }\n        \n//         button:hover {\n//           opacity: 0.9;\n//         }\n\n//         /* Touch improvements for mobile */\n//         @media (max-width: 767px) {\n//           button, .card-item, .col-icon {\n//             min-height: 44px;\n//             min-width: 44px;\n//           }\n          \n//           .card-item {\n//             touch-action: manipulation;\n//           }\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n\n// const btnStyle = {\n//   cancel: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#5e6c84',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   create: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#1976d2',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   delete: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#d32f2f',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   }\n// };\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\n// const mockProjects = [\n//   { id: 'p1', name: 'E-Commerce Platform' },\n//   { id: 'p2', name: 'API Gateway Service' },\n//   { id: 'p3', name: 'Mobile App Development' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\n// const getProjectName = async (projectId) => {\n//   await simulateApiDelay();\n//   const project = mockProjects.find(p => p.id === projectId);\n//   return project ? project.name : 'Untitled Project';\n// };\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\n// };\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [projectName, setProjectName] = useState('');\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n//   const [columnsByLane, setColumnsByLane] = useState({});\n//   const [columnModal, setColumnModal] = useState(null);\n//   const [columnInput, setColumnInput] = useState('');\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\n//   const [isMobile, setIsMobile] = useState(false);\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\n\n//   // Detect mobile screen size\n//   useEffect(() => {\n//     const checkScreenSize = () => {\n//       setIsMobile(window.innerWidth < 768);\n//     };\n    \n//     checkScreenSize();\n//     window.addEventListener('resize', checkScreenSize);\n    \n//     return () => window.removeEventListener('resize', checkScreenSize);\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const [issuesData, epicsData, projectNameData] = await Promise.all([\n//           listIssues(projectId), \n//           listEpics(), \n//           projectId ? getProjectName(projectId) : Promise.resolve('All Projects')\n//         ]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         setProjectName(projectNameData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//           initialCols[lane.id] = defaultStatuses.slice();\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//         setColumnsByLane(initialCols);\n//       } catch (err) { console.error(err); }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const openAddColumnModal = (e, laneId, colIndex) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'add' });\n//     setColumnInput('');\n//   };\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\n//     setColumnInput(status);\n//   };\n//   const handleAddColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[columnModal.laneId]];\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\n//       return { ...prev, [columnModal.laneId]: cols };\n//     });\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleEditColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     const { laneId, colIndex } = columnModal;\n//     const oldCol = columnsByLane[laneId][colIndex];\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\n//       alert('Column name already exists');\n//       return;\n//     }\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols[colIndex] = name.toLowerCase();\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleDeleteColumn = () => {\n//     const { laneId, colIndex } = columnModal;\n//     const removedCol = columnsByLane[laneId][colIndex];\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols.splice(colIndex, 1);\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) { console.error(err); }\n//   };\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error(err); }\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   // Create Epic Modal Handlers\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) {\n//       alert('Epic name is required');\n//       return;\n//     }\n//     try {\n//       await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\n//     } catch (error) {\n//       console.error('Error creating epic:', error);\n//     }\n//   };\n\n//   // Delete Epic Modal Handler\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) {\n//       alert('Please select an epic to delete');\n//       return;\n//     }\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//       setColumnsByLane(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setOpenSwimlanes(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setCustomTitles(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//     } catch (error) {\n//       console.error('Error deleting epic:', error);\n//     }\n//   };\n\n//   // Mobile-specific functions\n//   const toggleMobileSwimlane = (laneId) => {\n//     if (activeSwimlane === laneId) {\n//       setActiveSwimlane(null);\n//     } else {\n//       setActiveSwimlane(laneId);\n//     }\n//   };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Project Name Header */}\n//       <div className=\"project-header\">\n//         <h1 className=\"project-title\">{projectName}</h1>\n//         <div className=\"project-stats\">\n//           <span className=\"project-stat\">{epics.length} Epics</span>\n//           <span className=\"project-stat\">{issues.length} Issues</span>\n//           <span className=\"project-stat\">\n//             {issues.filter(issue => issue.status === 'done').length} Completed\n//           </span>\n//         </div>\n//       </div>\n\n//       {/* Mobile swimlane selector */}\n//       {isMobile && (\n//         <div className=\"mobile-swimlane-selector\">\n//           <select \n//             value={activeSwimlane || ''} \n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\n//             className=\"mobile-select\"\n//           >\n//             <option value=\"\">All Swimlanes</option>\n//             {swimlanes.map(lane => (\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       {/* Swimlanes and columns */}\n//       {swimlanes.map(lane => {\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\n        \n//         // Skip rendering if mobile and this isn't the active swimlane\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\n//           return null;\n//         }\n\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               {!isMobile && (\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                   {isOpen ? '▼' : '▶'}\n//                 </button>\n//               )}\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input \n//                 className=\"swimlane-title-input\" \n//                 value={customTitles[lane.id] || ''} \n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))} \n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//               {isMobile && (\n//                 <button \n//                   className=\"mobile-swimlane-toggle\"\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\n//                 >\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\n//                 </button>\n//               )}\n//             </header>\n//             {isOpen && (\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\n//                 {statuses.map((status, idx) => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div \n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`} \n//                       key={status} \n//                       onDragOver={onDragOver} \n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {!isMobile && (\n//                           <span className=\"col-icons\">\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\n//                           </span>\n//                         )}\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => {\n//                         const isHovered = hoveredAssigneeId === issue.id;\n//                         return (\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                             <div className=\"card-top\">\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                               <span className=\"card-id\">{issue.id}</span>\n//                             </div>\n//                             <div className=\"card-title\">{issue.title}</div>\n//                             <div className=\"card-meta\">\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\n//                               {issue.assignee && (\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\n//                                   👤\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\n//                                 </span>\n//                               )}\n//                             </div>\n//                           </div>\n//                         );\n//                       })}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n\n//       {/* Column Add/Edit modal */}\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\n//             position: isMobile ? 'fixed' : 'absolute',\n//             top: isMobile ? '50%' : modalPosition.top,\n//             left: isMobile ? '50%' : modalPosition.left,\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\n//             minWidth: isMobile ? '90vw' : 280,\n//             maxWidth: isMobile ? '95vw' : 320,\n//             padding: 20,\n//             borderRadius: 10,\n//             background: 'white',\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\n//             zIndex: 1100\n//           }}>\n//             {columnModal.type === 'add' ? (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                 </div>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Issue modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className={`modal ${isMobile ? 'mobile-modal' : ''}`} onClick={e => e.stopPropagation()}>\n//             <div className=\"modal-header\">\n//               <h2>{editIssue.epicName}</h2>\n//               <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\n//             </div>\n//             <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\n//               <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Status</label>\n//                 <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\n//                   {columnsByLane[editIssue.epic]?.map(st => <option key={st} value={st}>{st}</option>) || defaultStatuses.map(st => <option key={st} value={st}>{st}</option>)}\n//                 </select>\n//               </div>\n//               <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//               <div className=\"modal-field\"><label>Priority</label>\n//                 <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                   <option>Low</option><option>Medium</option><option>High</option>\n//                 </select>\n//               </div>\n//               <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n//             </div>\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\", alignItems: 'center' }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//               <button className=\"modal-delete-btn\" onClick={async () => {\n//                 if (window.confirm('Delete this issue?')) {\n//                   await deleteIssueAPI(selectedIssue.id);\n//                   const refreshed = await listIssues(projectId);\n//                   setIssues(refreshed);\n//                   setSelectedIssue(null);\n//                 }\n//               }}>🗑</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Inline CSS styles */}\n//       <style>{`\n//         /* Base styles */\n//         body {\n//           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//           background-color: #f5f6f8;\n//           margin: 0;\n//           padding: 16px;\n//         }\n//         .board-wrap {\n//           max-width: 100%;\n//           overflow-x: auto;\n//         }\n\n//         /* Project Header Styles */\n//         .project-header {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 20px 24px;\n//           margin-bottom: 20px;\n//           box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//           border-left: 4px solid #1976d2;\n//         }\n        \n//         .project-title {\n//           margin: 0 0 12px 0;\n//           font-size: 28px;\n//           font-weight: 700;\n//           color: #172b4d;\n//           line-height: 1.2;\n//         }\n        \n//         .project-stats {\n//           display: flex;\n//           gap: 20px;\n//           flex-wrap: wrap;\n//         }\n        \n//         .project-stat {\n//           background: #f5f6f8;\n//           padding: 6px 12px;\n//           border-radius: 16px;\n//           font-size: 14px;\n//           font-weight: 600;\n//           color: #5e6c84;\n//           display: flex;\n//           align-items: center;\n//           gap: 4px;\n//         }\n        \n//         .project-stat:before {\n//           content: \"•\";\n//           color: #1976d2;\n//           font-weight: bold;\n//         }\n\n//         /* Desktop styles */\n//         @media (min-width: 768px) {\n//           .swimlane {\n//             background: white;\n//             border-radius: 8px;\n//             margin-bottom: 16px;\n//             box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//             overflow: hidden;\n//           }\n          \n//           .kanban-row {\n//             display: flex;\n//             padding: 16px;\n//             gap: 12px;\n//             overflow-x: auto;\n//           }\n          \n//           .kanban-column {\n//             flex: 0 0 260px;\n//             background: #f5f6f8;\n//             border-radius: 6px;\n//             padding: 12px;\n//             display: flex;\n//             flex-direction: column;\n//             gap: 12px;\n//             border: 1px solid #dfe5e5;\n//             user-select: none;\n//             min-height: 400px;\n//           }\n          \n//           .modal {\n//             background: white;\n//             border-radius: 8px;\n//             padding: 24px;\n//             width: 700px;\n//             max-height: 80vh;\n//             display: grid;\n//             grid-template-columns: 1fr 1fr 1fr;\n//             gap: 16px;\n//             overflow-y: auto;\n//             position: relative;\n//           }\n//         }\n\n//         /* Mobile styles */\n//         @media (max-width: 767px) {\n//           body {\n//             padding: 8px;\n//           }\n          \n//           .project-header {\n//             padding: 16px;\n//             margin-bottom: 16px;\n//             border-left-width: 3px;\n//           }\n          \n//           .project-title {\n//             font-size: 22px;\n//             margin-bottom: 10px;\n//           }\n          \n//           .project-stats {\n//             gap: 12px;\n//           }\n          \n//           .project-stat {\n//             font-size: 12px;\n//             padding: 4px 10px;\n//           }\n          \n//           .mobile-swimlane-selector {\n//             margin-bottom: 16px;\n//             position: sticky;\n//             top: 0;\n//             background: white;\n//             padding: 12px;\n//             border-radius: 8px;\n//             box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n//             z-index: 100;\n//           }\n          \n//           .mobile-select {\n//             width: 100%;\n//             padding: 12px;\n//             border: 1px solid #dfe5e5;\n//             border-radius: 6px;\n//             font-size: 16px;\n//             background: white;\n//           }\n          \n//           .swimlane {\n//             background: white;\n//             border-radius: 8px;\n//             margin-bottom: 12px;\n//             box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//             overflow: hidden;\n//           }\n          \n//           .swimlane-header {\n//             display: flex;\n//             align-items: center;\n//             padding: 12px;\n//             background: #fafbfc;\n//             border-bottom: 1px solid #dfe5e5;\n//             font-weight: 600;\n//             font-size: 14px;\n//             color: #172b4d;\n//             position: relative;\n//           }\n          \n//           .mobile-swimlane-toggle {\n//             background: none;\n//             border: none;\n//             font-size: 16px;\n//             color: #5e6c84;\n//             margin-left: auto;\n//             padding: 4px 8px;\n//           }\n          \n//           .kanban-row.mobile-view {\n//             display: block;\n//             padding: 8px;\n//             overflow-x: auto;\n//             white-space: nowrap;\n//           }\n          \n//           .kanban-column.mobile-column {\n//             display: inline-block;\n//             vertical-align: top;\n//             width: 280px;\n//             margin-right: 8px;\n//             background: #f5f6f8;\n//             border-radius: 6px;\n//             padding: 8px;\n//             border: 1px solid #dfe5e5;\n//             user-select: none;\n//             min-height: 300px;\n//           }\n          \n//           .col-header {\n//             display: flex;\n//             align-items: center;\n//             margin-bottom: 8px;\n//             gap: 6px;\n//           }\n          \n//           .col-title {\n//             font-weight: 600;\n//             font-size: 11px;\n//             color: #5e6c84;\n//             text-transform: uppercase;\n//             letter-spacing: 0.5px;\n//             flex-grow: 1;\n//           }\n          \n//           .card-item {\n//             background: white;\n//             border-radius: 6px;\n//             padding: 10px;\n//             box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//             cursor: pointer;\n//             user-select: none;\n//             display: flex;\n//             flex-direction: column;\n//             gap: 6px;\n//             border: 1px solid #dfe5e5;\n//             margin-bottom: 8px;\n//           }\n          \n//           .card-title {\n//             font-weight: 600;\n//             font-size: 13px;\n//             color: #2b3a59;\n//             line-height: 1.3;\n//           }\n          \n//           .card-meta {\n//             display: flex;\n//             gap: 6px;\n//             font-size: 10px;\n//             color: #6b7c93;\n//             align-items: center;\n//             flex-wrap: wrap;\n//           }\n          \n//           .modal.mobile-modal {\n//             width: 95vw;\n//             max-height: 90vh;\n//             padding: 16px;\n//             display: flex;\n//             flex-direction: column;\n//           }\n          \n//           .modal-content.mobile-modal-content {\n//             display: flex;\n//             flex-direction: column;\n//             gap: 12px;\n//             overflow-y: auto;\n//           }\n          \n//           .modal-field {\n//             display: flex;\n//             flex-direction: column;\n//             gap: 4px;\n//           }\n          \n//           .modal-field input, .modal-field textarea, .modal-field select {\n//             padding: 10px;\n//             font-size: 16px; /* Better for mobile touch */\n//           }\n          \n//           .modal-actions {\n//             display: flex;\n//             gap: 8px;\n//             justify-content: space-between;\n//             margin-top: 16px;\n//           }\n          \n//           .modal-actions button {\n//             flex: 1;\n//             padding: 12px;\n//             font-size: 16px;\n//           }\n//         }\n\n//         /* Common styles (applied to both desktop and mobile) */\n//         .swimlane-header {\n//           display: flex;\n//           align-items: center;\n//           padding: 12px 16px;\n//           background: #fafbfc;\n//           border-bottom: 1px solid #dfe5e5;\n//           font-weight: 600;\n//           font-size: 14px;\n//           color: #172b4d;\n//         }\n        \n//         .swimlane-toggle, .swimlane-icon {\n//           color: #5e6c84;\n//           margin-right: 8px;\n//           cursor: pointer;\n//         }\n        \n//         .swimlane-toggle {\n//           border: none;\n//           background: transparent;\n//           font-size: 14px;\n//         }\n        \n//         .swimlane-icon {\n//           font-size: 18px;\n//         }\n        \n//         .swimlane-title-input {\n//           border: 1px solid #dfe5e5;\n//           border-radius: 4px;\n//           padding: 4px 8px;\n//           font-size: 14px;\n//           font-weight: 600;\n//           background: white;\n//           margin-right: 8px;\n//           min-width: 150px;\n//           color: #172b4d;\n//         }\n        \n//         .swimlane-title-input:focus {\n//           outline: none;\n//           border-color: #1976d2;\n//         }\n        \n//         .swimlane-count {\n//           color: #5e6c84;\n//           font-size: 12px;\n//           font-weight: normal;\n//         }\n        \n//         .col-header {\n//           display: flex;\n//           align-items: center;\n//           margin-bottom: 4px;\n//           gap: 6px;\n//         }\n        \n//         .col-title {\n//           font-weight: 600;\n//           font-size: 12px;\n//           color: #5e6c84;\n//           text-transform: uppercase;\n//           letter-spacing: 0.5px;\n//           flex-grow: 1;\n//         }\n        \n//         .col-count {\n//           background: #dfe5e5;\n//           color: #5e6c84;\n//           border-radius: 12px;\n//           padding: 2px 8px;\n//           font-size: 11px;\n//           font-weight: 600;\n//           min-width: 20px;\n//           text-align: center;\n//         }\n        \n//         .col-icons {\n//           display: flex;\n//           gap: 6px;\n//         }\n        \n//         .col-icon {\n//           cursor: pointer;\n//           color: #5e6c84;\n//           font-size: 18px;\n//           background: none;\n//           border: none;\n//           padding: 0;\n//         }\n        \n//         .create-card {\n//           background: white;\n//           padding: 10px;\n//           border-radius: 6px;\n//           box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n//           display: flex;\n//           flex-direction: column;\n//           gap: 10px;\n//         }\n        \n//         .card-item {\n//           background: white;\n//           border-radius: 8px;\n//           padding: 12px;\n//           box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//           cursor: pointer;\n//           user-select: none;\n//           display: flex;\n//           flex-direction: column;\n//           gap: 6px;\n//           border: 1px solid #dfe5e5;\n//           transition: box-shadow 0.2s ease, border-color 0.2s ease;\n//         }\n        \n//         .card-item:hover {\n//           box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\n//           border-color: #a2adba;\n//         }\n        \n//         .modal-overlay {\n//           position: fixed;\n//           top: 0; left: 0; right: 0; bottom: 0;\n//           background: rgba(0,0,0,0.5);\n//           display: flex;\n//           align-items: center;\n//           justify-content: center;\n//           z-index: 1000;\n//         }\n        \n//         /* Button styles */\n//         button {\n//           cursor: pointer;\n//           transition: background-color 0.2s;\n//         }\n        \n//         button:hover {\n//           opacity: 0.9;\n//         }\n\n//         /* Touch improvements for mobile */\n//         @media (max-width: 767px) {\n//           button, .card-item, .col-icon {\n//             min-height: 44px;\n//             min-width: 44px;\n//           }\n          \n//           .card-item {\n//             touch-action: manipulation;\n//           }\n//         }\n//       `}</style>\n//     </div>\n//   );\n// }\n\n// const btnStyle = {\n//   cancel: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#5e6c84',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   create: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#1976d2',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   delete: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#d32f2f',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   }\n// };\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useEffect, useState } from 'react';\nimport { useAuth } from \"../../context/AuthContext\";\n\nexport default function ForYou() {\n  const [user, setUser] = useState(null);\n  const [recentlyViewed, setRecentlyViewed] = useState([]);\n  const [yourBoards, setYourBoards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [particles, setParticles] = useState([]);\n  const [orbs, setOrbs] = useState([]);\n  const [isMobile, setIsMobile] = useState(false);\n\n  const { user: authUser } = useAuth();\n\n  useEffect(() => {\n    // Check if mobile on mount and resize\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n\n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n\n    // Create floating particles (fewer on mobile)\n    const particleCount = window.innerWidth < 768 ? 8 : 15;\n    const newParticles = Array.from({ length: particleCount }, (_, i) => ({\n      id: i,\n      size: Math.random() * 3 + 1,\n      left: Math.random() * 100,\n      animationDelay: Math.random() * 20,\n      duration: Math.random() * 15 + 10,\n      opacity: Math.random() * 0.6 + 0.2,\n    }));\n    setParticles(newParticles);\n\n    // Create floating orbs (fewer and smaller on mobile)\n    const orbCount = window.innerWidth < 768 ? 3 : 6;\n    const orbSize = window.innerWidth < 768 ? \n      Math.random() * 60 + 20 : \n      Math.random() * 120 + 40;\n    \n    const newOrbs = Array.from({ length: orbCount }, (_, i) => ({\n      id: i,\n      size: orbSize,\n      left: Math.random() * 100,\n      top: Math.random() * 100,\n      animationDelay: Math.random() * 10,\n      duration: Math.random() * 20 + 15,\n    }));\n    setOrbs(newOrbs);\n\n    // Mouse move handler (desktop only)\n    const handleMouseMove = (e) => {\n      if (window.innerWidth >= 768) {\n        setMousePosition({\n          x: (e.clientX / window.innerWidth) * 100,\n          y: (e.clientY / window.innerHeight) * 100,\n        });\n      }\n    };\n\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener('resize', checkMobile);\n    };\n  }, []);\n\n  useEffect(() => {\n    // Initialize empty data structures\n    setRecentlyViewed([]);\n    setYourBoards([]);\n    \n    // Simulate API call to backend\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        \n        // Use auth user data if available\n        if (authUser) {\n          setUser(authUser);\n        } else {\n          setUser({ name: \"\" });\n        }\n        \n        setTimeout(() => {\n          setLoading(false);\n        }, 1000);\n        \n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [authUser]);\n\n  const styles = {\n    container: {\n      minHeight: \"100vh\",\n      backgroundColor: \"#0a0a0f\",\n      background: `\n        radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),\n        radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),\n        radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%),\n        linear-gradient(135deg, #0a0a0f 0%, #1a1a2e 25%, #16213e 50%, #0a0a0f 100%)\n      `,\n      padding: isMobile ? \"1rem\" : \"2rem\",\n      fontFamily: \"'Inter', -apple-system, BlinkMacSystemFont, sans-serif\",\n      position: \"relative\",\n      overflow: \"hidden\"\n    },\n    backgroundOverlay: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      background: isMobile \n        ? \"radial-gradient(circle at 50% 50%, rgba(59, 130, 246, 0.1) 0%, transparent 50%)\"\n        : `radial-gradient(circle at ${mousePosition.x}% ${mousePosition.y}%, rgba(59, 130, 246, 0.1) 0%, transparent 50%)`,\n      transition: isMobile ? \"none\" : \"background 0.3s ease\",\n      pointerEvents: \"none\",\n    },\n    meshGradient: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      background: `\n        conic-gradient(from 180deg at 50% 50%, \n          rgba(59, 130, 246, 0.1) 0deg,\n          rgba(168, 85, 247, 0.1) 60deg,\n          rgba(236, 72, 153, 0.1) 120deg,\n          rgba(59, 130, 246, 0.1) 180deg,\n          rgba(34, 197, 94, 0.1) 240deg,\n          rgba(59, 130, 246, 0.1) 360deg\n        )\n      `,\n      animation: \"rotateMesh 30s linear infinite\",\n      opacity: isMobile ? 0.3 : 0.6,\n      pointerEvents: \"none\",\n    },\n    particlesContainer: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      pointerEvents: \"none\",\n      zIndex: 1,\n    },\n    particle: {\n      position: \"absolute\",\n      background: \"linear-gradient(45deg, #60a5fa, #a855f7)\",\n      borderRadius: \"50%\",\n      animation: \"floatParticles 20s infinite linear\",\n      filter: \"blur(1px)\",\n    },\n    orb: {\n      position: \"absolute\",\n      borderRadius: \"50%\",\n      filter: isMobile ? \"blur(20px)\" : \"blur(40px)\",\n      animation: \"floatOrbs 25s infinite ease-in-out alternate\",\n      opacity: isMobile ? 0.2 : 0.4,\n    },\n    content: {\n      position: \"relative\",\n      zIndex: 10,\n      maxWidth: \"1400px\",\n      margin: \"0 auto\"\n    },\n    welcomeTitle: {\n      fontSize: isMobile ? \"2rem\" : \"3rem\",\n      fontWeight: \"800\",\n      background: \"linear-gradient(135deg, #60A5FA 0%, #A855F7 50%, #EC4899 100%)\",\n      WebkitBackgroundClip: \"text\",\n      WebkitTextFillColor: \"transparent\",\n      backgroundClip: \"text\",\n      margin: \"0 0 0.5rem 0\",\n      animation: \"fadeInUp 1s ease-out, textShimmer 3s ease-in-out infinite\",\n      textShadow: \"0 2px 20px rgba(96, 165, 250, 0.3)\",\n      textAlign: isMobile ? \"center\" : \"left\",\n      lineHeight: isMobile ? \"1.2\" : \"1.3\"\n    },\n    subtitle: {\n      color: \"rgba(255, 255, 255, 0.8)\",\n      fontSize: isMobile ? \"1rem\" : \"1.2rem\",\n      fontWeight: \"400\",\n      margin: \"0 0 2rem 0\",\n      animation: \"fadeInUp 1.2s ease-out\",\n      textAlign: isMobile ? \"center\" : \"left\",\n    },\n    cardsContainer: {\n      display: \"grid\",\n      gridTemplateColumns: isMobile ? \"1fr\" : \"1fr 1fr\",\n      gap: isMobile ? \"1rem\" : \"2rem\",\n      marginBottom: \"2rem\"\n    },\n    card: {\n      backdropFilter: \"blur(25px)\",\n      padding: isMobile ? \"1.5rem\" : \"2.5rem\",\n      borderRadius: isMobile ? \"16px\" : \"24px\",\n      border: \"1px solid rgba(255, 255, 255, 0.08)\",\n      boxShadow: `\n        0 32px 64px -12px rgba(0, 0, 0, 0.4),\n        inset 0 1px 0 rgba(255, 255, 255, 0.1),\n        0 0 0 1px rgba(255, 255, 255, 0.05)\n      `,\n      position: \"relative\",\n      animation: \"slideUp 1.4s ease-out\",\n      overflow: \"hidden\",\n    },\n    cardGlow: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      right: 0,\n      height: \"2px\",\n      background: \"linear-gradient(90deg, transparent, #60a5fa, #a855f7, transparent)\",\n      animation: \"cardGlow 4s ease-in-out infinite\",\n      borderRadius: isMobile ? \"16px 16px 0 0\" : \"24px 24px 0 0\",\n    },\n    cardHeader: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: isMobile ? \"flex-start\" : \"center\",\n      marginBottom: isMobile ? \"1.5rem\" : \"2rem\",\n      flexDirection: isMobile ? \"column\" : \"row\",\n      gap: isMobile ? \"1rem\" : \"0\"\n    },\n    cardTitle: {\n      fontSize: isMobile ? \"1.25rem\" : \"1.5rem\",\n      fontWeight: \"700\",\n      color: \"#F1F5F9\",\n      margin: \"0\",\n      display: \"flex\",\n      alignItems: \"center\",\n      gap: \"0.5rem\"\n    },\n    boardList: {\n      listStyle: \"none\",\n      padding: \"0\",\n      margin: \"0\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: isMobile ? \"0.75rem\" : \"1rem\"\n    },\n    boardItem: {\n      padding: isMobile ? \"1rem\" : \"1.25rem\",\n      background: \"rgba(255, 255, 255, 0.05)\",\n      borderRadius: isMobile ? \"12px\" : \"16px\",\n      border: \"1px solid rgba(255, 255, 255, 0.08)\",\n      transition: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\",\n      cursor: \"pointer\",\n      backdropFilter: \"blur(10px)\",\n    },\n    boardItemHover: {\n      background: \"rgba(96, 165, 250, 0.1)\",\n      borderColor: \"rgba(96, 165, 250, 0.3)\",\n      transform: isMobile ? \"scale(1.02)\" : \"translateY(-2px)\",\n      boxShadow: \"0 8px 32px rgba(96, 165, 250, 0.2)\",\n    },\n    boardTitle: {\n      fontSize: isMobile ? \"0.9rem\" : \"1rem\",\n      fontWeight: \"600\",\n      color: \"#F1F5F9\",\n      margin: \"0 0 0.5rem 0\",\n      display: \"flex\",\n      alignItems: \"center\",\n      gap: \"0.75rem\"\n    },\n    boardMeta: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      fontSize: isMobile ? \"0.75rem\" : \"0.85rem\",\n      flexDirection: isMobile ? \"column\" : \"row\",\n      gap: isMobile ? \"0.5rem\" : \"0\",\n      alignItems: isMobile ? \"flex-start\" : \"center\"\n    },\n    teamBadge: {\n      padding: isMobile ? \"0.25rem 0.5rem\" : \"0.3rem 0.75rem\",\n      borderRadius: isMobile ? \"8px\" : \"12px\",\n      fontSize: isMobile ? \"0.7rem\" : \"0.8rem\",\n      fontWeight: \"600\",\n      background: \"rgba(96, 165, 250, 0.2)\",\n      color: \"#60A5FA\",\n      border: \"1px solid rgba(96, 165, 250, 0.3)\",\n    },\n    itemsCount: {\n      padding: isMobile ? \"0.25rem 0.5rem\" : \"0.3rem 0.75rem\",\n      borderRadius: isMobile ? \"8px\" : \"12px\",\n      fontSize: isMobile ? \"0.7rem\" : \"0.8rem\",\n      fontWeight: \"600\",\n      background: \"rgba(168, 85, 247, 0.2)\",\n      color: \"#A855F7\",\n      border: \"1px solid rgba(168, 85, 247, 0.3)\",\n    },\n    colorIndicator: {\n      width: \"4px\",\n      height: isMobile ? \"16px\" : \"20px\",\n      borderRadius: \"2px\",\n      background: \"linear-gradient(135deg, #60A5FA, #A855F7)\",\n    },\n    emptyState: {\n      textAlign: \"center\",\n      color: \"rgba(255, 255, 255, 0.6)\",\n      padding: isMobile ? \"2rem 1rem\" : \"3rem 1rem\",\n      fontSize: isMobile ? \"0.9rem\" : \"1rem\",\n      fontStyle: \"italic\",\n    },\n    loadingSpinner: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      padding: isMobile ? \"3rem\" : \"5rem\",\n      color: \"#FFFFFF\",\n      position: \"relative\",\n      zIndex: 10,\n    },\n    spinner: {\n      width: isMobile ? \"40px\" : \"50px\",\n      height: isMobile ? \"40px\" : \"50px\",\n      border: \"3px solid rgba(255, 255, 255, 0.3)\",\n      borderTop: \"3px solid #60A5FA\",\n      borderRadius: \"50%\",\n      animation: \"spin 1s linear infinite\",\n    },\n    viewAllButton: {\n      background: \"rgba(96, 165, 250, 0.1)\",\n      border: \"1px solid rgba(96, 165, 250, 0.3)\",\n      color: \"#60A5FA\",\n      padding: isMobile ? \"0.4rem 0.8rem\" : \"0.5rem 1rem\",\n      borderRadius: isMobile ? \"8px\" : \"12px\",\n      fontSize: isMobile ? \"0.8rem\" : \"0.9rem\",\n      fontWeight: \"600\",\n      cursor: \"pointer\",\n      transition: \"all 0.3s ease\",\n      width: isMobile ? \"100%\" : \"auto\",\n      textAlign: \"center\",\n    },\n    viewAllButtonHover: {\n      background: \"rgba(96, 165, 250, 0.2)\",\n      transform: isMobile ? \"scale(1.02)\" : \"translateY(-1px)\",\n    },\n  };\n\n  const [hoveredBoard, setHoveredBoard] = useState(null);\n  const [isViewAllHovered, setIsViewAllHovered] = useState(false);\n\n  if (loading) {\n    return (\n      <div style={styles.container}>\n        <div style={styles.backgroundOverlay} />\n        <div style={styles.meshGradient} />\n        \n        <div style={styles.particlesContainer}>\n          {orbs.map((orb) => (\n            <div\n              key={`orb-${orb.id}`}\n              style={{\n                ...styles.orb,\n                width: `${orb.size}px`,\n                height: `${orb.size}px`,\n                left: `${orb.left}%`,\n                top: `${orb.top}%`,\n                background:\n                  orb.id % 3 === 0\n                    ? \"radial-gradient(circle, #60a5fa, #3b82f6)\"\n                    : orb.id % 3 === 1\n                    ? \"radial-gradient(circle, #a855f7, #8b5cf6)\"\n                    : \"radial-gradient(circle, #ec4899, #f43f5e)\",\n                animationDelay: `${orb.animationDelay}s`,\n                animationDuration: `${orb.duration}s`,\n              }}\n            />\n          ))}\n        </div>\n\n        <div style={styles.loadingSpinner}>\n          <div style={styles.spinner}></div>\n        </div>\n        \n        <style>\n          {`\n            @keyframes spin {\n              0% { transform: rotate(0deg); }\n              100% { transform: rotate(360deg); }\n            }\n          `}\n        </style>\n      </div>\n    );\n  }\n\n  return (\n    <div style={styles.container}>\n      {/* Background Effects */}\n      <div style={styles.backgroundOverlay} />\n      <div style={styles.meshGradient} />\n\n      {/* Floating Orbs */}\n      <div style={styles.particlesContainer}>\n        {orbs.map((orb) => (\n          <div\n            key={`orb-${orb.id}`}\n            style={{\n              ...styles.orb,\n              width: `${orb.size}px`,\n              height: `${orb.size}px`,\n              left: `${orb.left}%`,\n              top: `${orb.top}%`,\n              background:\n                orb.id % 3 === 0\n                  ? \"radial-gradient(circle, #60a5fa, #3b82f6)\"\n                  : orb.id % 3 === 1\n                  ? \"radial-gradient(circle, #a855f7, #8b5cf6)\"\n                  : \"radial-gradient(circle, #ec4899, #f43f5e)\",\n              animationDelay: `${orb.animationDelay}s`,\n              animationDuration: `${orb.duration}s`,\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Animated Particles */}\n      <div style={styles.particlesContainer}>\n        {particles.map((particle) => (\n          <div\n            key={particle.id}\n            style={{\n              ...styles.particle,\n              width: `${particle.size}px`,\n              height: `${particle.size}px`,\n              left: `${particle.left}%`,\n              top: \"-20px\",\n              opacity: particle.opacity,\n              animationDelay: `${particle.animationDelay}s`,\n              animationDuration: `${particle.duration}s`,\n            }}\n          />\n        ))}\n      </div>\n\n      <div style={styles.content}>\n        {/* Header - CHANGED TO PROJECT NAME */}\n        <h1 style={styles.welcomeTitle}>\n          👋 MathBoard\n        </h1>\n        <p style={styles.subtitle}>Your workspace at a glance</p>\n\n        {/* Responsive Grid Layout */}\n        <div style={styles.cardsContainer}>\n          {/* Recently Viewed Card */}\n          <div style={styles.card}>\n            <div style={styles.cardGlow} />\n            <div style={styles.cardHeader}>\n              <h2 style={styles.cardTitle}>🕒 Recently Viewed</h2>\n              <button \n                style={{\n                  ...styles.viewAllButton,\n                  ...(isViewAllHovered ? styles.viewAllButtonHover : {})\n                }}\n                onMouseEnter={() => setIsViewAllHovered(true)}\n                onMouseLeave={() => setIsViewAllHovered(false)}\n                onTouchStart={() => setIsViewAllHovered(true)}\n                onTouchEnd={() => setIsViewAllHovered(false)}\n              >\n                View All\n              </button>\n            </div>\n            <ul style={styles.boardList}>\n              {recentlyViewed.length > 0 ? (\n                recentlyViewed.map((board) => (\n                  <li \n                    key={board.id} \n                    style={{\n                      ...styles.boardItem,\n                      ...(hoveredBoard === board.id ? styles.boardItemHover : {})\n                    }} \n                    onMouseEnter={() => !isMobile && setHoveredBoard(board.id)}\n                    onMouseLeave={() => !isMobile && setHoveredBoard(null)}\n                    onTouchStart={() => isMobile && setHoveredBoard(board.id)}\n                    onTouchEnd={() => isMobile && setHoveredBoard(null)}\n                  >\n                    <div style={styles.boardTitle}>\n                      <div style={styles.colorIndicator} />\n                      {board.title}\n                    </div>\n                    <div style={styles.boardMeta}>\n                      <span style={styles.teamBadge}>{board.team || \"Team\"}</span>\n                      <span style={{color: \"rgba(255, 255, 255, 0.7)\"}}>\n                        Viewed {board.lastViewed || \"recently\"}\n                      </span>\n                    </div>\n                  </li>\n                ))\n              ) : (\n                <li style={styles.emptyState}>No recently viewed boards</li>\n              )}\n            </ul>\n          </div>\n\n          {/* Your Boards Card */}\n          <div style={styles.card}>\n            <div style={styles.cardGlow} />\n            <div style={styles.cardHeader}>\n              <h2 style={styles.cardTitle}>🗂️ Your Boards</h2>\n              <button \n                style={{\n                  ...styles.viewAllButton,\n                  ...(isViewAllHovered ? styles.viewAllButtonHover : {})\n                }}\n                onMouseEnter={() => setIsViewAllHovered(true)}\n                onMouseLeave={() => setIsViewAllHovered(false)}\n                onTouchStart={() => setIsViewAllHovered(true)}\n                onTouchEnd={() => setIsViewAllHovered(false)}\n              >\n                View All\n              </button>\n            </div>\n            <ul style={styles.boardList}>\n              {yourBoards.length > 0 ? (\n                yourBoards.map((board) => (\n                  <li \n                    key={board.id} \n                    style={{\n                      ...styles.boardItem,\n                      ...(hoveredBoard === board.id ? styles.boardItemHover : {})\n                    }}\n                    onMouseEnter={() => !isMobile && setHoveredBoard(board.id)}\n                    onMouseLeave={() => !isMobile && setHoveredBoard(null)}\n                    onTouchStart={() => isMobile && setHoveredBoard(board.id)}\n                    onTouchEnd={() => isMobile && setHoveredBoard(null)}\n                  >\n                    <div style={styles.boardTitle}>\n                      <div style={styles.colorIndicator} />\n                      {board.title}\n                    </div>\n                    <div style={styles.boardMeta}>\n                      <span style={styles.itemsCount}>\n                        {board.items || 0} items\n                      </span>\n                      <span style={{color: \"rgba(255, 255, 255, 0.7)\"}}>\n                        Updated {board.updated || \"recently\"}\n                      </span>\n                    </div>\n                  </li>\n                ))\n              ) : (\n                <li style={styles.emptyState}>No boards created yet</li>\n              )}\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Enhanced CSS Animations */}\n      <style>\n        {`\n          @keyframes floatParticles {\n            0% {\n              transform: translateY(0) rotate(0deg);\n              opacity: 0;\n            }\n            10% {\n              opacity: 1;\n            }\n            90% {\n              opacity: 1;\n            }\n            100% {\n              transform: translateY(100vh) rotate(360deg);\n              opacity: 0;\n            }\n          }\n\n          @keyframes floatOrbs {\n            0% {\n              transform: translateY(0px) translateX(0px) scale(1);\n            }\n            50% {\n              transform: translateY(-50px) translateX(30px) scale(1.1);\n            }\n            100% {\n              transform: translateY(-20px) translateX(-20px) scale(0.9);\n            }\n          }\n\n          @keyframes rotateMesh {\n            0% {\n              transform: rotate(0deg);\n            }\n            100% {\n              transform: rotate(360deg);\n            }\n          }\n\n          @keyframes textShimmer {\n            0%, 100% {\n              background-position: 0% 50%;\n            }\n            50% {\n              background-position: 100% 50%;\n            }\n          }\n\n          @keyframes cardGlow {\n            0%, 100% {\n              opacity: 0.5;\n              transform: scaleX(0.8);\n            }\n            50% {\n              opacity: 1;\n              transform: scaleX(1);\n            }\n          }\n\n          @keyframes slideUp {\n            0% {\n              opacity: 0;\n              transform: translateY(40px) scale(0.95);\n            }\n            100% {\n              opacity: 1;\n              transform: translateY(0) scale(1);\n            }\n          }\n\n          @keyframes fadeInUp {\n            0% {\n              opacity: 0;\n              transform: translateY(20px);\n            }\n            100% {\n              opacity: 1;\n              transform: translateY(0);\n            }\n          }\n\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n\n          button:hover:not(:disabled) {\n            transform: ${isMobile ? 'scale(1.02)' : 'translateY(-1px)'} !important;\n          }\n\n          /* Mobile-specific optimizations */\n          @media (max-width: 768px) {\n            body {\n              -webkit-tap-highlight-color: transparent;\n            }\n            \n            button:active {\n              transform: scale(0.98) !important;\n            }\n          }\n        `}\n      </style>\n    </div>\n  );\n}"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// export default function Backlog() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [title, setTitle] = useState('');\n//   const [type, setType] = useState('Story');\n//   const [points, setPoints] = useState(3);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const add = async ()=>{\n//     const data = { projectId: projectId||null, title, type, status:'todo', priority:'P3', assignee:'', storyPoints:points };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setTitle(''); setPoints(3);\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-labelledby=\"backlog-title\">\n//       <h2 id=\"backlog-title\">Backlog {projectId?`- ${projectId}`:''}</h2>\n//       <div style={{display:'flex',gap:12}}>\n//         <div style={{flex:1}}>\n//           <div className=\"form-row\"><label>Title<input value={title} onChange={e=>setTitle(e.target.value)} /></label></div>\n//           <div className=\"form-row\"><label>Type<select value={type} onChange={e=>setType(e.target.value)}><option>Story</option><option>Task</option><option>Bug</option></select></label></div>\n//           <div className=\"form-row\"><label>Story Points<input type=\"number\" value={points} onChange={e=>setPoints(e.target.value)} /></label></div>\n//           <button className=\"btn\" onClick={add}>Add to Backlog</button>\n//         </div>\n//         <div style={{flex:2}}>\n//           <h3>Backlog Items</h3>\n//           <ul>{issues.map(i=>(<li key={i.id}>{i.title} — <em>{i.type}</em> — {i.storyPoints} pts</li>))}</ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// export default function JiraBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({ title: '', type: 'Story', storyPoints: 3 });\n\n//   // Fetch issues\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   // Add new issue\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title is required');\n//     const data = {\n//       projectId: projectId || null,\n//       title: newIssue.title,\n//       type: newIssue.type,\n//       status: 'backlog',\n//       priority: 'P3',\n//       assignee: '',\n//       storyPoints: newIssue.storyPoints,\n//     };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3 });\n//   };\n\n//   // Handle drag and drop\n//   const onDragEnd = result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n\n//     const updatedIssues = Array.from(issues);\n//     const [moved] = updatedIssues.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updatedIssues.splice(destination.index, 0, moved);\n//     setIssues(updatedIssues);\n//   };\n\n//   // Delete issue\n//   const deleteIssue = id => {\n//     setIssues(prev => prev.filter(i => i.id !== id));\n//   };\n\n//   // Inline edit issue\n//   const updateIssue = (id, field, value) => {\n//     setIssues(prev =>\n//       prev.map(i => (i.id === id ? { ...i, [field]: value } : i))\n//     );\n//   };\n\n//   // Group issues by status\n//   const columns = {\n//     backlog: issues.filter(i => i.status === 'backlog'),\n//     sprint: issues.filter(i => i.status === 'sprint'),\n//     done: issues.filter(i => i.status === 'done'),\n//   };\n\n//   // Priority colors\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Add Issue Form */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board Columns */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {Object.keys(columns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3 style={{ textTransform: 'capitalize' }}>{status}</h3>\n//                   {columns[status].map((issue, index) => (\n//                     <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//                       {provided => (\n//                         <div\n//                           ref={provided.innerRef}\n//                           {...provided.draggableProps}\n//                           {...provided.dragHandleProps}\n//                           style={{\n//                             padding: '0.5rem',\n//                             marginBottom: '0.5rem',\n//                             border: '1px solid #ccc',\n//                             borderRadius: '4px',\n//                             background: '#fff',\n//                             display: 'flex',\n//                             justifyContent: 'space-between',\n//                             alignItems: 'center',\n//                             ...provided.draggableProps.style,\n//                           }}\n//                         >\n//                           <div style={{ flex: 1 }}>\n//                             <input\n//                               value={issue.title}\n//                               onChange={e => updateIssue(issue.id, 'title', e.target.value)}\n//                               style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//                             />\n//                             <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                               <select\n//                                 value={issue.type}\n//                                 onChange={e => updateIssue(issue.id, 'type', e.target.value)}\n//                               >\n//                                 <option>Story</option>\n//                                 <option>Task</option>\n//                                 <option>Bug</option>\n//                               </select>\n//                               <span\n//                                 style={{\n//                                   background: '#e1e1e1',\n//                                   borderRadius: '12px',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                 }}\n//                               >\n//                                 {issue.storyPoints} pts\n//                               </span>\n//                               <span\n//                                 style={{\n//                                   background: priorityColors[issue.priority],\n//                                   color: '#fff',\n//                                   borderRadius: '12px',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                 }}\n//                               >\n//                                 {issue.priority}\n//                               </span>\n//                               <span\n//                                 style={{\n//                                   background: '#3498db',\n//                                   color: '#fff',\n//                                   borderRadius: '50%',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                   fontSize: '10px',\n//                                 }}\n//                               >\n//                                 {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                               </span>\n//                             </div>\n//                           </div>\n//                           <button\n//                             onClick={() => deleteIssue(issue.id)}\n//                             style={{\n//                               marginLeft: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#e74c3c',\n//                               cursor: 'pointer',\n//                               fontWeight: 'bold',\n//                             }}\n//                           >\n//                             ✕\n//                           </button>\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue, updateIssue as apiUpdateIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// // Mock epics\n// const mockEpics = [\n//   { id: 'epic-1', title: 'User Authentication' },\n//   { id: 'epic-2', title: 'Dashboard & Reports' },\n// ];\n\n// export default function JiraBacklogWithSprints() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '' });\n//   const [collapsedSprints, setCollapsedSprints] = useState({});\n\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title required');\n//     const data = { ...newIssue, projectId: projectId || null, status: 'backlog', assignee: '' };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '' });\n//   };\n\n//   const updateField = async (id, field, value) => {\n//     const updated = issues.map(i => (i.id === id ? { ...i, [field]: value } : i));\n//     setIssues(updated);\n//     const issueToUpdate = updated.find(i => i.id === id);\n//     await apiUpdateIssue(id, issueToUpdate);\n//   };\n\n//   const deleteIssue = id => setIssues(prev => prev.filter(i => i.id !== id));\n\n//   const onDragEnd = async result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     const updated = Array.from(issues);\n//     const [moved] = updated.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updated.splice(destination.index, 0, moved);\n//     setIssues(updated);\n//     await apiUpdateIssue(moved.id, moved);\n//   };\n\n//   // Group issues by status and epic\n//   const columns = {\n//     backlog: issues.filter(i => i.status === 'backlog'),\n//     sprint1: issues.filter(i => i.status === 'sprint1'),\n//     sprint2: issues.filter(i => i.status === 'sprint2'),\n//     done: issues.filter(i => i.status === 'done'),\n//   };\n\n//   const renderIssues = (issueList) =>\n//     issueList.map((issue, index) => (\n//       <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//         {provided => (\n//           <div\n//             ref={provided.innerRef}\n//             {...provided.draggableProps}\n//             {...provided.dragHandleProps}\n//             style={{\n//               padding: '0.5rem',\n//               marginBottom: '0.5rem',\n//               border: '1px solid #ccc',\n//               borderRadius: '4px',\n//               background: '#fff',\n//               display: 'flex',\n//               justifyContent: 'space-between',\n//               alignItems: 'center',\n//               ...provided.draggableProps.style,\n//             }}\n//           >\n//             <div style={{ flex: 1 }}>\n//               <input\n//                 value={issue.title}\n//                 onChange={e => updateField(issue.id, 'title', e.target.value)}\n//                 style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//               />\n//               <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                 <select\n//                   value={issue.type}\n//                   onChange={e => updateField(issue.id, 'type', e.target.value)}\n//                 >\n//                   <option>Story</option>\n//                   <option>Task</option>\n//                   <option>Bug</option>\n//                 </select>\n//                 <span\n//                   style={{\n//                     background: '#e1e1e1',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.storyPoints} pts\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: priorityColors[issue.priority],\n//                     color: '#fff',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.priority}\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: '#3498db',\n//                     color: '#fff',\n//                     borderRadius: '50%',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                     fontSize: '10px',\n//                   }}\n//                   title={issue.assignee || 'Unassigned'}\n//                 >\n//                   {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                 </span>\n//               </div>\n//             </div>\n//             <button\n//               onClick={() => deleteIssue(issue.id)}\n//               style={{\n//                 marginLeft: '6px',\n//                 border: 'none',\n//                 background: 'transparent',\n//                 color: '#e74c3c',\n//                 cursor: 'pointer',\n//                 fontWeight: 'bold',\n//               }}\n//             >\n//               ✕\n//             </button>\n//           </div>\n//         )}\n//       </Draggable>\n//     ));\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Inline Add Issue */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <select value={newIssue.epicId} onChange={e => setNewIssue({ ...newIssue, epicId: e.target.value })}>\n//           <option value=\"\">No Epic</option>\n//           {mockEpics.map(epic => (\n//             <option key={epic.id} value={epic.id}>{epic.title}</option>\n//           ))}\n//         </select>\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board Columns */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {Object.keys(columns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3\n//                     style={{\n//                       textTransform: 'capitalize',\n//                       cursor: status.startsWith('sprint') ? 'pointer' : 'default',\n//                     }}\n//                     onClick={() => status.startsWith('sprint') && setCollapsedSprints(prev => ({ ...prev, [status]: !prev[status] }))}\n//                   >\n//                     {status} {status.startsWith('sprint') ? (collapsedSprints[status] ? '▼' : '▲') : ''}\n//                   </h3>\n//                   {!collapsedSprints[status] &&\n//                     mockEpics.map(epic => {\n//                       const epicIssues = columns[status].filter(i => i.epicId === epic.id);\n//                       if (!epicIssues.length) return null;\n//                       return (\n//                         <div key={epic.id} style={{ marginBottom: '0.5rem' }}>\n//                           <strong style={{ display: 'block', marginBottom: '4px' }}>{epic.title}</strong>\n//                           {renderIssues(epicIssues)}\n//                         </div>\n//                       );\n//                     })}\n//                   {/* Non-epic issues */}\n//                   {!collapsedSprints[status] &&\n//                     renderIssues(columns[status].filter(i => !i.epicId))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue, updateIssue as apiUpdateIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// // Mock epics\n// const mockEpics = [\n//   { id: 'epic-1', title: 'User Authentication' },\n//   { id: 'epic-2', title: 'Dashboard & Reports' },\n// ];\n\n// export default function JiraBoardWithPoints() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({\n//     title: '',\n//     type: 'Story',\n//     storyPoints: 3,\n//     priority: 'P3',\n//     epicId: '',\n//     status: 'backlog',\n//     assignee: '',\n//   });\n//   const [collapsedSprints, setCollapsedSprints] = useState({});\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title required');\n//     const data = { ...newIssue, projectId: projectId || null };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '', status: 'backlog', assignee: '' });\n//   };\n\n//   const updateField = async (id, field, value) => {\n//     const updated = issues.map(i => (i.id === id ? { ...i, [field]: value } : i));\n//     setIssues(updated);\n//     const issueToUpdate = updated.find(i => i.id === id);\n//     await apiUpdateIssue(id, issueToUpdate);\n//   };\n\n//   const deleteIssue = id => setIssues(prev => prev.filter(i => i.id !== id));\n\n//   const onDragEnd = async result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     const updated = Array.from(issues);\n//     const [moved] = updated.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updated.splice(destination.index, 0, moved);\n//     setIssues(updated);\n//     await apiUpdateIssue(moved.id, moved);\n//   };\n\n//   // Dynamically generate columns\n//   const uniqueStatuses = Array.from(new Set(['backlog', ...issues.map(i => i.status), 'done']));\n//   const columns = uniqueStatuses.reduce((acc, status) => {\n//     acc[status] = issues.filter(i => i.status === status);\n//     return acc;\n//   }, {});\n\n//   // Render issues list\n//   const renderIssues = issueList =>\n//     issueList.map((issue, index) => (\n//       <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//         {provided => (\n//           <div\n//             ref={provided.innerRef}\n//             {...provided.draggableProps}\n//             {...provided.dragHandleProps}\n//             style={{\n//               padding: '0.5rem',\n//               marginBottom: '0.5rem',\n//               border: '1px solid #ccc',\n//               borderRadius: '4px',\n//               background: '#fff',\n//               display: 'flex',\n//               justifyContent: 'space-between',\n//               alignItems: 'center',\n//               ...provided.draggableProps.style,\n//             }}\n//           >\n//             <div style={{ flex: 1 }}>\n//               <input\n//                 value={issue.title}\n//                 onChange={e => updateField(issue.id, 'title', e.target.value)}\n//                 style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//               />\n//               <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                 <select value={issue.type} onChange={e => updateField(issue.id, 'type', e.target.value)}>\n//                   <option>Story</option>\n//                   <option>Task</option>\n//                   <option>Bug</option>\n//                 </select>\n//                 <span\n//                   style={{\n//                     background: '#e1e1e1',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.storyPoints} pts\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: priorityColors[issue.priority],\n//                     color: '#fff',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.priority}\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: '#3498db',\n//                     color: '#fff',\n//                     borderRadius: '50%',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                     fontSize: '10px',\n//                   }}\n//                   title={issue.assignee || 'Unassigned'}\n//                 >\n//                   {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                 </span>\n//               </div>\n//             </div>\n//             <button\n//               onClick={() => deleteIssue(issue.id)}\n//               style={{\n//                 marginLeft: '6px',\n//                 border: 'none',\n//                 background: 'transparent',\n//                 color: '#e74c3c',\n//                 cursor: 'pointer',\n//                 fontWeight: 'bold',\n//               }}\n//             >\n//               ✕\n//             </button>\n//           </div>\n//         )}\n//       </Draggable>\n//     ));\n\n//   // Calculate story points per column\n//   const calculatePoints = issueList =>\n//     issueList.reduce((sum, i) => sum + (parseInt(i.storyPoints) || 0), 0);\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Add Issue */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <select value={newIssue.epicId} onChange={e => setNewIssue({ ...newIssue, epicId: e.target.value })}>\n//           <option value=\"\">No Epic</option>\n//           {mockEpics.map(epic => (\n//             <option key={epic.id} value={epic.id}>{epic.title}</option>\n//           ))}\n//         </select>\n//         <input\n//           placeholder=\"Sprint (optional)\"\n//           value={newIssue.status.startsWith('sprint') ? newIssue.status : ''}\n//           onChange={e => setNewIssue({ ...newIssue, status: e.target.value || 'backlog' })}\n//         />\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {uniqueStatuses.map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3\n//                     style={{\n//                       textTransform: 'capitalize',\n//                       cursor: status.startsWith('sprint') ? 'pointer' : 'default',\n//                     }}\n//                     onClick={() => status.startsWith('sprint') && setCollapsedSprints(prev => ({ ...prev, [status]: !prev[status] }))}\n//                   >\n//                     {status} {status.startsWith('sprint') ? (collapsedSprints[status] ? '▼' : '▲') : ''}\n//                     {/* Story points total */}\n//                     {status.startsWith('sprint') && ` — ${calculatePoints(columns[status])} pts`}\n//                   </h3>\n\n//                   {!collapsedSprints[status] &&\n//                     mockEpics.map(epic => {\n//                       const epicIssues = columns[status].filter(i => i.epicId === epic.id);\n//                       if (!epicIssues.length) return null;\n//                       return (\n//                         <div key={epic.id} style={{ marginBottom: '0.5rem' }}>\n//                           <strong style={{ display: 'block', marginBottom: '4px' }}>{epic.title}</strong>\n//                           {renderIssues(epicIssues)}\n//                         </div>\n//                       );\n//                     })}\n\n//                   {!collapsedSprints[status] && renderIssues(columns[status].filter(i => !i.epicId))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n//  for open board\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// export default function Backlog() {\n//   const { id } = useParams(); // <-- Use 'id', matching your route: /backlog/:id\n//   const [issues, setIssues] = useState([]);\n//   const [title, setTitle] = useState('');\n//   const [type, setType] = useState('Story');\n//   const [points, setPoints] = useState(3);\n\n//   useEffect(() => {\n//     listIssues(id).then(setIssues); // Pass project ID for API call\n//   }, [id]);\n\n//   const add = async () => {\n//     const data = {\n//       projectId: id || null,\n//       title,\n//       type,\n//       status: 'todo',\n//       priority: 'P3',\n//       assignee: '',\n//       storyPoints: points\n//     };\n//     await createIssue(data);\n//     setIssues(await listIssues(id)); // Refresh issues after add\n//     setTitle('');\n//     setPoints(3);\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-labelledby=\"backlog-title\">\n//       <h2 id=\"backlog-title\">Backlog {id ? `- ${id}` : ''}</h2>\n//       <div style={{ display: 'flex', gap: 12 }}>\n//         <div style={{ flex: 1 }}>\n//           <div className=\"form-row\">\n//             <label>\n//               Title\n//               <input value={title} onChange={e => setTitle(e.target.value)} />\n//             </label>\n//           </div>\n//           <div className=\"form-row\">\n//             <label>\n//               Type\n//               <select value={type} onChange={e => setType(e.target.value)}>\n//                 <option>Story</option>\n//                 <option>Task</option>\n//                 <option>Bug</option>\n//               </select>\n//             </label>\n//           </div>\n//           <div className=\"form-row\">\n//             <label>\n//               Story Points\n//               <input\n//                 type=\"number\"\n//                 value={points}\n//                 onChange={e => setPoints(Number(e.target.value))}\n//               />\n//             </label>\n//           </div>\n//           <button className=\"btn\" onClick={add}>\n//             Add to Backlog\n//           </button>\n//         </div>\n//         <div style={{ flex: 2 }}>\n//           <h3>Backlog Items</h3>\n//           <ul>\n//             {issues.map(i => (\n//               <li key={i.id}>\n//                 {i.title} — <em>{i.type}</em> — {i.storyPoints} pts\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n//today","map":{"version":3,"names":[],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/components/backlog/Backlog.js"],"sourcesContent":["\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// export default function Backlog() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [title, setTitle] = useState('');\n//   const [type, setType] = useState('Story');\n//   const [points, setPoints] = useState(3);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const add = async ()=>{\n//     const data = { projectId: projectId||null, title, type, status:'todo', priority:'P3', assignee:'', storyPoints:points };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setTitle(''); setPoints(3);\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-labelledby=\"backlog-title\">\n//       <h2 id=\"backlog-title\">Backlog {projectId?`- ${projectId}`:''}</h2>\n//       <div style={{display:'flex',gap:12}}>\n//         <div style={{flex:1}}>\n//           <div className=\"form-row\"><label>Title<input value={title} onChange={e=>setTitle(e.target.value)} /></label></div>\n//           <div className=\"form-row\"><label>Type<select value={type} onChange={e=>setType(e.target.value)}><option>Story</option><option>Task</option><option>Bug</option></select></label></div>\n//           <div className=\"form-row\"><label>Story Points<input type=\"number\" value={points} onChange={e=>setPoints(e.target.value)} /></label></div>\n//           <button className=\"btn\" onClick={add}>Add to Backlog</button>\n//         </div>\n//         <div style={{flex:2}}>\n//           <h3>Backlog Items</h3>\n//           <ul>{issues.map(i=>(<li key={i.id}>{i.title} — <em>{i.type}</em> — {i.storyPoints} pts</li>))}</ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// export default function JiraBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({ title: '', type: 'Story', storyPoints: 3 });\n\n//   // Fetch issues\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   // Add new issue\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title is required');\n//     const data = {\n//       projectId: projectId || null,\n//       title: newIssue.title,\n//       type: newIssue.type,\n//       status: 'backlog',\n//       priority: 'P3',\n//       assignee: '',\n//       storyPoints: newIssue.storyPoints,\n//     };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3 });\n//   };\n\n//   // Handle drag and drop\n//   const onDragEnd = result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n\n//     const updatedIssues = Array.from(issues);\n//     const [moved] = updatedIssues.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updatedIssues.splice(destination.index, 0, moved);\n//     setIssues(updatedIssues);\n//   };\n\n//   // Delete issue\n//   const deleteIssue = id => {\n//     setIssues(prev => prev.filter(i => i.id !== id));\n//   };\n\n//   // Inline edit issue\n//   const updateIssue = (id, field, value) => {\n//     setIssues(prev =>\n//       prev.map(i => (i.id === id ? { ...i, [field]: value } : i))\n//     );\n//   };\n\n//   // Group issues by status\n//   const columns = {\n//     backlog: issues.filter(i => i.status === 'backlog'),\n//     sprint: issues.filter(i => i.status === 'sprint'),\n//     done: issues.filter(i => i.status === 'done'),\n//   };\n\n//   // Priority colors\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Add Issue Form */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board Columns */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {Object.keys(columns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3 style={{ textTransform: 'capitalize' }}>{status}</h3>\n//                   {columns[status].map((issue, index) => (\n//                     <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//                       {provided => (\n//                         <div\n//                           ref={provided.innerRef}\n//                           {...provided.draggableProps}\n//                           {...provided.dragHandleProps}\n//                           style={{\n//                             padding: '0.5rem',\n//                             marginBottom: '0.5rem',\n//                             border: '1px solid #ccc',\n//                             borderRadius: '4px',\n//                             background: '#fff',\n//                             display: 'flex',\n//                             justifyContent: 'space-between',\n//                             alignItems: 'center',\n//                             ...provided.draggableProps.style,\n//                           }}\n//                         >\n//                           <div style={{ flex: 1 }}>\n//                             <input\n//                               value={issue.title}\n//                               onChange={e => updateIssue(issue.id, 'title', e.target.value)}\n//                               style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//                             />\n//                             <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                               <select\n//                                 value={issue.type}\n//                                 onChange={e => updateIssue(issue.id, 'type', e.target.value)}\n//                               >\n//                                 <option>Story</option>\n//                                 <option>Task</option>\n//                                 <option>Bug</option>\n//                               </select>\n//                               <span\n//                                 style={{\n//                                   background: '#e1e1e1',\n//                                   borderRadius: '12px',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                 }}\n//                               >\n//                                 {issue.storyPoints} pts\n//                               </span>\n//                               <span\n//                                 style={{\n//                                   background: priorityColors[issue.priority],\n//                                   color: '#fff',\n//                                   borderRadius: '12px',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                 }}\n//                               >\n//                                 {issue.priority}\n//                               </span>\n//                               <span\n//                                 style={{\n//                                   background: '#3498db',\n//                                   color: '#fff',\n//                                   borderRadius: '50%',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                   fontSize: '10px',\n//                                 }}\n//                               >\n//                                 {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                               </span>\n//                             </div>\n//                           </div>\n//                           <button\n//                             onClick={() => deleteIssue(issue.id)}\n//                             style={{\n//                               marginLeft: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#e74c3c',\n//                               cursor: 'pointer',\n//                               fontWeight: 'bold',\n//                             }}\n//                           >\n//                             ✕\n//                           </button>\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue, updateIssue as apiUpdateIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// // Mock epics\n// const mockEpics = [\n//   { id: 'epic-1', title: 'User Authentication' },\n//   { id: 'epic-2', title: 'Dashboard & Reports' },\n// ];\n\n// export default function JiraBacklogWithSprints() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '' });\n//   const [collapsedSprints, setCollapsedSprints] = useState({});\n\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title required');\n//     const data = { ...newIssue, projectId: projectId || null, status: 'backlog', assignee: '' };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '' });\n//   };\n\n//   const updateField = async (id, field, value) => {\n//     const updated = issues.map(i => (i.id === id ? { ...i, [field]: value } : i));\n//     setIssues(updated);\n//     const issueToUpdate = updated.find(i => i.id === id);\n//     await apiUpdateIssue(id, issueToUpdate);\n//   };\n\n//   const deleteIssue = id => setIssues(prev => prev.filter(i => i.id !== id));\n\n//   const onDragEnd = async result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     const updated = Array.from(issues);\n//     const [moved] = updated.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updated.splice(destination.index, 0, moved);\n//     setIssues(updated);\n//     await apiUpdateIssue(moved.id, moved);\n//   };\n\n//   // Group issues by status and epic\n//   const columns = {\n//     backlog: issues.filter(i => i.status === 'backlog'),\n//     sprint1: issues.filter(i => i.status === 'sprint1'),\n//     sprint2: issues.filter(i => i.status === 'sprint2'),\n//     done: issues.filter(i => i.status === 'done'),\n//   };\n\n//   const renderIssues = (issueList) =>\n//     issueList.map((issue, index) => (\n//       <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//         {provided => (\n//           <div\n//             ref={provided.innerRef}\n//             {...provided.draggableProps}\n//             {...provided.dragHandleProps}\n//             style={{\n//               padding: '0.5rem',\n//               marginBottom: '0.5rem',\n//               border: '1px solid #ccc',\n//               borderRadius: '4px',\n//               background: '#fff',\n//               display: 'flex',\n//               justifyContent: 'space-between',\n//               alignItems: 'center',\n//               ...provided.draggableProps.style,\n//             }}\n//           >\n//             <div style={{ flex: 1 }}>\n//               <input\n//                 value={issue.title}\n//                 onChange={e => updateField(issue.id, 'title', e.target.value)}\n//                 style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//               />\n//               <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                 <select\n//                   value={issue.type}\n//                   onChange={e => updateField(issue.id, 'type', e.target.value)}\n//                 >\n//                   <option>Story</option>\n//                   <option>Task</option>\n//                   <option>Bug</option>\n//                 </select>\n//                 <span\n//                   style={{\n//                     background: '#e1e1e1',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.storyPoints} pts\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: priorityColors[issue.priority],\n//                     color: '#fff',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.priority}\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: '#3498db',\n//                     color: '#fff',\n//                     borderRadius: '50%',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                     fontSize: '10px',\n//                   }}\n//                   title={issue.assignee || 'Unassigned'}\n//                 >\n//                   {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                 </span>\n//               </div>\n//             </div>\n//             <button\n//               onClick={() => deleteIssue(issue.id)}\n//               style={{\n//                 marginLeft: '6px',\n//                 border: 'none',\n//                 background: 'transparent',\n//                 color: '#e74c3c',\n//                 cursor: 'pointer',\n//                 fontWeight: 'bold',\n//               }}\n//             >\n//               ✕\n//             </button>\n//           </div>\n//         )}\n//       </Draggable>\n//     ));\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Inline Add Issue */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <select value={newIssue.epicId} onChange={e => setNewIssue({ ...newIssue, epicId: e.target.value })}>\n//           <option value=\"\">No Epic</option>\n//           {mockEpics.map(epic => (\n//             <option key={epic.id} value={epic.id}>{epic.title}</option>\n//           ))}\n//         </select>\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board Columns */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {Object.keys(columns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3\n//                     style={{\n//                       textTransform: 'capitalize',\n//                       cursor: status.startsWith('sprint') ? 'pointer' : 'default',\n//                     }}\n//                     onClick={() => status.startsWith('sprint') && setCollapsedSprints(prev => ({ ...prev, [status]: !prev[status] }))}\n//                   >\n//                     {status} {status.startsWith('sprint') ? (collapsedSprints[status] ? '▼' : '▲') : ''}\n//                   </h3>\n//                   {!collapsedSprints[status] &&\n//                     mockEpics.map(epic => {\n//                       const epicIssues = columns[status].filter(i => i.epicId === epic.id);\n//                       if (!epicIssues.length) return null;\n//                       return (\n//                         <div key={epic.id} style={{ marginBottom: '0.5rem' }}>\n//                           <strong style={{ display: 'block', marginBottom: '4px' }}>{epic.title}</strong>\n//                           {renderIssues(epicIssues)}\n//                         </div>\n//                       );\n//                     })}\n//                   {/* Non-epic issues */}\n//                   {!collapsedSprints[status] &&\n//                     renderIssues(columns[status].filter(i => !i.epicId))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue, updateIssue as apiUpdateIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// // Mock epics\n// const mockEpics = [\n//   { id: 'epic-1', title: 'User Authentication' },\n//   { id: 'epic-2', title: 'Dashboard & Reports' },\n// ];\n\n// export default function JiraBoardWithPoints() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({\n//     title: '',\n//     type: 'Story',\n//     storyPoints: 3,\n//     priority: 'P3',\n//     epicId: '',\n//     status: 'backlog',\n//     assignee: '',\n//   });\n//   const [collapsedSprints, setCollapsedSprints] = useState({});\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title required');\n//     const data = { ...newIssue, projectId: projectId || null };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '', status: 'backlog', assignee: '' });\n//   };\n\n//   const updateField = async (id, field, value) => {\n//     const updated = issues.map(i => (i.id === id ? { ...i, [field]: value } : i));\n//     setIssues(updated);\n//     const issueToUpdate = updated.find(i => i.id === id);\n//     await apiUpdateIssue(id, issueToUpdate);\n//   };\n\n//   const deleteIssue = id => setIssues(prev => prev.filter(i => i.id !== id));\n\n//   const onDragEnd = async result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     const updated = Array.from(issues);\n//     const [moved] = updated.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updated.splice(destination.index, 0, moved);\n//     setIssues(updated);\n//     await apiUpdateIssue(moved.id, moved);\n//   };\n\n//   // Dynamically generate columns\n//   const uniqueStatuses = Array.from(new Set(['backlog', ...issues.map(i => i.status), 'done']));\n//   const columns = uniqueStatuses.reduce((acc, status) => {\n//     acc[status] = issues.filter(i => i.status === status);\n//     return acc;\n//   }, {});\n\n//   // Render issues list\n//   const renderIssues = issueList =>\n//     issueList.map((issue, index) => (\n//       <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//         {provided => (\n//           <div\n//             ref={provided.innerRef}\n//             {...provided.draggableProps}\n//             {...provided.dragHandleProps}\n//             style={{\n//               padding: '0.5rem',\n//               marginBottom: '0.5rem',\n//               border: '1px solid #ccc',\n//               borderRadius: '4px',\n//               background: '#fff',\n//               display: 'flex',\n//               justifyContent: 'space-between',\n//               alignItems: 'center',\n//               ...provided.draggableProps.style,\n//             }}\n//           >\n//             <div style={{ flex: 1 }}>\n//               <input\n//                 value={issue.title}\n//                 onChange={e => updateField(issue.id, 'title', e.target.value)}\n//                 style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//               />\n//               <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                 <select value={issue.type} onChange={e => updateField(issue.id, 'type', e.target.value)}>\n//                   <option>Story</option>\n//                   <option>Task</option>\n//                   <option>Bug</option>\n//                 </select>\n//                 <span\n//                   style={{\n//                     background: '#e1e1e1',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.storyPoints} pts\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: priorityColors[issue.priority],\n//                     color: '#fff',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.priority}\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: '#3498db',\n//                     color: '#fff',\n//                     borderRadius: '50%',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                     fontSize: '10px',\n//                   }}\n//                   title={issue.assignee || 'Unassigned'}\n//                 >\n//                   {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                 </span>\n//               </div>\n//             </div>\n//             <button\n//               onClick={() => deleteIssue(issue.id)}\n//               style={{\n//                 marginLeft: '6px',\n//                 border: 'none',\n//                 background: 'transparent',\n//                 color: '#e74c3c',\n//                 cursor: 'pointer',\n//                 fontWeight: 'bold',\n//               }}\n//             >\n//               ✕\n//             </button>\n//           </div>\n//         )}\n//       </Draggable>\n//     ));\n\n//   // Calculate story points per column\n//   const calculatePoints = issueList =>\n//     issueList.reduce((sum, i) => sum + (parseInt(i.storyPoints) || 0), 0);\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Add Issue */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <select value={newIssue.epicId} onChange={e => setNewIssue({ ...newIssue, epicId: e.target.value })}>\n//           <option value=\"\">No Epic</option>\n//           {mockEpics.map(epic => (\n//             <option key={epic.id} value={epic.id}>{epic.title}</option>\n//           ))}\n//         </select>\n//         <input\n//           placeholder=\"Sprint (optional)\"\n//           value={newIssue.status.startsWith('sprint') ? newIssue.status : ''}\n//           onChange={e => setNewIssue({ ...newIssue, status: e.target.value || 'backlog' })}\n//         />\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {uniqueStatuses.map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3\n//                     style={{\n//                       textTransform: 'capitalize',\n//                       cursor: status.startsWith('sprint') ? 'pointer' : 'default',\n//                     }}\n//                     onClick={() => status.startsWith('sprint') && setCollapsedSprints(prev => ({ ...prev, [status]: !prev[status] }))}\n//                   >\n//                     {status} {status.startsWith('sprint') ? (collapsedSprints[status] ? '▼' : '▲') : ''}\n//                     {/* Story points total */}\n//                     {status.startsWith('sprint') && ` — ${calculatePoints(columns[status])} pts`}\n//                   </h3>\n\n//                   {!collapsedSprints[status] &&\n//                     mockEpics.map(epic => {\n//                       const epicIssues = columns[status].filter(i => i.epicId === epic.id);\n//                       if (!epicIssues.length) return null;\n//                       return (\n//                         <div key={epic.id} style={{ marginBottom: '0.5rem' }}>\n//                           <strong style={{ display: 'block', marginBottom: '4px' }}>{epic.title}</strong>\n//                           {renderIssues(epicIssues)}\n//                         </div>\n//                       );\n//                     })}\n\n//                   {!collapsedSprints[status] && renderIssues(columns[status].filter(i => !i.epicId))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n//  for open board\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// export default function Backlog() {\n//   const { id } = useParams(); // <-- Use 'id', matching your route: /backlog/:id\n//   const [issues, setIssues] = useState([]);\n//   const [title, setTitle] = useState('');\n//   const [type, setType] = useState('Story');\n//   const [points, setPoints] = useState(3);\n\n//   useEffect(() => {\n//     listIssues(id).then(setIssues); // Pass project ID for API call\n//   }, [id]);\n\n//   const add = async () => {\n//     const data = {\n//       projectId: id || null,\n//       title,\n//       type,\n//       status: 'todo',\n//       priority: 'P3',\n//       assignee: '',\n//       storyPoints: points\n//     };\n//     await createIssue(data);\n//     setIssues(await listIssues(id)); // Refresh issues after add\n//     setTitle('');\n//     setPoints(3);\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-labelledby=\"backlog-title\">\n//       <h2 id=\"backlog-title\">Backlog {id ? `- ${id}` : ''}</h2>\n//       <div style={{ display: 'flex', gap: 12 }}>\n//         <div style={{ flex: 1 }}>\n//           <div className=\"form-row\">\n//             <label>\n//               Title\n//               <input value={title} onChange={e => setTitle(e.target.value)} />\n//             </label>\n//           </div>\n//           <div className=\"form-row\">\n//             <label>\n//               Type\n//               <select value={type} onChange={e => setType(e.target.value)}>\n//                 <option>Story</option>\n//                 <option>Task</option>\n//                 <option>Bug</option>\n//               </select>\n//             </label>\n//           </div>\n//           <div className=\"form-row\">\n//             <label>\n//               Story Points\n//               <input\n//                 type=\"number\"\n//                 value={points}\n//                 onChange={e => setPoints(Number(e.target.value))}\n//               />\n//             </label>\n//           </div>\n//           <button className=\"btn\" onClick={add}>\n//             Add to Backlog\n//           </button>\n//         </div>\n//         <div style={{ flex: 2 }}>\n//           <h3>Backlog Items</h3>\n//           <ul>\n//             {issues.map(i => (\n//               <li key={i.id}>\n//                 {i.title} — <em>{i.type}</em> — {i.storyPoints} pts\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n//today\n"],"mappings":";AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
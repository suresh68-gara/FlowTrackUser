{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vmoun\\\\OneDrive\\\\Desktop\\\\newtieckettool\\\\src\\\\components\\\\backlog\\\\Backlog.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// export default function Backlog() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [title, setTitle] = useState('');\n//   const [type, setType] = useState('Story');\n//   const [points, setPoints] = useState(3);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const add = async ()=>{\n//     const data = { projectId: projectId||null, title, type, status:'todo', priority:'P3', assignee:'', storyPoints:points };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setTitle(''); setPoints(3);\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-labelledby=\"backlog-title\">\n//       <h2 id=\"backlog-title\">Backlog {projectId?`- ${projectId}`:''}</h2>\n//       <div style={{display:'flex',gap:12}}>\n//         <div style={{flex:1}}>\n//           <div className=\"form-row\"><label>Title<input value={title} onChange={e=>setTitle(e.target.value)} /></label></div>\n//           <div className=\"form-row\"><label>Type<select value={type} onChange={e=>setType(e.target.value)}><option>Story</option><option>Task</option><option>Bug</option></select></label></div>\n//           <div className=\"form-row\"><label>Story Points<input type=\"number\" value={points} onChange={e=>setPoints(e.target.value)} /></label></div>\n//           <button className=\"btn\" onClick={add}>Add to Backlog</button>\n//         </div>\n//         <div style={{flex:2}}>\n//           <h3>Backlog Items</h3>\n//           <ul>{issues.map(i=>(<li key={i.id}>{i.title} — <em>{i.type}</em> — {i.storyPoints} pts</li>))}</ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// export default function JiraBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({ title: '', type: 'Story', storyPoints: 3 });\n\n//   // Fetch issues\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   // Add new issue\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title is required');\n//     const data = {\n//       projectId: projectId || null,\n//       title: newIssue.title,\n//       type: newIssue.type,\n//       status: 'backlog',\n//       priority: 'P3',\n//       assignee: '',\n//       storyPoints: newIssue.storyPoints,\n//     };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3 });\n//   };\n\n//   // Handle drag and drop\n//   const onDragEnd = result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n\n//     const updatedIssues = Array.from(issues);\n//     const [moved] = updatedIssues.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updatedIssues.splice(destination.index, 0, moved);\n//     setIssues(updatedIssues);\n//   };\n\n//   // Delete issue\n//   const deleteIssue = id => {\n//     setIssues(prev => prev.filter(i => i.id !== id));\n//   };\n\n//   // Inline edit issue\n//   const updateIssue = (id, field, value) => {\n//     setIssues(prev =>\n//       prev.map(i => (i.id === id ? { ...i, [field]: value } : i))\n//     );\n//   };\n\n//   // Group issues by status\n//   const columns = {\n//     backlog: issues.filter(i => i.status === 'backlog'),\n//     sprint: issues.filter(i => i.status === 'sprint'),\n//     done: issues.filter(i => i.status === 'done'),\n//   };\n\n//   // Priority colors\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Add Issue Form */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board Columns */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {Object.keys(columns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3 style={{ textTransform: 'capitalize' }}>{status}</h3>\n//                   {columns[status].map((issue, index) => (\n//                     <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//                       {provided => (\n//                         <div\n//                           ref={provided.innerRef}\n//                           {...provided.draggableProps}\n//                           {...provided.dragHandleProps}\n//                           style={{\n//                             padding: '0.5rem',\n//                             marginBottom: '0.5rem',\n//                             border: '1px solid #ccc',\n//                             borderRadius: '4px',\n//                             background: '#fff',\n//                             display: 'flex',\n//                             justifyContent: 'space-between',\n//                             alignItems: 'center',\n//                             ...provided.draggableProps.style,\n//                           }}\n//                         >\n//                           <div style={{ flex: 1 }}>\n//                             <input\n//                               value={issue.title}\n//                               onChange={e => updateIssue(issue.id, 'title', e.target.value)}\n//                               style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//                             />\n//                             <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                               <select\n//                                 value={issue.type}\n//                                 onChange={e => updateIssue(issue.id, 'type', e.target.value)}\n//                               >\n//                                 <option>Story</option>\n//                                 <option>Task</option>\n//                                 <option>Bug</option>\n//                               </select>\n//                               <span\n//                                 style={{\n//                                   background: '#e1e1e1',\n//                                   borderRadius: '12px',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                 }}\n//                               >\n//                                 {issue.storyPoints} pts\n//                               </span>\n//                               <span\n//                                 style={{\n//                                   background: priorityColors[issue.priority],\n//                                   color: '#fff',\n//                                   borderRadius: '12px',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                 }}\n//                               >\n//                                 {issue.priority}\n//                               </span>\n//                               <span\n//                                 style={{\n//                                   background: '#3498db',\n//                                   color: '#fff',\n//                                   borderRadius: '50%',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                   fontSize: '10px',\n//                                 }}\n//                               >\n//                                 {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                               </span>\n//                             </div>\n//                           </div>\n//                           <button\n//                             onClick={() => deleteIssue(issue.id)}\n//                             style={{\n//                               marginLeft: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#e74c3c',\n//                               cursor: 'pointer',\n//                               fontWeight: 'bold',\n//                             }}\n//                           >\n//                             ✕\n//                           </button>\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue, updateIssue as apiUpdateIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// // Mock epics\n// const mockEpics = [\n//   { id: 'epic-1', title: 'User Authentication' },\n//   { id: 'epic-2', title: 'Dashboard & Reports' },\n// ];\n\n// export default function JiraBacklogWithSprints() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '' });\n//   const [collapsedSprints, setCollapsedSprints] = useState({});\n\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title required');\n//     const data = { ...newIssue, projectId: projectId || null, status: 'backlog', assignee: '' };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '' });\n//   };\n\n//   const updateField = async (id, field, value) => {\n//     const updated = issues.map(i => (i.id === id ? { ...i, [field]: value } : i));\n//     setIssues(updated);\n//     const issueToUpdate = updated.find(i => i.id === id);\n//     await apiUpdateIssue(id, issueToUpdate);\n//   };\n\n//   const deleteIssue = id => setIssues(prev => prev.filter(i => i.id !== id));\n\n//   const onDragEnd = async result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     const updated = Array.from(issues);\n//     const [moved] = updated.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updated.splice(destination.index, 0, moved);\n//     setIssues(updated);\n//     await apiUpdateIssue(moved.id, moved);\n//   };\n\n//   // Group issues by status and epic\n//   const columns = {\n//     backlog: issues.filter(i => i.status === 'backlog'),\n//     sprint1: issues.filter(i => i.status === 'sprint1'),\n//     sprint2: issues.filter(i => i.status === 'sprint2'),\n//     done: issues.filter(i => i.status === 'done'),\n//   };\n\n//   const renderIssues = (issueList) =>\n//     issueList.map((issue, index) => (\n//       <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//         {provided => (\n//           <div\n//             ref={provided.innerRef}\n//             {...provided.draggableProps}\n//             {...provided.dragHandleProps}\n//             style={{\n//               padding: '0.5rem',\n//               marginBottom: '0.5rem',\n//               border: '1px solid #ccc',\n//               borderRadius: '4px',\n//               background: '#fff',\n//               display: 'flex',\n//               justifyContent: 'space-between',\n//               alignItems: 'center',\n//               ...provided.draggableProps.style,\n//             }}\n//           >\n//             <div style={{ flex: 1 }}>\n//               <input\n//                 value={issue.title}\n//                 onChange={e => updateField(issue.id, 'title', e.target.value)}\n//                 style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//               />\n//               <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                 <select\n//                   value={issue.type}\n//                   onChange={e => updateField(issue.id, 'type', e.target.value)}\n//                 >\n//                   <option>Story</option>\n//                   <option>Task</option>\n//                   <option>Bug</option>\n//                 </select>\n//                 <span\n//                   style={{\n//                     background: '#e1e1e1',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.storyPoints} pts\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: priorityColors[issue.priority],\n//                     color: '#fff',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.priority}\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: '#3498db',\n//                     color: '#fff',\n//                     borderRadius: '50%',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                     fontSize: '10px',\n//                   }}\n//                   title={issue.assignee || 'Unassigned'}\n//                 >\n//                   {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                 </span>\n//               </div>\n//             </div>\n//             <button\n//               onClick={() => deleteIssue(issue.id)}\n//               style={{\n//                 marginLeft: '6px',\n//                 border: 'none',\n//                 background: 'transparent',\n//                 color: '#e74c3c',\n//                 cursor: 'pointer',\n//                 fontWeight: 'bold',\n//               }}\n//             >\n//               ✕\n//             </button>\n//           </div>\n//         )}\n//       </Draggable>\n//     ));\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Inline Add Issue */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <select value={newIssue.epicId} onChange={e => setNewIssue({ ...newIssue, epicId: e.target.value })}>\n//           <option value=\"\">No Epic</option>\n//           {mockEpics.map(epic => (\n//             <option key={epic.id} value={epic.id}>{epic.title}</option>\n//           ))}\n//         </select>\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board Columns */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {Object.keys(columns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3\n//                     style={{\n//                       textTransform: 'capitalize',\n//                       cursor: status.startsWith('sprint') ? 'pointer' : 'default',\n//                     }}\n//                     onClick={() => status.startsWith('sprint') && setCollapsedSprints(prev => ({ ...prev, [status]: !prev[status] }))}\n//                   >\n//                     {status} {status.startsWith('sprint') ? (collapsedSprints[status] ? '▼' : '▲') : ''}\n//                   </h3>\n//                   {!collapsedSprints[status] &&\n//                     mockEpics.map(epic => {\n//                       const epicIssues = columns[status].filter(i => i.epicId === epic.id);\n//                       if (!epicIssues.length) return null;\n//                       return (\n//                         <div key={epic.id} style={{ marginBottom: '0.5rem' }}>\n//                           <strong style={{ display: 'block', marginBottom: '4px' }}>{epic.title}</strong>\n//                           {renderIssues(epicIssues)}\n//                         </div>\n//                       );\n//                     })}\n//                   {/* Non-epic issues */}\n//                   {!collapsedSprints[status] &&\n//                     renderIssues(columns[status].filter(i => !i.epicId))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue, updateIssue as apiUpdateIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// // Mock epics\n// const mockEpics = [\n//   { id: 'epic-1', title: 'User Authentication' },\n//   { id: 'epic-2', title: 'Dashboard & Reports' },\n// ];\n\n// export default function JiraBoardWithPoints() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({\n//     title: '',\n//     type: 'Story',\n//     storyPoints: 3,\n//     priority: 'P3',\n//     epicId: '',\n//     status: 'backlog',\n//     assignee: '',\n//   });\n//   const [collapsedSprints, setCollapsedSprints] = useState({});\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title required');\n//     const data = { ...newIssue, projectId: projectId || null };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '', status: 'backlog', assignee: '' });\n//   };\n\n//   const updateField = async (id, field, value) => {\n//     const updated = issues.map(i => (i.id === id ? { ...i, [field]: value } : i));\n//     setIssues(updated);\n//     const issueToUpdate = updated.find(i => i.id === id);\n//     await apiUpdateIssue(id, issueToUpdate);\n//   };\n\n//   const deleteIssue = id => setIssues(prev => prev.filter(i => i.id !== id));\n\n//   const onDragEnd = async result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     const updated = Array.from(issues);\n//     const [moved] = updated.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updated.splice(destination.index, 0, moved);\n//     setIssues(updated);\n//     await apiUpdateIssue(moved.id, moved);\n//   };\n\n//   // Dynamically generate columns\n//   const uniqueStatuses = Array.from(new Set(['backlog', ...issues.map(i => i.status), 'done']));\n//   const columns = uniqueStatuses.reduce((acc, status) => {\n//     acc[status] = issues.filter(i => i.status === status);\n//     return acc;\n//   }, {});\n\n//   // Render issues list\n//   const renderIssues = issueList =>\n//     issueList.map((issue, index) => (\n//       <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//         {provided => (\n//           <div\n//             ref={provided.innerRef}\n//             {...provided.draggableProps}\n//             {...provided.dragHandleProps}\n//             style={{\n//               padding: '0.5rem',\n//               marginBottom: '0.5rem',\n//               border: '1px solid #ccc',\n//               borderRadius: '4px',\n//               background: '#fff',\n//               display: 'flex',\n//               justifyContent: 'space-between',\n//               alignItems: 'center',\n//               ...provided.draggableProps.style,\n//             }}\n//           >\n//             <div style={{ flex: 1 }}>\n//               <input\n//                 value={issue.title}\n//                 onChange={e => updateField(issue.id, 'title', e.target.value)}\n//                 style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//               />\n//               <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                 <select value={issue.type} onChange={e => updateField(issue.id, 'type', e.target.value)}>\n//                   <option>Story</option>\n//                   <option>Task</option>\n//                   <option>Bug</option>\n//                 </select>\n//                 <span\n//                   style={{\n//                     background: '#e1e1e1',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.storyPoints} pts\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: priorityColors[issue.priority],\n//                     color: '#fff',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.priority}\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: '#3498db',\n//                     color: '#fff',\n//                     borderRadius: '50%',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                     fontSize: '10px',\n//                   }}\n//                   title={issue.assignee || 'Unassigned'}\n//                 >\n//                   {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                 </span>\n//               </div>\n//             </div>\n//             <button\n//               onClick={() => deleteIssue(issue.id)}\n//               style={{\n//                 marginLeft: '6px',\n//                 border: 'none',\n//                 background: 'transparent',\n//                 color: '#e74c3c',\n//                 cursor: 'pointer',\n//                 fontWeight: 'bold',\n//               }}\n//             >\n//               ✕\n//             </button>\n//           </div>\n//         )}\n//       </Draggable>\n//     ));\n\n//   // Calculate story points per column\n//   const calculatePoints = issueList =>\n//     issueList.reduce((sum, i) => sum + (parseInt(i.storyPoints) || 0), 0);\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Add Issue */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <select value={newIssue.epicId} onChange={e => setNewIssue({ ...newIssue, epicId: e.target.value })}>\n//           <option value=\"\">No Epic</option>\n//           {mockEpics.map(epic => (\n//             <option key={epic.id} value={epic.id}>{epic.title}</option>\n//           ))}\n//         </select>\n//         <input\n//           placeholder=\"Sprint (optional)\"\n//           value={newIssue.status.startsWith('sprint') ? newIssue.status : ''}\n//           onChange={e => setNewIssue({ ...newIssue, status: e.target.value || 'backlog' })}\n//         />\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {uniqueStatuses.map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3\n//                     style={{\n//                       textTransform: 'capitalize',\n//                       cursor: status.startsWith('sprint') ? 'pointer' : 'default',\n//                     }}\n//                     onClick={() => status.startsWith('sprint') && setCollapsedSprints(prev => ({ ...prev, [status]: !prev[status] }))}\n//                   >\n//                     {status} {status.startsWith('sprint') ? (collapsedSprints[status] ? '▼' : '▲') : ''}\n//                     {/* Story points total */}\n//                     {status.startsWith('sprint') && ` — ${calculatePoints(columns[status])} pts`}\n//                   </h3>\n\n//                   {!collapsedSprints[status] &&\n//                     mockEpics.map(epic => {\n//                       const epicIssues = columns[status].filter(i => i.epicId === epic.id);\n//                       if (!epicIssues.length) return null;\n//                       return (\n//                         <div key={epic.id} style={{ marginBottom: '0.5rem' }}>\n//                           <strong style={{ display: 'block', marginBottom: '4px' }}>{epic.title}</strong>\n//                           {renderIssues(epicIssues)}\n//                         </div>\n//                       );\n//                     })}\n\n//                   {!collapsedSprints[status] && renderIssues(columns[status].filter(i => !i.epicId))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n//  for open board\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// export default function Backlog() {\n//   const { id } = useParams(); // <-- Use 'id', matching your route: /backlog/:id\n//   const [issues, setIssues] = useState([]);\n//   const [title, setTitle] = useState('');\n//   const [type, setType] = useState('Story');\n//   const [points, setPoints] = useState(3);\n\n//   useEffect(() => {\n//     listIssues(id).then(setIssues); // Pass project ID for API call\n//   }, [id]);\n\n//   const add = async () => {\n//     const data = {\n//       projectId: id || null,\n//       title,\n//       type,\n//       status: 'todo',\n//       priority: 'P3',\n//       assignee: '',\n//       storyPoints: points\n//     };\n//     await createIssue(data);\n//     setIssues(await listIssues(id)); // Refresh issues after add\n//     setTitle('');\n//     setPoints(3);\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-labelledby=\"backlog-title\">\n//       <h2 id=\"backlog-title\">Backlog {id ? `- ${id}` : ''}</h2>\n//       <div style={{ display: 'flex', gap: 12 }}>\n//         <div style={{ flex: 1 }}>\n//           <div className=\"form-row\">\n//             <label>\n//               Title\n//               <input value={title} onChange={e => setTitle(e.target.value)} />\n//             </label>\n//           </div>\n//           <div className=\"form-row\">\n//             <label>\n//               Type\n//               <select value={type} onChange={e => setType(e.target.value)}>\n//                 <option>Story</option>\n//                 <option>Task</option>\n//                 <option>Bug</option>\n//               </select>\n//             </label>\n//           </div>\n//           <div className=\"form-row\">\n//             <label>\n//               Story Points\n//               <input\n//                 type=\"number\"\n//                 value={points}\n//                 onChange={e => setPoints(Number(e.target.value))}\n//               />\n//             </label>\n//           </div>\n//           <button className=\"btn\" onClick={add}>\n//             Add to Backlog\n//           </button>\n//         </div>\n//         <div style={{ flex: 2 }}>\n//           <h3>Backlog Items</h3>\n//           <ul>\n//             {issues.map(i => (\n//               <li key={i.id}>\n//                 {i.title} — <em>{i.type}</em> — {i.storyPoints} pts\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n//today\nimport React, { useEffect, useState } from 'react';\nimport { listIssues, createIssue } from '../../services/mockApi';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Backlog() {\n  _s();\n  const {\n    id\n  } = useParams(); // matches your route /backlog/:id\n  const [issues, setIssues] = useState([]);\n  const [title, setTitle] = useState('');\n  const [type, setType] = useState('Story');\n  const [points, setPoints] = useState(3);\n\n  // Load backlog issues when page loads or id changes\n  useEffect(() => {\n    const fetchIssues = async () => {\n      try {\n        const data = await listIssues(id);\n\n        // Make sure we always have an array\n        setIssues(Array.isArray(data) ? data : []);\n      } catch (err) {\n        console.error('Failed to load issues:', err);\n        setIssues([]);\n      }\n    };\n    fetchIssues();\n  }, [id]);\n\n  // Add new issue\n  const add = async () => {\n    if (!title.trim()) return;\n    const newIssue = {\n      projectId: id || null,\n      title,\n      type,\n      status: 'todo',\n      priority: 'P3',\n      assignee: '',\n      storyPoints: points\n    };\n    try {\n      await createIssue(newIssue);\n      const refreshed = await listIssues(id);\n      setIssues(Array.isArray(refreshed) ? refreshed : []);\n      setTitle('');\n      setPoints(3);\n    } catch (err) {\n      console.error('Failed to add issue:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    role: \"region\",\n    \"aria-labelledby\": \"backlog-title\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"backlog-title\",\n      children: [\"Backlog \", id ? `- ${id}` : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 919,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        gap: 12\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-row\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Title\", /*#__PURE__*/_jsxDEV(\"input\", {\n              value: title,\n              onChange: e => setTitle(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 926,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 924,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 923,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-row\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Type\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: type,\n              onChange: e => setType(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Story\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 937,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 938,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Bug\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 939,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 936,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 934,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 933,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-row\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Story Points\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: points,\n              onChange: e => setPoints(Number(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 947,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 945,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 944,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: add,\n          children: \"Add to Backlog\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 955,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 922,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Backlog Items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 962,\n          columnNumber: 11\n        }, this), issues.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No issues found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 964,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: issues.map(i => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [i.title, \" \\u2014 \", /*#__PURE__*/_jsxDEV(\"em\", {\n              children: i.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 969,\n              columnNumber: 31\n            }, this), \" \\u2014 \", i.storyPoints, \" pts\"]\n          }, i.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 968,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 966,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 961,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 920,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 918,\n    columnNumber: 5\n  }, this);\n}\n_s(Backlog, \"s0oDPIoJiXsxI3VuuBJqbfLpehA=\", false, function () {\n  return [useParams];\n});\n_c = Backlog;\nvar _c;\n$RefreshReg$(_c, \"Backlog\");","map":{"version":3,"names":["React","useEffect","useState","listIssues","createIssue","useParams","jsxDEV","_jsxDEV","Backlog","_s","id","issues","setIssues","title","setTitle","type","setType","points","setPoints","fetchIssues","data","Array","isArray","err","console","error","add","trim","newIssue","projectId","status","priority","assignee","storyPoints","refreshed","className","role","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gap","flex","value","onChange","e","target","Number","onClick","length","map","i","_c","$RefreshReg$"],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/components/backlog/Backlog.js"],"sourcesContent":["\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// export default function Backlog() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [title, setTitle] = useState('');\n//   const [type, setType] = useState('Story');\n//   const [points, setPoints] = useState(3);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const add = async ()=>{\n//     const data = { projectId: projectId||null, title, type, status:'todo', priority:'P3', assignee:'', storyPoints:points };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setTitle(''); setPoints(3);\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-labelledby=\"backlog-title\">\n//       <h2 id=\"backlog-title\">Backlog {projectId?`- ${projectId}`:''}</h2>\n//       <div style={{display:'flex',gap:12}}>\n//         <div style={{flex:1}}>\n//           <div className=\"form-row\"><label>Title<input value={title} onChange={e=>setTitle(e.target.value)} /></label></div>\n//           <div className=\"form-row\"><label>Type<select value={type} onChange={e=>setType(e.target.value)}><option>Story</option><option>Task</option><option>Bug</option></select></label></div>\n//           <div className=\"form-row\"><label>Story Points<input type=\"number\" value={points} onChange={e=>setPoints(e.target.value)} /></label></div>\n//           <button className=\"btn\" onClick={add}>Add to Backlog</button>\n//         </div>\n//         <div style={{flex:2}}>\n//           <h3>Backlog Items</h3>\n//           <ul>{issues.map(i=>(<li key={i.id}>{i.title} — <em>{i.type}</em> — {i.storyPoints} pts</li>))}</ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// export default function JiraBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({ title: '', type: 'Story', storyPoints: 3 });\n\n//   // Fetch issues\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   // Add new issue\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title is required');\n//     const data = {\n//       projectId: projectId || null,\n//       title: newIssue.title,\n//       type: newIssue.type,\n//       status: 'backlog',\n//       priority: 'P3',\n//       assignee: '',\n//       storyPoints: newIssue.storyPoints,\n//     };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3 });\n//   };\n\n//   // Handle drag and drop\n//   const onDragEnd = result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n\n//     const updatedIssues = Array.from(issues);\n//     const [moved] = updatedIssues.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updatedIssues.splice(destination.index, 0, moved);\n//     setIssues(updatedIssues);\n//   };\n\n//   // Delete issue\n//   const deleteIssue = id => {\n//     setIssues(prev => prev.filter(i => i.id !== id));\n//   };\n\n//   // Inline edit issue\n//   const updateIssue = (id, field, value) => {\n//     setIssues(prev =>\n//       prev.map(i => (i.id === id ? { ...i, [field]: value } : i))\n//     );\n//   };\n\n//   // Group issues by status\n//   const columns = {\n//     backlog: issues.filter(i => i.status === 'backlog'),\n//     sprint: issues.filter(i => i.status === 'sprint'),\n//     done: issues.filter(i => i.status === 'done'),\n//   };\n\n//   // Priority colors\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Add Issue Form */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board Columns */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {Object.keys(columns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3 style={{ textTransform: 'capitalize' }}>{status}</h3>\n//                   {columns[status].map((issue, index) => (\n//                     <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//                       {provided => (\n//                         <div\n//                           ref={provided.innerRef}\n//                           {...provided.draggableProps}\n//                           {...provided.dragHandleProps}\n//                           style={{\n//                             padding: '0.5rem',\n//                             marginBottom: '0.5rem',\n//                             border: '1px solid #ccc',\n//                             borderRadius: '4px',\n//                             background: '#fff',\n//                             display: 'flex',\n//                             justifyContent: 'space-between',\n//                             alignItems: 'center',\n//                             ...provided.draggableProps.style,\n//                           }}\n//                         >\n//                           <div style={{ flex: 1 }}>\n//                             <input\n//                               value={issue.title}\n//                               onChange={e => updateIssue(issue.id, 'title', e.target.value)}\n//                               style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//                             />\n//                             <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                               <select\n//                                 value={issue.type}\n//                                 onChange={e => updateIssue(issue.id, 'type', e.target.value)}\n//                               >\n//                                 <option>Story</option>\n//                                 <option>Task</option>\n//                                 <option>Bug</option>\n//                               </select>\n//                               <span\n//                                 style={{\n//                                   background: '#e1e1e1',\n//                                   borderRadius: '12px',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                 }}\n//                               >\n//                                 {issue.storyPoints} pts\n//                               </span>\n//                               <span\n//                                 style={{\n//                                   background: priorityColors[issue.priority],\n//                                   color: '#fff',\n//                                   borderRadius: '12px',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                 }}\n//                               >\n//                                 {issue.priority}\n//                               </span>\n//                               <span\n//                                 style={{\n//                                   background: '#3498db',\n//                                   color: '#fff',\n//                                   borderRadius: '50%',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                   fontSize: '10px',\n//                                 }}\n//                               >\n//                                 {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                               </span>\n//                             </div>\n//                           </div>\n//                           <button\n//                             onClick={() => deleteIssue(issue.id)}\n//                             style={{\n//                               marginLeft: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#e74c3c',\n//                               cursor: 'pointer',\n//                               fontWeight: 'bold',\n//                             }}\n//                           >\n//                             ✕\n//                           </button>\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue, updateIssue as apiUpdateIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// // Mock epics\n// const mockEpics = [\n//   { id: 'epic-1', title: 'User Authentication' },\n//   { id: 'epic-2', title: 'Dashboard & Reports' },\n// ];\n\n// export default function JiraBacklogWithSprints() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '' });\n//   const [collapsedSprints, setCollapsedSprints] = useState({});\n\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title required');\n//     const data = { ...newIssue, projectId: projectId || null, status: 'backlog', assignee: '' };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '' });\n//   };\n\n//   const updateField = async (id, field, value) => {\n//     const updated = issues.map(i => (i.id === id ? { ...i, [field]: value } : i));\n//     setIssues(updated);\n//     const issueToUpdate = updated.find(i => i.id === id);\n//     await apiUpdateIssue(id, issueToUpdate);\n//   };\n\n//   const deleteIssue = id => setIssues(prev => prev.filter(i => i.id !== id));\n\n//   const onDragEnd = async result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     const updated = Array.from(issues);\n//     const [moved] = updated.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updated.splice(destination.index, 0, moved);\n//     setIssues(updated);\n//     await apiUpdateIssue(moved.id, moved);\n//   };\n\n//   // Group issues by status and epic\n//   const columns = {\n//     backlog: issues.filter(i => i.status === 'backlog'),\n//     sprint1: issues.filter(i => i.status === 'sprint1'),\n//     sprint2: issues.filter(i => i.status === 'sprint2'),\n//     done: issues.filter(i => i.status === 'done'),\n//   };\n\n//   const renderIssues = (issueList) =>\n//     issueList.map((issue, index) => (\n//       <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//         {provided => (\n//           <div\n//             ref={provided.innerRef}\n//             {...provided.draggableProps}\n//             {...provided.dragHandleProps}\n//             style={{\n//               padding: '0.5rem',\n//               marginBottom: '0.5rem',\n//               border: '1px solid #ccc',\n//               borderRadius: '4px',\n//               background: '#fff',\n//               display: 'flex',\n//               justifyContent: 'space-between',\n//               alignItems: 'center',\n//               ...provided.draggableProps.style,\n//             }}\n//           >\n//             <div style={{ flex: 1 }}>\n//               <input\n//                 value={issue.title}\n//                 onChange={e => updateField(issue.id, 'title', e.target.value)}\n//                 style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//               />\n//               <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                 <select\n//                   value={issue.type}\n//                   onChange={e => updateField(issue.id, 'type', e.target.value)}\n//                 >\n//                   <option>Story</option>\n//                   <option>Task</option>\n//                   <option>Bug</option>\n//                 </select>\n//                 <span\n//                   style={{\n//                     background: '#e1e1e1',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.storyPoints} pts\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: priorityColors[issue.priority],\n//                     color: '#fff',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.priority}\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: '#3498db',\n//                     color: '#fff',\n//                     borderRadius: '50%',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                     fontSize: '10px',\n//                   }}\n//                   title={issue.assignee || 'Unassigned'}\n//                 >\n//                   {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                 </span>\n//               </div>\n//             </div>\n//             <button\n//               onClick={() => deleteIssue(issue.id)}\n//               style={{\n//                 marginLeft: '6px',\n//                 border: 'none',\n//                 background: 'transparent',\n//                 color: '#e74c3c',\n//                 cursor: 'pointer',\n//                 fontWeight: 'bold',\n//               }}\n//             >\n//               ✕\n//             </button>\n//           </div>\n//         )}\n//       </Draggable>\n//     ));\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Inline Add Issue */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <select value={newIssue.epicId} onChange={e => setNewIssue({ ...newIssue, epicId: e.target.value })}>\n//           <option value=\"\">No Epic</option>\n//           {mockEpics.map(epic => (\n//             <option key={epic.id} value={epic.id}>{epic.title}</option>\n//           ))}\n//         </select>\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board Columns */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {Object.keys(columns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3\n//                     style={{\n//                       textTransform: 'capitalize',\n//                       cursor: status.startsWith('sprint') ? 'pointer' : 'default',\n//                     }}\n//                     onClick={() => status.startsWith('sprint') && setCollapsedSprints(prev => ({ ...prev, [status]: !prev[status] }))}\n//                   >\n//                     {status} {status.startsWith('sprint') ? (collapsedSprints[status] ? '▼' : '▲') : ''}\n//                   </h3>\n//                   {!collapsedSprints[status] &&\n//                     mockEpics.map(epic => {\n//                       const epicIssues = columns[status].filter(i => i.epicId === epic.id);\n//                       if (!epicIssues.length) return null;\n//                       return (\n//                         <div key={epic.id} style={{ marginBottom: '0.5rem' }}>\n//                           <strong style={{ display: 'block', marginBottom: '4px' }}>{epic.title}</strong>\n//                           {renderIssues(epicIssues)}\n//                         </div>\n//                       );\n//                     })}\n//                   {/* Non-epic issues */}\n//                   {!collapsedSprints[status] &&\n//                     renderIssues(columns[status].filter(i => !i.epicId))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue, updateIssue as apiUpdateIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// // Mock epics\n// const mockEpics = [\n//   { id: 'epic-1', title: 'User Authentication' },\n//   { id: 'epic-2', title: 'Dashboard & Reports' },\n// ];\n\n// export default function JiraBoardWithPoints() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({\n//     title: '',\n//     type: 'Story',\n//     storyPoints: 3,\n//     priority: 'P3',\n//     epicId: '',\n//     status: 'backlog',\n//     assignee: '',\n//   });\n//   const [collapsedSprints, setCollapsedSprints] = useState({});\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title required');\n//     const data = { ...newIssue, projectId: projectId || null };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '', status: 'backlog', assignee: '' });\n//   };\n\n//   const updateField = async (id, field, value) => {\n//     const updated = issues.map(i => (i.id === id ? { ...i, [field]: value } : i));\n//     setIssues(updated);\n//     const issueToUpdate = updated.find(i => i.id === id);\n//     await apiUpdateIssue(id, issueToUpdate);\n//   };\n\n//   const deleteIssue = id => setIssues(prev => prev.filter(i => i.id !== id));\n\n//   const onDragEnd = async result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     const updated = Array.from(issues);\n//     const [moved] = updated.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updated.splice(destination.index, 0, moved);\n//     setIssues(updated);\n//     await apiUpdateIssue(moved.id, moved);\n//   };\n\n//   // Dynamically generate columns\n//   const uniqueStatuses = Array.from(new Set(['backlog', ...issues.map(i => i.status), 'done']));\n//   const columns = uniqueStatuses.reduce((acc, status) => {\n//     acc[status] = issues.filter(i => i.status === status);\n//     return acc;\n//   }, {});\n\n//   // Render issues list\n//   const renderIssues = issueList =>\n//     issueList.map((issue, index) => (\n//       <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//         {provided => (\n//           <div\n//             ref={provided.innerRef}\n//             {...provided.draggableProps}\n//             {...provided.dragHandleProps}\n//             style={{\n//               padding: '0.5rem',\n//               marginBottom: '0.5rem',\n//               border: '1px solid #ccc',\n//               borderRadius: '4px',\n//               background: '#fff',\n//               display: 'flex',\n//               justifyContent: 'space-between',\n//               alignItems: 'center',\n//               ...provided.draggableProps.style,\n//             }}\n//           >\n//             <div style={{ flex: 1 }}>\n//               <input\n//                 value={issue.title}\n//                 onChange={e => updateField(issue.id, 'title', e.target.value)}\n//                 style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//               />\n//               <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                 <select value={issue.type} onChange={e => updateField(issue.id, 'type', e.target.value)}>\n//                   <option>Story</option>\n//                   <option>Task</option>\n//                   <option>Bug</option>\n//                 </select>\n//                 <span\n//                   style={{\n//                     background: '#e1e1e1',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.storyPoints} pts\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: priorityColors[issue.priority],\n//                     color: '#fff',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.priority}\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: '#3498db',\n//                     color: '#fff',\n//                     borderRadius: '50%',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                     fontSize: '10px',\n//                   }}\n//                   title={issue.assignee || 'Unassigned'}\n//                 >\n//                   {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                 </span>\n//               </div>\n//             </div>\n//             <button\n//               onClick={() => deleteIssue(issue.id)}\n//               style={{\n//                 marginLeft: '6px',\n//                 border: 'none',\n//                 background: 'transparent',\n//                 color: '#e74c3c',\n//                 cursor: 'pointer',\n//                 fontWeight: 'bold',\n//               }}\n//             >\n//               ✕\n//             </button>\n//           </div>\n//         )}\n//       </Draggable>\n//     ));\n\n//   // Calculate story points per column\n//   const calculatePoints = issueList =>\n//     issueList.reduce((sum, i) => sum + (parseInt(i.storyPoints) || 0), 0);\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Add Issue */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <select value={newIssue.epicId} onChange={e => setNewIssue({ ...newIssue, epicId: e.target.value })}>\n//           <option value=\"\">No Epic</option>\n//           {mockEpics.map(epic => (\n//             <option key={epic.id} value={epic.id}>{epic.title}</option>\n//           ))}\n//         </select>\n//         <input\n//           placeholder=\"Sprint (optional)\"\n//           value={newIssue.status.startsWith('sprint') ? newIssue.status : ''}\n//           onChange={e => setNewIssue({ ...newIssue, status: e.target.value || 'backlog' })}\n//         />\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {uniqueStatuses.map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3\n//                     style={{\n//                       textTransform: 'capitalize',\n//                       cursor: status.startsWith('sprint') ? 'pointer' : 'default',\n//                     }}\n//                     onClick={() => status.startsWith('sprint') && setCollapsedSprints(prev => ({ ...prev, [status]: !prev[status] }))}\n//                   >\n//                     {status} {status.startsWith('sprint') ? (collapsedSprints[status] ? '▼' : '▲') : ''}\n//                     {/* Story points total */}\n//                     {status.startsWith('sprint') && ` — ${calculatePoints(columns[status])} pts`}\n//                   </h3>\n\n//                   {!collapsedSprints[status] &&\n//                     mockEpics.map(epic => {\n//                       const epicIssues = columns[status].filter(i => i.epicId === epic.id);\n//                       if (!epicIssues.length) return null;\n//                       return (\n//                         <div key={epic.id} style={{ marginBottom: '0.5rem' }}>\n//                           <strong style={{ display: 'block', marginBottom: '4px' }}>{epic.title}</strong>\n//                           {renderIssues(epicIssues)}\n//                         </div>\n//                       );\n//                     })}\n\n//                   {!collapsedSprints[status] && renderIssues(columns[status].filter(i => !i.epicId))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n//  for open board\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// export default function Backlog() {\n//   const { id } = useParams(); // <-- Use 'id', matching your route: /backlog/:id\n//   const [issues, setIssues] = useState([]);\n//   const [title, setTitle] = useState('');\n//   const [type, setType] = useState('Story');\n//   const [points, setPoints] = useState(3);\n\n//   useEffect(() => {\n//     listIssues(id).then(setIssues); // Pass project ID for API call\n//   }, [id]);\n\n//   const add = async () => {\n//     const data = {\n//       projectId: id || null,\n//       title,\n//       type,\n//       status: 'todo',\n//       priority: 'P3',\n//       assignee: '',\n//       storyPoints: points\n//     };\n//     await createIssue(data);\n//     setIssues(await listIssues(id)); // Refresh issues after add\n//     setTitle('');\n//     setPoints(3);\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-labelledby=\"backlog-title\">\n//       <h2 id=\"backlog-title\">Backlog {id ? `- ${id}` : ''}</h2>\n//       <div style={{ display: 'flex', gap: 12 }}>\n//         <div style={{ flex: 1 }}>\n//           <div className=\"form-row\">\n//             <label>\n//               Title\n//               <input value={title} onChange={e => setTitle(e.target.value)} />\n//             </label>\n//           </div>\n//           <div className=\"form-row\">\n//             <label>\n//               Type\n//               <select value={type} onChange={e => setType(e.target.value)}>\n//                 <option>Story</option>\n//                 <option>Task</option>\n//                 <option>Bug</option>\n//               </select>\n//             </label>\n//           </div>\n//           <div className=\"form-row\">\n//             <label>\n//               Story Points\n//               <input\n//                 type=\"number\"\n//                 value={points}\n//                 onChange={e => setPoints(Number(e.target.value))}\n//               />\n//             </label>\n//           </div>\n//           <button className=\"btn\" onClick={add}>\n//             Add to Backlog\n//           </button>\n//         </div>\n//         <div style={{ flex: 2 }}>\n//           <h3>Backlog Items</h3>\n//           <ul>\n//             {issues.map(i => (\n//               <li key={i.id}>\n//                 {i.title} — <em>{i.type}</em> — {i.storyPoints} pts\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n//today\nimport React, { useEffect, useState } from 'react';\nimport { listIssues, createIssue } from '../../services/mockApi';\nimport { useParams } from 'react-router-dom';\n\nexport default function Backlog() {\n  const { id } = useParams(); // matches your route /backlog/:id\n  const [issues, setIssues] = useState([]);\n  const [title, setTitle] = useState('');\n  const [type, setType] = useState('Story');\n  const [points, setPoints] = useState(3);\n\n  // Load backlog issues when page loads or id changes\n  useEffect(() => {\n    const fetchIssues = async () => {\n      try {\n        const data = await listIssues(id);\n\n        // Make sure we always have an array\n        setIssues(Array.isArray(data) ? data : []);\n      } catch (err) {\n        console.error('Failed to load issues:', err);\n        setIssues([]);\n      }\n    };\n    fetchIssues();\n  }, [id]);\n\n  // Add new issue\n  const add = async () => {\n    if (!title.trim()) return;\n\n    const newIssue = {\n      projectId: id || null,\n      title,\n      type,\n      status: 'todo',\n      priority: 'P3',\n      assignee: '',\n      storyPoints: points,\n    };\n\n    try {\n      await createIssue(newIssue);\n      const refreshed = await listIssues(id);\n      setIssues(Array.isArray(refreshed) ? refreshed : []);\n      setTitle('');\n      setPoints(3);\n    } catch (err) {\n      console.error('Failed to add issue:', err);\n    }\n  };\n\n  return (\n    <div className=\"card\" role=\"region\" aria-labelledby=\"backlog-title\">\n      <h2 id=\"backlog-title\">Backlog {id ? `- ${id}` : ''}</h2>\n      <div style={{ display: 'flex', gap: 12 }}>\n        {/* Left: Form */}\n        <div style={{ flex: 1 }}>\n          <div className=\"form-row\">\n            <label>\n              Title\n              <input\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n              />\n            </label>\n          </div>\n\n          <div className=\"form-row\">\n            <label>\n              Type\n              <select value={type} onChange={(e) => setType(e.target.value)}>\n                <option>Story</option>\n                <option>Task</option>\n                <option>Bug</option>\n              </select>\n            </label>\n          </div>\n\n          <div className=\"form-row\">\n            <label>\n              Story Points\n              <input\n                type=\"number\"\n                value={points}\n                onChange={(e) => setPoints(Number(e.target.value))}\n              />\n            </label>\n          </div>\n\n          <button className=\"btn\" onClick={add}>\n            Add to Backlog\n          </button>\n        </div>\n\n        {/* Right: List */}\n        <div style={{ flex: 2 }}>\n          <h3>Backlog Items</h3>\n          {issues.length === 0 ? (\n            <p>No issues found.</p>\n          ) : (\n            <ul>\n              {issues.map((i) => (\n                <li key={i.id}>\n                  {i.title} — <em>{i.type}</em> — {i.storyPoints} pts\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAalD,SAAS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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
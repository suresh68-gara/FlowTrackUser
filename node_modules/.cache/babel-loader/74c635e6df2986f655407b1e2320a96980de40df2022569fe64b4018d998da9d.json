{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vmoun\\\\OneDrive\\\\Desktop\\\\newtieckettool\\\\src\\\\components\\\\backlog\\\\Backlog.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// export default function Backlog() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [title, setTitle] = useState('');\n//   const [type, setType] = useState('Story');\n//   const [points, setPoints] = useState(3);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const add = async ()=>{\n//     const data = { projectId: projectId||null, title, type, status:'todo', priority:'P3', assignee:'', storyPoints:points };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setTitle(''); setPoints(3);\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-labelledby=\"backlog-title\">\n//       <h2 id=\"backlog-title\">Backlog {projectId?`- ${projectId}`:''}</h2>\n//       <div style={{display:'flex',gap:12}}>\n//         <div style={{flex:1}}>\n//           <div className=\"form-row\"><label>Title<input value={title} onChange={e=>setTitle(e.target.value)} /></label></div>\n//           <div className=\"form-row\"><label>Type<select value={type} onChange={e=>setType(e.target.value)}><option>Story</option><option>Task</option><option>Bug</option></select></label></div>\n//           <div className=\"form-row\"><label>Story Points<input type=\"number\" value={points} onChange={e=>setPoints(e.target.value)} /></label></div>\n//           <button className=\"btn\" onClick={add}>Add to Backlog</button>\n//         </div>\n//         <div style={{flex:2}}>\n//           <h3>Backlog Items</h3>\n//           <ul>{issues.map(i=>(<li key={i.id}>{i.title} — <em>{i.type}</em> — {i.storyPoints} pts</li>))}</ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// export default function JiraBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({ title: '', type: 'Story', storyPoints: 3 });\n\n//   // Fetch issues\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   // Add new issue\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title is required');\n//     const data = {\n//       projectId: projectId || null,\n//       title: newIssue.title,\n//       type: newIssue.type,\n//       status: 'backlog',\n//       priority: 'P3',\n//       assignee: '',\n//       storyPoints: newIssue.storyPoints,\n//     };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3 });\n//   };\n\n//   // Handle drag and drop\n//   const onDragEnd = result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n\n//     const updatedIssues = Array.from(issues);\n//     const [moved] = updatedIssues.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updatedIssues.splice(destination.index, 0, moved);\n//     setIssues(updatedIssues);\n//   };\n\n//   // Delete issue\n//   const deleteIssue = id => {\n//     setIssues(prev => prev.filter(i => i.id !== id));\n//   };\n\n//   // Inline edit issue\n//   const updateIssue = (id, field, value) => {\n//     setIssues(prev =>\n//       prev.map(i => (i.id === id ? { ...i, [field]: value } : i))\n//     );\n//   };\n\n//   // Group issues by status\n//   const columns = {\n//     backlog: issues.filter(i => i.status === 'backlog'),\n//     sprint: issues.filter(i => i.status === 'sprint'),\n//     done: issues.filter(i => i.status === 'done'),\n//   };\n\n//   // Priority colors\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Add Issue Form */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board Columns */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {Object.keys(columns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3 style={{ textTransform: 'capitalize' }}>{status}</h3>\n//                   {columns[status].map((issue, index) => (\n//                     <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//                       {provided => (\n//                         <div\n//                           ref={provided.innerRef}\n//                           {...provided.draggableProps}\n//                           {...provided.dragHandleProps}\n//                           style={{\n//                             padding: '0.5rem',\n//                             marginBottom: '0.5rem',\n//                             border: '1px solid #ccc',\n//                             borderRadius: '4px',\n//                             background: '#fff',\n//                             display: 'flex',\n//                             justifyContent: 'space-between',\n//                             alignItems: 'center',\n//                             ...provided.draggableProps.style,\n//                           }}\n//                         >\n//                           <div style={{ flex: 1 }}>\n//                             <input\n//                               value={issue.title}\n//                               onChange={e => updateIssue(issue.id, 'title', e.target.value)}\n//                               style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//                             />\n//                             <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                               <select\n//                                 value={issue.type}\n//                                 onChange={e => updateIssue(issue.id, 'type', e.target.value)}\n//                               >\n//                                 <option>Story</option>\n//                                 <option>Task</option>\n//                                 <option>Bug</option>\n//                               </select>\n//                               <span\n//                                 style={{\n//                                   background: '#e1e1e1',\n//                                   borderRadius: '12px',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                 }}\n//                               >\n//                                 {issue.storyPoints} pts\n//                               </span>\n//                               <span\n//                                 style={{\n//                                   background: priorityColors[issue.priority],\n//                                   color: '#fff',\n//                                   borderRadius: '12px',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                 }}\n//                               >\n//                                 {issue.priority}\n//                               </span>\n//                               <span\n//                                 style={{\n//                                   background: '#3498db',\n//                                   color: '#fff',\n//                                   borderRadius: '50%',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                   fontSize: '10px',\n//                                 }}\n//                               >\n//                                 {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                               </span>\n//                             </div>\n//                           </div>\n//                           <button\n//                             onClick={() => deleteIssue(issue.id)}\n//                             style={{\n//                               marginLeft: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#e74c3c',\n//                               cursor: 'pointer',\n//                               fontWeight: 'bold',\n//                             }}\n//                           >\n//                             ✕\n//                           </button>\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue, updateIssue as apiUpdateIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// // Mock epics\n// const mockEpics = [\n//   { id: 'epic-1', title: 'User Authentication' },\n//   { id: 'epic-2', title: 'Dashboard & Reports' },\n// ];\n\n// export default function JiraBacklogWithSprints() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '' });\n//   const [collapsedSprints, setCollapsedSprints] = useState({});\n\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title required');\n//     const data = { ...newIssue, projectId: projectId || null, status: 'backlog', assignee: '' };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '' });\n//   };\n\n//   const updateField = async (id, field, value) => {\n//     const updated = issues.map(i => (i.id === id ? { ...i, [field]: value } : i));\n//     setIssues(updated);\n//     const issueToUpdate = updated.find(i => i.id === id);\n//     await apiUpdateIssue(id, issueToUpdate);\n//   };\n\n//   const deleteIssue = id => setIssues(prev => prev.filter(i => i.id !== id));\n\n//   const onDragEnd = async result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     const updated = Array.from(issues);\n//     const [moved] = updated.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updated.splice(destination.index, 0, moved);\n//     setIssues(updated);\n//     await apiUpdateIssue(moved.id, moved);\n//   };\n\n//   // Group issues by status and epic\n//   const columns = {\n//     backlog: issues.filter(i => i.status === 'backlog'),\n//     sprint1: issues.filter(i => i.status === 'sprint1'),\n//     sprint2: issues.filter(i => i.status === 'sprint2'),\n//     done: issues.filter(i => i.status === 'done'),\n//   };\n\n//   const renderIssues = (issueList) =>\n//     issueList.map((issue, index) => (\n//       <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//         {provided => (\n//           <div\n//             ref={provided.innerRef}\n//             {...provided.draggableProps}\n//             {...provided.dragHandleProps}\n//             style={{\n//               padding: '0.5rem',\n//               marginBottom: '0.5rem',\n//               border: '1px solid #ccc',\n//               borderRadius: '4px',\n//               background: '#fff',\n//               display: 'flex',\n//               justifyContent: 'space-between',\n//               alignItems: 'center',\n//               ...provided.draggableProps.style,\n//             }}\n//           >\n//             <div style={{ flex: 1 }}>\n//               <input\n//                 value={issue.title}\n//                 onChange={e => updateField(issue.id, 'title', e.target.value)}\n//                 style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//               />\n//               <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                 <select\n//                   value={issue.type}\n//                   onChange={e => updateField(issue.id, 'type', e.target.value)}\n//                 >\n//                   <option>Story</option>\n//                   <option>Task</option>\n//                   <option>Bug</option>\n//                 </select>\n//                 <span\n//                   style={{\n//                     background: '#e1e1e1',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.storyPoints} pts\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: priorityColors[issue.priority],\n//                     color: '#fff',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.priority}\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: '#3498db',\n//                     color: '#fff',\n//                     borderRadius: '50%',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                     fontSize: '10px',\n//                   }}\n//                   title={issue.assignee || 'Unassigned'}\n//                 >\n//                   {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                 </span>\n//               </div>\n//             </div>\n//             <button\n//               onClick={() => deleteIssue(issue.id)}\n//               style={{\n//                 marginLeft: '6px',\n//                 border: 'none',\n//                 background: 'transparent',\n//                 color: '#e74c3c',\n//                 cursor: 'pointer',\n//                 fontWeight: 'bold',\n//               }}\n//             >\n//               ✕\n//             </button>\n//           </div>\n//         )}\n//       </Draggable>\n//     ));\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Inline Add Issue */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <select value={newIssue.epicId} onChange={e => setNewIssue({ ...newIssue, epicId: e.target.value })}>\n//           <option value=\"\">No Epic</option>\n//           {mockEpics.map(epic => (\n//             <option key={epic.id} value={epic.id}>{epic.title}</option>\n//           ))}\n//         </select>\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board Columns */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {Object.keys(columns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3\n//                     style={{\n//                       textTransform: 'capitalize',\n//                       cursor: status.startsWith('sprint') ? 'pointer' : 'default',\n//                     }}\n//                     onClick={() => status.startsWith('sprint') && setCollapsedSprints(prev => ({ ...prev, [status]: !prev[status] }))}\n//                   >\n//                     {status} {status.startsWith('sprint') ? (collapsedSprints[status] ? '▼' : '▲') : ''}\n//                   </h3>\n//                   {!collapsedSprints[status] &&\n//                     mockEpics.map(epic => {\n//                       const epicIssues = columns[status].filter(i => i.epicId === epic.id);\n//                       if (!epicIssues.length) return null;\n//                       return (\n//                         <div key={epic.id} style={{ marginBottom: '0.5rem' }}>\n//                           <strong style={{ display: 'block', marginBottom: '4px' }}>{epic.title}</strong>\n//                           {renderIssues(epicIssues)}\n//                         </div>\n//                       );\n//                     })}\n//                   {/* Non-epic issues */}\n//                   {!collapsedSprints[status] &&\n//                     renderIssues(columns[status].filter(i => !i.epicId))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport { listIssues, createIssue, updateIssue as apiUpdateIssue } from '../../services/mockApi';\nimport { useParams } from 'react-router-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// Mock epics\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockEpics = [{\n  id: 'epic-1',\n  title: 'User Authentication'\n}, {\n  id: 'epic-2',\n  title: 'Dashboard & Reports'\n}];\nexport default function JiraBoardWithPoints() {\n  _s();\n  const {\n    projectId\n  } = useParams();\n  const [issues, setIssues] = useState([]);\n  const [newIssue, setNewIssue] = useState({\n    title: '',\n    type: 'Story',\n    storyPoints: 3,\n    priority: 'P3',\n    epicId: '',\n    status: 'backlog',\n    assignee: ''\n  });\n  const [collapsedSprints, setCollapsedSprints] = useState({});\n  const priorityColors = {\n    P1: '#e74c3c',\n    P2: '#f1c40f',\n    P3: '#2ecc71'\n  };\n  useEffect(() => {\n    listIssues(projectId).then(setIssues);\n  }, [projectId]);\n  const addIssue = async () => {\n    if (!newIssue.title) return alert('Title required');\n    const data = {\n      ...newIssue,\n      projectId: projectId || null\n    };\n    await createIssue(data);\n    setIssues(await listIssues(projectId));\n    setNewIssue({\n      title: '',\n      type: 'Story',\n      storyPoints: 3,\n      priority: 'P3',\n      epicId: '',\n      status: 'backlog',\n      assignee: ''\n    });\n  };\n  const updateField = async (id, field, value) => {\n    const updated = issues.map(i => i.id === id ? {\n      ...i,\n      [field]: value\n    } : i);\n    setIssues(updated);\n    const issueToUpdate = updated.find(i => i.id === id);\n    await apiUpdateIssue(id, issueToUpdate);\n  };\n  const deleteIssue = id => setIssues(prev => prev.filter(i => i.id !== id));\n  const onDragEnd = async result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) return;\n    const updated = Array.from(issues);\n    const [moved] = updated.splice(source.index, 1);\n    moved.status = destination.droppableId;\n    updated.splice(destination.index, 0, moved);\n    setIssues(updated);\n    await apiUpdateIssue(moved.id, moved);\n  };\n\n  // Dynamically generate columns\n  const uniqueStatuses = Array.from(new Set(['backlog', ...issues.map(i => i.status), 'done']));\n  const columns = uniqueStatuses.reduce((acc, status) => {\n    acc[status] = issues.filter(i => i.status === status);\n    return acc;\n  }, {});\n\n  // Render issues list\n  const renderIssues = issueList => issueList.map((issue, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n    draggableId: issue.id.toString(),\n    index: index,\n    children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: provided.innerRef,\n      ...provided.draggableProps,\n      ...provided.dragHandleProps,\n      style: {\n        padding: '0.5rem',\n        marginBottom: '0.5rem',\n        border: '1px solid #ccc',\n        borderRadius: '4px',\n        background: '#fff',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        ...provided.draggableProps.style\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: issue.title,\n          onChange: e => updateField(issue.id, 'title', e.target.value),\n          style: {\n            fontWeight: 'bold',\n            width: '100%',\n            border: 'none',\n            background: 'transparent'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '12px',\n            marginTop: '2px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            value: issue.type,\n            onChange: e => updateField(issue.id, 'type', e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Story\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Bug\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              background: '#e1e1e1',\n              borderRadius: '12px',\n              padding: '2px 6px',\n              marginLeft: '6px'\n            },\n            children: [issue.storyPoints, \" pts\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              background: priorityColors[issue.priority],\n              color: '#fff',\n              borderRadius: '12px',\n              padding: '2px 6px',\n              marginLeft: '6px'\n            },\n            children: issue.priority\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              background: '#3498db',\n              color: '#fff',\n              borderRadius: '50%',\n              padding: '2px 6px',\n              marginLeft: '6px',\n              fontSize: '10px'\n            },\n            title: issue.assignee || 'Unassigned',\n            children: issue.assignee ? issue.assignee[0].toUpperCase() : '?'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteIssue(issue.id),\n        style: {\n          marginLeft: '6px',\n          border: 'none',\n          background: 'transparent',\n          color: '#e74c3c',\n          cursor: 'pointer',\n          fontWeight: 'bold'\n        },\n        children: \"\\u2715\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 11\n    }, this)\n  }, issue.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 582,\n    columnNumber: 7\n  }, this));\n\n  // Calculate story points per column\n  const calculatePoints = issueList => issueList.reduce((sum, i) => sum + (parseInt(i.storyPoints) || 0), 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '1rem',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Project Board \", projectId ? `- ${projectId}` : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 672,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        gap: '0.5rem',\n        marginBottom: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Title\",\n        value: newIssue.title,\n        onChange: e => setNewIssue({\n          ...newIssue,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: newIssue.type,\n        onChange: e => setNewIssue({\n          ...newIssue,\n          type: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Story\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Bug\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: 1,\n        value: newIssue.storyPoints,\n        onChange: e => setNewIssue({\n          ...newIssue,\n          storyPoints: parseInt(e.target.value)\n        }),\n        style: {\n          width: '60px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: newIssue.priority,\n        onChange: e => setNewIssue({\n          ...newIssue,\n          priority: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"P1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"P2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"P3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: newIssue.epicId,\n        onChange: e => setNewIssue({\n          ...newIssue,\n          epicId: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"No Epic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 11\n        }, this), mockEpics.map(epic => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: epic.id,\n          children: epic.title\n        }, epic.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Sprint (optional)\",\n        value: newIssue.status.startsWith('sprint') ? newIssue.status : '',\n        onChange: e => setNewIssue({\n          ...newIssue,\n          status: e.target.value || 'backlog'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addIssue,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '1rem',\n          alignItems: 'flex-start'\n        },\n        children: uniqueStatuses.map(status => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: status,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ...provided.droppableProps,\n            ref: provided.innerRef,\n            style: {\n              flex: 1,\n              minHeight: '300px',\n              padding: '0.5rem',\n              border: '1px solid #ddd',\n              borderRadius: '4px',\n              background: '#f4f5f7'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                textTransform: 'capitalize',\n                cursor: status.startsWith('sprint') ? 'pointer' : 'default'\n              },\n              onClick: () => status.startsWith('sprint') && setCollapsedSprints(prev => ({\n                ...prev,\n                [status]: !prev[status]\n              })),\n              children: [status, \" \", status.startsWith('sprint') ? collapsedSprints[status] ? '▼' : '▲' : '', status.startsWith('sprint') && ` — ${calculatePoints(columns[status])} pts`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 730,\n              columnNumber: 19\n            }, this), !collapsedSprints[status] && mockEpics.map(epic => {\n              const epicIssues = columns[status].filter(i => i.epicId === epic.id);\n              if (!epicIssues.length) return null;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginBottom: '0.5rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  style: {\n                    display: 'block',\n                    marginBottom: '4px'\n                  },\n                  children: epic.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 748,\n                  columnNumber: 27\n                }, this), renderIssues(epicIssues)]\n              }, epic.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 747,\n                columnNumber: 25\n              }, this);\n            }), !collapsedSprints[status] && renderIssues(columns[status].filter(i => !i.epicId)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 17\n          }, this)\n        }, status, false, {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 713,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 671,\n    columnNumber: 5\n  }, this);\n}\n_s(JiraBoardWithPoints, \"PEA6RX9CNEQ9djmeE7hvUTxJYOI=\", false, function () {\n  return [useParams];\n});\n_c = JiraBoardWithPoints;\nvar _c;\n$RefreshReg$(_c, \"JiraBoardWithPoints\");","map":{"version":3,"names":["React","useEffect","useState","listIssues","createIssue","updateIssue","apiUpdateIssue","useParams","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","mockEpics","id","title","JiraBoardWithPoints","_s","projectId","issues","setIssues","newIssue","setNewIssue","type","storyPoints","priority","epicId","status","assignee","collapsedSprints","setCollapsedSprints","priorityColors","P1","P2","P3","then","addIssue","alert","data","updateField","field","value","updated","map","i","issueToUpdate","find","deleteIssue","prev","filter","onDragEnd","result","source","destination","Array","from","moved","splice","index","droppableId","uniqueStatuses","Set","columns","reduce","acc","renderIssues","issueList","issue","draggableId","toString","children","provided","ref","innerRef","draggableProps","dragHandleProps","style","padding","marginBottom","border","borderRadius","background","display","justifyContent","alignItems","flex","onChange","e","target","fontWeight","width","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","marginTop","marginLeft","color","toUpperCase","onClick","cursor","calculatePoints","sum","parseInt","fontFamily","gap","placeholder","min","epic","startsWith","droppableProps","minHeight","textTransform","epicIssues","length","_c","$RefreshReg$"],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/components/backlog/Backlog.js"],"sourcesContent":["\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n\n// export default function Backlog() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [title, setTitle] = useState('');\n//   const [type, setType] = useState('Story');\n//   const [points, setPoints] = useState(3);\n\n//   useEffect(()=>{ listIssues(projectId).then(setIssues); },[projectId]);\n\n//   const add = async ()=>{\n//     const data = { projectId: projectId||null, title, type, status:'todo', priority:'P3', assignee:'', storyPoints:points };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setTitle(''); setPoints(3);\n//   };\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-labelledby=\"backlog-title\">\n//       <h2 id=\"backlog-title\">Backlog {projectId?`- ${projectId}`:''}</h2>\n//       <div style={{display:'flex',gap:12}}>\n//         <div style={{flex:1}}>\n//           <div className=\"form-row\"><label>Title<input value={title} onChange={e=>setTitle(e.target.value)} /></label></div>\n//           <div className=\"form-row\"><label>Type<select value={type} onChange={e=>setType(e.target.value)}><option>Story</option><option>Task</option><option>Bug</option></select></label></div>\n//           <div className=\"form-row\"><label>Story Points<input type=\"number\" value={points} onChange={e=>setPoints(e.target.value)} /></label></div>\n//           <button className=\"btn\" onClick={add}>Add to Backlog</button>\n//         </div>\n//         <div style={{flex:2}}>\n//           <h3>Backlog Items</h3>\n//           <ul>{issues.map(i=>(<li key={i.id}>{i.title} — <em>{i.type}</em> — {i.storyPoints} pts</li>))}</ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// export default function JiraBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({ title: '', type: 'Story', storyPoints: 3 });\n\n//   // Fetch issues\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   // Add new issue\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title is required');\n//     const data = {\n//       projectId: projectId || null,\n//       title: newIssue.title,\n//       type: newIssue.type,\n//       status: 'backlog',\n//       priority: 'P3',\n//       assignee: '',\n//       storyPoints: newIssue.storyPoints,\n//     };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3 });\n//   };\n\n//   // Handle drag and drop\n//   const onDragEnd = result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n\n//     const updatedIssues = Array.from(issues);\n//     const [moved] = updatedIssues.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updatedIssues.splice(destination.index, 0, moved);\n//     setIssues(updatedIssues);\n//   };\n\n//   // Delete issue\n//   const deleteIssue = id => {\n//     setIssues(prev => prev.filter(i => i.id !== id));\n//   };\n\n//   // Inline edit issue\n//   const updateIssue = (id, field, value) => {\n//     setIssues(prev =>\n//       prev.map(i => (i.id === id ? { ...i, [field]: value } : i))\n//     );\n//   };\n\n//   // Group issues by status\n//   const columns = {\n//     backlog: issues.filter(i => i.status === 'backlog'),\n//     sprint: issues.filter(i => i.status === 'sprint'),\n//     done: issues.filter(i => i.status === 'done'),\n//   };\n\n//   // Priority colors\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Add Issue Form */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board Columns */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {Object.keys(columns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3 style={{ textTransform: 'capitalize' }}>{status}</h3>\n//                   {columns[status].map((issue, index) => (\n//                     <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//                       {provided => (\n//                         <div\n//                           ref={provided.innerRef}\n//                           {...provided.draggableProps}\n//                           {...provided.dragHandleProps}\n//                           style={{\n//                             padding: '0.5rem',\n//                             marginBottom: '0.5rem',\n//                             border: '1px solid #ccc',\n//                             borderRadius: '4px',\n//                             background: '#fff',\n//                             display: 'flex',\n//                             justifyContent: 'space-between',\n//                             alignItems: 'center',\n//                             ...provided.draggableProps.style,\n//                           }}\n//                         >\n//                           <div style={{ flex: 1 }}>\n//                             <input\n//                               value={issue.title}\n//                               onChange={e => updateIssue(issue.id, 'title', e.target.value)}\n//                               style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//                             />\n//                             <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                               <select\n//                                 value={issue.type}\n//                                 onChange={e => updateIssue(issue.id, 'type', e.target.value)}\n//                               >\n//                                 <option>Story</option>\n//                                 <option>Task</option>\n//                                 <option>Bug</option>\n//                               </select>\n//                               <span\n//                                 style={{\n//                                   background: '#e1e1e1',\n//                                   borderRadius: '12px',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                 }}\n//                               >\n//                                 {issue.storyPoints} pts\n//                               </span>\n//                               <span\n//                                 style={{\n//                                   background: priorityColors[issue.priority],\n//                                   color: '#fff',\n//                                   borderRadius: '12px',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                 }}\n//                               >\n//                                 {issue.priority}\n//                               </span>\n//                               <span\n//                                 style={{\n//                                   background: '#3498db',\n//                                   color: '#fff',\n//                                   borderRadius: '50%',\n//                                   padding: '2px 6px',\n//                                   marginLeft: '6px',\n//                                   fontSize: '10px',\n//                                 }}\n//                               >\n//                                 {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                               </span>\n//                             </div>\n//                           </div>\n//                           <button\n//                             onClick={() => deleteIssue(issue.id)}\n//                             style={{\n//                               marginLeft: '6px',\n//                               border: 'none',\n//                               background: 'transparent',\n//                               color: '#e74c3c',\n//                               cursor: 'pointer',\n//                               fontWeight: 'bold',\n//                             }}\n//                           >\n//                             ✕\n//                           </button>\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listIssues, createIssue, updateIssue as apiUpdateIssue } from '../../services/mockApi';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// // Mock epics\n// const mockEpics = [\n//   { id: 'epic-1', title: 'User Authentication' },\n//   { id: 'epic-2', title: 'Dashboard & Reports' },\n// ];\n\n// export default function JiraBacklogWithSprints() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [newIssue, setNewIssue] = useState({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '' });\n//   const [collapsedSprints, setCollapsedSprints] = useState({});\n\n//   const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n//   useEffect(() => {\n//     listIssues(projectId).then(setIssues);\n//   }, [projectId]);\n\n//   const addIssue = async () => {\n//     if (!newIssue.title) return alert('Title required');\n//     const data = { ...newIssue, projectId: projectId || null, status: 'backlog', assignee: '' };\n//     await createIssue(data);\n//     setIssues(await listIssues(projectId));\n//     setNewIssue({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '' });\n//   };\n\n//   const updateField = async (id, field, value) => {\n//     const updated = issues.map(i => (i.id === id ? { ...i, [field]: value } : i));\n//     setIssues(updated);\n//     const issueToUpdate = updated.find(i => i.id === id);\n//     await apiUpdateIssue(id, issueToUpdate);\n//   };\n\n//   const deleteIssue = id => setIssues(prev => prev.filter(i => i.id !== id));\n\n//   const onDragEnd = async result => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     const updated = Array.from(issues);\n//     const [moved] = updated.splice(source.index, 1);\n//     moved.status = destination.droppableId;\n//     updated.splice(destination.index, 0, moved);\n//     setIssues(updated);\n//     await apiUpdateIssue(moved.id, moved);\n//   };\n\n//   // Group issues by status and epic\n//   const columns = {\n//     backlog: issues.filter(i => i.status === 'backlog'),\n//     sprint1: issues.filter(i => i.status === 'sprint1'),\n//     sprint2: issues.filter(i => i.status === 'sprint2'),\n//     done: issues.filter(i => i.status === 'done'),\n//   };\n\n//   const renderIssues = (issueList) =>\n//     issueList.map((issue, index) => (\n//       <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n//         {provided => (\n//           <div\n//             ref={provided.innerRef}\n//             {...provided.draggableProps}\n//             {...provided.dragHandleProps}\n//             style={{\n//               padding: '0.5rem',\n//               marginBottom: '0.5rem',\n//               border: '1px solid #ccc',\n//               borderRadius: '4px',\n//               background: '#fff',\n//               display: 'flex',\n//               justifyContent: 'space-between',\n//               alignItems: 'center',\n//               ...provided.draggableProps.style,\n//             }}\n//           >\n//             <div style={{ flex: 1 }}>\n//               <input\n//                 value={issue.title}\n//                 onChange={e => updateField(issue.id, 'title', e.target.value)}\n//                 style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n//               />\n//               <div style={{ fontSize: '12px', marginTop: '2px' }}>\n//                 <select\n//                   value={issue.type}\n//                   onChange={e => updateField(issue.id, 'type', e.target.value)}\n//                 >\n//                   <option>Story</option>\n//                   <option>Task</option>\n//                   <option>Bug</option>\n//                 </select>\n//                 <span\n//                   style={{\n//                     background: '#e1e1e1',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.storyPoints} pts\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: priorityColors[issue.priority],\n//                     color: '#fff',\n//                     borderRadius: '12px',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                   }}\n//                 >\n//                   {issue.priority}\n//                 </span>\n//                 <span\n//                   style={{\n//                     background: '#3498db',\n//                     color: '#fff',\n//                     borderRadius: '50%',\n//                     padding: '2px 6px',\n//                     marginLeft: '6px',\n//                     fontSize: '10px',\n//                   }}\n//                   title={issue.assignee || 'Unassigned'}\n//                 >\n//                   {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n//                 </span>\n//               </div>\n//             </div>\n//             <button\n//               onClick={() => deleteIssue(issue.id)}\n//               style={{\n//                 marginLeft: '6px',\n//                 border: 'none',\n//                 background: 'transparent',\n//                 color: '#e74c3c',\n//                 cursor: 'pointer',\n//                 fontWeight: 'bold',\n//               }}\n//             >\n//               ✕\n//             </button>\n//           </div>\n//         )}\n//       </Draggable>\n//     ));\n\n//   return (\n//     <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n//       <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n//       {/* Inline Add Issue */}\n//       <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n//         <input\n//           placeholder=\"Title\"\n//           value={newIssue.title}\n//           onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n//         />\n//         <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n//           <option>Story</option>\n//           <option>Task</option>\n//           <option>Bug</option>\n//         </select>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           value={newIssue.storyPoints}\n//           onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n//           style={{ width: '60px' }}\n//         />\n//         <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n//           <option>P1</option>\n//           <option>P2</option>\n//           <option>P3</option>\n//         </select>\n//         <select value={newIssue.epicId} onChange={e => setNewIssue({ ...newIssue, epicId: e.target.value })}>\n//           <option value=\"\">No Epic</option>\n//           {mockEpics.map(epic => (\n//             <option key={epic.id} value={epic.id}>{epic.title}</option>\n//           ))}\n//         </select>\n//         <button onClick={addIssue}>Add</button>\n//       </div>\n\n//       {/* Board Columns */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n//           {Object.keys(columns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {provided => (\n//                 <div\n//                   {...provided.droppableProps}\n//                   ref={provided.innerRef}\n//                   style={{\n//                     flex: 1,\n//                     minHeight: '300px',\n//                     padding: '0.5rem',\n//                     border: '1px solid #ddd',\n//                     borderRadius: '4px',\n//                     background: '#f4f5f7',\n//                   }}\n//                 >\n//                   <h3\n//                     style={{\n//                       textTransform: 'capitalize',\n//                       cursor: status.startsWith('sprint') ? 'pointer' : 'default',\n//                     }}\n//                     onClick={() => status.startsWith('sprint') && setCollapsedSprints(prev => ({ ...prev, [status]: !prev[status] }))}\n//                   >\n//                     {status} {status.startsWith('sprint') ? (collapsedSprints[status] ? '▼' : '▲') : ''}\n//                   </h3>\n//                   {!collapsedSprints[status] &&\n//                     mockEpics.map(epic => {\n//                       const epicIssues = columns[status].filter(i => i.epicId === epic.id);\n//                       if (!epicIssues.length) return null;\n//                       return (\n//                         <div key={epic.id} style={{ marginBottom: '0.5rem' }}>\n//                           <strong style={{ display: 'block', marginBottom: '4px' }}>{epic.title}</strong>\n//                           {renderIssues(epicIssues)}\n//                         </div>\n//                       );\n//                     })}\n//                   {/* Non-epic issues */}\n//                   {!collapsedSprints[status] &&\n//                     renderIssues(columns[status].filter(i => !i.epicId))}\n//                   {provided.placeholder}\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\nimport React, { useEffect, useState } from 'react';\nimport { listIssues, createIssue, updateIssue as apiUpdateIssue } from '../../services/mockApi';\nimport { useParams } from 'react-router-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// Mock epics\nconst mockEpics = [\n  { id: 'epic-1', title: 'User Authentication' },\n  { id: 'epic-2', title: 'Dashboard & Reports' },\n];\n\nexport default function JiraBoardWithPoints() {\n  const { projectId } = useParams();\n  const [issues, setIssues] = useState([]);\n  const [newIssue, setNewIssue] = useState({\n    title: '',\n    type: 'Story',\n    storyPoints: 3,\n    priority: 'P3',\n    epicId: '',\n    status: 'backlog',\n    assignee: '',\n  });\n  const [collapsedSprints, setCollapsedSprints] = useState({});\n  const priorityColors = { P1: '#e74c3c', P2: '#f1c40f', P3: '#2ecc71' };\n\n  useEffect(() => {\n    listIssues(projectId).then(setIssues);\n  }, [projectId]);\n\n  const addIssue = async () => {\n    if (!newIssue.title) return alert('Title required');\n    const data = { ...newIssue, projectId: projectId || null };\n    await createIssue(data);\n    setIssues(await listIssues(projectId));\n    setNewIssue({ title: '', type: 'Story', storyPoints: 3, priority: 'P3', epicId: '', status: 'backlog', assignee: '' });\n  };\n\n  const updateField = async (id, field, value) => {\n    const updated = issues.map(i => (i.id === id ? { ...i, [field]: value } : i));\n    setIssues(updated);\n    const issueToUpdate = updated.find(i => i.id === id);\n    await apiUpdateIssue(id, issueToUpdate);\n  };\n\n  const deleteIssue = id => setIssues(prev => prev.filter(i => i.id !== id));\n\n  const onDragEnd = async result => {\n    const { source, destination } = result;\n    if (!destination) return;\n    const updated = Array.from(issues);\n    const [moved] = updated.splice(source.index, 1);\n    moved.status = destination.droppableId;\n    updated.splice(destination.index, 0, moved);\n    setIssues(updated);\n    await apiUpdateIssue(moved.id, moved);\n  };\n\n  // Dynamically generate columns\n  const uniqueStatuses = Array.from(new Set(['backlog', ...issues.map(i => i.status), 'done']));\n  const columns = uniqueStatuses.reduce((acc, status) => {\n    acc[status] = issues.filter(i => i.status === status);\n    return acc;\n  }, {});\n\n  // Render issues list\n  const renderIssues = issueList =>\n    issueList.map((issue, index) => (\n      <Draggable key={issue.id} draggableId={issue.id.toString()} index={index}>\n        {provided => (\n          <div\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            style={{\n              padding: '0.5rem',\n              marginBottom: '0.5rem',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              background: '#fff',\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              ...provided.draggableProps.style,\n            }}\n          >\n            <div style={{ flex: 1 }}>\n              <input\n                value={issue.title}\n                onChange={e => updateField(issue.id, 'title', e.target.value)}\n                style={{ fontWeight: 'bold', width: '100%', border: 'none', background: 'transparent' }}\n              />\n              <div style={{ fontSize: '12px', marginTop: '2px' }}>\n                <select value={issue.type} onChange={e => updateField(issue.id, 'type', e.target.value)}>\n                  <option>Story</option>\n                  <option>Task</option>\n                  <option>Bug</option>\n                </select>\n                <span\n                  style={{\n                    background: '#e1e1e1',\n                    borderRadius: '12px',\n                    padding: '2px 6px',\n                    marginLeft: '6px',\n                  }}\n                >\n                  {issue.storyPoints} pts\n                </span>\n                <span\n                  style={{\n                    background: priorityColors[issue.priority],\n                    color: '#fff',\n                    borderRadius: '12px',\n                    padding: '2px 6px',\n                    marginLeft: '6px',\n                  }}\n                >\n                  {issue.priority}\n                </span>\n                <span\n                  style={{\n                    background: '#3498db',\n                    color: '#fff',\n                    borderRadius: '50%',\n                    padding: '2px 6px',\n                    marginLeft: '6px',\n                    fontSize: '10px',\n                  }}\n                  title={issue.assignee || 'Unassigned'}\n                >\n                  {issue.assignee ? issue.assignee[0].toUpperCase() : '?'}\n                </span>\n              </div>\n            </div>\n            <button\n              onClick={() => deleteIssue(issue.id)}\n              style={{\n                marginLeft: '6px',\n                border: 'none',\n                background: 'transparent',\n                color: '#e74c3c',\n                cursor: 'pointer',\n                fontWeight: 'bold',\n              }}\n            >\n              ✕\n            </button>\n          </div>\n        )}\n      </Draggable>\n    ));\n\n  // Calculate story points per column\n  const calculatePoints = issueList =>\n    issueList.reduce((sum, i) => sum + (parseInt(i.storyPoints) || 0), 0);\n\n  return (\n    <div style={{ padding: '1rem', fontFamily: 'Arial, sans-serif' }}>\n      <h2>Project Board {projectId ? `- ${projectId}` : ''}</h2>\n\n      {/* Add Issue */}\n      <div style={{ display: 'flex', gap: '0.5rem', marginBottom: '1rem' }}>\n        <input\n          placeholder=\"Title\"\n          value={newIssue.title}\n          onChange={e => setNewIssue({ ...newIssue, title: e.target.value })}\n        />\n        <select value={newIssue.type} onChange={e => setNewIssue({ ...newIssue, type: e.target.value })}>\n          <option>Story</option>\n          <option>Task</option>\n          <option>Bug</option>\n        </select>\n        <input\n          type=\"number\"\n          min={1}\n          value={newIssue.storyPoints}\n          onChange={e => setNewIssue({ ...newIssue, storyPoints: parseInt(e.target.value) })}\n          style={{ width: '60px' }}\n        />\n        <select value={newIssue.priority} onChange={e => setNewIssue({ ...newIssue, priority: e.target.value })}>\n          <option>P1</option>\n          <option>P2</option>\n          <option>P3</option>\n        </select>\n        <select value={newIssue.epicId} onChange={e => setNewIssue({ ...newIssue, epicId: e.target.value })}>\n          <option value=\"\">No Epic</option>\n          {mockEpics.map(epic => (\n            <option key={epic.id} value={epic.id}>{epic.title}</option>\n          ))}\n        </select>\n        <input\n          placeholder=\"Sprint (optional)\"\n          value={newIssue.status.startsWith('sprint') ? newIssue.status : ''}\n          onChange={e => setNewIssue({ ...newIssue, status: e.target.value || 'backlog' })}\n        />\n        <button onClick={addIssue}>Add</button>\n      </div>\n\n      {/* Board */}\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>\n          {uniqueStatuses.map(status => (\n            <Droppable droppableId={status} key={status}>\n              {provided => (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  style={{\n                    flex: 1,\n                    minHeight: '300px',\n                    padding: '0.5rem',\n                    border: '1px solid #ddd',\n                    borderRadius: '4px',\n                    background: '#f4f5f7',\n                  }}\n                >\n                  <h3\n                    style={{\n                      textTransform: 'capitalize',\n                      cursor: status.startsWith('sprint') ? 'pointer' : 'default',\n                    }}\n                    onClick={() => status.startsWith('sprint') && setCollapsedSprints(prev => ({ ...prev, [status]: !prev[status] }))}\n                  >\n                    {status} {status.startsWith('sprint') ? (collapsedSprints[status] ? '▼' : '▲') : ''}\n                    {/* Story points total */}\n                    {status.startsWith('sprint') && ` — ${calculatePoints(columns[status])} pts`}\n                  </h3>\n\n                  {!collapsedSprints[status] &&\n                    mockEpics.map(epic => {\n                      const epicIssues = columns[status].filter(i => i.epicId === epic.id);\n                      if (!epicIssues.length) return null;\n                      return (\n                        <div key={epic.id} style={{ marginBottom: '0.5rem' }}>\n                          <strong style={{ display: 'block', marginBottom: '4px' }}>{epic.title}</strong>\n                          {renderIssues(epicIssues)}\n                        </div>\n                      );\n                    })}\n\n                  {!collapsedSprints[status] && renderIssues(columns[status].filter(i => !i.epicId))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          ))}\n        </div>\n      </DragDropContext>\n    </div>\n  );\n}\n"],"mappings":";;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAalD,SAAS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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
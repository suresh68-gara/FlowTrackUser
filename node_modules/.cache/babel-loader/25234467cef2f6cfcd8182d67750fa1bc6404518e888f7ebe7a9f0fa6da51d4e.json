{"ast":null,"code":"// /*\n//   Same mock API as before but kept compact. Uses localStorage.\n//   Data shapes include accessibility-friendly fields (labels, timestamps).\n// */\n// import { v4 as uuidv4 } from 'uuid';\n// const KEY = { USER: 'tf_user_v3', USERS:'tf_users_v3', PROJECTS:'tf_projects_v3', ISSUES:'tf_issues_v3', ASSETS:'tf_assets_v3', NOTIFS:'tf_notifs_v3' };\n\n// function ensure(){\n//   if(!localStorage.getItem(KEY.USERS)){\n//     const users = [{id:'u1',name:'Admin User',email:'admin@demo.com',role:'Admin'},{id:'u2',name:'Dev Alice',email:'alice@demo.com',role:'Developer'},{id:'u3',name:'Manager Bob',email:'bob@demo.com',role:'Manager'}];\n//     localStorage.setItem(KEY.USERS,JSON.stringify(users));\n//   }\n//   if(!localStorage.getItem(KEY.PROJECTS)){\n//     const projects=[{id:'p1',key:'ALPHA',name:'Alpha',description:'Alpha project',leads:['u3']},{id:'p2',key:'BETA',name:'Beta',description:'Beta project',leads:['u2']}];\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(projects));\n//   }\n//   if(!localStorage.getItem(KEY.ISSUES)){\n//     const issues=[{id:'i1',projectId:'p1',title:'Setup repo',status:'todo',priority:'P2',assignee:'u2',type:'Task',storyPoints:3,createdAt:Date.now()},{id:'i2',projectId:'p1',title:'Login bug',status:'inprogress',priority:'P1',assignee:'u2',type:'Bug',storyPoints:1,createdAt:Date.now()},{id:'i3',projectId:'p2',title:'OAuth',status:'done',priority:'P3',assignee:'u3',type:'Story',storyPoints:5,createdAt:Date.now()}];\n//     localStorage.setItem(KEY.ISSUES,JSON.stringify(issues));\n//   }\n//   if(!localStorage.getItem(KEY.ASSETS)){ localStorage.setItem(KEY.ASSETS,JSON.stringify([{id:'a1',name:'Dev Laptop',type:'Laptop',owner:'u2',status:'active'}])); }\n//   if(!localStorage.getItem(KEY.NOTIFS)){ localStorage.setItem(KEY.NOTIFS,JSON.stringify([{id:uuidv4(),userId:'u2',text:'Assigned i1',read:false,ts:Date.now()}])); }\n// }\n\n// export function mockLogin(email,password){ ensure(); const users=JSON.parse(localStorage.getItem(KEY.USERS)); const user=users.find(u=>u.email===email)||users[0]; localStorage.setItem(KEY.USER,JSON.stringify(user)); return Promise.resolve(user); }\n// export function logout(){ localStorage.removeItem(KEY.USER); return Promise.resolve(); }\n// export function getCurrentUser(){ const s=localStorage.getItem(KEY.USER); return s?JSON.parse(s):null; }\n\n// export function listUsers(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\n// export function addUser(u){ const arr=JSON.parse(localStorage.getItem(KEY.USERS)||'[]'); arr.push(u); localStorage.setItem(KEY.USERS,JSON.stringify(arr)); return Promise.resolve(u); }\n\n// export function listProjects(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\n// export function getProject(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x=>x.id===id)); }\n// export function addProject(p){ const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]'); arr.push(p); localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr)); return Promise.resolve(p); }\n\n// export function listIssues(projectId){ ensure(); let arr=JSON.parse(localStorage.getItem(KEY.ISSUES)); if(projectId) arr=arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\n// export function getIssue(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x=>x.id===id)); }\n// export function createIssue(data){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const id='i'+Math.floor(Math.random()*100000); const issue={...data,id,createdAt:Date.now()}; arr.push(issue); localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(issue); }\n// export function updateIssue(id,patch){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(x=>x.id===id); if(idx>=0){ arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(arr[idx]); } return Promise.reject('not found'); }\n// export function moveIssue(id,status){ return updateIssue(id,{status}); }\n\n// export function listAssets(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS))); }\n// export function addAsset(a){ const arr=JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS,JSON.stringify(arr)); return Promise.resolve(a); }\n\n// export function listNotifs(userId){ ensure(); const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId?arr.filter(n=>n.userId===userId):arr); }\n// export function markNotif(id){ const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx=arr.findIndex(n=>n.id===id); if(idx>=0){ arr[idx].read=true; localStorage.setItem(KEY.NOTIFS,JSON.stringify(arr)); } return Promise.resolve(); }\n\n// import { v4 as uuidv4 } from 'uuid';\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS:'tf_users_v3',\n//   PROJECTS:'tf_projects_v3',\n//   ISSUES:'tf_issues_v3',\n//   ASSETS:'tf_assets_v3',\n//   NOTIFS:'tf_notifs_v3'\n// };\n\n// function ensure(){\n//   if(!localStorage.getItem(KEY.USERS)){\n//     const users = [\n//       {id:'u1',name:'Admin User',email:'admin@demo.com',role:'Admin'},\n//       {id:'u2',name:'Dev Alice',email:'alice@demo.com',role:'Developer'},\n//       {id:'u3',name:'Manager Bob',email:'bob@demo.com',role:'Manager'}\n//     ];\n//     localStorage.setItem(KEY.USERS,JSON.stringify(users));\n//   }\n//   if(!localStorage.getItem(KEY.PROJECTS)){\n//     const projects=[\n//       {id:'p1',key:'ALPHA',name:'Alpha',description:'Alpha project',leads:['u3'], createdAt:Date.now(), lastUpdated:Date.now()},\n//       {id:'p2',key:'BETA',name:'Beta',description:'Beta project',leads:['u2'], createdAt:Date.now(), lastUpdated:Date.now()}\n//     ];\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(projects));\n//   }\n//   if(!localStorage.getItem(KEY.ISSUES)){\n//     const issues=[\n//       {id:'i1',projectId:'p1',title:'Setup repo',status:'todo',priority:'P2',assignee:'u2',type:'Task',storyPoints:3,createdAt:Date.now()},\n//       {id:'i2',projectId:'p1',title:'Login bug',status:'inprogress',priority:'P1',assignee:'u2',type:'Bug',storyPoints:1,createdAt:Date.now()},\n//       {id:'i3',projectId:'p2',title:'OAuth',status:'done',priority:'P3',assignee:'u3',type:'Story',storyPoints:5,createdAt:Date.now()}\n//     ];\n//     localStorage.setItem(KEY.ISSUES,JSON.stringify(issues));\n//   }\n//   if(!localStorage.getItem(KEY.ASSETS)){ localStorage.setItem(KEY.ASSETS,JSON.stringify([{id:'a1',name:'Dev Laptop',type:'Laptop',owner:'u2',status:'active'}])); }\n//   if(!localStorage.getItem(KEY.NOTIFS)){ localStorage.setItem(KEY.NOTIFS,JSON.stringify([{id:uuidv4(),userId:'u2',text:'Assigned i1',read:false,ts:Date.now()}])); }\n// }\n\n// export function mockLogin(email,password){ ensure(); const users=JSON.parse(localStorage.getItem(KEY.USERS)); const user=users.find(u=>u.email===email)||users[0]; localStorage.setItem(KEY.USER,JSON.stringify(user)); return Promise.resolve(user); }\n// export function logout(){ localStorage.removeItem(KEY.USER); return Promise.resolve(); }\n// export function getCurrentUser(){ const s=localStorage.getItem(KEY.USER); return s?JSON.parse(s):null; }\n\n// export function listUsers(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\n// export function addUser(u){ const arr=JSON.parse(localStorage.getItem(KEY.USERS)||'[]'); arr.push(u); localStorage.setItem(KEY.USERS,JSON.stringify(arr)); return Promise.resolve(u); }\n\n// export function listProjects(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\n// export function getProject(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x=>x.id===id)); }\n// export function addProject(p){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// // ✅ New: delete project\n// export function deleteProject(id){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS,JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ✅ New: update project\n// export function updateProject(id, patch){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const idx=arr.findIndex(p => p.id===id);\n//   if(idx>=0){\n//     arr[idx] = {...arr[idx], ...patch, lastUpdated: Date.now()};\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function listIssues(projectId){ ensure(); let arr=JSON.parse(localStorage.getItem(KEY.ISSUES)); if(projectId) arr=arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\n// export function getIssue(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x=>x.id===id)); }\n// export function createIssue(data){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const id='i'+Math.floor(Math.random()*100000); const issue={...data,id,createdAt:Date.now()}; arr.push(issue); localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(issue); }\n// export function updateIssue(id,patch){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(x=>x.id===id); if(idx>=0){ arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES,JSON.stringify(arr[idx])); return Promise.resolve(arr[idx]); } return Promise.reject('not found'); }\n// export function moveIssue(id,status){ return updateIssue(id,{status}); }\n\n// export function listAssets(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS))); }\n// export function addAsset(a){ const arr=JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS,JSON.stringify(arr)); return Promise.resolve(a); }\n\n// export function listNotifs(userId){ ensure(); const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId?arr.filter(n=>n.userId===userId):arr); }\n// export function markNotif(id){ const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx=arr.findIndex(n=>n.id===id); if(idx>=0){ arr[idx].read=true; localStorage.setItem(KEY.NOTIFS,JSON.stringify(arr)); } return Promise.resolve(); }\n\n// for mounika\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       { id: 'p1', key: 'ALPHA', name: 'Alpha', description: 'Alpha project', leads: ['u3'], createdAt: Date.now(), lastUpdated: Date.now() },\n//       { id: 'p2', key: 'BETA', name: 'Beta', description: 'Beta project', leads: ['u2'], createdAt: Date.now(), lastUpdated: Date.now() }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       { id: 'i1', projectId: 'p1', title: 'Setup repo', status: 'todo', priority: 'P2', assignee: 'u2', type: 'Task', storyPoints: 3, createdAt: Date.now() },\n//       { id: 'i2', projectId: 'p1', title: 'Login bug', status: 'inprogress', priority: 'P1', assignee: 'u2', type: 'Bug', storyPoints: 1, createdAt: Date.now() },\n//       { id: 'i3', projectId: 'p2', title: 'OAuth', status: 'done', priority: 'P3', assignee: 'u3', type: 'Story', storyPoints: 5, createdAt: Date.now() }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(KEY.ASSETS, JSON.stringify([{ id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }]));\n//   }\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify([{ id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }]));\n//   }\n// }\n\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = JSON.parse(localStorage.getItem(KEY.USERS));\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)));\n// }\n\n// export function addUser(u) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   arr.push(u);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const filtered = arr.filter(u => u.id !== id);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)));\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x => x.id === id));\n// }\n\n// export function addProject(p) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// export function deleteProject(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = JSON.parse(localStorage.getItem(KEY.ISSUES));\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x => x.id === id));\n// }\n\n// export function createIssue(data) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)));\n// }\n\n// export function addAsset(a) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n//   arr.push(a);\n//   localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n//   return Promise.resolve(a);\n// }\n\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n//   }\n//   return Promise.resolve();\n// }\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       {\n//         id: 'p1',\n//         key: 'ALPHA',\n//         name: 'Alpha',\n//         description: 'Alpha project',\n//         leads: ['u3'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       },\n//       {\n//         id: 'p2',\n//         key: 'BETA',\n//         name: 'Beta',\n//         description: 'Beta project',\n//         leads: ['u2'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       {\n//         id: 'i1',\n//         projectId: 'p1',\n//         title: 'Setup repo',\n//         status: 'todo',\n//         priority: 'P2',\n//         assignee: 'u2',\n//         type: 'Task',\n//         storyPoints: 3,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i2',\n//         projectId: 'p1',\n//         title: 'Login bug',\n//         status: 'inprogress',\n//         priority: 'P1',\n//         assignee: 'u2',\n//         type: 'Bug',\n//         storyPoints: 1,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i3',\n//         projectId: 'p2',\n//         title: 'OAuth',\n//         status: 'done',\n//         priority: 'P3',\n//         assignee: 'u3',\n//         type: 'Story',\n//         storyPoints: 5,\n//         createdAt: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(\n//       KEY.ASSETS,\n//       JSON.stringify([\n//         { id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }\n//       ])\n//     );\n//   }\n\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(\n//       KEY.NOTIFS,\n//       JSON.stringify([\n//         { id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }\n//       ])\n//     );\n//   }\n// }\n\n// // ---------- AUTH ----------\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = JSON.parse(localStorage.getItem(KEY.USERS)) || [];\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// // ---------- USERS ----------\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)) || []);\n// }\n\n// export function addUser(u) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   arr.push(u);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const filtered = arr.filter(u => u.id !== id);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ---------- PROJECTS ----------\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)) || []);\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(\n//     (JSON.parse(localStorage.getItem(KEY.PROJECTS)) || []).find(x => x.id === id)\n//   );\n// }\n\n// export function addProject(p) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function deleteProject(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ---------- ISSUES ----------\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = JSON.parse(localStorage.getItem(KEY.ISSUES)) || [];\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(\n//     (JSON.parse(localStorage.getItem(KEY.ISSUES)) || []).find(x => x.id === id)\n//   );\n// }\n\n// export function createIssue(data) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// // ---------- ASSETS ----------\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)) || []);\n// }\n\n// export function addAsset(a) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n//   arr.push(a);\n//   localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n//   return Promise.resolve(a);\n// }\n\n// // ---------- NOTIFS ----------\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n//   }\n//   return Promise.resolve();\n// }\n\n//today\nimport { v4 as uuidv4 } from 'uuid';\nconst KEY = {\n  USER: 'tf_user_v3',\n  USERS: 'tf_users_v3',\n  PROJECTS: 'tf_projects_v3',\n  ISSUES: 'tf_issues_v3',\n  ASSETS: 'tf_assets_v3',\n  NOTIFS: 'tf_notifs_v3'\n};\nfunction ensure() {\n  if (!localStorage.getItem(KEY.USERS)) {\n    const users = [{\n      id: 'u1',\n      name: 'Admin User',\n      email: 'admin@demo.com',\n      role: 'Admin'\n    }, {\n      id: 'u2',\n      name: 'Dev Alice',\n      email: 'alice@demo.com',\n      role: 'Developer'\n    }, {\n      id: 'u3',\n      name: 'Manager Bob',\n      email: 'bob@demo.com',\n      role: 'Manager'\n    }];\n    localStorage.setItem(KEY.USERS, JSON.stringify(users));\n  }\n  if (!localStorage.getItem(KEY.PROJECTS)) {\n    const projects = [{\n      id: 'p1',\n      key: 'ALPHA',\n      name: 'Alpha',\n      description: 'Alpha project',\n      leads: ['u3'],\n      createdAt: Date.now(),\n      lastUpdated: Date.now()\n    }, {\n      id: 'p2',\n      key: 'BETA',\n      name: 'Beta',\n      description: 'Beta project',\n      leads: ['u2'],\n      createdAt: Date.now(),\n      lastUpdated: Date.now()\n    }];\n    localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n  }\n  if (!localStorage.getItem(KEY.ISSUES)) {\n    const issues = [{\n      id: 'i1',\n      projectId: 'p1',\n      title: 'Setup repo',\n      status: 'todo',\n      priority: 'P2',\n      assignee: 'u2',\n      type: 'Task',\n      storyPoints: 3,\n      createdAt: Date.now()\n    }, {\n      id: 'i2',\n      projectId: 'p1',\n      title: 'Login bug',\n      status: 'inprogress',\n      priority: 'P1',\n      assignee: 'u2',\n      type: 'Bug',\n      storyPoints: 1,\n      createdAt: Date.now()\n    }, {\n      id: 'i3',\n      projectId: 'p2',\n      title: 'OAuth',\n      status: 'done',\n      priority: 'P3',\n      assignee: 'u3',\n      type: 'Story',\n      storyPoints: 5,\n      createdAt: Date.now()\n    }];\n    localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n  }\n  if (!localStorage.getItem(KEY.ASSETS)) {\n    localStorage.setItem(KEY.ASSETS, JSON.stringify([{\n      id: 'a1',\n      name: 'Dev Laptop',\n      type: 'Laptop',\n      owner: 'u2',\n      status: 'active'\n    }]));\n  }\n  if (!localStorage.getItem(KEY.NOTIFS)) {\n    localStorage.setItem(KEY.NOTIFS, JSON.stringify([{\n      id: uuidv4(),\n      userId: 'u2',\n      text: 'Assigned i1',\n      read: false,\n      ts: Date.now()\n    }]));\n  }\n}\n\n// ---------- HELPERS ----------\nfunction safeParse(key) {\n  try {\n    const raw = localStorage.getItem(key);\n    const parsed = raw ? JSON.parse(raw) : [];\n    return Array.isArray(parsed) ? parsed : [];\n  } catch {\n    return [];\n  }\n}\nfunction save(key, arr) {\n  localStorage.setItem(key, JSON.stringify(arr));\n}\n\n// ---------- AUTH ----------\nexport function mockLogin(email, password) {\n  ensure();\n  const users = safeParse(KEY.USERS);\n  const user = users.find(u => u.email === email) || users[0];\n  localStorage.setItem(KEY.USER, JSON.stringify(user));\n  return Promise.resolve(user);\n}\nexport function logout() {\n  localStorage.removeItem(KEY.USER);\n  return Promise.resolve();\n}\nexport function getCurrentUser() {\n  const s = localStorage.getItem(KEY.USER);\n  return s ? JSON.parse(s) : null;\n}\n\n// ---------- USERS ----------\nexport function listUsers() {\n  ensure();\n  return Promise.resolve(safeParse(KEY.USERS));\n}\nexport function addUser(u) {\n  const arr = safeParse(KEY.USERS);\n  arr.push(u);\n  save(KEY.USERS, arr);\n  return Promise.resolve(u);\n}\nexport function updateUser(id, patch) {\n  const arr = safeParse(KEY.USERS);\n  const idx = arr.findIndex(u => u.id === id);\n  if (idx >= 0) {\n    arr[idx] = {\n      ...arr[idx],\n      ...patch\n    };\n    save(KEY.USERS, arr);\n    return Promise.resolve(arr[idx]);\n  }\n  return Promise.reject('User not found');\n}\nexport function deleteUser(id) {\n  const arr = safeParse(KEY.USERS).filter(u => u.id !== id);\n  save(KEY.USERS, arr);\n  return Promise.resolve(true);\n}\n\n// ---------- PROJECTS ----------\nexport function listProjects() {\n  ensure();\n  return Promise.resolve(safeParse(KEY.PROJECTS));\n}\nexport function getProject(id) {\n  ensure();\n  return Promise.resolve(safeParse(KEY.PROJECTS).find(x => x.id === id));\n}\nexport function addProject(p) {\n  const arr = safeParse(KEY.PROJECTS);\n  const now = Date.now();\n  p.createdAt = now;\n  p.lastUpdated = now;\n  arr.push(p);\n  save(KEY.PROJECTS, arr);\n  return Promise.resolve(p);\n}\nexport function updateProject(id, patch) {\n  const arr = safeParse(KEY.PROJECTS);\n  const idx = arr.findIndex(p => p.id === id);\n  if (idx >= 0) {\n    arr[idx] = {\n      ...arr[idx],\n      ...patch,\n      lastUpdated: Date.now()\n    };\n    save(KEY.PROJECTS, arr);\n    return Promise.resolve(arr[idx]);\n  }\n  return Promise.reject('Project not found');\n}\nexport function deleteProject(id) {\n  const arr = safeParse(KEY.PROJECTS).filter(p => p.id !== id);\n  save(KEY.PROJECTS, arr);\n  return Promise.resolve(true);\n}\n\n// ---------- ISSUES ----------\nexport function listIssues(projectId) {\n  ensure();\n  let arr = safeParse(KEY.ISSUES);\n  if (projectId) arr = arr.filter(i => i.projectId === projectId);\n  return Promise.resolve(arr);\n}\nexport function getIssue(id) {\n  ensure();\n  return Promise.resolve(safeParse(KEY.ISSUES).find(x => x.id === id));\n}\nexport function createIssue(data) {\n  const arr = safeParse(KEY.ISSUES);\n  const id = 'i' + Math.floor(Math.random() * 100000);\n  const issue = {\n    ...data,\n    id,\n    createdAt: Date.now()\n  };\n  arr.push(issue);\n  save(KEY.ISSUES, arr);\n  return Promise.resolve(issue);\n}\nexport function updateIssue(id, patch) {\n  const arr = safeParse(KEY.ISSUES);\n  const idx = arr.findIndex(x => x.id === id);\n  if (idx >= 0) {\n    arr[idx] = {\n      ...arr[idx],\n      ...patch\n    };\n    save(KEY.ISSUES, arr);\n    return Promise.resolve(arr[idx]);\n  }\n  return Promise.reject('Issue not found');\n}\nexport function moveIssue(id, status) {\n  return updateIssue(id, {\n    status\n  });\n}\n\n// ---------- ASSETS ----------\nexport function listAssets() {\n  ensure();\n  return Promise.resolve(safeParse(KEY.ASSETS));\n}\nexport function addAsset(a) {\n  const arr = safeParse(KEY.ASSETS);\n  arr.push(a);\n  save(KEY.ASSETS, arr);\n  return Promise.resolve(a);\n}\n\n// ---------- NOTIFS ----------\nexport function listNotifs(userId) {\n  ensure();\n  const arr = safeParse(KEY.NOTIFS);\n  return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n}\nexport function markNotif(id) {\n  const arr = safeParse(KEY.NOTIFS);\n  const idx = arr.findIndex(n => n.id === id);\n  if (idx >= 0) {\n    arr[idx].read = true;\n    save(KEY.NOTIFS, arr);\n  }\n  return Promise.resolve();\n}","map":{"version":3,"names":["v4","uuidv4","KEY","USER","USERS","PROJECTS","ISSUES","ASSETS","NOTIFS","ensure","localStorage","getItem","users","id","name","email","role","setItem","JSON","stringify","projects","key","description","leads","createdAt","Date","now","lastUpdated","issues","projectId","title","status","priority","assignee","type","storyPoints","owner","userId","text","read","ts","safeParse","raw","parsed","parse","Array","isArray","save","arr","mockLogin","password","user","find","u","Promise","resolve","logout","removeItem","getCurrentUser","s","listUsers","addUser","push","updateUser","patch","idx","findIndex","reject","deleteUser","filter","listProjects","getProject","x","addProject","p","updateProject","deleteProject","listIssues","i","getIssue","createIssue","data","Math","floor","random","issue","updateIssue","moveIssue","listAssets","addAsset","a","listNotifs","n","markNotif"],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/services/mockApi.js"],"sourcesContent":["\n// /*\n//   Same mock API as before but kept compact. Uses localStorage.\n//   Data shapes include accessibility-friendly fields (labels, timestamps).\n// */\n// import { v4 as uuidv4 } from 'uuid';\n// const KEY = { USER: 'tf_user_v3', USERS:'tf_users_v3', PROJECTS:'tf_projects_v3', ISSUES:'tf_issues_v3', ASSETS:'tf_assets_v3', NOTIFS:'tf_notifs_v3' };\n\n// function ensure(){\n//   if(!localStorage.getItem(KEY.USERS)){\n//     const users = [{id:'u1',name:'Admin User',email:'admin@demo.com',role:'Admin'},{id:'u2',name:'Dev Alice',email:'alice@demo.com',role:'Developer'},{id:'u3',name:'Manager Bob',email:'bob@demo.com',role:'Manager'}];\n//     localStorage.setItem(KEY.USERS,JSON.stringify(users));\n//   }\n//   if(!localStorage.getItem(KEY.PROJECTS)){\n//     const projects=[{id:'p1',key:'ALPHA',name:'Alpha',description:'Alpha project',leads:['u3']},{id:'p2',key:'BETA',name:'Beta',description:'Beta project',leads:['u2']}];\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(projects));\n//   }\n//   if(!localStorage.getItem(KEY.ISSUES)){\n//     const issues=[{id:'i1',projectId:'p1',title:'Setup repo',status:'todo',priority:'P2',assignee:'u2',type:'Task',storyPoints:3,createdAt:Date.now()},{id:'i2',projectId:'p1',title:'Login bug',status:'inprogress',priority:'P1',assignee:'u2',type:'Bug',storyPoints:1,createdAt:Date.now()},{id:'i3',projectId:'p2',title:'OAuth',status:'done',priority:'P3',assignee:'u3',type:'Story',storyPoints:5,createdAt:Date.now()}];\n//     localStorage.setItem(KEY.ISSUES,JSON.stringify(issues));\n//   }\n//   if(!localStorage.getItem(KEY.ASSETS)){ localStorage.setItem(KEY.ASSETS,JSON.stringify([{id:'a1',name:'Dev Laptop',type:'Laptop',owner:'u2',status:'active'}])); }\n//   if(!localStorage.getItem(KEY.NOTIFS)){ localStorage.setItem(KEY.NOTIFS,JSON.stringify([{id:uuidv4(),userId:'u2',text:'Assigned i1',read:false,ts:Date.now()}])); }\n// }\n\n// export function mockLogin(email,password){ ensure(); const users=JSON.parse(localStorage.getItem(KEY.USERS)); const user=users.find(u=>u.email===email)||users[0]; localStorage.setItem(KEY.USER,JSON.stringify(user)); return Promise.resolve(user); }\n// export function logout(){ localStorage.removeItem(KEY.USER); return Promise.resolve(); }\n// export function getCurrentUser(){ const s=localStorage.getItem(KEY.USER); return s?JSON.parse(s):null; }\n\n// export function listUsers(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\n// export function addUser(u){ const arr=JSON.parse(localStorage.getItem(KEY.USERS)||'[]'); arr.push(u); localStorage.setItem(KEY.USERS,JSON.stringify(arr)); return Promise.resolve(u); }\n\n// export function listProjects(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\n// export function getProject(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x=>x.id===id)); }\n// export function addProject(p){ const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]'); arr.push(p); localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr)); return Promise.resolve(p); }\n\n// export function listIssues(projectId){ ensure(); let arr=JSON.parse(localStorage.getItem(KEY.ISSUES)); if(projectId) arr=arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\n// export function getIssue(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x=>x.id===id)); }\n// export function createIssue(data){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const id='i'+Math.floor(Math.random()*100000); const issue={...data,id,createdAt:Date.now()}; arr.push(issue); localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(issue); }\n// export function updateIssue(id,patch){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(x=>x.id===id); if(idx>=0){ arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(arr[idx]); } return Promise.reject('not found'); }\n// export function moveIssue(id,status){ return updateIssue(id,{status}); }\n\n// export function listAssets(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS))); }\n// export function addAsset(a){ const arr=JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS,JSON.stringify(arr)); return Promise.resolve(a); }\n\n// export function listNotifs(userId){ ensure(); const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId?arr.filter(n=>n.userId===userId):arr); }\n// export function markNotif(id){ const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx=arr.findIndex(n=>n.id===id); if(idx>=0){ arr[idx].read=true; localStorage.setItem(KEY.NOTIFS,JSON.stringify(arr)); } return Promise.resolve(); }\n\n\n\n\n\n\n\n\n\n// import { v4 as uuidv4 } from 'uuid';\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS:'tf_users_v3',\n//   PROJECTS:'tf_projects_v3',\n//   ISSUES:'tf_issues_v3',\n//   ASSETS:'tf_assets_v3',\n//   NOTIFS:'tf_notifs_v3'\n// };\n\n// function ensure(){\n//   if(!localStorage.getItem(KEY.USERS)){\n//     const users = [\n//       {id:'u1',name:'Admin User',email:'admin@demo.com',role:'Admin'},\n//       {id:'u2',name:'Dev Alice',email:'alice@demo.com',role:'Developer'},\n//       {id:'u3',name:'Manager Bob',email:'bob@demo.com',role:'Manager'}\n//     ];\n//     localStorage.setItem(KEY.USERS,JSON.stringify(users));\n//   }\n//   if(!localStorage.getItem(KEY.PROJECTS)){\n//     const projects=[\n//       {id:'p1',key:'ALPHA',name:'Alpha',description:'Alpha project',leads:['u3'], createdAt:Date.now(), lastUpdated:Date.now()},\n//       {id:'p2',key:'BETA',name:'Beta',description:'Beta project',leads:['u2'], createdAt:Date.now(), lastUpdated:Date.now()}\n//     ];\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(projects));\n//   }\n//   if(!localStorage.getItem(KEY.ISSUES)){\n//     const issues=[\n//       {id:'i1',projectId:'p1',title:'Setup repo',status:'todo',priority:'P2',assignee:'u2',type:'Task',storyPoints:3,createdAt:Date.now()},\n//       {id:'i2',projectId:'p1',title:'Login bug',status:'inprogress',priority:'P1',assignee:'u2',type:'Bug',storyPoints:1,createdAt:Date.now()},\n//       {id:'i3',projectId:'p2',title:'OAuth',status:'done',priority:'P3',assignee:'u3',type:'Story',storyPoints:5,createdAt:Date.now()}\n//     ];\n//     localStorage.setItem(KEY.ISSUES,JSON.stringify(issues));\n//   }\n//   if(!localStorage.getItem(KEY.ASSETS)){ localStorage.setItem(KEY.ASSETS,JSON.stringify([{id:'a1',name:'Dev Laptop',type:'Laptop',owner:'u2',status:'active'}])); }\n//   if(!localStorage.getItem(KEY.NOTIFS)){ localStorage.setItem(KEY.NOTIFS,JSON.stringify([{id:uuidv4(),userId:'u2',text:'Assigned i1',read:false,ts:Date.now()}])); }\n// }\n\n// export function mockLogin(email,password){ ensure(); const users=JSON.parse(localStorage.getItem(KEY.USERS)); const user=users.find(u=>u.email===email)||users[0]; localStorage.setItem(KEY.USER,JSON.stringify(user)); return Promise.resolve(user); }\n// export function logout(){ localStorage.removeItem(KEY.USER); return Promise.resolve(); }\n// export function getCurrentUser(){ const s=localStorage.getItem(KEY.USER); return s?JSON.parse(s):null; }\n\n// export function listUsers(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\n// export function addUser(u){ const arr=JSON.parse(localStorage.getItem(KEY.USERS)||'[]'); arr.push(u); localStorage.setItem(KEY.USERS,JSON.stringify(arr)); return Promise.resolve(u); }\n\n// export function listProjects(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\n// export function getProject(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x=>x.id===id)); }\n// export function addProject(p){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// // ✅ New: delete project\n// export function deleteProject(id){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS,JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ✅ New: update project\n// export function updateProject(id, patch){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const idx=arr.findIndex(p => p.id===id);\n//   if(idx>=0){\n//     arr[idx] = {...arr[idx], ...patch, lastUpdated: Date.now()};\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function listIssues(projectId){ ensure(); let arr=JSON.parse(localStorage.getItem(KEY.ISSUES)); if(projectId) arr=arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\n// export function getIssue(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x=>x.id===id)); }\n// export function createIssue(data){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const id='i'+Math.floor(Math.random()*100000); const issue={...data,id,createdAt:Date.now()}; arr.push(issue); localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(issue); }\n// export function updateIssue(id,patch){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(x=>x.id===id); if(idx>=0){ arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES,JSON.stringify(arr[idx])); return Promise.resolve(arr[idx]); } return Promise.reject('not found'); }\n// export function moveIssue(id,status){ return updateIssue(id,{status}); }\n\n// export function listAssets(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS))); }\n// export function addAsset(a){ const arr=JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS,JSON.stringify(arr)); return Promise.resolve(a); }\n\n// export function listNotifs(userId){ ensure(); const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId?arr.filter(n=>n.userId===userId):arr); }\n// export function markNotif(id){ const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx=arr.findIndex(n=>n.id===id); if(idx>=0){ arr[idx].read=true; localStorage.setItem(KEY.NOTIFS,JSON.stringify(arr)); } return Promise.resolve(); }\n\n\n\n\n\n\n\n\n\n\n\n\n// for mounika\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       { id: 'p1', key: 'ALPHA', name: 'Alpha', description: 'Alpha project', leads: ['u3'], createdAt: Date.now(), lastUpdated: Date.now() },\n//       { id: 'p2', key: 'BETA', name: 'Beta', description: 'Beta project', leads: ['u2'], createdAt: Date.now(), lastUpdated: Date.now() }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       { id: 'i1', projectId: 'p1', title: 'Setup repo', status: 'todo', priority: 'P2', assignee: 'u2', type: 'Task', storyPoints: 3, createdAt: Date.now() },\n//       { id: 'i2', projectId: 'p1', title: 'Login bug', status: 'inprogress', priority: 'P1', assignee: 'u2', type: 'Bug', storyPoints: 1, createdAt: Date.now() },\n//       { id: 'i3', projectId: 'p2', title: 'OAuth', status: 'done', priority: 'P3', assignee: 'u3', type: 'Story', storyPoints: 5, createdAt: Date.now() }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(KEY.ASSETS, JSON.stringify([{ id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }]));\n//   }\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify([{ id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }]));\n//   }\n// }\n\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = JSON.parse(localStorage.getItem(KEY.USERS));\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)));\n// }\n\n// export function addUser(u) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   arr.push(u);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const filtered = arr.filter(u => u.id !== id);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)));\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x => x.id === id));\n// }\n\n// export function addProject(p) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// export function deleteProject(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = JSON.parse(localStorage.getItem(KEY.ISSUES));\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x => x.id === id));\n// }\n\n// export function createIssue(data) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)));\n// }\n\n// export function addAsset(a) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n//   arr.push(a);\n//   localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n//   return Promise.resolve(a);\n// }\n\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n//   }\n//   return Promise.resolve();\n// }\n\n\n\n\n\n\n\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       {\n//         id: 'p1',\n//         key: 'ALPHA',\n//         name: 'Alpha',\n//         description: 'Alpha project',\n//         leads: ['u3'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       },\n//       {\n//         id: 'p2',\n//         key: 'BETA',\n//         name: 'Beta',\n//         description: 'Beta project',\n//         leads: ['u2'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       {\n//         id: 'i1',\n//         projectId: 'p1',\n//         title: 'Setup repo',\n//         status: 'todo',\n//         priority: 'P2',\n//         assignee: 'u2',\n//         type: 'Task',\n//         storyPoints: 3,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i2',\n//         projectId: 'p1',\n//         title: 'Login bug',\n//         status: 'inprogress',\n//         priority: 'P1',\n//         assignee: 'u2',\n//         type: 'Bug',\n//         storyPoints: 1,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i3',\n//         projectId: 'p2',\n//         title: 'OAuth',\n//         status: 'done',\n//         priority: 'P3',\n//         assignee: 'u3',\n//         type: 'Story',\n//         storyPoints: 5,\n//         createdAt: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(\n//       KEY.ASSETS,\n//       JSON.stringify([\n//         { id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }\n//       ])\n//     );\n//   }\n\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(\n//       KEY.NOTIFS,\n//       JSON.stringify([\n//         { id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }\n//       ])\n//     );\n//   }\n// }\n\n// // ---------- AUTH ----------\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = JSON.parse(localStorage.getItem(KEY.USERS)) || [];\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// // ---------- USERS ----------\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)) || []);\n// }\n\n// export function addUser(u) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   arr.push(u);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const filtered = arr.filter(u => u.id !== id);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ---------- PROJECTS ----------\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)) || []);\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(\n//     (JSON.parse(localStorage.getItem(KEY.PROJECTS)) || []).find(x => x.id === id)\n//   );\n// }\n\n// export function addProject(p) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function deleteProject(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ---------- ISSUES ----------\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = JSON.parse(localStorage.getItem(KEY.ISSUES)) || [];\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(\n//     (JSON.parse(localStorage.getItem(KEY.ISSUES)) || []).find(x => x.id === id)\n//   );\n// }\n\n// export function createIssue(data) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// // ---------- ASSETS ----------\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)) || []);\n// }\n\n// export function addAsset(a) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n//   arr.push(a);\n//   localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n//   return Promise.resolve(a);\n// }\n\n// // ---------- NOTIFS ----------\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n//   }\n//   return Promise.resolve();\n// }\n\n\n\n\n\n\n\n//today\nimport { v4 as uuidv4 } from 'uuid';\n\nconst KEY = {\n  USER: 'tf_user_v3',\n  USERS: 'tf_users_v3',\n  PROJECTS: 'tf_projects_v3',\n  ISSUES: 'tf_issues_v3',\n  ASSETS: 'tf_assets_v3',\n  NOTIFS: 'tf_notifs_v3'\n};\n\nfunction ensure() {\n  if (!localStorage.getItem(KEY.USERS)) {\n    const users = [\n      { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n      { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n      { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n    ];\n    localStorage.setItem(KEY.USERS, JSON.stringify(users));\n  }\n\n  if (!localStorage.getItem(KEY.PROJECTS)) {\n    const projects = [\n      {\n        id: 'p1',\n        key: 'ALPHA',\n        name: 'Alpha',\n        description: 'Alpha project',\n        leads: ['u3'],\n        createdAt: Date.now(),\n        lastUpdated: Date.now()\n      },\n      {\n        id: 'p2',\n        key: 'BETA',\n        name: 'Beta',\n        description: 'Beta project',\n        leads: ['u2'],\n        createdAt: Date.now(),\n        lastUpdated: Date.now()\n      }\n    ];\n    localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n  }\n\n  if (!localStorage.getItem(KEY.ISSUES)) {\n    const issues = [\n      {\n        id: 'i1',\n        projectId: 'p1',\n        title: 'Setup repo',\n        status: 'todo',\n        priority: 'P2',\n        assignee: 'u2',\n        type: 'Task',\n        storyPoints: 3,\n        createdAt: Date.now()\n      },\n      {\n        id: 'i2',\n        projectId: 'p1',\n        title: 'Login bug',\n        status: 'inprogress',\n        priority: 'P1',\n        assignee: 'u2',\n        type: 'Bug',\n        storyPoints: 1,\n        createdAt: Date.now()\n      },\n      {\n        id: 'i3',\n        projectId: 'p2',\n        title: 'OAuth',\n        status: 'done',\n        priority: 'P3',\n        assignee: 'u3',\n        type: 'Story',\n        storyPoints: 5,\n        createdAt: Date.now()\n      }\n    ];\n    localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n  }\n\n  if (!localStorage.getItem(KEY.ASSETS)) {\n    localStorage.setItem(\n      KEY.ASSETS,\n      JSON.stringify([\n        { id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }\n      ])\n    );\n  }\n\n  if (!localStorage.getItem(KEY.NOTIFS)) {\n    localStorage.setItem(\n      KEY.NOTIFS,\n      JSON.stringify([\n        { id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }\n      ])\n    );\n  }\n}\n\n// ---------- HELPERS ----------\nfunction safeParse(key) {\n  try {\n    const raw = localStorage.getItem(key);\n    const parsed = raw ? JSON.parse(raw) : [];\n    return Array.isArray(parsed) ? parsed : [];\n  } catch {\n    return [];\n  }\n}\n\nfunction save(key, arr) {\n  localStorage.setItem(key, JSON.stringify(arr));\n}\n\n// ---------- AUTH ----------\nexport function mockLogin(email, password) {\n  ensure();\n  const users = safeParse(KEY.USERS);\n  const user = users.find(u => u.email === email) || users[0];\n  localStorage.setItem(KEY.USER, JSON.stringify(user));\n  return Promise.resolve(user);\n}\n\nexport function logout() {\n  localStorage.removeItem(KEY.USER);\n  return Promise.resolve();\n}\n\nexport function getCurrentUser() {\n  const s = localStorage.getItem(KEY.USER);\n  return s ? JSON.parse(s) : null;\n}\n\n// ---------- USERS ----------\nexport function listUsers() {\n  ensure();\n  return Promise.resolve(safeParse(KEY.USERS));\n}\n\nexport function addUser(u) {\n  const arr = safeParse(KEY.USERS);\n  arr.push(u);\n  save(KEY.USERS, arr);\n  return Promise.resolve(u);\n}\n\nexport function updateUser(id, patch) {\n  const arr = safeParse(KEY.USERS);\n  const idx = arr.findIndex(u => u.id === id);\n  if (idx >= 0) {\n    arr[idx] = { ...arr[idx], ...patch };\n    save(KEY.USERS, arr);\n    return Promise.resolve(arr[idx]);\n  }\n  return Promise.reject('User not found');\n}\n\nexport function deleteUser(id) {\n  const arr = safeParse(KEY.USERS).filter(u => u.id !== id);\n  save(KEY.USERS, arr);\n  return Promise.resolve(true);\n}\n\n// ---------- PROJECTS ----------\nexport function listProjects() {\n  ensure();\n  return Promise.resolve(safeParse(KEY.PROJECTS));\n}\n\nexport function getProject(id) {\n  ensure();\n  return Promise.resolve(safeParse(KEY.PROJECTS).find(x => x.id === id));\n}\n\nexport function addProject(p) {\n  const arr = safeParse(KEY.PROJECTS);\n  const now = Date.now();\n  p.createdAt = now;\n  p.lastUpdated = now;\n  arr.push(p);\n  save(KEY.PROJECTS, arr);\n  return Promise.resolve(p);\n}\n\nexport function updateProject(id, patch) {\n  const arr = safeParse(KEY.PROJECTS);\n  const idx = arr.findIndex(p => p.id === id);\n  if (idx >= 0) {\n    arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n    save(KEY.PROJECTS, arr);\n    return Promise.resolve(arr[idx]);\n  }\n  return Promise.reject('Project not found');\n}\n\nexport function deleteProject(id) {\n  const arr = safeParse(KEY.PROJECTS).filter(p => p.id !== id);\n  save(KEY.PROJECTS, arr);\n  return Promise.resolve(true);\n}\n\n// ---------- ISSUES ----------\nexport function listIssues(projectId) {\n  ensure();\n  let arr = safeParse(KEY.ISSUES);\n  if (projectId) arr = arr.filter(i => i.projectId === projectId);\n  return Promise.resolve(arr);\n}\n\nexport function getIssue(id) {\n  ensure();\n  return Promise.resolve(safeParse(KEY.ISSUES).find(x => x.id === id));\n}\n\nexport function createIssue(data) {\n  const arr = safeParse(KEY.ISSUES);\n  const id = 'i' + Math.floor(Math.random() * 100000);\n  const issue = { ...data, id, createdAt: Date.now() };\n  arr.push(issue);\n  save(KEY.ISSUES, arr);\n  return Promise.resolve(issue);\n}\n\nexport function updateIssue(id, patch) {\n  const arr = safeParse(KEY.ISSUES);\n  const idx = arr.findIndex(x => x.id === id);\n  if (idx >= 0) {\n    arr[idx] = { ...arr[idx], ...patch };\n    save(KEY.ISSUES, arr);\n    return Promise.resolve(arr[idx]);\n  }\n  return Promise.reject('Issue not found');\n}\n\nexport function moveIssue(id, status) {\n  return updateIssue(id, { status });\n}\n\n// ---------- ASSETS ----------\nexport function listAssets() {\n  ensure();\n  return Promise.resolve(safeParse(KEY.ASSETS));\n}\n\nexport function addAsset(a) {\n  const arr = safeParse(KEY.ASSETS);\n  arr.push(a);\n  save(KEY.ASSETS, arr);\n  return Promise.resolve(a);\n}\n\n// ---------- NOTIFS ----------\nexport function listNotifs(userId) {\n  ensure();\n  const arr = safeParse(KEY.NOTIFS);\n  return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n}\n\nexport function markNotif(id) {\n  const arr = safeParse(KEY.NOTIFS);\n  const idx = arr.findIndex(n => n.id === id);\n  if (idx >= 0) {\n    arr[idx].read = true;\n    save(KEY.NOTIFS, arr);\n  }\n  return Promise.resolve();\n}\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAanC,MAAMC,GAAG,GAAG;EACVC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE,aAAa;EACpBC,QAAQ,EAAE,gBAAgB;EAC1BC,MAAM,EAAE,cAAc;EACtBC,MAAM,EAAE,cAAc;EACtBC,MAAM,EAAE;AACV,CAAC;AAED,SAASC,MAAMA,CAAA,EAAG;EAChB,IAAI,CAACC,YAAY,CAACC,OAAO,CAACT,GAAG,CAACE,KAAK,CAAC,EAAE;IACpC,MAAMQ,KAAK,GAAG,CACZ;MAAEC,EAAE,EAAE,IAAI;MAAEC,IAAI,EAAE,YAAY;MAAEC,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE;IAAQ,CAAC,EACxE;MAAEH,EAAE,EAAE,IAAI;MAAEC,IAAI,EAAE,WAAW;MAAEC,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE;IAAY,CAAC,EAC3E;MAAEH,EAAE,EAAE,IAAI;MAAEC,IAAI,EAAE,aAAa;MAAEC,KAAK,EAAE,cAAc;MAAEC,IAAI,EAAE;IAAU,CAAC,CAC1E;IACDN,YAAY,CAACO,OAAO,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
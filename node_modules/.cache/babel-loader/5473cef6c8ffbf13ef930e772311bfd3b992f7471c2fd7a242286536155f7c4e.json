{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { listAssets, addAsset } from \"../../services/mockApi\";\n// import { v4 as uuidv4 } from \"uuid\";\n\n// export default function AssetsBoard() {\n//   const [assets, setAssets] = useState([]);\n//   const [form, setForm] = useState({ name: \"\", type: \"Laptop\", owner: \"\" });\n//   const [editingId, setEditingId] = useState(null);\n//   const [editFields, setEditFields] = useState({});\n//   const [hoveredId, setHoveredId] = useState(null);\n\n//   useEffect(() => {\n//     listAssets().then(setAssets);\n//   }, []);\n\n//   // Add asset handler for Add Form\n//   const add = async () => {\n//     const assetName = form.name;\n//     const assetType = form.type || \"Laptop\";\n//     const assetOwner = form.owner || \"\";\n//     if (!assetName?.trim()) return;\n\n//     const newAsset = {\n//       id: uuidv4(),\n//       name: assetName,\n//       type: assetType,\n//       owner: assetOwner,\n//       // Removed status field as per requirement\n//     };\n//     await addAsset(newAsset);\n//     setAssets(await listAssets());\n//     setForm({ name: \"\", type: \"Laptop\", owner: \"\" });\n//   };\n\n//   // Edit asset inline\n//   const startEditing = asset => {\n//     setEditingId(asset.id);\n//     setEditFields({ ...asset });\n//   };\n//   const saveEdit = async id => {\n//     setAssets(assets.map(a => (a.id === id ? { ...a, ...editFields } : a)));\n//     setEditingId(null);\n//   };\n//   const cancelEdit = () => setEditingId(null);\n\n//   // Delete asset handler\n//   const deleteAsset = async id => {\n//     setAssets(assets.filter(a => a.id !== id));\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         padding: \"2rem\",\n//         fontFamily: \"Arial, sans-serif\",\n//         background: \"#F4F5F7\",\n//         minHeight: \"100vh\",\n//       }}\n//     >\n//       {/* Add Asset Top Form */}\n//       <div\n//         style={{\n//           marginBottom: \"2rem\",\n//           background: \"#fff\",\n//           padding: \"1.5rem\",\n//           borderRadius: \"8px\",\n//           boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\n//         }}\n//       >\n//         <h2 style={{ marginBottom: \"1rem\", fontSize: \"1.5rem\" }}>\n//           Add User Asset\n//         </h2>\n//         <div style={{ display: \"flex\", gap: \"1rem\", flexWrap: \"wrap\" }}>\n//           <input\n//             placeholder=\"Asset Name\"\n//             value={form.name}\n//             onChange={e => setForm(f => ({ ...f, name: e.target.value }))}\n//             style={{\n//               flex: 1,\n//               padding: \"0.5rem\",\n//               borderRadius: \"4px\",\n//               border: \"1px solid #ccc\",\n//             }}\n//           />\n//           <input\n//             placeholder=\"Type\"\n//             value={form.type}\n//             onChange={e => setForm(f => ({ ...f, type: e.target.value }))}\n//             style={{\n//               flex: 1,\n//               padding: \"0.5rem\",\n//               borderRadius: \"4px\",\n//               border: \"1px solid #ccc\",\n//             }}\n//           />\n//           <input\n//             placeholder=\"Owner\"\n//             value={form.owner}\n//             onChange={e => setForm(f => ({ ...f, owner: e.target.value }))}\n//             style={{\n//               flex: 1,\n//               padding: \"0.5rem\",\n//               borderRadius: \"4px\",\n//               border: \"1px solid #ccc\",\n//             }}\n//           />\n//           <button\n//             onClick={add}\n//             style={{\n//               padding: \"0.5rem 1rem\",\n//               background: \"#0052CC\",\n//               color: \"#fff\",\n//               border: \"none\",\n//               borderRadius: \"4px\",\n//               cursor: \"pointer\",\n//             }}\n//           >\n//             Add\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* User Asset List */}\n//       <div\n//         style={{\n//           background: \"#EBECF0\",\n//           padding: \"1rem\",\n//           borderRadius: \"8px\",\n//           minHeight: \"300px\",\n//         }}\n//       >\n//         <h3 style={{ color: \"#0052CC\" }}>User Assets</h3>\n//         {assets.length === 0 && (\n//           <div style={{ color: \"#999\", marginTop: \"2rem\" }}>\n//             No assets found for the user.\n//           </div>\n//         )}\n\n//         {assets.map(a => (\n//           <div\n//             key={a.id}\n//             onMouseEnter={() => setHoveredId(a.id)}\n//             onMouseLeave={() => setHoveredId(null)}\n//             style={{\n//               padding: \"0.75rem 1rem\",\n//               marginBottom: \"0.5rem\",\n//               borderRadius: \"6px\",\n//               background: \"#fff\",\n//               position: \"relative\",\n//               boxShadow: \"0 2px 8px rgba(0,0,0,0.06)\",\n//             }}\n//           >\n//             {editingId === a.id ? (\n//               <div\n//                 style={{\n//                   display: \"flex\",\n//                   flexDirection: \"column\",\n//                   gap: \"0.5rem\",\n//                 }}\n//               >\n//                 <input\n//                   value={editFields.name}\n//                   onChange={e =>\n//                     setEditFields(f => ({\n//                       ...f,\n//                       name: e.target.value,\n//                     }))\n//                   }\n//                 />\n//                 <input\n//                   value={editFields.type}\n//                   onChange={e =>\n//                     setEditFields(f => ({\n//                       ...f,\n//                       type: e.target.value,\n//                     }))\n//                   }\n//                 />\n//                 <input\n//                   value={editFields.owner}\n//                   onChange={e =>\n//                     setEditFields(f => ({\n//                       ...f,\n//                       owner: e.target.value,\n//                     }))\n//                   }\n//                 />\n//                 <div style={{ display: \"flex\", gap: \"0.5rem\" }}>\n//                   <button\n//                     onClick={() => saveEdit(a.id)}\n//                     style={{\n//                       background: \"#36B37E\",\n//                       color: \"#fff\",\n//                       border: \"none\",\n//                       borderRadius: \"4px\",\n//                       padding: \"0.25rem 0.5rem\",\n//                     }}\n//                   >\n//                     Save\n//                   </button>\n//                   <button\n//                     onClick={cancelEdit}\n//                     style={{\n//                       background: \"#DE350B\",\n//                       color: \"#fff\",\n//                       border: \"none\",\n//                       borderRadius: \"4px\",\n//                       padding: \"0.25rem 0.5rem\",\n//                     }}\n//                   >\n//                     Cancel\n//                   </button>\n//                 </div>\n//               </div>\n//             ) : (\n//               <div onClick={() => startEditing(a)} style={{ cursor: \"pointer\" }}>\n//                 <div style={{ fontWeight: \"bold\" }}>{a.name}</div>\n//                 <div style={{ fontSize: \"0.85rem\", color: \"#555\" }}>\n//                   {a.type} | {a.owner || \"-\"}\n//                 </div>\n//               </div>\n//             )}\n\n//             {/* Hover Toolbar */}\n//             {hoveredId === a.id && editingId !== a.id && (\n//               <div\n//                 style={{\n//                   position: \"absolute\",\n//                   top: \"4px\",\n//                   right: \"4px\",\n//                   display: \"flex\",\n//                   gap: \"0.5rem\",\n//                 }}\n//               >\n//                 <button\n//                   onClick={() => startEditing(a)}\n//                   style={{\n//                     background: \"transparent\",\n//                     border: \"none\",\n//                     color: \"#0052CC\",\n//                     cursor: \"pointer\",\n//                     fontWeight: \"bold\",\n//                   }}\n//                 >\n//                   Edit\n//                 </button>\n//                 <button\n//                   onClick={() => deleteAsset(a.id)}\n//                   style={{\n//                     background: \"transparent\",\n//                     border: \"none\",\n//                     color: \"#DE350B\",\n//                     cursor: \"pointer\",\n//                     fontWeight: \"bold\",\n//                   }}\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/vmoun/OneDrive/Desktop/forusers/userspage/src/components/assets/Assets.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { listAssets, addAsset } from \"../../services/mockApi\";\n// import { v4 as uuidv4 } from \"uuid\";\n \n// export default function AssetsBoard() {\n//   const [assets, setAssets] = useState([]);\n//   const [form, setForm] = useState({ name: \"\", type: \"Laptop\", owner: \"\" });\n//   const [editingId, setEditingId] = useState(null);\n//   const [editFields, setEditFields] = useState({});\n//   const [hoveredId, setHoveredId] = useState(null);\n \n//   useEffect(() => {\n//     listAssets().then(setAssets);\n//   }, []);\n \n//   // Add asset handler for Add Form\n//   const add = async () => {\n//     const assetName = form.name;\n//     const assetType = form.type || \"Laptop\";\n//     const assetOwner = form.owner || \"\";\n//     if (!assetName?.trim()) return;\n \n//     const newAsset = {\n//       id: uuidv4(),\n//       name: assetName,\n//       type: assetType,\n//       owner: assetOwner,\n//       // Removed status field as per requirement\n//     };\n//     await addAsset(newAsset);\n//     setAssets(await listAssets());\n//     setForm({ name: \"\", type: \"Laptop\", owner: \"\" });\n//   };\n \n//   // Edit asset inline\n//   const startEditing = asset => {\n//     setEditingId(asset.id);\n//     setEditFields({ ...asset });\n//   };\n//   const saveEdit = async id => {\n//     setAssets(assets.map(a => (a.id === id ? { ...a, ...editFields } : a)));\n//     setEditingId(null);\n//   };\n//   const cancelEdit = () => setEditingId(null);\n \n//   // Delete asset handler\n//   const deleteAsset = async id => {\n//     setAssets(assets.filter(a => a.id !== id));\n//   };\n \n//   return (\n//     <div\n//       style={{\n//         padding: \"2rem\",\n//         fontFamily: \"Arial, sans-serif\",\n//         background: \"#F4F5F7\",\n//         minHeight: \"100vh\",\n//       }}\n//     >\n//       {/* Add Asset Top Form */}\n//       <div\n//         style={{\n//           marginBottom: \"2rem\",\n//           background: \"#fff\",\n//           padding: \"1.5rem\",\n//           borderRadius: \"8px\",\n//           boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\n//         }}\n//       >\n//         <h2 style={{ marginBottom: \"1rem\", fontSize: \"1.5rem\" }}>\n//           Add User Asset\n//         </h2>\n//         <div style={{ display: \"flex\", gap: \"1rem\", flexWrap: \"wrap\" }}>\n//           <input\n//             placeholder=\"Asset Name\"\n//             value={form.name}\n//             onChange={e => setForm(f => ({ ...f, name: e.target.value }))}\n//             style={{\n//               flex: 1,\n//               padding: \"0.5rem\",\n//               borderRadius: \"4px\",\n//               border: \"1px solid #ccc\",\n//             }}\n//           />\n//           <input\n//             placeholder=\"Type\"\n//             value={form.type}\n//             onChange={e => setForm(f => ({ ...f, type: e.target.value }))}\n//             style={{\n//               flex: 1,\n//               padding: \"0.5rem\",\n//               borderRadius: \"4px\",\n//               border: \"1px solid #ccc\",\n//             }}\n//           />\n//           <input\n//             placeholder=\"Owner\"\n//             value={form.owner}\n//             onChange={e => setForm(f => ({ ...f, owner: e.target.value }))}\n//             style={{\n//               flex: 1,\n//               padding: \"0.5rem\",\n//               borderRadius: \"4px\",\n//               border: \"1px solid #ccc\",\n//             }}\n//           />\n//           <button\n//             onClick={add}\n//             style={{\n//               padding: \"0.5rem 1rem\",\n//               background: \"#0052CC\",\n//               color: \"#fff\",\n//               border: \"none\",\n//               borderRadius: \"4px\",\n//               cursor: \"pointer\",\n//             }}\n//           >\n//             Add\n//           </button>\n//         </div>\n//       </div>\n \n//       {/* User Asset List */}\n//       <div\n//         style={{\n//           background: \"#EBECF0\",\n//           padding: \"1rem\",\n//           borderRadius: \"8px\",\n//           minHeight: \"300px\",\n//         }}\n//       >\n//         <h3 style={{ color: \"#0052CC\" }}>User Assets</h3>\n//         {assets.length === 0 && (\n//           <div style={{ color: \"#999\", marginTop: \"2rem\" }}>\n//             No assets found for the user.\n//           </div>\n//         )}\n \n//         {assets.map(a => (\n//           <div\n//             key={a.id}\n//             onMouseEnter={() => setHoveredId(a.id)}\n//             onMouseLeave={() => setHoveredId(null)}\n//             style={{\n//               padding: \"0.75rem 1rem\",\n//               marginBottom: \"0.5rem\",\n//               borderRadius: \"6px\",\n//               background: \"#fff\",\n//               position: \"relative\",\n//               boxShadow: \"0 2px 8px rgba(0,0,0,0.06)\",\n//             }}\n//           >\n//             {editingId === a.id ? (\n//               <div\n//                 style={{\n//                   display: \"flex\",\n//                   flexDirection: \"column\",\n//                   gap: \"0.5rem\",\n//                 }}\n//               >\n//                 <input\n//                   value={editFields.name}\n//                   onChange={e =>\n//                     setEditFields(f => ({\n//                       ...f,\n//                       name: e.target.value,\n//                     }))\n//                   }\n//                 />\n//                 <input\n//                   value={editFields.type}\n//                   onChange={e =>\n//                     setEditFields(f => ({\n//                       ...f,\n//                       type: e.target.value,\n//                     }))\n//                   }\n//                 />\n//                 <input\n//                   value={editFields.owner}\n//                   onChange={e =>\n//                     setEditFields(f => ({\n//                       ...f,\n//                       owner: e.target.value,\n//                     }))\n//                   }\n//                 />\n//                 <div style={{ display: \"flex\", gap: \"0.5rem\" }}>\n//                   <button\n//                     onClick={() => saveEdit(a.id)}\n//                     style={{\n//                       background: \"#36B37E\",\n//                       color: \"#fff\",\n//                       border: \"none\",\n//                       borderRadius: \"4px\",\n//                       padding: \"0.25rem 0.5rem\",\n//                     }}\n//                   >\n//                     Save\n//                   </button>\n//                   <button\n//                     onClick={cancelEdit}\n//                     style={{\n//                       background: \"#DE350B\",\n//                       color: \"#fff\",\n//                       border: \"none\",\n//                       borderRadius: \"4px\",\n//                       padding: \"0.25rem 0.5rem\",\n//                     }}\n//                   >\n//                     Cancel\n//                   </button>\n//                 </div>\n//               </div>\n//             ) : (\n//               <div onClick={() => startEditing(a)} style={{ cursor: \"pointer\" }}>\n//                 <div style={{ fontWeight: \"bold\" }}>{a.name}</div>\n//                 <div style={{ fontSize: \"0.85rem\", color: \"#555\" }}>\n//                   {a.type} | {a.owner || \"-\"}\n//                 </div>\n//               </div>\n//             )}\n \n//             {/* Hover Toolbar */}\n//             {hoveredId === a.id && editingId !== a.id && (\n//               <div\n//                 style={{\n//                   position: \"absolute\",\n//                   top: \"4px\",\n//                   right: \"4px\",\n//                   display: \"flex\",\n//                   gap: \"0.5rem\",\n//                 }}\n//               >\n//                 <button\n//                   onClick={() => startEditing(a)}\n//                   style={{\n//                     background: \"transparent\",\n//                     border: \"none\",\n//                     color: \"#0052CC\",\n//                     cursor: \"pointer\",\n//                     fontWeight: \"bold\",\n//                   }}\n//                 >\n//                   Edit\n//                 </button>\n//                 <button\n//                   onClick={() => deleteAsset(a.id)}\n//                   style={{\n//                     background: \"transparent\",\n//                     border: \"none\",\n//                     color: \"#DE350B\",\n//                     cursor: \"pointer\",\n//                     fontWeight: \"bold\",\n//                   }}\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n \n\n\n\n\n\n\n\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\n\n// import React, { useState, useRef } from \"react\";\n// import { useDrag, useDrop, DndProvider } from \"react-dnd\";\n// import { HTML5Backend } from \"react-dnd-html5-backend\";\n// import styled from \"styled-components\";\n// import { format, addDays, differenceInDays, parseISO } from \"date-fns\";\n// import Xarrow from \"react-xarrows\";\n// import html2canvas from \"html2canvas\";\n// import jsPDF from \"jspdf\";\n// import * as XLSX from \"xlsx\";\n\n// // Styled components\n// const Container = styled.div`\n//   padding: 20px;\n//   font-family: Arial;\n// `;\n\n// const TimelineContainer = styled.div`\n//   border: 1px solid #ccc;\n//   padding: 10px;\n//   overflow-x: auto;\n//   position: relative;\n//   height: 400px;\n// `;\n\n// const ZoomControls = styled.div`\n//   margin-bottom: 10px;\n// `;\n\n// const FilterControls = styled.div`\n//   margin-bottom: 10px;\n// `;\n\n// const TaskBar = styled.div`\n//   position: absolute;\n//   height: 30px;\n//   border-radius: 4px;\n//   color: white;\n//   padding: 0 5px;\n//   font-size: 12px;\n//   display: flex;\n//   align-items: center;\n//   cursor: grab;\n// `;\n\n// // Task component with dynamic drag\n// function Task({ task, dates, onTaskMove }) {\n//   const startIdx = dates.findIndex((d) => d === task.start);\n//   const endIdx = dates.findIndex((d) => d === task.end);\n//   const width = (endIdx - startIdx + 1) * 100;\n\n//   const [{ isDragging }, drag] = useDrag(() => ({\n//     type: \"TASK\",\n//     item: { id: task.id },\n//     collect: (monitor) => ({\n//       isDragging: !!monitor.isDragging(),\n//     }),\n//   }));\n\n//   const [, drop] = useDrop({\n//     accept: \"TASK\",\n//     hover: (item, monitor) => {\n//       if (!monitor.isOver({ shallow: true })) return;\n//       const delta = monitor.getDifferenceFromInitialOffset();\n//       const daysMoved = Math.round(delta.x / 100); // 100px per day\n//       if (daysMoved !== 0) {\n//         onTaskMove(item.id, daysMoved);\n//       }\n//     },\n//   });\n\n//   return (\n//     <TaskBar\n//       ref={(node) => drag(drop(node))}\n//       style={{\n//         left: startIdx * 100,\n//         width: width,\n//         backgroundColor: task.color,\n//         opacity: isDragging ? 0.5 : 1,\n//         top: task.id * 50,\n//       }}\n//       id={`task-${task.id}`}\n//     >\n//       {task.milestone && \"ðŸŽ¯\"} {task.title} ({task.progress}%)\n//     </TaskBar>\n//   );\n// }\n\n// // Main Timeline component\n// function TimelineInteractive() {\n//   const initialTasks = [\n//     {\n//       id: 1,\n//       title: \"Design UI\",\n//       start: \"2025-09-22\",\n//       end: \"2025-09-25\",\n//       progress: 50,\n//       color: \"#0052CC\",\n//       assignee: \"John\",\n//       dependencies: [2],\n//       milestone: false,\n//     },\n//     {\n//       id: 2,\n//       title: \"Develop Backend\",\n//       start: \"2025-09-23\",\n//       end: \"2025-09-28\",\n//       progress: 20,\n//       color: \"#FF5630\",\n//       assignee: \"Alice\",\n//       dependencies: [],\n//       milestone: true,\n//     },\n//     {\n//       id: 3,\n//       title: \"QA Testing\",\n//       start: \"2025-09-26\",\n//       end: \"2025-10-02\",\n//       progress: 0,\n//       color: \"#36B37E\",\n//       assignee: \"John\",\n//       dependencies: [1, 2],\n//       milestone: false,\n//     },\n//   ];\n\n//   const [tasks, setTasks] = useState(initialTasks);\n//   const [zoom, setZoom] = useState(\"week\");\n//   const [filterAssignee, setFilterAssignee] = useState(\"All\");\n//   const timelineRef = useRef();\n\n//   const startDate = parseISO(\"2025-09-20\");\n//   const endDate = parseISO(\"2025-10-05\");\n//   const totalDays = differenceInDays(endDate, startDate) + 1;\n\n//   const dates = [];\n//   for (let i = 0; i < totalDays; i++) {\n//     dates.push(format(addDays(startDate, i), \"yyyy-MM-dd\"));\n//   }\n\n//   // Move task by delta days\n//   const handleTaskMove = (id, deltaDays) => {\n//     setTasks((prev) =>\n//       prev.map((task) => {\n//         if (task.id === id) {\n//           const oldStart = parseISO(task.start);\n//           const oldEnd = parseISO(task.end);\n//           let newStart = addDays(oldStart, deltaDays);\n//           let newEnd = addDays(oldEnd, deltaDays);\n\n//           // Snap to timeline boundaries\n//           if (newStart < startDate) {\n//             newStart = startDate;\n//             newEnd = addDays(startDate, differenceInDays(oldEnd, oldStart));\n//           }\n//           if (newEnd > endDate) {\n//             newEnd = endDate;\n//             newStart = addDays(endDate, -differenceInDays(oldEnd, oldStart));\n//           }\n\n//           return {\n//             ...task,\n//             start: format(newStart, \"yyyy-MM-dd\"),\n//             end: format(newEnd, \"yyyy-MM-dd\"),\n//           };\n//         }\n//         return task;\n//       })\n//     );\n//   };\n\n//   // Filtering tasks\n//   const filteredTasks =\n//     filterAssignee === \"All\"\n//       ? tasks\n//       : tasks.filter((t) => t.assignee === filterAssignee);\n\n//   const uniqueAssignees = [\"All\", ...new Set(tasks.map((t) => t.assignee))];\n\n//   // Export PDF\n//   const exportPDF = () => {\n//     html2canvas(timelineRef.current).then((canvas) => {\n//       const imgData = canvas.toDataURL(\"image/png\");\n//       const pdf = new jsPDF(\"l\", \"pt\", [canvas.width, canvas.height]);\n//       pdf.addImage(imgData, \"PNG\", 0, 0);\n//       pdf.save(\"timeline.pdf\");\n//     });\n//   };\n\n//   // Export Excel\n//   const exportExcel = () => {\n//     const ws = XLSX.utils.json_to_sheet(\n//       tasks.map((t) => ({\n//         Title: t.title,\n//         Start: t.start,\n//         End: t.end,\n//         Progress: t.progress,\n//         Assignee: t.assignee,\n//       }))\n//     );\n//     const wb = XLSX.utils.book_new();\n//     XLSX.utils.book_append_sheet(wb, ws, \"Timeline\");\n//     XLSX.writeFile(wb, \"timeline.xlsx\");\n//   };\n\n//   return (\n//     <DndProvider backend={HTML5Backend}>\n//       <Container>\n//         <h1>Interactive Jira-like Timeline</h1>\n//         <ZoomControls>\n//           Zoom:\n//           <select value={zoom} onChange={(e) => setZoom(e.target.value)}>\n//             <option value=\"day\">Day</option>\n//             <option value=\"week\">Week</option>\n//             <option value=\"month\">Month</option>\n//             <option value=\"quarter\">Quarter</option>\n//           </select>\n//         </ZoomControls>\n//         <FilterControls>\n//           Filter by Assignee:\n//           <select\n//             value={filterAssignee}\n//             onChange={(e) => setFilterAssignee(e.target.value)}\n//           >\n//             {uniqueAssignees.map((assignee) => (\n//               <option key={assignee} value={assignee}>\n//                 {assignee}\n//               </option>\n//             ))}\n//           </select>\n//         </FilterControls>\n//         <button onClick={exportPDF}>Export PDF</button>\n//         <button onClick={exportExcel} style={{ marginLeft: \"10px\" }}>\n//           Export Excel\n//         </button>\n//         <TimelineContainer ref={timelineRef}>\n//           <div style={{ display: \"flex\", borderBottom: \"1px solid #ccc\" }}>\n//             {dates.map((date) => (\n//               <div\n//                 key={date}\n//                 style={{\n//                   minWidth: \"100px\",\n//                   borderRight: \"1px solid #eee\",\n//                   textAlign: \"center\",\n//                 }}\n//               >\n//                 {date}\n//               </div>\n//             ))}\n//           </div>\n//           {filteredTasks.map((task) => (\n//             <Task\n//               key={task.id}\n//               task={task}\n//               dates={dates}\n//               onTaskMove={handleTaskMove}\n//             />\n//           ))}\n//           {/* Dependency arrows */}\n//           {filteredTasks.map((task) =>\n//             task.dependencies.map((depId) => {\n//               const depTask = tasks.find((t) => t.id === depId);\n//               if (!depTask) return null;\n//               return (\n//                 <Xarrow\n//                   key={`${task.id}-${depId}`}\n//                   start={`task-${depTask.id}`}\n//                   end={`task-${task.id}`}\n//                   color=\"black\"\n//                   strokeWidth={2}\n//                   headSize={4}\n//                 />\n//               );\n//             })\n//           )}\n//         </TimelineContainer>\n//       </Container>\n//     </DndProvider>\n//   );\n// }\n\n// export default TimelineInteractive;","map":{"version":3,"names":[],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/components/timeline/Timeline.js"],"sourcesContent":["\n\n\n\n\n\n\n\n\n// import React, { useState, useRef } from \"react\";\n// import { useDrag, useDrop, DndProvider } from \"react-dnd\";\n// import { HTML5Backend } from \"react-dnd-html5-backend\";\n// import styled from \"styled-components\";\n// import { format, addDays, differenceInDays, parseISO } from \"date-fns\";\n// import Xarrow from \"react-xarrows\";\n// import html2canvas from \"html2canvas\";\n// import jsPDF from \"jspdf\";\n// import * as XLSX from \"xlsx\";\n\n// // Styled components\n// const Container = styled.div`\n//   padding: 20px;\n//   font-family: Arial;\n// `;\n\n// const TimelineContainer = styled.div`\n//   border: 1px solid #ccc;\n//   padding: 10px;\n//   overflow-x: auto;\n//   position: relative;\n//   height: 400px;\n// `;\n\n// const ZoomControls = styled.div`\n//   margin-bottom: 10px;\n// `;\n\n// const FilterControls = styled.div`\n//   margin-bottom: 10px;\n// `;\n\n// const TaskBar = styled.div`\n//   position: absolute;\n//   height: 30px;\n//   border-radius: 4px;\n//   color: white;\n//   padding: 0 5px;\n//   font-size: 12px;\n//   display: flex;\n//   align-items: center;\n//   cursor: grab;\n// `;\n\n// // Task component with dynamic drag\n// function Task({ task, dates, onTaskMove }) {\n//   const startIdx = dates.findIndex((d) => d === task.start);\n//   const endIdx = dates.findIndex((d) => d === task.end);\n//   const width = (endIdx - startIdx + 1) * 100;\n\n//   const [{ isDragging }, drag] = useDrag(() => ({\n//     type: \"TASK\",\n//     item: { id: task.id },\n//     collect: (monitor) => ({\n//       isDragging: !!monitor.isDragging(),\n//     }),\n//   }));\n\n//   const [, drop] = useDrop({\n//     accept: \"TASK\",\n//     hover: (item, monitor) => {\n//       if (!monitor.isOver({ shallow: true })) return;\n//       const delta = monitor.getDifferenceFromInitialOffset();\n//       const daysMoved = Math.round(delta.x / 100); // 100px per day\n//       if (daysMoved !== 0) {\n//         onTaskMove(item.id, daysMoved);\n//       }\n//     },\n//   });\n\n//   return (\n//     <TaskBar\n//       ref={(node) => drag(drop(node))}\n//       style={{\n//         left: startIdx * 100,\n//         width: width,\n//         backgroundColor: task.color,\n//         opacity: isDragging ? 0.5 : 1,\n//         top: task.id * 50,\n//       }}\n//       id={`task-${task.id}`}\n//     >\n//       {task.milestone && \"ðŸŽ¯\"} {task.title} ({task.progress}%)\n//     </TaskBar>\n//   );\n// }\n\n// // Main Timeline component\n// function TimelineInteractive() {\n//   const initialTasks = [\n//     {\n//       id: 1,\n//       title: \"Design UI\",\n//       start: \"2025-09-22\",\n//       end: \"2025-09-25\",\n//       progress: 50,\n//       color: \"#0052CC\",\n//       assignee: \"John\",\n//       dependencies: [2],\n//       milestone: false,\n//     },\n//     {\n//       id: 2,\n//       title: \"Develop Backend\",\n//       start: \"2025-09-23\",\n//       end: \"2025-09-28\",\n//       progress: 20,\n//       color: \"#FF5630\",\n//       assignee: \"Alice\",\n//       dependencies: [],\n//       milestone: true,\n//     },\n//     {\n//       id: 3,\n//       title: \"QA Testing\",\n//       start: \"2025-09-26\",\n//       end: \"2025-10-02\",\n//       progress: 0,\n//       color: \"#36B37E\",\n//       assignee: \"John\",\n//       dependencies: [1, 2],\n//       milestone: false,\n//     },\n//   ];\n\n//   const [tasks, setTasks] = useState(initialTasks);\n//   const [zoom, setZoom] = useState(\"week\");\n//   const [filterAssignee, setFilterAssignee] = useState(\"All\");\n//   const timelineRef = useRef();\n\n//   const startDate = parseISO(\"2025-09-20\");\n//   const endDate = parseISO(\"2025-10-05\");\n//   const totalDays = differenceInDays(endDate, startDate) + 1;\n\n//   const dates = [];\n//   for (let i = 0; i < totalDays; i++) {\n//     dates.push(format(addDays(startDate, i), \"yyyy-MM-dd\"));\n//   }\n\n//   // Move task by delta days\n//   const handleTaskMove = (id, deltaDays) => {\n//     setTasks((prev) =>\n//       prev.map((task) => {\n//         if (task.id === id) {\n//           const oldStart = parseISO(task.start);\n//           const oldEnd = parseISO(task.end);\n//           let newStart = addDays(oldStart, deltaDays);\n//           let newEnd = addDays(oldEnd, deltaDays);\n\n//           // Snap to timeline boundaries\n//           if (newStart < startDate) {\n//             newStart = startDate;\n//             newEnd = addDays(startDate, differenceInDays(oldEnd, oldStart));\n//           }\n//           if (newEnd > endDate) {\n//             newEnd = endDate;\n//             newStart = addDays(endDate, -differenceInDays(oldEnd, oldStart));\n//           }\n\n//           return {\n//             ...task,\n//             start: format(newStart, \"yyyy-MM-dd\"),\n//             end: format(newEnd, \"yyyy-MM-dd\"),\n//           };\n//         }\n//         return task;\n//       })\n//     );\n//   };\n\n//   // Filtering tasks\n//   const filteredTasks =\n//     filterAssignee === \"All\"\n//       ? tasks\n//       : tasks.filter((t) => t.assignee === filterAssignee);\n\n//   const uniqueAssignees = [\"All\", ...new Set(tasks.map((t) => t.assignee))];\n\n//   // Export PDF\n//   const exportPDF = () => {\n//     html2canvas(timelineRef.current).then((canvas) => {\n//       const imgData = canvas.toDataURL(\"image/png\");\n//       const pdf = new jsPDF(\"l\", \"pt\", [canvas.width, canvas.height]);\n//       pdf.addImage(imgData, \"PNG\", 0, 0);\n//       pdf.save(\"timeline.pdf\");\n//     });\n//   };\n\n//   // Export Excel\n//   const exportExcel = () => {\n//     const ws = XLSX.utils.json_to_sheet(\n//       tasks.map((t) => ({\n//         Title: t.title,\n//         Start: t.start,\n//         End: t.end,\n//         Progress: t.progress,\n//         Assignee: t.assignee,\n//       }))\n//     );\n//     const wb = XLSX.utils.book_new();\n//     XLSX.utils.book_append_sheet(wb, ws, \"Timeline\");\n//     XLSX.writeFile(wb, \"timeline.xlsx\");\n//   };\n\n//   return (\n//     <DndProvider backend={HTML5Backend}>\n//       <Container>\n//         <h1>Interactive Jira-like Timeline</h1>\n//         <ZoomControls>\n//           Zoom:\n//           <select value={zoom} onChange={(e) => setZoom(e.target.value)}>\n//             <option value=\"day\">Day</option>\n//             <option value=\"week\">Week</option>\n//             <option value=\"month\">Month</option>\n//             <option value=\"quarter\">Quarter</option>\n//           </select>\n//         </ZoomControls>\n//         <FilterControls>\n//           Filter by Assignee:\n//           <select\n//             value={filterAssignee}\n//             onChange={(e) => setFilterAssignee(e.target.value)}\n//           >\n//             {uniqueAssignees.map((assignee) => (\n//               <option key={assignee} value={assignee}>\n//                 {assignee}\n//               </option>\n//             ))}\n//           </select>\n//         </FilterControls>\n//         <button onClick={exportPDF}>Export PDF</button>\n//         <button onClick={exportExcel} style={{ marginLeft: \"10px\" }}>\n//           Export Excel\n//         </button>\n//         <TimelineContainer ref={timelineRef}>\n//           <div style={{ display: \"flex\", borderBottom: \"1px solid #ccc\" }}>\n//             {dates.map((date) => (\n//               <div\n//                 key={date}\n//                 style={{\n//                   minWidth: \"100px\",\n//                   borderRight: \"1px solid #eee\",\n//                   textAlign: \"center\",\n//                 }}\n//               >\n//                 {date}\n//               </div>\n//             ))}\n//           </div>\n//           {filteredTasks.map((task) => (\n//             <Task\n//               key={task.id}\n//               task={task}\n//               dates={dates}\n//               onTaskMove={handleTaskMove}\n//             />\n//           ))}\n//           {/* Dependency arrows */}\n//           {filteredTasks.map((task) =>\n//             task.dependencies.map((depId) => {\n//               const depTask = tasks.find((t) => t.id === depId);\n//               if (!depTask) return null;\n//               return (\n//                 <Xarrow\n//                   key={`${task.id}-${depId}`}\n//                   start={`task-${depTask.id}`}\n//                   end={`task-${task.id}`}\n//                   color=\"black\"\n//                   strokeWidth={2}\n//                   headSize={4}\n//                 />\n//               );\n//             })\n//           )}\n//         </TimelineContainer>\n//       </Container>\n//     </DndProvider>\n//   );\n// }\n\n// export default TimelineInteractive;\n\n\n\n\n\n\n\n\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\n\n// ffull code ok \n\n// import React, { useEffect, useState } from \"react\";\n\n// // Mock API functions\n// const mockAssets = [\n//   {\n//     id: \"1\",\n//     email: \"john@example.com\",\n//     type: \"Laptop\",\n//     location: \"WFO\",\n//     status: \"active\",\n//     openDate: new Date().toISOString(),\n//   },\n//   {\n//     id: \"2\",\n//     email: \"user2@example.com\",\n//     type: \"Charger\",\n//     location: \"WFO\",\n//     status: \"maintenance\",\n//     openDate: new Date().toISOString(),\n//   },\n//   {\n//     id: \"3\",\n//     email: \"user3@example.com\",\n//     type: \"Network Issue\",\n//     location: \"WFO\",\n//     status: \"inactive\",\n//     openDate: new Date().toISOString(),\n//   },\n// ];\n\n// let assetsDB = [...mockAssets];\n\n// const listAssets = () => Promise.resolve([...assetsDB]);\n// const addAsset = (asset) => {\n//   assetsDB.push(asset);\n//   return Promise.resolve(asset);\n// };\n\n// const generateId = () =>\n//   `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n// // Helper function to format date/time for display\n// function formatOpenDate(dt) {\n//   if (!dt) return \"\";\n//   const d = new Date(dt);\n//   return `${d.toLocaleDateString()} ${d.toLocaleTimeString()}`;\n// }\n\n// export default function AssetsBoard() {\n//   const [assets, setAssets] = useState([]);\n//   const [email, setEmail] = useState(\"\");\n//   const [type, setType] = useState(\"Laptop\");\n//   const [location, setLocation] = useState(\"WFO\");\n//   const [editingId, setEditingId] = useState(null);\n//   const [editFields, setEditFields] = useState({});\n//   const [hoveredId, setHoveredId] = useState(null);\n//   const [quickAdd, setQuickAdd] = useState({});\n//   const [draggedAsset, setDraggedAsset] = useState(null);\n\n//   useEffect(() => {\n//     listAssets().then(setAssets);\n//   }, []);\n\n//   const add = async (status = \"active\") => {\n//     const assetEmail = status === \"form\" ? email : quickAdd[status]?.email;\n//     const assetType =\n//       status === \"form\" ? type : quickAdd[status]?.type || \"Laptop\";\n//     const assetLocation =\n//       status === \"form\" ? location : quickAdd[status]?.location || \"WFO\";\n//     if (!assetEmail?.trim()) return;\n\n//     const a = {\n//       id: generateId(),\n//       email: assetEmail,\n//       type: assetType,\n//       location: assetLocation,\n//       status: status === \"form\" ? \"active\" : status,\n//       openDate: new Date().toISOString(), // Save open date/time\n//     };\n//     await addAsset(a);\n//     setAssets(await listAssets());\n\n//     if (status === \"form\") {\n//       setEmail(\"\");\n//       setType(\"Laptop\");\n//       setLocation(\"WFO\");\n//     } else {\n//       setQuickAdd((prev) => ({\n//         ...prev,\n//         [status]: { email: \"\", type: \"Laptop\", location: \"WFO\" },\n//       }));\n//     }\n//   };\n\n//   const statusColumns = {\n//     active: { title: \"Active\", color: \"#22C55E\", bgColor: \"#C8E9DD\" },\n//     // maintenance: { title: \"Maintenance\", color: \"#EAB308\", bgColor: \"#FEF3C7\" },\n//     // inactive: { title: \"Inactive\", color: \"#EF4444\", bgColor: \"#FECACA\" },\n//   };\n\n//   const groupedAssets = Object.keys(statusColumns).reduce((acc, status) => {\n//     acc[status] = assets.filter((a) => a.status === status);\n//     return acc;\n//   }, {});\n\n//   const handleDragStart = (e, asset) => {\n//     setDraggedAsset(asset);\n//     e.dataTransfer.effectAllowed = \"move\";\n//   };\n\n//   const handleDragOver = (e) => {\n//     e.preventDefault();\n//     e.dataTransfer.dropEffect = \"move\";\n//   };\n\n//   const handleDrop = (e, newStatus) => {\n//     e.preventDefault();\n//     if (draggedAsset && draggedAsset.status !== newStatus) {\n//       const updatedAsset = { ...draggedAsset, status: newStatus };\n//       setAssets(assets.map((a) => (a.id === draggedAsset.id ? updatedAsset : a)));\n//     }\n//     setDraggedAsset(null);\n//   };\n\n//   const startEditing = (asset) => {\n//     setEditingId(asset.id);\n//     setEditFields({ ...asset });\n//   };\n\n//   const saveEdit = (id) => {\n//     setAssets(\n//       assets.map((a) => (a.id === id ? { ...a, ...editFields } : a))\n//     );\n//     setEditingId(null);\n//   };\n\n//   const cancelEdit = () => setEditingId(null);\n//   const deleteAsset = (id) => setAssets(assets.filter((a) => a.id !== id));\n\n//   return (\n//     <div\n//       style={{\n//         padding: \"2rem\",\n//         fontFamily: \"Arial, sans-serif\",\n//         background: \"#D0F0F4\",\n//         minHeight: \"100vh\",\n//       }}\n//     >\n//       {/* Header */}\n//       <div style={{ textAlign: \"center\", marginBottom: \"2rem\" }}>\n//         <h1\n//           style={{\n//             fontSize: \"2rem\",\n//             fontWeight: \"bold\",\n//             margin: 0,\n//             letterSpacing: \"2px\",\n//           }}\n//         >\n//           FLOW TRACK\n//         </h1>\n//       </div>\n\n//       {/* Add Asset Top Form */}\n//       <div\n//         style={{\n//           marginBottom: \"2rem\",\n//           background: \"#fff\",\n//           padding: \"1.5rem\",\n//           borderRadius: \"8px\",\n//           boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\n//         }}\n//       >\n//         <h2 style={{ marginBottom: \"1rem\", fontSize: \"1.5rem\" }}>Add Asset</h2>\n//         <div style={{ display: \"flex\", gap: \"1rem\", flexWrap: \"wrap\" }}>\n//           <input\n//             placeholder=\"Email ID\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             style={{\n//               flex: 1,\n//               padding: \"0.5rem\",\n//               borderRadius: \"4px\",\n//               border: \"1px solid #ccc\",\n//             }}\n//           />\n//           <select\n//             value={type}\n//             onChange={(e) => setType(e.target.value)}\n//             style={{\n//               flex: 1,\n//               padding: \"0.5rem\",\n//               borderRadius: \"4px\",\n//               border: \"1px solid #ccc\",\n//             }}\n//           >\n//             <option>Laptop</option>\n//             <option>Charger</option>\n//             <option>Network Issue</option>\n//           </select>\n//           <select\n//             value={location}\n//             onChange={(e) => setLocation(e.target.value)}\n//             style={{\n//               flex: 1,\n//               padding: \"0.5rem\",\n//               borderRadius: \"4px\",\n//               border: \"1px solid #ccc\",\n//             }}\n//           >\n//             <option>WFO</option>\n//             <option>WFH</option>\n//           </select>\n//           <button\n//             onClick={() => add(\"form\")}\n//             style={{\n//               padding: \"0.5rem 1rem\",\n//               background: \"#0052CC\",\n//               color: \"#fff\",\n//               border: \"none\",\n//               borderRadius: \"4px\",\n//               cursor: \"pointer\",\n//             }}\n//           >\n//             Add\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Kanban Board */}\n//       <div style={{ display: \"flex\", gap: \"1.5rem\" }}>\n//         {Object.keys(statusColumns).map((status) => (\n//           <div\n//             key={status}\n//             onDragOver={handleDragOver}\n//             onDrop={(e) => handleDrop(e, status)}\n//             style={{\n//               flex: 1,\n//               background: statusColumns[status].bgColor,\n//               padding: \"1.5rem\",\n//               borderRadius: \"12px\",\n//               minHeight: \"400px\",\n//             }}\n//           >\n//             <h3\n//               style={{\n//                 color: statusColumns[status].color,\n//                 fontSize: \"1.25rem\",\n//                 fontWeight: \"bold\",\n//                 marginBottom: \"1rem\",\n//                 textAlign: \"center\",\n//               }}\n//             >\n//               {statusColumns[status].title}\n//             </h3>\n\n//             {/* Assets */}\n//             {groupedAssets[status].map((a) => (\n//               <div\n//                 key={a.id}\n//                 draggable={editingId !== a.id}\n//                 onDragStart={(e) => handleDragStart(e, a)}\n//                 onMouseEnter={() => setHoveredId(a.id)}\n//                 onMouseLeave={() => setHoveredId(null)}\n//                 style={{\n//                   padding: \"1rem\",\n//                   marginBottom: \"0.75rem\",\n//                   borderRadius: \"8px\",\n//                   background: statusColumns[status].color,\n//                   color: \"#fff\",\n//                   fontWeight: \"600\",\n//                   boxShadow:\n//                     draggedAsset?.id === a.id\n//                       ? \"0 4px 12px rgba(0,0,0,0.2)\"\n//                       : \"0 2px 4px rgba(0,0,0,0.1)\",\n//                   position: \"relative\",\n//                   cursor: editingId === a.id ? \"default\" : \"move\",\n//                   opacity: draggedAsset?.id === a.id ? 0.5 : 1,\n//                 }}\n//               >\n//                 {editingId === a.id ? (\n//                   <div\n//                     style={{ display: \"flex\", flexDirection: \"column\", gap: \"0.5rem\" }}\n//                   >\n//                     <input\n//                       value={editFields.email}\n//                       onChange={(e) =>\n//                         setEditFields({ ...editFields, email: e.target.value })\n//                       }\n//                       style={{ padding: \"0.5rem\", borderRadius: \"4px\", border: \"none\" }}\n//                     />\n//                     <select\n//                       value={editFields.type}\n//                       onChange={(e) =>\n//                         setEditFields({ ...editFields, type: e.target.value })\n//                       }\n//                       style={{ padding: \"0.5rem\", borderRadius: \"4px\", border: \"none\" }}\n//                     >\n//                       <option>Laptop</option>\n//                       <option>Charger</option>\n//                       <option>Network Issue</option>\n//                     </select>\n//                     <select\n//                       value={editFields.location}\n//                       onChange={(e) =>\n//                         setEditFields({ ...editFields, location: e.target.value })\n//                       }\n//                       style={{ padding: \"0.5rem\", borderRadius: \"4px\", border: \"none\" }}\n//                     >\n//                       <option>WFH</option>\n//                       <option>WFO</option>\n//                     </select>\n//                     <select\n//                       value={editFields.status}\n//                       onChange={(e) =>\n//                         setEditFields({ ...editFields, status: e.target.value })\n//                       }\n//                       style={{ padding: \"0.5rem\", borderRadius: \"4px\", border: \"none\" }}\n//                     >\n//                       {Object.keys(statusColumns).map((s) => (\n//                         <option key={s} value={s}>\n//                           {statusColumns[s].title}\n//                         </option>\n//                       ))}\n//                     </select>\n//                     {/* Open Date/Time field visible in edit mode */}\n//                     <div\n//                       style={{\n//                         fontSize: \"0.85rem\",\n//                         color: \"#e6ffe6\",\n//                         margin: \"0.25rem 0\",\n//                         fontWeight: 400,\n//                         opacity: 0.95,\n//                       }}\n//                     >\n//                       Opened: {formatOpenDate(editFields.openDate)}\n//                     </div>\n//                     <div style={{ display: \"flex\", gap: \"0.5rem\" }}>\n//                       <button\n//                         onClick={() => saveEdit(a.id)}\n//                         style={{\n//                           background: \"#36B37E\",\n//                           color: \"#fff\",\n//                           border: \"none\",\n//                           borderRadius: \"4px\",\n//                           padding: \"0.5rem\",\n//                           flex: 1,\n//                           cursor: \"pointer\",\n//                         }}\n//                       >\n//                         Save\n//                       </button>\n//                       <button\n//                         onClick={cancelEdit}\n//                         style={{\n//                           background: \"#DE350B\",\n//                           color: \"#fff\",\n//                           border: \"none\",\n//                           borderRadius: \"4px\",\n//                           padding: \"0.5rem\",\n//                           flex: 1,\n//                           cursor: \"pointer\",\n//                         }}\n//                       >\n//                         Cancel\n//                       </button>\n//                     </div>\n//                   </div>\n//                 ) : (\n//                   <div onClick={() => startEditing(a)} style={{ cursor: \"pointer\" }}>\n//                     <div style={{ fontWeight: \"bold\", fontSize: \"1rem\" }}>{a.email}</div>\n//                     <div\n//                       style={{\n//                         fontSize: \"0.8rem\",\n//                         marginTop: \"0.25rem\",\n//                         opacity: 0.9,\n//                       }}\n//                     >\n//                       {a.type} | {a.location}\n//                     </div>\n//                     {/* Open Date/Time Display */}\n//                     <div\n//                       style={{\n//                         fontSize: \"0.85rem\",\n//                         color: \"#e6ffe6\",\n//                         marginTop: \"0.25rem\",\n//                         fontWeight: 400,\n//                         opacity: 0.95,\n//                       }}\n//                     >\n//                       Opened: {formatOpenDate(a.openDate)}\n//                     </div>\n//                   </div>\n//                 )}\n\n//                 {/* Hover Toolbar */}\n//                 {hoveredId === a.id && editingId !== a.id && (\n//                   <div\n//                     style={{\n//                       position: \"absolute\",\n//                       top: \"4px\",\n//                       right: \"4px\",\n//                       display: \"flex\",\n//                       gap: \"0.5rem\",\n//                     }}\n//                   >\n//                     <button\n//                       onClick={(e) => {\n//                         e.stopPropagation();\n//                         startEditing(a);\n//                       }}\n//                       style={{\n//                         background: \"rgba(255,255,255,0.9)\",\n//                         border: \"none\",\n//                         color: \"#0052CC\",\n//                         cursor: \"pointer\",\n//                         fontWeight: \"bold\",\n//                         padding: \"0.25rem 0.5rem\",\n//                         borderRadius: \"4px\",\n//                       }}\n//                     >\n//                       Edit\n//                     </button>\n//                     <button\n//                       onClick={(e) => {\n//                         e.stopPropagation();\n//                         deleteAsset(a.id);\n//                       }}\n//                       style={{\n//                         background: \"rgba(255,255,255,0.9)\",\n//                         border: \"none\",\n//                         color: \"#DE350B\",\n//                         cursor: \"pointer\",\n//                         fontWeight: \"bold\",\n//                         padding: \"0.25rem 0.5rem\",\n//                         borderRadius: \"4px\",\n//                       }}\n//                     >\n//                       Delete\n//                     </button>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n\n//             {/* Quick Add in Column */}\n//             <div\n//               style={{\n//                 marginTop: \"0.75rem\",\n//                 display: \"flex\",\n//                 flexDirection: \"column\",\n//                 gap: \"0.5rem\",\n//               }}\n//             ></div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// for more updates","map":{"version":3,"names":[],"sources":["C:/Users/battina srinuvasurao/OneDrive/Desktop/userstool/src/components/assets/Assets.js"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\n// ffull code ok \r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n\r\n// // Mock API functions\r\n// const mockAssets = [\r\n//   {\r\n//     id: \"1\",\r\n//     email: \"john@example.com\",\r\n//     type: \"Laptop\",\r\n//     location: \"WFO\",\r\n//     status: \"active\",\r\n//     openDate: new Date().toISOString(),\r\n//   },\r\n//   {\r\n//     id: \"2\",\r\n//     email: \"user2@example.com\",\r\n//     type: \"Charger\",\r\n//     location: \"WFO\",\r\n//     status: \"maintenance\",\r\n//     openDate: new Date().toISOString(),\r\n//   },\r\n//   {\r\n//     id: \"3\",\r\n//     email: \"user3@example.com\",\r\n//     type: \"Network Issue\",\r\n//     location: \"WFO\",\r\n//     status: \"inactive\",\r\n//     openDate: new Date().toISOString(),\r\n//   },\r\n// ];\r\n\r\n// let assetsDB = [...mockAssets];\r\n\r\n// const listAssets = () => Promise.resolve([...assetsDB]);\r\n// const addAsset = (asset) => {\r\n//   assetsDB.push(asset);\r\n//   return Promise.resolve(asset);\r\n// };\r\n\r\n// const generateId = () =>\r\n//   `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n// // Helper function to format date/time for display\r\n// function formatOpenDate(dt) {\r\n//   if (!dt) return \"\";\r\n//   const d = new Date(dt);\r\n//   return `${d.toLocaleDateString()} ${d.toLocaleTimeString()}`;\r\n// }\r\n\r\n// export default function AssetsBoard() {\r\n//   const [assets, setAssets] = useState([]);\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [type, setType] = useState(\"Laptop\");\r\n//   const [location, setLocation] = useState(\"WFO\");\r\n//   const [editingId, setEditingId] = useState(null);\r\n//   const [editFields, setEditFields] = useState({});\r\n//   const [hoveredId, setHoveredId] = useState(null);\r\n//   const [quickAdd, setQuickAdd] = useState({});\r\n//   const [draggedAsset, setDraggedAsset] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     listAssets().then(setAssets);\r\n//   }, []);\r\n\r\n//   const add = async (status = \"active\") => {\r\n//     const assetEmail = status === \"form\" ? email : quickAdd[status]?.email;\r\n//     const assetType =\r\n//       status === \"form\" ? type : quickAdd[status]?.type || \"Laptop\";\r\n//     const assetLocation =\r\n//       status === \"form\" ? location : quickAdd[status]?.location || \"WFO\";\r\n//     if (!assetEmail?.trim()) return;\r\n\r\n//     const a = {\r\n//       id: generateId(),\r\n//       email: assetEmail,\r\n//       type: assetType,\r\n//       location: assetLocation,\r\n//       status: status === \"form\" ? \"active\" : status,\r\n//       openDate: new Date().toISOString(), // Save open date/time\r\n//     };\r\n//     await addAsset(a);\r\n//     setAssets(await listAssets());\r\n\r\n//     if (status === \"form\") {\r\n//       setEmail(\"\");\r\n//       setType(\"Laptop\");\r\n//       setLocation(\"WFO\");\r\n//     } else {\r\n//       setQuickAdd((prev) => ({\r\n//         ...prev,\r\n//         [status]: { email: \"\", type: \"Laptop\", location: \"WFO\" },\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   const statusColumns = {\r\n//     active: { title: \"Active\", color: \"#22C55E\", bgColor: \"#C8E9DD\" },\r\n//     // maintenance: { title: \"Maintenance\", color: \"#EAB308\", bgColor: \"#FEF3C7\" },\r\n//     // inactive: { title: \"Inactive\", color: \"#EF4444\", bgColor: \"#FECACA\" },\r\n//   };\r\n\r\n//   const groupedAssets = Object.keys(statusColumns).reduce((acc, status) => {\r\n//     acc[status] = assets.filter((a) => a.status === status);\r\n//     return acc;\r\n//   }, {});\r\n\r\n//   const handleDragStart = (e, asset) => {\r\n//     setDraggedAsset(asset);\r\n//     e.dataTransfer.effectAllowed = \"move\";\r\n//   };\r\n\r\n//   const handleDragOver = (e) => {\r\n//     e.preventDefault();\r\n//     e.dataTransfer.dropEffect = \"move\";\r\n//   };\r\n\r\n//   const handleDrop = (e, newStatus) => {\r\n//     e.preventDefault();\r\n//     if (draggedAsset && draggedAsset.status !== newStatus) {\r\n//       const updatedAsset = { ...draggedAsset, status: newStatus };\r\n//       setAssets(assets.map((a) => (a.id === draggedAsset.id ? updatedAsset : a)));\r\n//     }\r\n//     setDraggedAsset(null);\r\n//   };\r\n\r\n//   const startEditing = (asset) => {\r\n//     setEditingId(asset.id);\r\n//     setEditFields({ ...asset });\r\n//   };\r\n\r\n//   const saveEdit = (id) => {\r\n//     setAssets(\r\n//       assets.map((a) => (a.id === id ? { ...a, ...editFields } : a))\r\n//     );\r\n//     setEditingId(null);\r\n//   };\r\n\r\n//   const cancelEdit = () => setEditingId(null);\r\n//   const deleteAsset = (id) => setAssets(assets.filter((a) => a.id !== id));\r\n\r\n//   return (\r\n//     <div\r\n//       style={{\r\n//         padding: \"2rem\",\r\n//         fontFamily: \"Arial, sans-serif\",\r\n//         background: \"#D0F0F4\",\r\n//         minHeight: \"100vh\",\r\n//       }}\r\n//     >\r\n//       {/* Header */}\r\n//       <div style={{ textAlign: \"center\", marginBottom: \"2rem\" }}>\r\n//         <h1\r\n//           style={{\r\n//             fontSize: \"2rem\",\r\n//             fontWeight: \"bold\",\r\n//             margin: 0,\r\n//             letterSpacing: \"2px\",\r\n//           }}\r\n//         >\r\n//           FLOW TRACK\r\n//         </h1>\r\n//       </div>\r\n\r\n//       {/* Add Asset Top Form */}\r\n//       <div\r\n//         style={{\r\n//           marginBottom: \"2rem\",\r\n//           background: \"#fff\",\r\n//           padding: \"1.5rem\",\r\n//           borderRadius: \"8px\",\r\n//           boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\r\n//         }}\r\n//       >\r\n//         <h2 style={{ marginBottom: \"1rem\", fontSize: \"1.5rem\" }}>Add Asset</h2>\r\n//         <div style={{ display: \"flex\", gap: \"1rem\", flexWrap: \"wrap\" }}>\r\n//           <input\r\n//             placeholder=\"Email ID\"\r\n//             value={email}\r\n//             onChange={(e) => setEmail(e.target.value)}\r\n//             style={{\r\n//               flex: 1,\r\n//               padding: \"0.5rem\",\r\n//               borderRadius: \"4px\",\r\n//               border: \"1px solid #ccc\",\r\n//             }}\r\n//           />\r\n//           <select\r\n//             value={type}\r\n//             onChange={(e) => setType(e.target.value)}\r\n//             style={{\r\n//               flex: 1,\r\n//               padding: \"0.5rem\",\r\n//               borderRadius: \"4px\",\r\n//               border: \"1px solid #ccc\",\r\n//             }}\r\n//           >\r\n//             <option>Laptop</option>\r\n//             <option>Charger</option>\r\n//             <option>Network Issue</option>\r\n//           </select>\r\n//           <select\r\n//             value={location}\r\n//             onChange={(e) => setLocation(e.target.value)}\r\n//             style={{\r\n//               flex: 1,\r\n//               padding: \"0.5rem\",\r\n//               borderRadius: \"4px\",\r\n//               border: \"1px solid #ccc\",\r\n//             }}\r\n//           >\r\n//             <option>WFO</option>\r\n//             <option>WFH</option>\r\n//           </select>\r\n//           <button\r\n//             onClick={() => add(\"form\")}\r\n//             style={{\r\n//               padding: \"0.5rem 1rem\",\r\n//               background: \"#0052CC\",\r\n//               color: \"#fff\",\r\n//               border: \"none\",\r\n//               borderRadius: \"4px\",\r\n//               cursor: \"pointer\",\r\n//             }}\r\n//           >\r\n//             Add\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Kanban Board */}\r\n//       <div style={{ display: \"flex\", gap: \"1.5rem\" }}>\r\n//         {Object.keys(statusColumns).map((status) => (\r\n//           <div\r\n//             key={status}\r\n//             onDragOver={handleDragOver}\r\n//             onDrop={(e) => handleDrop(e, status)}\r\n//             style={{\r\n//               flex: 1,\r\n//               background: statusColumns[status].bgColor,\r\n//               padding: \"1.5rem\",\r\n//               borderRadius: \"12px\",\r\n//               minHeight: \"400px\",\r\n//             }}\r\n//           >\r\n//             <h3\r\n//               style={{\r\n//                 color: statusColumns[status].color,\r\n//                 fontSize: \"1.25rem\",\r\n//                 fontWeight: \"bold\",\r\n//                 marginBottom: \"1rem\",\r\n//                 textAlign: \"center\",\r\n//               }}\r\n//             >\r\n//               {statusColumns[status].title}\r\n//             </h3>\r\n\r\n//             {/* Assets */}\r\n//             {groupedAssets[status].map((a) => (\r\n//               <div\r\n//                 key={a.id}\r\n//                 draggable={editingId !== a.id}\r\n//                 onDragStart={(e) => handleDragStart(e, a)}\r\n//                 onMouseEnter={() => setHoveredId(a.id)}\r\n//                 onMouseLeave={() => setHoveredId(null)}\r\n//                 style={{\r\n//                   padding: \"1rem\",\r\n//                   marginBottom: \"0.75rem\",\r\n//                   borderRadius: \"8px\",\r\n//                   background: statusColumns[status].color,\r\n//                   color: \"#fff\",\r\n//                   fontWeight: \"600\",\r\n//                   boxShadow:\r\n//                     draggedAsset?.id === a.id\r\n//                       ? \"0 4px 12px rgba(0,0,0,0.2)\"\r\n//                       : \"0 2px 4px rgba(0,0,0,0.1)\",\r\n//                   position: \"relative\",\r\n//                   cursor: editingId === a.id ? \"default\" : \"move\",\r\n//                   opacity: draggedAsset?.id === a.id ? 0.5 : 1,\r\n//                 }}\r\n//               >\r\n//                 {editingId === a.id ? (\r\n//                   <div\r\n//                     style={{ display: \"flex\", flexDirection: \"column\", gap: \"0.5rem\" }}\r\n//                   >\r\n//                     <input\r\n//                       value={editFields.email}\r\n//                       onChange={(e) =>\r\n//                         setEditFields({ ...editFields, email: e.target.value })\r\n//                       }\r\n//                       style={{ padding: \"0.5rem\", borderRadius: \"4px\", border: \"none\" }}\r\n//                     />\r\n//                     <select\r\n//                       value={editFields.type}\r\n//                       onChange={(e) =>\r\n//                         setEditFields({ ...editFields, type: e.target.value })\r\n//                       }\r\n//                       style={{ padding: \"0.5rem\", borderRadius: \"4px\", border: \"none\" }}\r\n//                     >\r\n//                       <option>Laptop</option>\r\n//                       <option>Charger</option>\r\n//                       <option>Network Issue</option>\r\n//                     </select>\r\n//                     <select\r\n//                       value={editFields.location}\r\n//                       onChange={(e) =>\r\n//                         setEditFields({ ...editFields, location: e.target.value })\r\n//                       }\r\n//                       style={{ padding: \"0.5rem\", borderRadius: \"4px\", border: \"none\" }}\r\n//                     >\r\n//                       <option>WFH</option>\r\n//                       <option>WFO</option>\r\n//                     </select>\r\n//                     <select\r\n//                       value={editFields.status}\r\n//                       onChange={(e) =>\r\n//                         setEditFields({ ...editFields, status: e.target.value })\r\n//                       }\r\n//                       style={{ padding: \"0.5rem\", borderRadius: \"4px\", border: \"none\" }}\r\n//                     >\r\n//                       {Object.keys(statusColumns).map((s) => (\r\n//                         <option key={s} value={s}>\r\n//                           {statusColumns[s].title}\r\n//                         </option>\r\n//                       ))}\r\n//                     </select>\r\n//                     {/* Open Date/Time field visible in edit mode */}\r\n//                     <div\r\n//                       style={{\r\n//                         fontSize: \"0.85rem\",\r\n//                         color: \"#e6ffe6\",\r\n//                         margin: \"0.25rem 0\",\r\n//                         fontWeight: 400,\r\n//                         opacity: 0.95,\r\n//                       }}\r\n//                     >\r\n//                       Opened: {formatOpenDate(editFields.openDate)}\r\n//                     </div>\r\n//                     <div style={{ display: \"flex\", gap: \"0.5rem\" }}>\r\n//                       <button\r\n//                         onClick={() => saveEdit(a.id)}\r\n//                         style={{\r\n//                           background: \"#36B37E\",\r\n//                           color: \"#fff\",\r\n//                           border: \"none\",\r\n//                           borderRadius: \"4px\",\r\n//                           padding: \"0.5rem\",\r\n//                           flex: 1,\r\n//                           cursor: \"pointer\",\r\n//                         }}\r\n//                       >\r\n//                         Save\r\n//                       </button>\r\n//                       <button\r\n//                         onClick={cancelEdit}\r\n//                         style={{\r\n//                           background: \"#DE350B\",\r\n//                           color: \"#fff\",\r\n//                           border: \"none\",\r\n//                           borderRadius: \"4px\",\r\n//                           padding: \"0.5rem\",\r\n//                           flex: 1,\r\n//                           cursor: \"pointer\",\r\n//                         }}\r\n//                       >\r\n//                         Cancel\r\n//                       </button>\r\n//                     </div>\r\n//                   </div>\r\n//                 ) : (\r\n//                   <div onClick={() => startEditing(a)} style={{ cursor: \"pointer\" }}>\r\n//                     <div style={{ fontWeight: \"bold\", fontSize: \"1rem\" }}>{a.email}</div>\r\n//                     <div\r\n//                       style={{\r\n//                         fontSize: \"0.8rem\",\r\n//                         marginTop: \"0.25rem\",\r\n//                         opacity: 0.9,\r\n//                       }}\r\n//                     >\r\n//                       {a.type} | {a.location}\r\n//                     </div>\r\n//                     {/* Open Date/Time Display */}\r\n//                     <div\r\n//                       style={{\r\n//                         fontSize: \"0.85rem\",\r\n//                         color: \"#e6ffe6\",\r\n//                         marginTop: \"0.25rem\",\r\n//                         fontWeight: 400,\r\n//                         opacity: 0.95,\r\n//                       }}\r\n//                     >\r\n//                       Opened: {formatOpenDate(a.openDate)}\r\n//                     </div>\r\n//                   </div>\r\n//                 )}\r\n\r\n//                 {/* Hover Toolbar */}\r\n//                 {hoveredId === a.id && editingId !== a.id && (\r\n//                   <div\r\n//                     style={{\r\n//                       position: \"absolute\",\r\n//                       top: \"4px\",\r\n//                       right: \"4px\",\r\n//                       display: \"flex\",\r\n//                       gap: \"0.5rem\",\r\n//                     }}\r\n//                   >\r\n//                     <button\r\n//                       onClick={(e) => {\r\n//                         e.stopPropagation();\r\n//                         startEditing(a);\r\n//                       }}\r\n//                       style={{\r\n//                         background: \"rgba(255,255,255,0.9)\",\r\n//                         border: \"none\",\r\n//                         color: \"#0052CC\",\r\n//                         cursor: \"pointer\",\r\n//                         fontWeight: \"bold\",\r\n//                         padding: \"0.25rem 0.5rem\",\r\n//                         borderRadius: \"4px\",\r\n//                       }}\r\n//                     >\r\n//                       Edit\r\n//                     </button>\r\n//                     <button\r\n//                       onClick={(e) => {\r\n//                         e.stopPropagation();\r\n//                         deleteAsset(a.id);\r\n//                       }}\r\n//                       style={{\r\n//                         background: \"rgba(255,255,255,0.9)\",\r\n//                         border: \"none\",\r\n//                         color: \"#DE350B\",\r\n//                         cursor: \"pointer\",\r\n//                         fontWeight: \"bold\",\r\n//                         padding: \"0.25rem 0.5rem\",\r\n//                         borderRadius: \"4px\",\r\n//                       }}\r\n//                     >\r\n//                       Delete\r\n//                     </button>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             ))}\r\n\r\n//             {/* Quick Add in Column */}\r\n//             <div\r\n//               style={{\r\n//                 marginTop: \"0.75rem\",\r\n//                 display: \"flex\",\r\n//                 flexDirection: \"column\",\r\n//                 gap: \"0.5rem\",\r\n//               }}\r\n//             ></div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// for more updates"],"mappings":";;AAKA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAkBA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
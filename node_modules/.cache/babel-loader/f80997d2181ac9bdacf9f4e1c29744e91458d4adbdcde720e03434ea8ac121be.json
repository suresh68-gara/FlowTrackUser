{"ast":null,"code":"// /*\n//   Same mock API as before but kept compact. Uses localStorage.\n//   Data shapes include accessibility-friendly fields (labels, timestamps).\n// */\n// import { v4 as uuidv4 } from 'uuid';\n// const KEY = { USER: 'tf_user_v3', USERS:'tf_users_v3', PROJECTS:'tf_projects_v3', ISSUES:'tf_issues_v3', ASSETS:'tf_assets_v3', NOTIFS:'tf_notifs_v3' };\n\n// function ensure(){\n//   if(!localStorage.getItem(KEY.USERS)){\n//     const users = [{id:'u1',name:'Admin User',email:'admin@demo.com',role:'Admin'},{id:'u2',name:'Dev Alice',email:'alice@demo.com',role:'Developer'},{id:'u3',name:'Manager Bob',email:'bob@demo.com',role:'Manager'}];\n//     localStorage.setItem(KEY.USERS,JSON.stringify(users));\n//   }\n//   if(!localStorage.getItem(KEY.PROJECTS)){\n//     const projects=[{id:'p1',key:'ALPHA',name:'Alpha',description:'Alpha project',leads:['u3']},{id:'p2',key:'BETA',name:'Beta',description:'Beta project',leads:['u2']}];\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(projects));\n//   }\n//   if(!localStorage.getItem(KEY.ISSUES)){\n//     const issues=[{id:'i1',projectId:'p1',title:'Setup repo',status:'todo',priority:'P2',assignee:'u2',type:'Task',storyPoints:3,createdAt:Date.now()},{id:'i2',projectId:'p1',title:'Login bug',status:'inprogress',priority:'P1',assignee:'u2',type:'Bug',storyPoints:1,createdAt:Date.now()},{id:'i3',projectId:'p2',title:'OAuth',status:'done',priority:'P3',assignee:'u3',type:'Story',storyPoints:5,createdAt:Date.now()}];\n//     localStorage.setItem(KEY.ISSUES,JSON.stringify(issues));\n//   }\n//   if(!localStorage.getItem(KEY.ASSETS)){ localStorage.setItem(KEY.ASSETS,JSON.stringify([{id:'a1',name:'Dev Laptop',type:'Laptop',owner:'u2',status:'active'}])); }\n//   if(!localStorage.getItem(KEY.NOTIFS)){ localStorage.setItem(KEY.NOTIFS,JSON.stringify([{id:uuidv4(),userId:'u2',text:'Assigned i1',read:false,ts:Date.now()}])); }\n// }\n\n// export function mockLogin(email,password){ ensure(); const users=JSON.parse(localStorage.getItem(KEY.USERS)); const user=users.find(u=>u.email===email)||users[0]; localStorage.setItem(KEY.USER,JSON.stringify(user)); return Promise.resolve(user); }\n// export function logout(){ localStorage.removeItem(KEY.USER); return Promise.resolve(); }\n// export function getCurrentUser(){ const s=localStorage.getItem(KEY.USER); return s?JSON.parse(s):null; }\n\n// export function listUsers(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\n// export function addUser(u){ const arr=JSON.parse(localStorage.getItem(KEY.USERS)||'[]'); arr.push(u); localStorage.setItem(KEY.USERS,JSON.stringify(arr)); return Promise.resolve(u); }\n\n// export function listProjects(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\n// export function getProject(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x=>x.id===id)); }\n// export function addProject(p){ const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]'); arr.push(p); localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr)); return Promise.resolve(p); }\n\n// export function listIssues(projectId){ ensure(); let arr=JSON.parse(localStorage.getItem(KEY.ISSUES)); if(projectId) arr=arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\n// export function getIssue(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x=>x.id===id)); }\n// export function createIssue(data){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const id='i'+Math.floor(Math.random()*100000); const issue={...data,id,createdAt:Date.now()}; arr.push(issue); localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(issue); }\n// export function updateIssue(id,patch){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(x=>x.id===id); if(idx>=0){ arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(arr[idx]); } return Promise.reject('not found'); }\n// export function moveIssue(id,status){ return updateIssue(id,{status}); }\n\n// export function listAssets(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS))); }\n// export function addAsset(a){ const arr=JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS,JSON.stringify(arr)); return Promise.resolve(a); }\n\n// export function listNotifs(userId){ ensure(); const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId?arr.filter(n=>n.userId===userId):arr); }\n// export function markNotif(id){ const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx=arr.findIndex(n=>n.id===id); if(idx>=0){ arr[idx].read=true; localStorage.setItem(KEY.NOTIFS,JSON.stringify(arr)); } return Promise.resolve(); }\n\n// import { v4 as uuidv4 } from 'uuid';\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS:'tf_users_v3',\n//   PROJECTS:'tf_projects_v3',\n//   ISSUES:'tf_issues_v3',\n//   ASSETS:'tf_assets_v3',\n//   NOTIFS:'tf_notifs_v3'\n// };\n\n// function ensure(){\n//   if(!localStorage.getItem(KEY.USERS)){\n//     const users = [\n//       {id:'u1',name:'Admin User',email:'admin@demo.com',role:'Admin'},\n//       {id:'u2',name:'Dev Alice',email:'alice@demo.com',role:'Developer'},\n//       {id:'u3',name:'Manager Bob',email:'bob@demo.com',role:'Manager'}\n//     ];\n//     localStorage.setItem(KEY.USERS,JSON.stringify(users));\n//   }\n//   if(!localStorage.getItem(KEY.PROJECTS)){\n//     const projects=[\n//       {id:'p1',key:'ALPHA',name:'Alpha',description:'Alpha project',leads:['u3'], createdAt:Date.now(), lastUpdated:Date.now()},\n//       {id:'p2',key:'BETA',name:'Beta',description:'Beta project',leads:['u2'], createdAt:Date.now(), lastUpdated:Date.now()}\n//     ];\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(projects));\n//   }\n//   if(!localStorage.getItem(KEY.ISSUES)){\n//     const issues=[\n//       {id:'i1',projectId:'p1',title:'Setup repo',status:'todo',priority:'P2',assignee:'u2',type:'Task',storyPoints:3,createdAt:Date.now()},\n//       {id:'i2',projectId:'p1',title:'Login bug',status:'inprogress',priority:'P1',assignee:'u2',type:'Bug',storyPoints:1,createdAt:Date.now()},\n//       {id:'i3',projectId:'p2',title:'OAuth',status:'done',priority:'P3',assignee:'u3',type:'Story',storyPoints:5,createdAt:Date.now()}\n//     ];\n//     localStorage.setItem(KEY.ISSUES,JSON.stringify(issues));\n//   }\n//   if(!localStorage.getItem(KEY.ASSETS)){ localStorage.setItem(KEY.ASSETS,JSON.stringify([{id:'a1',name:'Dev Laptop',type:'Laptop',owner:'u2',status:'active'}])); }\n//   if(!localStorage.getItem(KEY.NOTIFS)){ localStorage.setItem(KEY.NOTIFS,JSON.stringify([{id:uuidv4(),userId:'u2',text:'Assigned i1',read:false,ts:Date.now()}])); }\n// }\n\n// export function mockLogin(email,password){ ensure(); const users=JSON.parse(localStorage.getItem(KEY.USERS)); const user=users.find(u=>u.email===email)||users[0]; localStorage.setItem(KEY.USER,JSON.stringify(user)); return Promise.resolve(user); }\n// export function logout(){ localStorage.removeItem(KEY.USER); return Promise.resolve(); }\n// export function getCurrentUser(){ const s=localStorage.getItem(KEY.USER); return s?JSON.parse(s):null; }\n\n// export function listUsers(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\n// export function addUser(u){ const arr=JSON.parse(localStorage.getItem(KEY.USERS)||'[]'); arr.push(u); localStorage.setItem(KEY.USERS,JSON.stringify(arr)); return Promise.resolve(u); }\n\n// export function listProjects(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\n// export function getProject(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x=>x.id===id)); }\n// export function addProject(p){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// // ✅ New: delete project\n// export function deleteProject(id){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS,JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ✅ New: update project\n// export function updateProject(id, patch){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const idx=arr.findIndex(p => p.id===id);\n//   if(idx>=0){\n//     arr[idx] = {...arr[idx], ...patch, lastUpdated: Date.now()};\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function listIssues(projectId){ ensure(); let arr=JSON.parse(localStorage.getItem(KEY.ISSUES)); if(projectId) arr=arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\n// export function getIssue(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x=>x.id===id)); }\n// export function createIssue(data){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const id='i'+Math.floor(Math.random()*100000); const issue={...data,id,createdAt:Date.now()}; arr.push(issue); localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(issue); }\n// export function updateIssue(id,patch){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(x=>x.id===id); if(idx>=0){ arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES,JSON.stringify(arr[idx])); return Promise.resolve(arr[idx]); } return Promise.reject('not found'); }\n// export function moveIssue(id,status){ return updateIssue(id,{status}); }\n\n// export function listAssets(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS))); }\n// export function addAsset(a){ const arr=JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS,JSON.stringify(arr)); return Promise.resolve(a); }\n\n// export function listNotifs(userId){ ensure(); const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId?arr.filter(n=>n.userId===userId):arr); }\n// export function markNotif(id){ const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx=arr.findIndex(n=>n.id===id); if(idx>=0){ arr[idx].read=true; localStorage.setItem(KEY.NOTIFS,JSON.stringify(arr)); } return Promise.resolve(); }\n\n// for mounika\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       { id: 'p1', key: 'ALPHA', name: 'Alpha', description: 'Alpha project', leads: ['u3'], createdAt: Date.now(), lastUpdated: Date.now() },\n//       { id: 'p2', key: 'BETA', name: 'Beta', description: 'Beta project', leads: ['u2'], createdAt: Date.now(), lastUpdated: Date.now() }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       { id: 'i1', projectId: 'p1', title: 'Setup repo', status: 'todo', priority: 'P2', assignee: 'u2', type: 'Task', storyPoints: 3, createdAt: Date.now() },\n//       { id: 'i2', projectId: 'p1', title: 'Login bug', status: 'inprogress', priority: 'P1', assignee: 'u2', type: 'Bug', storyPoints: 1, createdAt: Date.now() },\n//       { id: 'i3', projectId: 'p2', title: 'OAuth', status: 'done', priority: 'P3', assignee: 'u3', type: 'Story', storyPoints: 5, createdAt: Date.now() }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(KEY.ASSETS, JSON.stringify([{ id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }]));\n//   }\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify([{ id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }]));\n//   }\n// }\n\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = JSON.parse(localStorage.getItem(KEY.USERS));\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)));\n// }\n\n// export function addUser(u) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   arr.push(u);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const filtered = arr.filter(u => u.id !== id);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)));\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x => x.id === id));\n// }\n\n// export function addProject(p) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// export function deleteProject(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = JSON.parse(localStorage.getItem(KEY.ISSUES));\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x => x.id === id));\n// }\n\n// export function createIssue(data) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)));\n// }\n\n// export function addAsset(a) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n//   arr.push(a);\n//   localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n//   return Promise.resolve(a);\n// }\n\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n//   }\n//   return Promise.resolve();\n// }\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       {\n//         id: 'p1',\n//         key: 'ALPHA',\n//         name: 'Alpha',\n//         description: 'Alpha project',\n//         leads: ['u3'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       },\n//       {\n//         id: 'p2',\n//         key: 'BETA',\n//         name: 'Beta',\n//         description: 'Beta project',\n//         leads: ['u2'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       {\n//         id: 'i1',\n//         projectId: 'p1',\n//         title: 'Setup repo',\n//         status: 'todo',\n//         priority: 'P2',\n//         assignee: 'u2',\n//         type: 'Task',\n//         storyPoints: 3,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i2',\n//         projectId: 'p1',\n//         title: 'Login bug',\n//         status: 'inprogress',\n//         priority: 'P1',\n//         assignee: 'u2',\n//         type: 'Bug',\n//         storyPoints: 1,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i3',\n//         projectId: 'p2',\n//         title: 'OAuth',\n//         status: 'done',\n//         priority: 'P3',\n//         assignee: 'u3',\n//         type: 'Story',\n//         storyPoints: 5,\n//         createdAt: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(\n//       KEY.ASSETS,\n//       JSON.stringify([\n//         { id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }\n//       ])\n//     );\n//   }\n\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(\n//       KEY.NOTIFS,\n//       JSON.stringify([\n//         { id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }\n//       ])\n//     );\n//   }\n// }\n\n// // ---------- AUTH ----------\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = JSON.parse(localStorage.getItem(KEY.USERS)) || [];\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// // ---------- USERS ----------\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)) || []);\n// }\n\n// export function addUser(u) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   arr.push(u);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const filtered = arr.filter(u => u.id !== id);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ---------- PROJECTS ----------\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)) || []);\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(\n//     (JSON.parse(localStorage.getItem(KEY.PROJECTS)) || []).find(x => x.id === id)\n//   );\n// }\n\n// export function addProject(p) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function deleteProject(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ---------- ISSUES ----------\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = JSON.parse(localStorage.getItem(KEY.ISSUES)) || [];\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(\n//     (JSON.parse(localStorage.getItem(KEY.ISSUES)) || []).find(x => x.id === id)\n//   );\n// }\n\n// export function createIssue(data) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// // ---------- ASSETS ----------\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)) || []);\n// }\n\n// export function addAsset(a) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n//   arr.push(a);\n//   localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n//   return Promise.resolve(a);\n// }\n\n// // ---------- NOTIFS ----------\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n//   }\n//   return Promise.resolve();\n// }\n\n// //today\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       {\n//         id: 'p1',\n//         key: 'ALPHA',\n//         name: 'Alpha',\n//         description: 'Alpha project',\n//         leads: ['u3'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       },\n//       {\n//         id: 'p2',\n//         key: 'BETA',\n//         name: 'Beta',\n//         description: 'Beta project',\n//         leads: ['u2'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       {\n//         id: 'i1',\n//         projectId: 'p1',\n//         title: 'Setup repo',\n//         status: 'todo',\n//         priority: 'P2',\n//         assignee: 'u2',\n//         type: 'Task',\n//         storyPoints: 3,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i2',\n//         projectId: 'p1',\n//         title: 'Login bug',\n//         status: 'inprogress',\n//         priority: 'P1',\n//         assignee: 'u2',\n//         type: 'Bug',\n//         storyPoints: 1,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i3',\n//         projectId: 'p2',\n//         title: 'OAuth',\n//         status: 'done',\n//         priority: 'P3',\n//         assignee: 'u3',\n//         type: 'Story',\n//         storyPoints: 5,\n//         createdAt: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(\n//       KEY.ASSETS,\n//       JSON.stringify([\n//         { id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }\n//       ])\n//     );\n//   }\n\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(\n//       KEY.NOTIFS,\n//       JSON.stringify([\n//         { id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }\n//       ])\n//     );\n//   }\n// }\n\n// // ---------- HELPERS ----------\n// function safeParse(key) {\n//   try {\n//     const raw = localStorage.getItem(key);\n//     const parsed = raw ? JSON.parse(raw) : [];\n//     return Array.isArray(parsed) ? parsed : [];\n//   } catch {\n//     return [];\n//   }\n// }\n\n// function save(key, arr) {\n//   localStorage.setItem(key, JSON.stringify(arr));\n// }\n\n// // ---------- AUTH ----------\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = safeParse(KEY.USERS);\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// // ---------- USERS ----------\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.USERS));\n// }\n\n// export function addUser(u) {\n//   const arr = safeParse(KEY.USERS);\n//   arr.push(u);\n//   save(KEY.USERS, arr);\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = safeParse(KEY.USERS);\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     save(KEY.USERS, arr);\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = safeParse(KEY.USERS).filter(u => u.id !== id);\n//   save(KEY.USERS, arr);\n//   return Promise.resolve(true);\n// }\n\n// // ---------- PROJECTS ----------\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.PROJECTS));\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.PROJECTS).find(x => x.id === id));\n// }\n\n// export function addProject(p) {\n//   const arr = safeParse(KEY.PROJECTS);\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   save(KEY.PROJECTS, arr);\n//   return Promise.resolve(p);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = safeParse(KEY.PROJECTS);\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     save(KEY.PROJECTS, arr);\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function deleteProject(id) {\n//   const arr = safeParse(KEY.PROJECTS).filter(p => p.id !== id);\n//   save(KEY.PROJECTS, arr);\n//   return Promise.resolve(true);\n// }\n\n// // ---------- ISSUES ----------\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = safeParse(KEY.ISSUES);\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.ISSUES).find(x => x.id === id));\n// }\n\n// export function createIssue(data) {\n//   const arr = safeParse(KEY.ISSUES);\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   save(KEY.ISSUES, arr);\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = safeParse(KEY.ISSUES);\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     save(KEY.ISSUES, arr);\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// // ---------- ASSETS ----------\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.ASSETS));\n// }\n\n// export function addAsset(a) {\n//   const arr = safeParse(KEY.ASSETS);\n//   arr.push(a);\n//   save(KEY.ASSETS, arr);\n//   return Promise.resolve(a);\n// }\n\n// // ---------- NOTIFS ----------\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = safeParse(KEY.NOTIFS);\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = safeParse(KEY.NOTIFS);\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     save(KEY.NOTIFS, arr);\n//   }\n//   return Promise.resolve();\n// }\n\nimport { v4 as uuidv4 } from 'uuid';\nconst KEY = {\n  USER: 'tf_user_v3',\n  USERS: 'tf_users_v3',\n  PROJECTS: 'tf_projects_v3',\n  ISSUES: 'tf_issues_v3',\n  EPICS: 'tf_epics_v3',\n  ASSETS: 'tf_assets_v3',\n  NOTIFS: 'tf_notifs_v3'\n};\n\n// Styles (unchanged)\nexport const STYLES = {/* your existing STYLES object */};\n\n// Initialize global CSS (unchanged)\nconst globalStyles = `/* your existing global CSS */`;\nif (typeof document !== 'undefined') {\n  const styleSheet = document.createElement('style');\n  styleSheet.textContent = globalStyles;\n  document.head.appendChild(styleSheet);\n}\n\n// Ensure data exists\nfunction ensure() {\n  if (!localStorage.getItem(KEY.USERS)) {\n    const users = [{\n      id: 'u1',\n      name: 'Admin User',\n      email: 'admin@demo.com',\n      role: 'Admin'\n    }, {\n      id: 'u2',\n      name: 'Dev Alice',\n      email: 'alice@demo.com',\n      role: 'Developer'\n    }, {\n      id: 'u3',\n      name: 'Manager Bob',\n      email: 'bob@demo.com',\n      role: 'Manager'\n    }];\n    localStorage.setItem(KEY.USERS, JSON.stringify(users));\n  }\n  if (!localStorage.getItem(KEY.PROJECTS)) {\n    const projects = [{\n      id: 'p1',\n      key: 'ALPHA',\n      name: 'Alpha',\n      description: 'Alpha project',\n      leads: ['u3']\n    }, {\n      id: 'p2',\n      key: 'BETA',\n      name: 'Beta',\n      description: 'Beta project',\n      leads: ['u2']\n    }];\n    localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n  }\n  if (!localStorage.getItem(KEY.EPICS)) {\n    const epics = [{\n      id: 'e1',\n      projectId: 'p1',\n      name: 'Initial Setup'\n    }, {\n      id: 'e2',\n      projectId: 'p2',\n      name: 'Authentication'\n    }];\n    localStorage.setItem(KEY.EPICS, JSON.stringify(epics));\n  }\n  if (!localStorage.getItem(KEY.ISSUES)) {\n    const issues = [{\n      id: 'i1',\n      projectId: 'p1',\n      epic: 'e1',\n      title: 'Setup repo',\n      status: 'todo',\n      priority: 'P2',\n      assignee: 'u2',\n      type: 'Task',\n      storyPoints: 3,\n      createdAt: Date.now()\n    }, {\n      id: 'i2',\n      projectId: 'p1',\n      epic: 'e1',\n      title: 'Login bug',\n      status: 'inprogress',\n      priority: 'P1',\n      assignee: 'u2',\n      type: 'Bug',\n      storyPoints: 1,\n      createdAt: Date.now()\n    }, {\n      id: 'i3',\n      projectId: 'p2',\n      epic: 'e2',\n      title: 'OAuth',\n      status: 'done',\n      priority: 'P3',\n      assignee: 'u3',\n      type: 'Story',\n      storyPoints: 5,\n      createdAt: Date.now()\n    }];\n    localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n  }\n  if (!localStorage.getItem(KEY.ASSETS)) {\n    localStorage.setItem(KEY.ASSETS, JSON.stringify([{\n      id: 'a1',\n      name: 'Dev Laptop',\n      type: 'Laptop',\n      owner: 'u2',\n      status: 'active'\n    }]));\n  }\n  if (!localStorage.getItem(KEY.NOTIFS)) {\n    localStorage.setItem(KEY.NOTIFS, JSON.stringify([{\n      id: uuidv4(),\n      userId: 'u2',\n      text: 'Assigned i1',\n      read: false,\n      ts: Date.now()\n    }]));\n  }\n}\n\n// ------------------ AUTH ------------------\nexport function mockLogin(email) {\n  ensure();\n  const users = JSON.parse(localStorage.getItem(KEY.USERS));\n  const user = users.find(u => u.email === email) || users[0];\n  localStorage.setItem(KEY.USER, JSON.stringify(user));\n  return Promise.resolve(user);\n}\nexport function logout() {\n  localStorage.removeItem(KEY.USER);\n  return Promise.resolve();\n}\nexport function getCurrentUser() {\n  const s = localStorage.getItem(KEY.USER);\n  return s ? JSON.parse(s) : null;\n}\n\n// ------------------ USERS ------------------\nexport function listUsers() {\n  ensure();\n  return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)));\n}\nexport function addUser(u) {\n  const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n  arr.push(u);\n  localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n  return Promise.resolve(u);\n}\nexport function updateUser(updatedUser) {\n  const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n  const idx = arr.findIndex(u => u.id === updatedUser.id);\n  if (idx >= 0) {\n    arr[idx] = updatedUser;\n    localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n    return Promise.resolve(updatedUser);\n  }\n  return Promise.reject(new Error('User not found'));\n}\nexport function deleteUser(userId) {\n  const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n  localStorage.setItem(KEY.USERS, JSON.stringify(arr.filter(u => u.id !== userId)));\n  return Promise.resolve();\n}\n\n// ------------------ PROJECTS ------------------\nexport function listProjects() {\n  ensure();\n  return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)));\n}\nexport function getProject(id) {\n  ensure();\n  const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS));\n  return Promise.resolve(arr.find(p => p.id === id));\n}\nexport function addProject(p) {\n  const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n  arr.push(p);\n  localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n  return Promise.resolve(p);\n}\nexport function updateProject(id, patch) {\n  const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n  const idx = arr.findIndex(p => p.id === id);\n  if (idx >= 0) {\n    arr[idx] = {\n      ...arr[idx],\n      ...patch\n    };\n    localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n    return Promise.resolve(arr[idx]);\n  }\n  return Promise.reject(new Error('Project not found'));\n}\nexport function deleteProject(id) {\n  const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]').filter(p => p.id !== id);\n  localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n  // delete related issues and epics\n  const issues = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]').filter(i => i.projectId !== id);\n  const epics = JSON.parse(localStorage.getItem(KEY.EPICS) || '[]').filter(e => e.projectId !== id);\n  localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n  localStorage.setItem(KEY.EPICS, JSON.stringify(epics));\n  return Promise.resolve();\n}\n\n// ------------------ EPICS ------------------\nexport function listEpics(projectId) {\n  ensure();\n  let arr = JSON.parse(localStorage.getItem(KEY.EPICS) || '[]');\n  if (projectId) arr = arr.filter(e => e.projectId === projectId);\n  return Promise.resolve(arr);\n}\nexport function createEpic(name, projectId) {\n  if (!projectId) return Promise.reject(new Error(\"ProjectId required\"));\n  const arr = JSON.parse(localStorage.getItem(KEY.EPICS) || '[]');\n  const epic = {\n    id: uuidv4(),\n    name,\n    projectId\n  };\n  arr.push(epic);\n  localStorage.setItem(KEY.EPICS, JSON.stringify(arr));\n  return Promise.resolve(epic);\n}\nexport function deleteEpic(epicId) {\n  const epics = JSON.parse(localStorage.getItem(KEY.EPICS) || '[]').filter(e => e.id !== epicId);\n  localStorage.setItem(KEY.EPICS, JSON.stringify(epics));\n  // delete all issues under this epic\n  const issues = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]').filter(i => i.epic !== epicId);\n  localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n  return Promise.resolve();\n}\n\n// ------------------ ISSUES ------------------\nexport function listIssues(projectId) {\n  ensure();\n  let arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n  if (projectId) arr = arr.filter(i => i.projectId === projectId);\n  return Promise.resolve(arr);\n}\nexport function getIssue(id) {\n  ensure();\n  const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n  return Promise.resolve(arr.find(i => i.id === id));\n}\nexport function createIssue(data) {\n  if (!data.projectId) return Promise.reject(new Error(\"ProjectId required\"));\n  const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n  const issue = {\n    ...data,\n    id: uuidv4(),\n    createdAt: Date.now()\n  };\n  arr.push(issue);\n  localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n  return Promise.resolve(issue);\n}\nexport function updateIssue(id, patch) {\n  const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n  const idx = arr.findIndex(i => i.id === id);\n  if (idx >= 0) {\n    arr[idx] = {\n      ...arr[idx],\n      ...patch\n    };\n    localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n    return Promise.resolve(arr[idx]);\n  }\n  return Promise.reject(new Error('Issue not found'));\n}\nexport function moveIssue(id, status) {\n  return updateIssue(id, {\n    status\n  });\n}\nexport function deleteIssue(id) {\n  const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]').filter(i => i.id !== id);\n  localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n  return Promise.resolve();\n}\n\n// ------------------ ASSETS ------------------\nexport function listAssets() {\n  ensure();\n  return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]'));\n}\nexport function addAsset(a) {\n  const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n  arr.push(a);\n  localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n  return Promise.resolve(a);\n}\n\n// ------------------ NOTIFICATIONS ------------------\nexport function listNotifs(userId) {\n  ensure();\n  const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n  return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n}\nexport function markNotif(id) {\n  const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n  const idx = arr.findIndex(n => n.id === id);\n  if (idx >= 0) {\n    arr[idx].read = true;\n    localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n  }\n  return Promise.resolve();\n}\n\n// ------------------ UTILS ------------------\nexport function getUserAvatarStyle(name) {\n  return {\n    ...STYLES.avatar,\n    backgroundColor: stringToColor(name)\n  };\n}\nfunction stringToColor(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  const hue = hash % 360;\n  return `hsl(${hue},70%,60%)`;\n}\nexport function getStatusBadgeStyle(status) {\n  return {\n    ...STYLES.badge,\n    ...STYLES.status[status]\n  };\n}\nexport function getPriorityBadgeStyle(priority) {\n  return {\n    ...STYLES.badge,\n    ...STYLES.priority[priority]\n  };\n}\nexport function withHover(baseStyle, hoverStyle = STYLES.buttonHover) {\n  return {\n    ...baseStyle,\n    ':hover': hoverStyle\n  };\n}\nexport function getCardStyle(variant = 'default') {\n  const variants = {\n    default: STYLES.card,\n    elevated: {\n      ...STYLES.card,\n      boxShadow: '0 8px 30px rgba(0,0,0,0.12)'\n    },\n    bordered: {\n      ...STYLES.card,\n      border: '2px solid #e2e8f0',\n      boxShadow: 'none'\n    }\n  };\n  return variants[variant] || variants.default;\n}\nexport function getButtonStyle(variant = 'primary') {\n  const variants = {\n    primary: STYLES.button,\n    secondary: {\n      ...STYLES.button,\n      background: 'linear-gradient(135deg, #e2e8f0 0%, #cbd5e0 100%)',\n      color: '#4a5568',\n      boxShadow: '0 4px 15px rgba(0,0,0,0.1)'\n    },\n    danger: {\n      ...STYLES.button,\n      background: 'linear-gradient(135deg, #fc8181 0%, #f56565 100%)',\n      boxShadow: '0 4px 15px rgba(245,101,101,0.3)'\n    }\n  };\n  return variants[variant] || variants.primary;\n}\nexport function getInputStyle(variant = 'default') {\n  const variants = {\n    default: STYLES.input,\n    search: {\n      ...STYLES.input,\n      backgroundImage: 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' fill=\\'none\\' viewBox=\\'0 0 24 24\\' stroke=\\'%2394a3b8\\'%3E%3Cpath stroke-linecap=\\'round\\' stroke-linejoin=\\'round\\' stroke-width=\\'2\\' d=\\'M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\\' /%3E%3C/svg%3E\")',\n      backgroundRepeat: 'no-repeat',\n      backgroundPosition: '12px center',\n      backgroundSize: 'clamp(16px, 4vw, 18px)',\n      paddingLeft: 'clamp(2rem, 5vw, 2.5rem)'\n    }\n  };\n  return variants[variant] || variants.default;\n}\nexport function getUserSectionStyle() {\n  return {\n    ...STYLES.userSection,\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start'\n  };\n}","map":{"version":3,"names":["v4","uuidv4","KEY","USER","USERS","PROJECTS","ISSUES","EPICS","ASSETS","NOTIFS","STYLES","globalStyles","document","styleSheet","createElement","textContent","head","appendChild","ensure","localStorage","getItem","users","id","name","email","role","setItem","JSON","stringify","projects","key","description","leads","epics","projectId","issues","epic","title","status","priority","assignee","type","storyPoints","createdAt","Date","now","owner","userId","text","read","ts","mockLogin","parse","user","find","u","Promise","resolve","logout","removeItem","getCurrentUser","s","listUsers","addUser","arr","push","updateUser","updatedUser","idx","findIndex","reject","Error","deleteUser","filter","listProjects","getProject","p","addProject","updateProject","patch","deleteProject","i","e","listEpics","createEpic","deleteEpic","epicId","listIssues","getIssue","createIssue","data","issue","updateIssue","moveIssue","deleteIssue","listAssets","addAsset","a","listNotifs","n","markNotif","getUserAvatarStyle","avatar","backgroundColor","stringToColor","str","hash","length","charCodeAt","hue","getStatusBadgeStyle","badge","getPriorityBadgeStyle","withHover","baseStyle","hoverStyle","buttonHover","getCardStyle","variant","variants","default","card","elevated","boxShadow","bordered","border","getButtonStyle","primary","button","secondary","background","color","danger","getInputStyle","input","search","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","paddingLeft","getUserSectionStyle","userSection","width","display","flexDirection","alignItems"],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/services/mockApi.js"],"sourcesContent":["\n// /*\n//   Same mock API as before but kept compact. Uses localStorage.\n//   Data shapes include accessibility-friendly fields (labels, timestamps).\n// */\n// import { v4 as uuidv4 } from 'uuid';\n// const KEY = { USER: 'tf_user_v3', USERS:'tf_users_v3', PROJECTS:'tf_projects_v3', ISSUES:'tf_issues_v3', ASSETS:'tf_assets_v3', NOTIFS:'tf_notifs_v3' };\n\n// function ensure(){\n//   if(!localStorage.getItem(KEY.USERS)){\n//     const users = [{id:'u1',name:'Admin User',email:'admin@demo.com',role:'Admin'},{id:'u2',name:'Dev Alice',email:'alice@demo.com',role:'Developer'},{id:'u3',name:'Manager Bob',email:'bob@demo.com',role:'Manager'}];\n//     localStorage.setItem(KEY.USERS,JSON.stringify(users));\n//   }\n//   if(!localStorage.getItem(KEY.PROJECTS)){\n//     const projects=[{id:'p1',key:'ALPHA',name:'Alpha',description:'Alpha project',leads:['u3']},{id:'p2',key:'BETA',name:'Beta',description:'Beta project',leads:['u2']}];\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(projects));\n//   }\n//   if(!localStorage.getItem(KEY.ISSUES)){\n//     const issues=[{id:'i1',projectId:'p1',title:'Setup repo',status:'todo',priority:'P2',assignee:'u2',type:'Task',storyPoints:3,createdAt:Date.now()},{id:'i2',projectId:'p1',title:'Login bug',status:'inprogress',priority:'P1',assignee:'u2',type:'Bug',storyPoints:1,createdAt:Date.now()},{id:'i3',projectId:'p2',title:'OAuth',status:'done',priority:'P3',assignee:'u3',type:'Story',storyPoints:5,createdAt:Date.now()}];\n//     localStorage.setItem(KEY.ISSUES,JSON.stringify(issues));\n//   }\n//   if(!localStorage.getItem(KEY.ASSETS)){ localStorage.setItem(KEY.ASSETS,JSON.stringify([{id:'a1',name:'Dev Laptop',type:'Laptop',owner:'u2',status:'active'}])); }\n//   if(!localStorage.getItem(KEY.NOTIFS)){ localStorage.setItem(KEY.NOTIFS,JSON.stringify([{id:uuidv4(),userId:'u2',text:'Assigned i1',read:false,ts:Date.now()}])); }\n// }\n\n// export function mockLogin(email,password){ ensure(); const users=JSON.parse(localStorage.getItem(KEY.USERS)); const user=users.find(u=>u.email===email)||users[0]; localStorage.setItem(KEY.USER,JSON.stringify(user)); return Promise.resolve(user); }\n// export function logout(){ localStorage.removeItem(KEY.USER); return Promise.resolve(); }\n// export function getCurrentUser(){ const s=localStorage.getItem(KEY.USER); return s?JSON.parse(s):null; }\n\n// export function listUsers(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\n// export function addUser(u){ const arr=JSON.parse(localStorage.getItem(KEY.USERS)||'[]'); arr.push(u); localStorage.setItem(KEY.USERS,JSON.stringify(arr)); return Promise.resolve(u); }\n\n// export function listProjects(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\n// export function getProject(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x=>x.id===id)); }\n// export function addProject(p){ const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]'); arr.push(p); localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr)); return Promise.resolve(p); }\n\n// export function listIssues(projectId){ ensure(); let arr=JSON.parse(localStorage.getItem(KEY.ISSUES)); if(projectId) arr=arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\n// export function getIssue(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x=>x.id===id)); }\n// export function createIssue(data){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const id='i'+Math.floor(Math.random()*100000); const issue={...data,id,createdAt:Date.now()}; arr.push(issue); localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(issue); }\n// export function updateIssue(id,patch){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(x=>x.id===id); if(idx>=0){ arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(arr[idx]); } return Promise.reject('not found'); }\n// export function moveIssue(id,status){ return updateIssue(id,{status}); }\n\n// export function listAssets(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS))); }\n// export function addAsset(a){ const arr=JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS,JSON.stringify(arr)); return Promise.resolve(a); }\n\n// export function listNotifs(userId){ ensure(); const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId?arr.filter(n=>n.userId===userId):arr); }\n// export function markNotif(id){ const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx=arr.findIndex(n=>n.id===id); if(idx>=0){ arr[idx].read=true; localStorage.setItem(KEY.NOTIFS,JSON.stringify(arr)); } return Promise.resolve(); }\n\n\n\n\n\n\n\n\n\n// import { v4 as uuidv4 } from 'uuid';\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS:'tf_users_v3',\n//   PROJECTS:'tf_projects_v3',\n//   ISSUES:'tf_issues_v3',\n//   ASSETS:'tf_assets_v3',\n//   NOTIFS:'tf_notifs_v3'\n// };\n\n// function ensure(){\n//   if(!localStorage.getItem(KEY.USERS)){\n//     const users = [\n//       {id:'u1',name:'Admin User',email:'admin@demo.com',role:'Admin'},\n//       {id:'u2',name:'Dev Alice',email:'alice@demo.com',role:'Developer'},\n//       {id:'u3',name:'Manager Bob',email:'bob@demo.com',role:'Manager'}\n//     ];\n//     localStorage.setItem(KEY.USERS,JSON.stringify(users));\n//   }\n//   if(!localStorage.getItem(KEY.PROJECTS)){\n//     const projects=[\n//       {id:'p1',key:'ALPHA',name:'Alpha',description:'Alpha project',leads:['u3'], createdAt:Date.now(), lastUpdated:Date.now()},\n//       {id:'p2',key:'BETA',name:'Beta',description:'Beta project',leads:['u2'], createdAt:Date.now(), lastUpdated:Date.now()}\n//     ];\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(projects));\n//   }\n//   if(!localStorage.getItem(KEY.ISSUES)){\n//     const issues=[\n//       {id:'i1',projectId:'p1',title:'Setup repo',status:'todo',priority:'P2',assignee:'u2',type:'Task',storyPoints:3,createdAt:Date.now()},\n//       {id:'i2',projectId:'p1',title:'Login bug',status:'inprogress',priority:'P1',assignee:'u2',type:'Bug',storyPoints:1,createdAt:Date.now()},\n//       {id:'i3',projectId:'p2',title:'OAuth',status:'done',priority:'P3',assignee:'u3',type:'Story',storyPoints:5,createdAt:Date.now()}\n//     ];\n//     localStorage.setItem(KEY.ISSUES,JSON.stringify(issues));\n//   }\n//   if(!localStorage.getItem(KEY.ASSETS)){ localStorage.setItem(KEY.ASSETS,JSON.stringify([{id:'a1',name:'Dev Laptop',type:'Laptop',owner:'u2',status:'active'}])); }\n//   if(!localStorage.getItem(KEY.NOTIFS)){ localStorage.setItem(KEY.NOTIFS,JSON.stringify([{id:uuidv4(),userId:'u2',text:'Assigned i1',read:false,ts:Date.now()}])); }\n// }\n\n// export function mockLogin(email,password){ ensure(); const users=JSON.parse(localStorage.getItem(KEY.USERS)); const user=users.find(u=>u.email===email)||users[0]; localStorage.setItem(KEY.USER,JSON.stringify(user)); return Promise.resolve(user); }\n// export function logout(){ localStorage.removeItem(KEY.USER); return Promise.resolve(); }\n// export function getCurrentUser(){ const s=localStorage.getItem(KEY.USER); return s?JSON.parse(s):null; }\n\n// export function listUsers(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\n// export function addUser(u){ const arr=JSON.parse(localStorage.getItem(KEY.USERS)||'[]'); arr.push(u); localStorage.setItem(KEY.USERS,JSON.stringify(arr)); return Promise.resolve(u); }\n\n// export function listProjects(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\n// export function getProject(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x=>x.id===id)); }\n// export function addProject(p){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// // ✅ New: delete project\n// export function deleteProject(id){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS,JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ✅ New: update project\n// export function updateProject(id, patch){\n//   const arr=JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]');\n//   const idx=arr.findIndex(p => p.id===id);\n//   if(idx>=0){\n//     arr[idx] = {...arr[idx], ...patch, lastUpdated: Date.now()};\n//     localStorage.setItem(KEY.PROJECTS,JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function listIssues(projectId){ ensure(); let arr=JSON.parse(localStorage.getItem(KEY.ISSUES)); if(projectId) arr=arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\n// export function getIssue(id){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x=>x.id===id)); }\n// export function createIssue(data){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const id='i'+Math.floor(Math.random()*100000); const issue={...data,id,createdAt:Date.now()}; arr.push(issue); localStorage.setItem(KEY.ISSUES,JSON.stringify(arr)); return Promise.resolve(issue); }\n// export function updateIssue(id,patch){ const arr=JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(x=>x.id===id); if(idx>=0){ arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES,JSON.stringify(arr[idx])); return Promise.resolve(arr[idx]); } return Promise.reject('not found'); }\n// export function moveIssue(id,status){ return updateIssue(id,{status}); }\n\n// export function listAssets(){ ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS))); }\n// export function addAsset(a){ const arr=JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS,JSON.stringify(arr)); return Promise.resolve(a); }\n\n// export function listNotifs(userId){ ensure(); const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId?arr.filter(n=>n.userId===userId):arr); }\n// export function markNotif(id){ const arr=JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx=arr.findIndex(n=>n.id===id); if(idx>=0){ arr[idx].read=true; localStorage.setItem(KEY.NOTIFS,JSON.stringify(arr)); } return Promise.resolve(); }\n\n\n\n\n\n\n\n\n\n\n\n\n// for mounika\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       { id: 'p1', key: 'ALPHA', name: 'Alpha', description: 'Alpha project', leads: ['u3'], createdAt: Date.now(), lastUpdated: Date.now() },\n//       { id: 'p2', key: 'BETA', name: 'Beta', description: 'Beta project', leads: ['u2'], createdAt: Date.now(), lastUpdated: Date.now() }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       { id: 'i1', projectId: 'p1', title: 'Setup repo', status: 'todo', priority: 'P2', assignee: 'u2', type: 'Task', storyPoints: 3, createdAt: Date.now() },\n//       { id: 'i2', projectId: 'p1', title: 'Login bug', status: 'inprogress', priority: 'P1', assignee: 'u2', type: 'Bug', storyPoints: 1, createdAt: Date.now() },\n//       { id: 'i3', projectId: 'p2', title: 'OAuth', status: 'done', priority: 'P3', assignee: 'u3', type: 'Story', storyPoints: 5, createdAt: Date.now() }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(KEY.ASSETS, JSON.stringify([{ id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }]));\n//   }\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify([{ id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }]));\n//   }\n// }\n\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = JSON.parse(localStorage.getItem(KEY.USERS));\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)));\n// }\n\n// export function addUser(u) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   arr.push(u);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const filtered = arr.filter(u => u.id !== id);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)));\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)).find(x => x.id === id));\n// }\n\n// export function addProject(p) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// export function deleteProject(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = JSON.parse(localStorage.getItem(KEY.ISSUES));\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ISSUES)).find(x => x.id === id));\n// }\n\n// export function createIssue(data) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)));\n// }\n\n// export function addAsset(a) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n//   arr.push(a);\n//   localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n//   return Promise.resolve(a);\n// }\n\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n//   }\n//   return Promise.resolve();\n// }\n\n\n\n\n\n\n\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       {\n//         id: 'p1',\n//         key: 'ALPHA',\n//         name: 'Alpha',\n//         description: 'Alpha project',\n//         leads: ['u3'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       },\n//       {\n//         id: 'p2',\n//         key: 'BETA',\n//         name: 'Beta',\n//         description: 'Beta project',\n//         leads: ['u2'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       {\n//         id: 'i1',\n//         projectId: 'p1',\n//         title: 'Setup repo',\n//         status: 'todo',\n//         priority: 'P2',\n//         assignee: 'u2',\n//         type: 'Task',\n//         storyPoints: 3,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i2',\n//         projectId: 'p1',\n//         title: 'Login bug',\n//         status: 'inprogress',\n//         priority: 'P1',\n//         assignee: 'u2',\n//         type: 'Bug',\n//         storyPoints: 1,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i3',\n//         projectId: 'p2',\n//         title: 'OAuth',\n//         status: 'done',\n//         priority: 'P3',\n//         assignee: 'u3',\n//         type: 'Story',\n//         storyPoints: 5,\n//         createdAt: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(\n//       KEY.ASSETS,\n//       JSON.stringify([\n//         { id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }\n//       ])\n//     );\n//   }\n\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(\n//       KEY.NOTIFS,\n//       JSON.stringify([\n//         { id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }\n//       ])\n//     );\n//   }\n// }\n\n// // ---------- AUTH ----------\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = JSON.parse(localStorage.getItem(KEY.USERS)) || [];\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// // ---------- USERS ----------\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS)) || []);\n// }\n\n// export function addUser(u) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   arr.push(u);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.USERS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]');\n//   const filtered = arr.filter(u => u.id !== id);\n//   localStorage.setItem(KEY.USERS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ---------- PROJECTS ----------\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS)) || []);\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(\n//     (JSON.parse(localStorage.getItem(KEY.PROJECTS)) || []).find(x => x.id === id)\n//   );\n// }\n\n// export function addProject(p) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//   return Promise.resolve(p);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function deleteProject(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS) || '[]');\n//   const filtered = arr.filter(p => p.id !== id);\n//   localStorage.setItem(KEY.PROJECTS, JSON.stringify(filtered));\n//   return Promise.resolve(true);\n// }\n\n// // ---------- ISSUES ----------\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = JSON.parse(localStorage.getItem(KEY.ISSUES)) || [];\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(\n//     (JSON.parse(localStorage.getItem(KEY.ISSUES)) || []).find(x => x.id === id)\n//   );\n// }\n\n// export function createIssue(data) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ISSUES) || '[]');\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(arr));\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// // ---------- ASSETS ----------\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)) || []);\n// }\n\n// export function addAsset(a) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.ASSETS) || '[]');\n//   arr.push(a);\n//   localStorage.setItem(KEY.ASSETS, JSON.stringify(arr));\n//   return Promise.resolve(a);\n// }\n\n// // ---------- NOTIFS ----------\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS) || '[]');\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));\n//   }\n//   return Promise.resolve();\n// }\n\n\n\n\n\n\n\n// //today\n// import { v4 as uuidv4 } from 'uuid';\n\n// const KEY = {\n//   USER: 'tf_user_v3',\n//   USERS: 'tf_users_v3',\n//   PROJECTS: 'tf_projects_v3',\n//   ISSUES: 'tf_issues_v3',\n//   ASSETS: 'tf_assets_v3',\n//   NOTIFS: 'tf_notifs_v3'\n// };\n\n// function ensure() {\n//   if (!localStorage.getItem(KEY.USERS)) {\n//     const users = [\n//       { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n//       { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n//       { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' }\n//     ];\n//     localStorage.setItem(KEY.USERS, JSON.stringify(users));\n//   }\n\n//   if (!localStorage.getItem(KEY.PROJECTS)) {\n//     const projects = [\n//       {\n//         id: 'p1',\n//         key: 'ALPHA',\n//         name: 'Alpha',\n//         description: 'Alpha project',\n//         leads: ['u3'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       },\n//       {\n//         id: 'p2',\n//         key: 'BETA',\n//         name: 'Beta',\n//         description: 'Beta project',\n//         leads: ['u2'],\n//         createdAt: Date.now(),\n//         lastUpdated: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n//   }\n\n//   if (!localStorage.getItem(KEY.ISSUES)) {\n//     const issues = [\n//       {\n//         id: 'i1',\n//         projectId: 'p1',\n//         title: 'Setup repo',\n//         status: 'todo',\n//         priority: 'P2',\n//         assignee: 'u2',\n//         type: 'Task',\n//         storyPoints: 3,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i2',\n//         projectId: 'p1',\n//         title: 'Login bug',\n//         status: 'inprogress',\n//         priority: 'P1',\n//         assignee: 'u2',\n//         type: 'Bug',\n//         storyPoints: 1,\n//         createdAt: Date.now()\n//       },\n//       {\n//         id: 'i3',\n//         projectId: 'p2',\n//         title: 'OAuth',\n//         status: 'done',\n//         priority: 'P3',\n//         assignee: 'u3',\n//         type: 'Story',\n//         storyPoints: 5,\n//         createdAt: Date.now()\n//       }\n//     ];\n//     localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n//   }\n\n//   if (!localStorage.getItem(KEY.ASSETS)) {\n//     localStorage.setItem(\n//       KEY.ASSETS,\n//       JSON.stringify([\n//         { id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }\n//       ])\n//     );\n//   }\n\n//   if (!localStorage.getItem(KEY.NOTIFS)) {\n//     localStorage.setItem(\n//       KEY.NOTIFS,\n//       JSON.stringify([\n//         { id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }\n//       ])\n//     );\n//   }\n// }\n\n// // ---------- HELPERS ----------\n// function safeParse(key) {\n//   try {\n//     const raw = localStorage.getItem(key);\n//     const parsed = raw ? JSON.parse(raw) : [];\n//     return Array.isArray(parsed) ? parsed : [];\n//   } catch {\n//     return [];\n//   }\n// }\n\n// function save(key, arr) {\n//   localStorage.setItem(key, JSON.stringify(arr));\n// }\n\n// // ---------- AUTH ----------\n// export function mockLogin(email, password) {\n//   ensure();\n//   const users = safeParse(KEY.USERS);\n//   const user = users.find(u => u.email === email) || users[0];\n//   localStorage.setItem(KEY.USER, JSON.stringify(user));\n//   return Promise.resolve(user);\n// }\n\n// export function logout() {\n//   localStorage.removeItem(KEY.USER);\n//   return Promise.resolve();\n// }\n\n// export function getCurrentUser() {\n//   const s = localStorage.getItem(KEY.USER);\n//   return s ? JSON.parse(s) : null;\n// }\n\n// // ---------- USERS ----------\n// export function listUsers() {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.USERS));\n// }\n\n// export function addUser(u) {\n//   const arr = safeParse(KEY.USERS);\n//   arr.push(u);\n//   save(KEY.USERS, arr);\n//   return Promise.resolve(u);\n// }\n\n// export function updateUser(id, patch) {\n//   const arr = safeParse(KEY.USERS);\n//   const idx = arr.findIndex(u => u.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     save(KEY.USERS, arr);\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('User not found');\n// }\n\n// export function deleteUser(id) {\n//   const arr = safeParse(KEY.USERS).filter(u => u.id !== id);\n//   save(KEY.USERS, arr);\n//   return Promise.resolve(true);\n// }\n\n// // ---------- PROJECTS ----------\n// export function listProjects() {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.PROJECTS));\n// }\n\n// export function getProject(id) {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.PROJECTS).find(x => x.id === id));\n// }\n\n// export function addProject(p) {\n//   const arr = safeParse(KEY.PROJECTS);\n//   const now = Date.now();\n//   p.createdAt = now;\n//   p.lastUpdated = now;\n//   arr.push(p);\n//   save(KEY.PROJECTS, arr);\n//   return Promise.resolve(p);\n// }\n\n// export function updateProject(id, patch) {\n//   const arr = safeParse(KEY.PROJECTS);\n//   const idx = arr.findIndex(p => p.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch, lastUpdated: Date.now() };\n//     save(KEY.PROJECTS, arr);\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Project not found');\n// }\n\n// export function deleteProject(id) {\n//   const arr = safeParse(KEY.PROJECTS).filter(p => p.id !== id);\n//   save(KEY.PROJECTS, arr);\n//   return Promise.resolve(true);\n// }\n\n// // ---------- ISSUES ----------\n// export function listIssues(projectId) {\n//   ensure();\n//   let arr = safeParse(KEY.ISSUES);\n//   if (projectId) arr = arr.filter(i => i.projectId === projectId);\n//   return Promise.resolve(arr);\n// }\n\n// export function getIssue(id) {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.ISSUES).find(x => x.id === id));\n// }\n\n// export function createIssue(data) {\n//   const arr = safeParse(KEY.ISSUES);\n//   const id = 'i' + Math.floor(Math.random() * 100000);\n//   const issue = { ...data, id, createdAt: Date.now() };\n//   arr.push(issue);\n//   save(KEY.ISSUES, arr);\n//   return Promise.resolve(issue);\n// }\n\n// export function updateIssue(id, patch) {\n//   const arr = safeParse(KEY.ISSUES);\n//   const idx = arr.findIndex(x => x.id === id);\n//   if (idx >= 0) {\n//     arr[idx] = { ...arr[idx], ...patch };\n//     save(KEY.ISSUES, arr);\n//     return Promise.resolve(arr[idx]);\n//   }\n//   return Promise.reject('Issue not found');\n// }\n\n// export function moveIssue(id, status) {\n//   return updateIssue(id, { status });\n// }\n\n// // ---------- ASSETS ----------\n// export function listAssets() {\n//   ensure();\n//   return Promise.resolve(safeParse(KEY.ASSETS));\n// }\n\n// export function addAsset(a) {\n//   const arr = safeParse(KEY.ASSETS);\n//   arr.push(a);\n//   save(KEY.ASSETS, arr);\n//   return Promise.resolve(a);\n// }\n\n// // ---------- NOTIFS ----------\n// export function listNotifs(userId) {\n//   ensure();\n//   const arr = safeParse(KEY.NOTIFS);\n//   return Promise.resolve(userId ? arr.filter(n => n.userId === userId) : arr);\n// }\n\n// export function markNotif(id) {\n//   const arr = safeParse(KEY.NOTIFS);\n//   const idx = arr.findIndex(n => n.id === id);\n//   if (idx >= 0) {\n//     arr[idx].read = true;\n//     save(KEY.NOTIFS, arr);\n//   }\n//   return Promise.resolve();\n// }\n\n\n\n\nimport { v4 as uuidv4 } from 'uuid';\n\nconst KEY = {\n  USER: 'tf_user_v3',\n  USERS: 'tf_users_v3',\n  PROJECTS: 'tf_projects_v3',\n  ISSUES: 'tf_issues_v3',\n  EPICS: 'tf_epics_v3',\n  ASSETS: 'tf_assets_v3',\n  NOTIFS: 'tf_notifs_v3',\n};\n\n// Styles (unchanged)\nexport const STYLES = { /* your existing STYLES object */ };\n\n// Initialize global CSS (unchanged)\nconst globalStyles = `/* your existing global CSS */`;\nif (typeof document !== 'undefined') {\n  const styleSheet = document.createElement('style');\n  styleSheet.textContent = globalStyles;\n  document.head.appendChild(styleSheet);\n}\n\n// Ensure data exists\nfunction ensure() {\n  if (!localStorage.getItem(KEY.USERS)) {\n    const users = [\n      { id: 'u1', name: 'Admin User', email: 'admin@demo.com', role: 'Admin' },\n      { id: 'u2', name: 'Dev Alice', email: 'alice@demo.com', role: 'Developer' },\n      { id: 'u3', name: 'Manager Bob', email: 'bob@demo.com', role: 'Manager' },\n    ];\n    localStorage.setItem(KEY.USERS, JSON.stringify(users));\n  }\n\n  if (!localStorage.getItem(KEY.PROJECTS)) {\n    const projects = [\n      { id: 'p1', key: 'ALPHA', name: 'Alpha', description: 'Alpha project', leads: ['u3'] },\n      { id: 'p2', key: 'BETA', name: 'Beta', description: 'Beta project', leads: ['u2'] },\n    ];\n    localStorage.setItem(KEY.PROJECTS, JSON.stringify(projects));\n  }\n\n  if (!localStorage.getItem(KEY.EPICS)) {\n    const epics = [\n      { id: 'e1', projectId: 'p1', name: 'Initial Setup' },\n      { id: 'e2', projectId: 'p2', name: 'Authentication' },\n    ];\n    localStorage.setItem(KEY.EPICS, JSON.stringify(epics));\n  }\n\n  if (!localStorage.getItem(KEY.ISSUES)) {\n    const issues = [\n      { id: 'i1', projectId: 'p1', epic: 'e1', title: 'Setup repo', status: 'todo', priority: 'P2', assignee: 'u2', type: 'Task', storyPoints: 3, createdAt: Date.now() },\n      { id: 'i2', projectId: 'p1', epic: 'e1', title: 'Login bug', status: 'inprogress', priority: 'P1', assignee: 'u2', type: 'Bug', storyPoints: 1, createdAt: Date.now() },\n      { id: 'i3', projectId: 'p2', epic: 'e2', title: 'OAuth', status: 'done', priority: 'P3', assignee: 'u3', type: 'Story', storyPoints: 5, createdAt: Date.now() },\n    ];\n    localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n  }\n\n  if (!localStorage.getItem(KEY.ASSETS)) {\n    localStorage.setItem(KEY.ASSETS, JSON.stringify([{ id: 'a1', name: 'Dev Laptop', type: 'Laptop', owner: 'u2', status: 'active' }]));\n  }\n\n  if (!localStorage.getItem(KEY.NOTIFS)) {\n    localStorage.setItem(KEY.NOTIFS, JSON.stringify([{ id: uuidv4(), userId: 'u2', text: 'Assigned i1', read: false, ts: Date.now() }]));\n  }\n}\n\n// ------------------ AUTH ------------------\nexport function mockLogin(email) {\n  ensure();\n  const users = JSON.parse(localStorage.getItem(KEY.USERS));\n  const user = users.find(u => u.email === email) || users[0];\n  localStorage.setItem(KEY.USER, JSON.stringify(user));\n  return Promise.resolve(user);\n}\n\nexport function logout() {\n  localStorage.removeItem(KEY.USER);\n  return Promise.resolve();\n}\n\nexport function getCurrentUser() {\n  const s = localStorage.getItem(KEY.USER);\n  return s ? JSON.parse(s) : null;\n}\n\n// ------------------ USERS ------------------\nexport function listUsers() { ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.USERS))); }\nexport function addUser(u) { const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]'); arr.push(u); localStorage.setItem(KEY.USERS, JSON.stringify(arr)); return Promise.resolve(u); }\nexport function updateUser(updatedUser) { const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]'); const idx = arr.findIndex(u => u.id === updatedUser.id); if (idx>=0){arr[idx]=updatedUser; localStorage.setItem(KEY.USERS, JSON.stringify(arr)); return Promise.resolve(updatedUser);} return Promise.reject(new Error('User not found')); }\nexport function deleteUser(userId) { const arr = JSON.parse(localStorage.getItem(KEY.USERS) || '[]'); localStorage.setItem(KEY.USERS, JSON.stringify(arr.filter(u=>u.id!==userId))); return Promise.resolve(); }\n\n// ------------------ PROJECTS ------------------\nexport function listProjects() { ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.PROJECTS))); }\nexport function getProject(id) { ensure(); const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS)); return Promise.resolve(arr.find(p=>p.id===id)); }\nexport function addProject(p) { const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]'); arr.push(p); localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr)); return Promise.resolve(p); }\nexport function updateProject(id, patch) { const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]'); const idx = arr.findIndex(p=>p.id===id); if(idx>=0){arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr)); return Promise.resolve(arr[idx]);} return Promise.reject(new Error('Project not found')); }\nexport function deleteProject(id) {\n  const arr = JSON.parse(localStorage.getItem(KEY.PROJECTS)||'[]').filter(p=>p.id!==id);\n  localStorage.setItem(KEY.PROJECTS, JSON.stringify(arr));\n  // delete related issues and epics\n  const issues = JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]').filter(i=>i.projectId!==id);\n  const epics = JSON.parse(localStorage.getItem(KEY.EPICS)||'[]').filter(e=>e.projectId!==id);\n  localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n  localStorage.setItem(KEY.EPICS, JSON.stringify(epics));\n  return Promise.resolve();\n}\n\n// ------------------ EPICS ------------------\nexport function listEpics(projectId) { ensure(); let arr = JSON.parse(localStorage.getItem(KEY.EPICS)||'[]'); if(projectId) arr = arr.filter(e=>e.projectId===projectId); return Promise.resolve(arr); }\nexport function createEpic(name, projectId) { \n  if(!projectId) return Promise.reject(new Error(\"ProjectId required\")); \n  const arr = JSON.parse(localStorage.getItem(KEY.EPICS)||'[]'); \n  const epic = { id: uuidv4(), name, projectId }; \n  arr.push(epic); \n  localStorage.setItem(KEY.EPICS, JSON.stringify(arr)); \n  return Promise.resolve(epic); \n}\nexport function deleteEpic(epicId) {\n  const epics = JSON.parse(localStorage.getItem(KEY.EPICS)||'[]').filter(e=>e.id!==epicId);\n  localStorage.setItem(KEY.EPICS, JSON.stringify(epics));\n  // delete all issues under this epic\n  const issues = JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]').filter(i=>i.epic!==epicId);\n  localStorage.setItem(KEY.ISSUES, JSON.stringify(issues));\n  return Promise.resolve();\n}\n\n// ------------------ ISSUES ------------------\nexport function listIssues(projectId) { ensure(); let arr = JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); if(projectId) arr = arr.filter(i=>i.projectId===projectId); return Promise.resolve(arr); }\nexport function getIssue(id) { ensure(); const arr = JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); return Promise.resolve(arr.find(i=>i.id===id)); }\nexport function createIssue(data) { \n  if(!data.projectId) return Promise.reject(new Error(\"ProjectId required\")); \n  const arr = JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); \n  const issue = { ...data, id: uuidv4(), createdAt: Date.now() }; \n  arr.push(issue); \n  localStorage.setItem(KEY.ISSUES, JSON.stringify(arr)); \n  return Promise.resolve(issue); \n}\nexport function updateIssue(id, patch) { const arr = JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]'); const idx=arr.findIndex(i=>i.id===id); if(idx>=0){arr[idx]={...arr[idx],...patch}; localStorage.setItem(KEY.ISSUES, JSON.stringify(arr)); return Promise.resolve(arr[idx]);} return Promise.reject(new Error('Issue not found')); }\nexport function moveIssue(id, status) { return updateIssue(id, { status }); }\nexport function deleteIssue(id) { const arr = JSON.parse(localStorage.getItem(KEY.ISSUES)||'[]').filter(i=>i.id!==id); localStorage.setItem(KEY.ISSUES, JSON.stringify(arr)); return Promise.resolve(); }\n\n// ------------------ ASSETS ------------------\nexport function listAssets() { ensure(); return Promise.resolve(JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]')); }\nexport function addAsset(a) { const arr = JSON.parse(localStorage.getItem(KEY.ASSETS)||'[]'); arr.push(a); localStorage.setItem(KEY.ASSETS, JSON.stringify(arr)); return Promise.resolve(a); }\n\n// ------------------ NOTIFICATIONS ------------------\nexport function listNotifs(userId) { ensure(); const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); return Promise.resolve(userId ? arr.filter(n=>n.userId===userId) : arr); }\nexport function markNotif(id) { const arr = JSON.parse(localStorage.getItem(KEY.NOTIFS)||'[]'); const idx = arr.findIndex(n=>n.id===id); if(idx>=0){arr[idx].read=true; localStorage.setItem(KEY.NOTIFS, JSON.stringify(arr));} return Promise.resolve(); }\n\n// ------------------ UTILS ------------------\nexport function getUserAvatarStyle(name){ return { ...STYLES.avatar, backgroundColor: stringToColor(name) }; }\nfunction stringToColor(str){ let hash=0; for(let i=0;i<str.length;i++){ hash=str.charCodeAt(i)+((hash<<5)-hash); } const hue=hash%360; return `hsl(${hue},70%,60%)`; }\nexport function getStatusBadgeStyle(status){ return { ...STYLES.badge, ...STYLES.status[status] }; }\nexport function getPriorityBadgeStyle(priority){ return { ...STYLES.badge, ...STYLES.priority[priority] }; }\nexport function withHover(baseStyle, hoverStyle = STYLES.buttonHover){ return { ...baseStyle, ':hover': hoverStyle }; }\nexport function getCardStyle(variant='default'){ const variants={default:STYLES.card,elevated:{...STYLES.card,boxShadow:'0 8px 30px rgba(0,0,0,0.12)'},bordered:{...STYLES.card,border:'2px solid #e2e8f0',boxShadow:'none'}}; return variants[variant]||variants.default; }\nexport function getButtonStyle(variant='primary'){ const variants={primary:STYLES.button,secondary:{...STYLES.button,background:'linear-gradient(135deg, #e2e8f0 0%, #cbd5e0 100%)',color:'#4a5568',boxShadow:'0 4px 15px rgba(0,0,0,0.1)'},danger:{...STYLES.button,background:'linear-gradient(135deg, #fc8181 0%, #f56565 100%)',boxShadow:'0 4px 15px rgba(245,101,101,0.3)'}}; return variants[variant]||variants.primary; }\nexport function getInputStyle(variant='default'){ const variants={default:STYLES.input,search:{...STYLES.input,backgroundImage:'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' fill=\\'none\\' viewBox=\\'0 0 24 24\\' stroke=\\'%2394a3b8\\'%3E%3Cpath stroke-linecap=\\'round\\' stroke-linejoin=\\'round\\' stroke-width=\\'2\\' d=\\'M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\\' /%3E%3C/svg%3E\")',backgroundRepeat:'no-repeat',backgroundPosition:'12px center',backgroundSize:'clamp(16px, 4vw, 18px)',paddingLeft:'clamp(2rem, 5vw, 2.5rem)'}}; return variants[variant]||variants.default; }\nexport function getUserSectionStyle(){ return { ...STYLES.userSection, width:'100%', display:'flex', flexDirection:'column', alignItems:'flex-start' }; }\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAanC,MAAMC,GAAG,GAAG;EACVC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE,aAAa;EACpBC,QAAQ,EAAE,gBAAgB;EAC1BC,MAAM,EAAE,cAAc;EACtBC,KAAK,EAAE,aAAa;EACpBC,MAAM,EAAE,cAAc;EACtBC,MAAM,EAAE;AACV,CAAC;;AAED;AACA,OAAO,MAAMC,MAAM,GAAG,CAAE,kCAAmC;;AAE3D;AACA,MAAMC,YAAY,GAAG,gCAAgC;AACrD,IAAI,OAAOC,QAAQ,KAAK,WAAW,EAAE;EACnC,MAAMC,UAAU,GAAGD,QAAQ,CAACE,aAAa,CAAC,OAAO,CAAC;EAClDD,UAAU,CAACE,WAAW,GAAGJ,YAAY;EACrCC,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACJ,UAAU,CAAC;AACvC;;AAEA;AACA,SAASK,MAAMA,CAAA,EAAG;EAChB,IAAI,CAACC,YAAY,CAACC,OAAO,CAAClB,GAAG,CAACE,KAAK,CAAC,EAAE;IACpC,MAAMiB,KAAK,GAAG,CACZ;MAAEC,EAAE,EAAE,IAAI;MA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
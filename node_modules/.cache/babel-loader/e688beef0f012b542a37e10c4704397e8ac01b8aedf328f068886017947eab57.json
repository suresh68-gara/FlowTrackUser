{"ast":null,"code":"\n\n// import React, { useEffect, useState } from \"react\";\n// import { listAssets, addAsset } from \"../../services/mockApi\";\n// import { v4 as uuidv4 } from \"uuid\";\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// export default function AssetsBoard() {\n//   const [assets, setAssets] = useState([]);\n//   const [name, setName] = useState(\"\");\n//   const [type, setType] = useState(\"Laptop\");\n//   const [owner, setOwner] = useState(\"\");\n//   const [editingId, setEditingId] = useState(null);\n//   const [editFields, setEditFields] = useState({});\n//   const [hoveredId, setHoveredId] = useState({});\n//   const [quickAdd, setQuickAdd] = useState({});\n\n//   useEffect(() => {\n//     listAssets().then(setAssets);\n//   }, []);\n\n//   const add = async (status = \"active\") => {\n//     const assetName = status === \"form\" ? name : quickAdd[status]?.name;\n//     const assetType = status === \"form\" ? type : quickAdd[status]?.type || \"Laptop\";\n//     const assetOwner = status === \"form\" ? owner : quickAdd[status]?.owner || \"\";\n//     if (!assetName?.trim()) return;\n\n//     const a = { id: uuidv4(), name: assetName, type: assetType, owner: assetOwner, status: status === \"form\" ? \"active\" : status };\n//     await addAsset(a);\n//     setAssets(await listAssets());\n\n//     if (status === \"form\") { setName(\"\"); setType(\"Laptop\"); setOwner(\"\"); }\n//     else { setQuickAdd(prev => ({ ...prev, [status]: { name: \"\", type: \"\", owner: \"\" } })); }\n//   };\n\n//   // const statusColumns = {\n//   //   active: { title: \"Active\", color: \"#36B37E\" },\n//   //   maintenance: { title: \"Maintenance\", color: \"#FFAB00\" },\n//   //   inactive: { title: \"Inactive\", color: \"#A5ADBA\" },\n//   // };\n\n//   const groupedAssets = Object.keys(statusColumns).reduce((acc, status) => {\n//     acc[status] = assets.filter(a => a.status === status);\n//     return acc;\n//   }, {});\n\n//   const onDragEnd = (result) => {\n//     if (!result.destination) return;\n//     const { source, destination, draggableId } = result;\n//     if (source.droppableId === destination.droppableId && source.index === destination.index) return;\n\n//     const asset = assets.find(a => a.id === draggableId);\n//     const updatedAsset = { ...asset, status: destination.droppableId };\n//     setAssets(assets.map(a => (a.id === draggableId ? updatedAsset : a)));\n//   };\n\n//   const startEditing = (asset) => { setEditingId(asset.id); setEditFields({ ...asset }); };\n//   const saveEdit = (id) => { setAssets(assets.map(a => (a.id === id ? { ...a, ...editFields } : a))); setEditingId(null); };\n//   const cancelEdit = () => setEditingId(null);\n//   const deleteAsset = (id) => setAssets(assets.filter(a => a.id !== id));\n\n//   return (\n//     <div style={{ padding: \"2rem\", fontFamily: \"Arial, sans-serif\", background: \"#F4F5F7\", minHeight: \"100vh\" }}>\n//       {/* Add Asset Top Form */}\n//       <div style={{\n//         marginBottom: \"2rem\",\n//         background: \"#fff\",\n//         padding: \"1.5rem\",\n//         borderRadius: \"8px\",\n//         boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\"\n//       }}>\n//         <h2 style={{ marginBottom: \"1rem\", fontSize: \"1.5rem\" }}>Add Asset</h2>\n//         <div style={{ display: \"flex\", gap: \"1rem\", flexWrap: \"wrap\" }}>\n//           <input placeholder=\"Name\" value={name} onChange={e => setName(e.target.value)}\n//             style={{ flex: 1, padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }} />\n//           <input placeholder=\"Type\" value={type} onChange={e => setType(e.target.value)}\n//             style={{ flex: 1, padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }} />\n//           <input placeholder=\"Owner\" value={owner} onChange={e => setOwner(e.target.value)}\n//             style={{ flex: 1, padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }} />\n//           <button onClick={() => add(\"form\")} style={{ padding: \"0.5rem 1rem\", background: \"#0052CC\", color: \"#fff\", border: \"none\", borderRadius: \"4px\", cursor: \"pointer\" }}>Add</button>\n//         </div>\n//       </div>\n\n//       {/* Kanban Board */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: \"flex\", gap: \"1rem\" }}>\n//           {Object.keys(statusColumns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {(provided) => (\n//                 <div ref={provided.innerRef} {...provided.droppableProps}\n//                   style={{ flex: 1, background: \"#EBECF0\", padding: \"1rem\", borderRadius: \"8px\", minHeight: \"300px\" }}>\n//                   <h3 style={{ color: statusColumns[status].color }}>{statusColumns[status].title}</h3>\n\n//                   {/* Assets */}\n//                   {groupedAssets[status].map((a, index) => (\n//                     <Draggable draggableId={a.id} index={index} key={a.id}>\n//                       {(provided, snapshot) => (\n//                         <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}\n//                           onMouseEnter={() => setHoveredId(a.id)}\n//                           onMouseLeave={() => setHoveredId(null)}\n//                           style={{\n//                             padding: \"0.75rem 1rem\",\n//                             marginBottom: \"0.5rem\",\n//                             borderRadius: \"6px\",\n//                             background: snapshot.isDragging ? \"#D2E5FF\" : \"#fff\",\n//                             boxShadow: snapshot.isDragging ? \"0 2px 8px rgba(0,0,0,0.2)\" : \"none\",\n//                             position: \"relative\",\n//                             ...provided.draggableProps.style\n//                           }}>\n//                           {editingId === a.id ? (\n//                             <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0.5rem\" }}>\n//                               <input value={editFields.name} onChange={e => setEditFields({ ...editFields, name: e.target.value })} />\n//                               <input value={editFields.type} onChange={e => setEditFields({ ...editFields, type: e.target.value })} />\n//                               <input value={editFields.owner} onChange={e => setEditFields({ ...editFields, owner: e.target.value })} />\n//                               <select value={editFields.status} onChange={e => setEditFields({ ...editFields, status: e.target.value })}>\n//                                 {Object.keys(statusColumns).map(s => <option key={s} value={s}>{statusColumns[s].title}</option>)}\n//                               </select>\n//                               <div style={{ display: \"flex\", gap: \"0.5rem\" }}>\n//                                 <button onClick={() => saveEdit(a.id)} style={{ background: \"#36B37E\", color: \"#fff\", border: \"none\", borderRadius: \"4px\", padding: \"0.25rem 0.5rem\" }}>Save</button>\n//                                 <button onClick={cancelEdit} style={{ background: \"#DE350B\", color: \"#fff\", border: \"none\", borderRadius: \"4px\", padding: \"0.25rem 0.5rem\" }}>Cancel</button>\n//                               </div>\n//                             </div>\n//                           ) : (\n//                             <div onClick={() => startEditing(a)} style={{ cursor: \"pointer\" }}>\n//                               <div style={{ fontWeight: \"bold\" }}>{a.name}</div>\n//                               <div style={{ fontSize: \"0.85rem\", color: \"#555\" }}>{a.type} | {a.owner || \"-\"}</div>\n//                             </div>\n//                           )}\n\n//                           {/* Hover Toolbar */}\n//                           {hoveredId === a.id && editingId !== a.id && (\n//                             <div style={{\n//                               position: \"absolute\",\n//                               top: \"4px\",\n//                               right: \"4px\",\n//                               display: \"flex\",\n//                               gap: \"0.5rem\"\n//                             }}>\n//                               <button onClick={() => startEditing(a)} style={{ background: \"transparent\", border: \"none\", color: \"#0052CC\", cursor: \"pointer\", fontWeight: \"bold\" }}>Edit</button>\n//                               <button onClick={() => deleteAsset(a.id)} style={{ background: \"transparent\", border: \"none\", color: \"#DE350B\", cursor: \"pointer\", fontWeight: \"bold\" }}>Delete</button>\n//                             </div>\n//                           )}\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                   {provided.placeholder}\n\n//                   {/* Quick Add in Column */}\n//                   <div style={{ marginTop: \"0.5rem\", display: \"flex\", flexDirection: \"column\", gap: \"0.25rem\" }}>\n//                     <input placeholder=\"Name\" value={quickAdd[status]?.name || \"\"} onChange={e => setQuickAdd(prev => ({ ...prev, [status]: { ...prev[status], name: e.target.value } }))} />\n//                     <input placeholder=\"Type\" value={quickAdd[status]?.type || \"\"} onChange={e => setQuickAdd(prev => ({ ...prev, [status]: { ...prev[status], type: e.target.value } }))} />\n//                     <input placeholder=\"Owner\" value={quickAdd[status]?.owner || \"\"} onChange={e => setQuickAdd(prev => ({ ...prev, [status]: { ...prev[status], owner: e.target.value } }))} />\n//                     <button onClick={() => add(status)} style={{ background: \"#0052CC\", color: \"#fff\", border: \"none\", borderRadius: \"4px\", padding: \"0.25rem 0.5rem\", cursor: \"pointer\" }}>Add</button>\n//                   </div>\n\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/vmoun/OneDrive/Desktop/forusers/userspage/src/components/assets/Assets.js"],"sourcesContent":["\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { listAssets, addAsset } from \"../../services/mockApi\";\n// import { v4 as uuidv4 } from \"uuid\";\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// export default function AssetsBoard() {\n//   const [assets, setAssets] = useState([]);\n//   const [name, setName] = useState(\"\");\n//   const [type, setType] = useState(\"Laptop\");\n//   const [owner, setOwner] = useState(\"\");\n//   const [editingId, setEditingId] = useState(null);\n//   const [editFields, setEditFields] = useState({});\n//   const [hoveredId, setHoveredId] = useState({});\n//   const [quickAdd, setQuickAdd] = useState({});\n\n//   useEffect(() => {\n//     listAssets().then(setAssets);\n//   }, []);\n\n//   const add = async (status = \"active\") => {\n//     const assetName = status === \"form\" ? name : quickAdd[status]?.name;\n//     const assetType = status === \"form\" ? type : quickAdd[status]?.type || \"Laptop\";\n//     const assetOwner = status === \"form\" ? owner : quickAdd[status]?.owner || \"\";\n//     if (!assetName?.trim()) return;\n\n//     const a = { id: uuidv4(), name: assetName, type: assetType, owner: assetOwner, status: status === \"form\" ? \"active\" : status };\n//     await addAsset(a);\n//     setAssets(await listAssets());\n\n//     if (status === \"form\") { setName(\"\"); setType(\"Laptop\"); setOwner(\"\"); }\n//     else { setQuickAdd(prev => ({ ...prev, [status]: { name: \"\", type: \"\", owner: \"\" } })); }\n//   };\n\n//   // const statusColumns = {\n//   //   active: { title: \"Active\", color: \"#36B37E\" },\n//   //   maintenance: { title: \"Maintenance\", color: \"#FFAB00\" },\n//   //   inactive: { title: \"Inactive\", color: \"#A5ADBA\" },\n//   // };\n\n//   const groupedAssets = Object.keys(statusColumns).reduce((acc, status) => {\n//     acc[status] = assets.filter(a => a.status === status);\n//     return acc;\n//   }, {});\n\n//   const onDragEnd = (result) => {\n//     if (!result.destination) return;\n//     const { source, destination, draggableId } = result;\n//     if (source.droppableId === destination.droppableId && source.index === destination.index) return;\n\n//     const asset = assets.find(a => a.id === draggableId);\n//     const updatedAsset = { ...asset, status: destination.droppableId };\n//     setAssets(assets.map(a => (a.id === draggableId ? updatedAsset : a)));\n//   };\n\n//   const startEditing = (asset) => { setEditingId(asset.id); setEditFields({ ...asset }); };\n//   const saveEdit = (id) => { setAssets(assets.map(a => (a.id === id ? { ...a, ...editFields } : a))); setEditingId(null); };\n//   const cancelEdit = () => setEditingId(null);\n//   const deleteAsset = (id) => setAssets(assets.filter(a => a.id !== id));\n\n//   return (\n//     <div style={{ padding: \"2rem\", fontFamily: \"Arial, sans-serif\", background: \"#F4F5F7\", minHeight: \"100vh\" }}>\n//       {/* Add Asset Top Form */}\n//       <div style={{\n//         marginBottom: \"2rem\",\n//         background: \"#fff\",\n//         padding: \"1.5rem\",\n//         borderRadius: \"8px\",\n//         boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\"\n//       }}>\n//         <h2 style={{ marginBottom: \"1rem\", fontSize: \"1.5rem\" }}>Add Asset</h2>\n//         <div style={{ display: \"flex\", gap: \"1rem\", flexWrap: \"wrap\" }}>\n//           <input placeholder=\"Name\" value={name} onChange={e => setName(e.target.value)}\n//             style={{ flex: 1, padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }} />\n//           <input placeholder=\"Type\" value={type} onChange={e => setType(e.target.value)}\n//             style={{ flex: 1, padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }} />\n//           <input placeholder=\"Owner\" value={owner} onChange={e => setOwner(e.target.value)}\n//             style={{ flex: 1, padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }} />\n//           <button onClick={() => add(\"form\")} style={{ padding: \"0.5rem 1rem\", background: \"#0052CC\", color: \"#fff\", border: \"none\", borderRadius: \"4px\", cursor: \"pointer\" }}>Add</button>\n//         </div>\n//       </div>\n\n//       {/* Kanban Board */}\n//       <DragDropContext onDragEnd={onDragEnd}>\n//         <div style={{ display: \"flex\", gap: \"1rem\" }}>\n//           {Object.keys(statusColumns).map(status => (\n//             <Droppable droppableId={status} key={status}>\n//               {(provided) => (\n//                 <div ref={provided.innerRef} {...provided.droppableProps}\n//                   style={{ flex: 1, background: \"#EBECF0\", padding: \"1rem\", borderRadius: \"8px\", minHeight: \"300px\" }}>\n//                   <h3 style={{ color: statusColumns[status].color }}>{statusColumns[status].title}</h3>\n\n//                   {/* Assets */}\n//                   {groupedAssets[status].map((a, index) => (\n//                     <Draggable draggableId={a.id} index={index} key={a.id}>\n//                       {(provided, snapshot) => (\n//                         <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}\n//                           onMouseEnter={() => setHoveredId(a.id)}\n//                           onMouseLeave={() => setHoveredId(null)}\n//                           style={{\n//                             padding: \"0.75rem 1rem\",\n//                             marginBottom: \"0.5rem\",\n//                             borderRadius: \"6px\",\n//                             background: snapshot.isDragging ? \"#D2E5FF\" : \"#fff\",\n//                             boxShadow: snapshot.isDragging ? \"0 2px 8px rgba(0,0,0,0.2)\" : \"none\",\n//                             position: \"relative\",\n//                             ...provided.draggableProps.style\n//                           }}>\n//                           {editingId === a.id ? (\n//                             <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"0.5rem\" }}>\n//                               <input value={editFields.name} onChange={e => setEditFields({ ...editFields, name: e.target.value })} />\n//                               <input value={editFields.type} onChange={e => setEditFields({ ...editFields, type: e.target.value })} />\n//                               <input value={editFields.owner} onChange={e => setEditFields({ ...editFields, owner: e.target.value })} />\n//                               <select value={editFields.status} onChange={e => setEditFields({ ...editFields, status: e.target.value })}>\n//                                 {Object.keys(statusColumns).map(s => <option key={s} value={s}>{statusColumns[s].title}</option>)}\n//                               </select>\n//                               <div style={{ display: \"flex\", gap: \"0.5rem\" }}>\n//                                 <button onClick={() => saveEdit(a.id)} style={{ background: \"#36B37E\", color: \"#fff\", border: \"none\", borderRadius: \"4px\", padding: \"0.25rem 0.5rem\" }}>Save</button>\n//                                 <button onClick={cancelEdit} style={{ background: \"#DE350B\", color: \"#fff\", border: \"none\", borderRadius: \"4px\", padding: \"0.25rem 0.5rem\" }}>Cancel</button>\n//                               </div>\n//                             </div>\n//                           ) : (\n//                             <div onClick={() => startEditing(a)} style={{ cursor: \"pointer\" }}>\n//                               <div style={{ fontWeight: \"bold\" }}>{a.name}</div>\n//                               <div style={{ fontSize: \"0.85rem\", color: \"#555\" }}>{a.type} | {a.owner || \"-\"}</div>\n//                             </div>\n//                           )}\n\n//                           {/* Hover Toolbar */}\n//                           {hoveredId === a.id && editingId !== a.id && (\n//                             <div style={{\n//                               position: \"absolute\",\n//                               top: \"4px\",\n//                               right: \"4px\",\n//                               display: \"flex\",\n//                               gap: \"0.5rem\"\n//                             }}>\n//                               <button onClick={() => startEditing(a)} style={{ background: \"transparent\", border: \"none\", color: \"#0052CC\", cursor: \"pointer\", fontWeight: \"bold\" }}>Edit</button>\n//                               <button onClick={() => deleteAsset(a.id)} style={{ background: \"transparent\", border: \"none\", color: \"#DE350B\", cursor: \"pointer\", fontWeight: \"bold\" }}>Delete</button>\n//                             </div>\n//                           )}\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                   {provided.placeholder}\n\n//                   {/* Quick Add in Column */}\n//                   <div style={{ marginTop: \"0.5rem\", display: \"flex\", flexDirection: \"column\", gap: \"0.25rem\" }}>\n//                     <input placeholder=\"Name\" value={quickAdd[status]?.name || \"\"} onChange={e => setQuickAdd(prev => ({ ...prev, [status]: { ...prev[status], name: e.target.value } }))} />\n//                     <input placeholder=\"Type\" value={quickAdd[status]?.type || \"\"} onChange={e => setQuickAdd(prev => ({ ...prev, [status]: { ...prev[status], type: e.target.value } }))} />\n//                     <input placeholder=\"Owner\" value={quickAdd[status]?.owner || \"\"} onChange={e => setQuickAdd(prev => ({ ...prev, [status]: { ...prev[status], owner: e.target.value } }))} />\n//                     <button onClick={() => add(status)} style={{ background: \"#0052CC\", color: \"#fff\", border: \"none\", borderRadius: \"4px\", padding: \"0.25rem 0.5rem\", cursor: \"pointer\" }}>Add</button>\n//                   </div>\n\n//                 </div>\n//               )}\n//             </Droppable>\n//           ))}\n//         </div>\n//       </DragDropContext>\n//     </div>\n//   );\n// }\n"],"mappings":";;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\n\n// this code is ok\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\n// const mockProjects = [\n//   { id: 'p1', name: 'E-Commerce Platform' },\n//   { id: 'p2', name: 'API Gateway Service' },\n//   { id: 'p3', name: 'Mobile App Development' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\n// const getProjectName = async (projectId) => {\n//   await simulateApiDelay();\n//   const project = mockProjects.find(p => p.id === projectId);\n//   return project ? project.name : 'Untitled Project';\n// };\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\n// };\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [projectName, setProjectName] = useState('');\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n//   const [columnsByLane, setColumnsByLane] = useState({});\n//   const [columnModal, setColumnModal] = useState(null);\n//   const [columnInput, setColumnInput] = useState('');\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\n//   const [isMobile, setIsMobile] = useState(false);\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\n\n//   useEffect(() => {\n//     const checkScreenSize = () => {\n//       setIsMobile(window.innerWidth < 768);\n//     };\n//     checkScreenSize();\n//     window.addEventListener('resize', checkScreenSize);\n//     return () => window.removeEventListener('resize', checkScreenSize);\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const projectNameData = projectId ? await getProjectName(projectId) : 'All Projects';\n//         const [issuesData, epicsData] = await Promise.all([\n//           listIssues(projectId),\n//           listEpics()\n//         ]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         setProjectName(projectNameData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//           initialCols[lane.id] = defaultStatuses.slice();\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//         setColumnsByLane(initialCols);\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const openAddColumnModal = (e, laneId, colIndex) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'add' });\n//     setColumnInput('');\n//   };\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\n//     setColumnInput(status);\n//   };\n//   const handleAddColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[columnModal.laneId]];\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\n//       return { ...prev, [columnModal.laneId]: cols };\n//     });\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleEditColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     const { laneId, colIndex } = columnModal;\n//     const oldCol = columnsByLane[laneId][colIndex];\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\n//       alert('Column name already exists');\n//       return;\n//     }\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols[colIndex] = name.toLowerCase();\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleDeleteColumn = () => {\n//     const { laneId, colIndex } = columnModal;\n//     const removedCol = columnsByLane[laneId][colIndex];\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols.splice(colIndex, 1);\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) { console.error(err); }\n//   };\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error(err); }\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) {\n//       alert('Epic name is required');\n//       return;\n//     }\n//     try {\n//       await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\n//     } catch (error) {\n//       console.error('Error creating epic:', error);\n//     }\n//   };\n\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) {\n//       alert('Please select an epic to delete');\n//       return;\n//     }\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//       setColumnsByLane(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setOpenSwimlanes(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setCustomTitles(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//     } catch (error) {\n//       console.error('Error deleting epic:', error);\n//     }\n//   };\n\n//   const toggleMobileSwimlane = (laneId) => {\n//     if (activeSwimlane === laneId) {\n//       setActiveSwimlane(null);\n//     } else {\n//       setActiveSwimlane(laneId);\n//     }\n//   };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Project Name Header */}\n//       <div className=\"project-header\">\n//         <h1 className=\"project-title\">{projectName}</h1>\n//         <div className=\"project-stats\">\n//           <span className=\"project-stat\">{epics.length} Epics</span>\n//           <span className=\"project-stat\">{issues.length} Issues</span>\n//           <span className=\"project-stat\">\n//             {issues.filter(issue => issue.status === 'done').length} Completed\n//           </span>\n//         </div>\n//       </div>\n\n//       {isMobile && (\n//         <div className=\"mobile-swimlane-selector\">\n//           <select\n//             value={activeSwimlane || ''}\n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\n//             className=\"mobile-select\"\n//           >\n//             <option value=\"\">All Swimlanes</option>\n//             {swimlanes.map(lane => (\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       {swimlanes.map(lane => {\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\n\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\n//           return null;\n//         }\n\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               {!isMobile && (\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                   {isOpen ? '▼' : '▶'}\n//                 </button>\n//               )}\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input\n//                 className=\"swimlane-title-input\"\n//                 value={customTitles[lane.id] || ''}\n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))}\n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//               {isMobile && (\n//                 <button\n//                   className=\"mobile-swimlane-toggle\"\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\n//                 >\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\n//                 </button>\n//               )}\n//             </header>\n//             {isOpen && (\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\n//                 {statuses.map((status, idx) => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div\n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`}\n//                       key={status}\n//                       onDragOver={onDragOver}\n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {!isMobile && (\n//                           <span className=\"col-icons\">\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\n//                           </span>\n//                         )}\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => {\n//                         const isHovered = hoveredAssigneeId === issue.id;\n//                         return (\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                             <div className=\"card-top\">\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                               <span className=\"card-id\">{issue.id}</span>\n//                             </div>\n//                             <div className=\"card-title\">{issue.title}</div>\n//                             <div className=\"card-meta\">\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\n//                               {issue.assignee && (\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\n//                                   👤\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\n//                                 </span>\n//                               )}\n//                             </div>\n//                           </div>\n//                         );\n//                       })}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n//       {/* Column Add/Edit modal */}\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\n//             position: isMobile ? 'fixed' : 'absolute',\n//             top: isMobile ? '50%' : modalPosition.top,\n//             left: isMobile ? '50%' : modalPosition.left,\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\n//             minWidth: isMobile ? '90vw' : 280,\n//             maxWidth: isMobile ? '95vw' : 320,\n//             padding: 20,\n//             borderRadius: 10,\n//             background: 'white',\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\n//             zIndex: 1100\n//           }}>\n//             {columnModal.type === 'add' ? (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                 </div>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//       {/* Issue modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className={`modal ${isMobile ? 'mobile-modal' : ''}`} onClick={e => e.stopPropagation()}>\n//             <div className=\"modal-header\">\n//               <h2>{editIssue.epicName}</h2>\n//               <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\n//             </div>\n//             <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\n//               <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Status</label>\n//                 <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\n//                   {columnsByLane[editIssue.epic]?.map(st => <option key={st} value={st}>{st}</option>) || defaultStatuses.map(st => <option key={st} value={st}>{st}</option>)}\n//                 </select>\n//               </div>\n//               <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\n//               <div className=\"modal-field\"><label>Priority</label>\n//                 <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\n//                   <option>Low</option><option>Medium</option><option>High</option>\n//                 </select>\n//               </div>\n//               <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\n//               <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\n//             </div>\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\", alignItems: 'center' }}>\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\n//               <button className=\"modal-delete-btn\" onClick={async () => {\n//                 if (window.confirm('Delete this issue?')) {\n//                   await deleteIssueAPI(selectedIssue.id);\n//                   const refreshed = await listIssues(projectId);\n//                   setIssues(refreshed);\n//                   setSelectedIssue(null);\n//                 }\n//               }}>🗑</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Inline CSS styles */}\n// <style>{`\n//   body {\n//     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//     background-color: #f5f6f8;\n//     margin: 0;\n//     padding: 16px;\n//   }\n//   .board-wrap {\n//     max-width: 100%;\n//     overflow-x: auto;\n//   }\n//   .project-header {\n//     background: white;\n//     border-radius: 8px;\n//     padding: 20px 24px;\n//     margin-bottom: 20px;\n//     box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//     border-left: 4px solid #1976d2;\n//   }\n//   .project-title {\n//     margin: 0 0 12px 0;\n//     font-size: 28px;\n//     font-weight: 700;\n//     color: #172b4d;\n//     line-height: 1.2;\n//   }\n//   .project-stats {\n//     display: flex;\n//     gap: 20px;\n//     flex-wrap: wrap;\n//   }\n//   .project-stat {\n//     background: #f5f6f8;\n//     padding: 6px 12px;\n//     border-radius: 16px;\n//     font-size: 14px;\n//     font-weight: 600;\n//     color: #5e6c84;\n//     display: flex;\n//     align-items: center;\n//     gap: 4px;\n//   }\n//   .project-stat:before {\n//     content: \"•\";\n//     color: #1976d2;\n//     font-weight: bold;\n//   }\n//   @media (min-width: 768px) {\n//     .swimlane {\n//       background: white;\n//       border-radius: 8px;\n//       margin-bottom: 16px;\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//       overflow: hidden;\n//     }\n//     .kanban-row {\n//       display: flex;\n//       padding: 16px;\n//       gap: 12px;\n//       overflow-x: auto;\n//     }\n//     .kanban-column {\n//       flex: 0 0 260px;\n//       background: #f5f6f8;\n//       border-radius: 6px;\n//       padding: 12px;\n//       display: flex;\n//       flex-direction: column;\n//       gap: 12px;\n//       border: 1px solid #dfe5e5;\n//       user-select: none;\n//       min-height: 400px;\n//     }\n//     .modal {\n//       background: white;\n//       border-radius: 8px;\n//       padding: 24px;\n//       width: 700px;\n//       max-height: 80vh;\n//       display: grid;\n//       grid-template-columns: 1fr 1fr 1fr;\n//       gap: 16px;\n//       overflow-y: auto;\n//       position: relative;\n//     }\n//   }\n//   @media (max-width: 767px) {\n//     body {\n//       padding: 8px;\n//     }\n//     .project-header {\n//       padding: 16px;\n//       margin-bottom: 16px;\n//       border-left-width: 3px;\n//     }\n//     .project-title {\n//       font-size: 22px;\n//       margin-bottom: 10px;\n//     }\n//     .project-stats {\n//       gap: 12px;\n//     }\n//     .project-stat {\n//       font-size: 12px;\n//       padding: 4px 10px;\n//     }\n//     .mobile-swimlane-selector {\n//       margin-bottom: 16px;\n//       position: sticky;\n//       top: 0;\n//       background: white;\n//       padding: 12px;\n//       border-radius: 8px;\n//       box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n//       z-index: 100;\n//     }\n//     .mobile-select {\n//       width: 100%;\n//       padding: 12px;\n//       border: 1px solid #dfe5e5;\n//       border-radius: 6px;\n//       font-size: 16px;\n//       background: white;\n//     }\n//     .swimlane {\n//       background: white;\n//       border-radius: 8px;\n//       margin-bottom: 12px;\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//       overflow: hidden;\n//     }\n//     .swimlane-header {\n//       display: flex;\n//       align-items: center;\n//       padding: 12px;\n//       background: #fafbfc;\n//       border-bottom: 1px solid #dfe5e5;\n//       font-weight: 600;\n//       font-size: 14px;\n//       color: #172b4d;\n//       position: relative;\n//     }\n//     .mobile-swimlane-toggle {\n//       background: none;\n//       border: none;\n//       font-size: 16px;\n//       color: #5e6c84;\n//       margin-left: auto;\n//       padding: 4px 8px;\n//     }\n//     .kanban-row.mobile-view {\n//       display: block;\n//       padding: 8px;\n//       overflow-x: auto;\n//       white-space: nowrap;\n//     }\n//     .kanban-column.mobile-column {\n//       display: inline-block;\n//       vertical-align: top;\n//       width: 280px;\n//       margin-right: 8px;\n//       background: #f5f6f8;\n//       border-radius: 6px;\n//       padding: 8px;\n//       border: 1px solid #dfe5e5;\n//       user-select: none;\n//       min-height: 300px;\n//     }\n//     .col-header {\n//       display: flex;\n//       align-items: center;\n//       margin-bottom: 8px;\n//       gap: 6px;\n//     }\n//     .col-title {\n//       font-weight: 600;\n//       font-size: 11px;\n//       color: #5e6c84;\n//       text-transform: uppercase;\n//       letter-spacing: 0.5px;\n//       flex-grow: 1;\n//     }\n//     .card-item {\n//       background: white;\n//       border-radius: 6px;\n//       padding: 10px;\n//       box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//       cursor: pointer;\n//       user-select: none;\n//       display: flex;\n//       flex-direction: column;\n//       gap: 6px;\n//       border: 1px solid #dfe5e5;\n//       margin-bottom: 8px;\n//     }\n//     .card-title {\n//       font-weight: 600;\n//       font-size: 13px;\n//       color: #2b3a59;\n//       line-height: 1.3;\n//     }\n//     .card-meta {\n//       display: flex;\n//       gap: 6px;\n//       font-size: 10px;\n//       color: #6b7c93;\n//       align-items: center;\n//       flex-wrap: wrap;\n//     }\n//     .modal.mobile-modal {\n//       width: 95vw;\n//       max-height: 90vh;\n//       padding: 16px;\n//       display: flex;\n//       flex-direction: column;\n//     }\n//     .modal-content.mobile-modal-content {\n//       display: flex;\n//       flex-direction: column;\n//       gap: 12px;\n//       overflow-y: auto;\n//     }\n//     .modal-field {\n//       display: flex;\n//       flex-direction: column;\n//       gap: 4px;\n//     }\n//     .modal-field input, .modal-field textarea, .modal-field select {\n//       padding: 10px;\n//       font-size: 16px;\n//     }\n//     .modal-actions {\n//       display: flex;\n//       gap: 8px;\n//       justify-content: space-between;\n//       margin-top: 16px;\n//     }\n//     .modal-actions button {\n//       flex: 1;\n//       padding: 12px;\n//       font-size: 16px;\n//     }\n//   }\n//   .swimlane-header {\n//     display: flex;\n//     align-items: center;\n//     padding: 12px 16px;\n//     background: #fafbfc;\n//     border-bottom: 1px solid #dfe5e5;\n//     font-weight: 600;\n//     font-size: 14px;\n//     color: #172b4d;\n//   }\n//   .swimlane-toggle, .swimlane-icon {\n//     color: #5e6c84;\n//     margin-right: 8px;\n//     cursor: pointer;\n//   }\n//   .swimlane-toggle {\n//     border: none;\n//     background: transparent;\n//     font-size: 14px;\n//   }\n//   .swimlane-icon {\n//     font-size: 18px;\n//   }\n//   .swimlane-title-input {\n//     border: 1px solid #dfe5e5;\n//     border-radius: 4px;\n//     padding: 4px 8px;\n//     font-size: 14px;\n//     font-weight: 600;\n//     background: white;\n//     margin-right: 8px;\n//     min-width: 150px;\n//     color: #172b4d;\n//   }\n//   .swimlane-title-input:focus {\n//     outline: none;\n//     border-color: #1976d2;\n//   }\n//   .swimlane-count {\n//     color: #5e6c84;\n//     font-size: 12px;\n//     font-weight: normal;\n//   }\n//   .col-header {\n//     display: flex;\n//     align-items: center;\n//     margin-bottom: 4px;\n//     gap: 6px;\n//   }\n//   .col-title {\n//     font-weight: 600;\n//     font-size: 12px;\n//     color: #5e6c84;\n//     text-transform: uppercase;\n//     letter-spacing: 0.5px;\n//     flex-grow: 1;\n//   }\n//   .col-count {\n//     background: #dfe5e5;\n//     color: #5e6c84;\n//     border-radius: 12px;\n//     padding: 2px 8px;\n//     font-size: 11px;\n//     font-weight: 600;\n//     min-width: 20px;\n//     text-align: center;\n//   }\n//   .col-icons {\n//     display: flex;\n//     gap: 6px;\n//   }\n//   .col-icon {\n//     cursor: pointer;\n//     color: #5e6c84;\n//     font-size: 18px;\n//     background: none;\n//     border: none;\n//     padding: 0;\n//   }\n//   .create-card {\n//     background: white;\n//     padding: 10px;\n//     border-radius: 6px;\n//     box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n//     display: flex;\n//     flex-direction: column;\n//     gap: 10px;\n//   }\n//   .card-item {\n//     background: white;\n//     border-radius: 8px;\n//     padding: 12px;\n//     box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//     cursor: pointer;\n//     user-select: none;\n//     display: flex;\n//     flex-direction: column;\n//     gap: 6px;\n//     border: 1px solid #dfe5e5;\n//     transition: box-shadow 0.2s ease, border-color 0.2s ease;\n//   }\n//   .card-item:hover {\n//     box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\n//     border-color: #a2adba;\n//   }\n//   .modal-overlay {\n//     position: fixed;\n//     top: 0; left: 0; right: 0; bottom: 0;\n//     background: rgba(0,0,0,0.5);\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//     z-index: 1000;\n//   }\n//   button {\n//     cursor: pointer;\n//     transition: background-color 0.2s;\n//   }\n//   button:hover {\n//     opacity: 0.9;\n//   }\n//   @media (max-width: 767px) {\n//     button, .card-item, .col-icon {\n//       min-height: 44px;\n//       min-width: 44px;\n//     }\n//     .card-item {\n//       touch-action: manipulation;\n//     }\n//   }\n// `}</style>\n\n//     </div>\n//   );\n// }\n\n// const btnStyle = {\n//   cancel: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#5e6c84',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   create: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#1976d2',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   delete: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#d32f2f',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   }\n// };\n\n// for model dialog style \n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const mockIssues = [\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\n// ];\n\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\n// const mockProjects = [\n//   { id: 'p1', name: 'E-Commerce Platform' },\n//   { id: 'p2', name: 'API Gateway Service' },\n//   { id: 'p3', name: 'Mobile App Development' }\n// ];\n\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\n\n// const listIssues = async (projectId) => {\n//   await simulateApiDelay();\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\n// };\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\n// const getProjectName = async (projectId) => {\n//   await simulateApiDelay();\n//   const project = mockProjects.find(p => p.id === projectId);\n//   return project ? project.name : 'Untitled Project';\n// };\n// const createEpicAPI = async (epicName) => {\n//   await simulateApiDelay();\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\n//   mockEpics.push(newEpic);\n//   return newEpic;\n// };\n// const deleteEpicAPI = async (epicId) => {\n//   await simulateApiDelay();\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\n//   const issueIndices = [];\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\n// };\n// const moveIssue = async (issueId, status) => {\n//   await simulateApiDelay();\n//   const issue = mockIssues.find(i => i.id === issueId);\n//   if (!issue) throw new Error('Issue not found');\n//   issue.status = status;\n// };\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\n\n// const getSwimlanes = (issues, epics) =>\n//   epics.map(epic => {\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\n//   });\n\n// export default function KanbanBoard() {\n//   const { projectId } = useParams();\n//   const [issues, setIssues] = useState([]);\n//   const [epics, setEpics] = useState([]);\n//   const [projectName, setProjectName] = useState('');\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\n//   const [customTitles, setCustomTitles] = useState({});\n//   const [createLaneId, setCreateLaneId] = useState(null);\n//   const [newTaskText, setNewTaskText] = useState('');\n//   const [newTaskType, setNewTaskType] = useState('Task');\n//   const [selectedIssue, setSelectedIssue] = useState(null);\n//   const [editIssue, setEditIssue] = useState(null);\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\n//   const [newEpicName, setNewEpicName] = useState('');\n//   const [epicToDelete, setEpicToDelete] = useState('');\n//   const [columnsByLane, setColumnsByLane] = useState({});\n//   const [columnModal, setColumnModal] = useState(null);\n//   const [columnInput, setColumnInput] = useState('');\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\n//   const [isMobile, setIsMobile] = useState(false);\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\n\n//   useEffect(() => {\n//     const checkScreenSize = () => {\n//       setIsMobile(window.innerWidth < 768);\n//     };\n//     checkScreenSize();\n//     window.addEventListener('resize', checkScreenSize);\n//     return () => window.removeEventListener('resize', checkScreenSize);\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const projectNameData = projectId ? await getProjectName(projectId) : 'All Projects';\n//         const [issuesData, epicsData] = await Promise.all([\n//           listIssues(projectId),\n//           listEpics()\n//         ]);\n//         setIssues(issuesData);\n//         setEpics(epicsData);\n//         setProjectName(projectNameData);\n//         const lanes = getSwimlanes(issuesData, epicsData);\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\n//         lanes.forEach(lane => {\n//           initialOpen[lane.id] = true;\n//           initialTitles[lane.id] = lane.title;\n//           initialCols[lane.id] = defaultStatuses.slice();\n//         });\n//         setOpenSwimlanes(initialOpen);\n//         setCustomTitles(initialTitles);\n//         setColumnsByLane(initialCols);\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     };\n//     fetchData();\n//   }, [projectId]);\n\n//   const openAddColumnModal = (e, laneId, colIndex) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'add' });\n//     setColumnInput('');\n//   };\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\n//     const rect = e.currentTarget.getBoundingClientRect();\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\n//     setColumnInput(status);\n//   };\n//   const handleAddColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[columnModal.laneId]];\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\n//       return { ...prev, [columnModal.laneId]: cols };\n//     });\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleEditColumn = () => {\n//     const name = columnInput.trim();\n//     if (!name) return alert('Column name is required');\n//     const { laneId, colIndex } = columnModal;\n//     const oldCol = columnsByLane[laneId][colIndex];\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\n//       alert('Column name already exists');\n//       return;\n//     }\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols[colIndex] = name.toLowerCase();\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const handleDeleteColumn = () => {\n//     const { laneId, colIndex } = columnModal;\n//     const removedCol = columnsByLane[laneId][colIndex];\n//     setColumnsByLane(prev => {\n//       const cols = [...prev[laneId]];\n//       cols.splice(colIndex, 1);\n//       return { ...prev, [laneId]: cols };\n//     });\n//     const updatedIssues = issues.map(issue =>\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\n//     );\n//     setIssues(updatedIssues);\n//     setColumnModal(null);\n//     setColumnInput('');\n//   };\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\n\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\n//     e.preventDefault();\n//     try {\n//       const issueId = e.dataTransfer.getData('text/plain');\n//       const issue = issues.find(i => i.id === issueId);\n//       const srcLaneId = issue.epic || issue.projectId;\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\n//         await moveIssue(issueId, targetStatus);\n//         const refreshed = await listIssues(projectId);\n//         setIssues(refreshed);\n//       }\n//     } catch (err) { console.error(err); }\n//   };\n//   const onDragOver = e => e.preventDefault();\n\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\n//   const handleCreateSubmit = async lane => {\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\n//     const newIssue = {\n//       id: Math.random().toString(36).slice(2),\n//       epic: lane.id,\n//       projectId: lane.id,\n//       epicName: lane.title,\n//       title: newTaskText,\n//       status: 'backlog',\n//       assignee: '',\n//       type: newTaskType,\n//       storyPoints: '',\n//       labels: [],\n//       dueDate: '',\n//       reporter: 'system',\n//       priority: 'Medium',\n//       startDate: new Date().toISOString().split('T')[0],\n//       description: '',\n//       subtasks: '',\n//       comments: ''\n//     };\n//     try {\n//       await createIssueAPI(newIssue);\n//       const refreshed = await listIssues(projectId);\n//       setIssues(refreshed);\n//       setCreateLaneId(null);\n//     } catch (err) { console.error(err); }\n//   };\n\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\n\n//   const handleCreateEpic = async () => {\n//     if (!newEpicName.trim()) {\n//       alert('Epic name is required');\n//       return;\n//     }\n//     try {\n//       await createEpicAPI(newEpicName);\n//       const updatedEpics = await listEpics();\n//       setEpics(updatedEpics);\n//       setNewEpicName('');\n//       setShowCreateEpic(false);\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\n//     } catch (error) {\n//       console.error('Error creating epic:', error);\n//     }\n//   };\n\n//   const handleDeleteEpic = async () => {\n//     if (!epicToDelete) {\n//       alert('Please select an epic to delete');\n//       return;\n//     }\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\n//       return;\n//     }\n//     try {\n//       await deleteEpicAPI(epicToDelete);\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\n//         listIssues(projectId),\n//         listEpics()\n//       ]);\n//       setIssues(refreshedIssues);\n//       setEpics(refreshedEpics);\n//       setEpicToDelete('');\n//       setShowDeleteEpic(false);\n//       setColumnsByLane(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setOpenSwimlanes(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//       setCustomTitles(prev => {\n//         const copy = { ...prev };\n//         delete copy[epicToDelete];\n//         return copy;\n//       });\n//     } catch (error) {\n//       console.error('Error deleting epic:', error);\n//     }\n//   };\n\n//   const toggleMobileSwimlane = (laneId) => {\n//     if (activeSwimlane === laneId) {\n//       setActiveSwimlane(null);\n//     } else {\n//       setActiveSwimlane(laneId);\n//     }\n//   };\n\n//   const swimlanes = getSwimlanes(issues, epics);\n\n//   return (\n//     <div className=\"board-wrap\">\n//       {/* Project Name Header */}\n//       <div className=\"project-header\">\n//         <h1 className=\"project-title\">{projectName}</h1>\n//         <div className=\"project-stats\">\n//           <span className=\"project-stat\">{epics.length} Epics</span>\n//           <span className=\"project-stat\">{issues.length} Issues</span>\n//           <span className=\"project-stat\">\n//             {issues.filter(issue => issue.status === 'done').length} Completed\n//           </span>\n//         </div>\n//       </div>\n\n//       {isMobile && (\n//         <div className=\"mobile-swimlane-selector\">\n//           <select\n//             value={activeSwimlane || ''}\n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\n//             className=\"mobile-select\"\n//           >\n//             <option value=\"\">All Swimlanes</option>\n//             {swimlanes.map(lane => (\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       {swimlanes.map(lane => {\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\n\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\n//           return null;\n//         }\n\n//         return (\n//           <section className=\"swimlane\" key={lane.id}>\n//             <header className=\"swimlane-header\">\n//               {!isMobile && (\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\n//                   {isOpen ? '▼' : '▶'}\n//                 </button>\n//               )}\n//               <span className=\"swimlane-icon\">⚡</span>\n//               <input\n//                 className=\"swimlane-title-input\"\n//                 value={customTitles[lane.id] || ''}\n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))}\n//               />\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\n//               {isMobile && (\n//                 <button\n//                   className=\"mobile-swimlane-toggle\"\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\n//                 >\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\n//                 </button>\n//               )}\n//             </header>\n//             {isOpen && (\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\n//                 {statuses.map((status, idx) => {\n//                   const issuesForStatus = byStatus(lane.issues, status);\n//                   return (\n//                     <div\n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`}\n//                       key={status}\n//                       onDragOver={onDragOver}\n//                       onDrop={e => onDrop(e, status, lane.id)}\n//                     >\n//                       <div className=\"col-header\">\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\n//                         {!isMobile && (\n//                           <span className=\"col-icons\">\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\n//                           </span>\n//                         )}\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\n//                       </div>\n//                       <div className=\"col-create\">\n//                         {status === 'backlog' && (\n//                           createLaneId === lane.id ? (\n//                             <div className=\"create-card\">\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\n//                               <div className=\"create-actions\">\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\n//                                 </select>\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\n//                               </div>\n//                             </div>\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\n//                         )}\n//                       </div>\n//                       {issuesForStatus.map(issue => {\n//                         const isHovered = hoveredAssigneeId === issue.id;\n//                         return (\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\n//                             <div className=\"card-top\">\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\n//                               <span className=\"card-id\">{issue.id}</span>\n//                             </div>\n//                             <div className=\"card-title\">{issue.title}</div>\n//                             <div className=\"card-meta\">\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\n//                               {issue.assignee && (\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\n//                                   👤\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\n//                                 </span>\n//                               )}\n//                             </div>\n//                           </div>\n//                         );\n//                       })}\n//                     </div>\n//                   );\n//                 })}\n//               </div>\n//             )}\n//           </section>\n//         );\n//       })}\n//       {/* Column Add/Edit modal */}\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\n//             position: isMobile ? 'fixed' : 'absolute',\n//             top: isMobile ? '50%' : modalPosition.top,\n//             left: isMobile ? '50%' : modalPosition.left,\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\n//             minWidth: isMobile ? '90vw' : 280,\n//             maxWidth: isMobile ? '95vw' : 320,\n//             padding: 20,\n//             borderRadius: 10,\n//             background: 'white',\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\n//             zIndex: 1100\n//           }}>\n//             {columnModal.type === 'add' ? (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <>\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\n//                 </div>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//       {/* Issue modal */}\n//       {selectedIssue && editIssue && (\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\n//           <div className={`modal ${isMobile ? 'mobile-modal' : ''}`} onClick={e => e.stopPropagation()}>\n//             <div className=\"modal-header\">\n//               <div className=\"modal-header-content\">\n//                 <span className=\"modal-epic-badge\">{editIssue.epicName}</span>\n//                 <h2 className=\"modal-title\">{editIssue.title || 'Untitled Issue'}</h2>\n//                 <div className=\"modal-id-type\">\n//                   <span className=\"modal-id\">{editIssue.id}</span>\n//                   <span className={`modal-type modal-type-${editIssue.type.toLowerCase()}`}>{editIssue.type}</span>\n//                 </div>\n//               </div>\n//               <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\n//             </div>\n\n//             <div className=\"modal-content-scroll\">\n//               <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\n//                 <div className=\"modal-section\">\n//                   <h3 className=\"modal-section-title\">Details</h3>\n//                   <div className=\"modal-grid\">\n//                     <div className=\"modal-field\">\n//                       <label className=\"modal-label\">Title</label>\n//                       <input \n//                         className=\"modal-input\" \n//                         value={editIssue.title} \n//                         onChange={e => handleUpdateField('title', e.target.value)} \n//                         placeholder=\"Enter issue title\"\n//                       />\n//                     </div>\n//                     <div className=\"modal-field\">\n//                       <label className=\"modal-label\">Status</label>\n//                       <select \n//                         className=\"modal-select\"\n//                         value={editIssue.status} \n//                         onChange={e => handleUpdateField('status', e.target.value)}\n//                       >\n//                         {columnsByLane[editIssue.epic]?.map(st => (\n//                           <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\n//                         )) || defaultStatuses.map(st => (\n//                           <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\n//                         ))}\n//                       </select>\n//                     </div>\n//                     <div className=\"modal-field\">\n//                       <label className=\"modal-label\">Assignee</label>\n//                       <input \n//                         className=\"modal-input\"\n//                         value={editIssue.assignee} \n//                         onChange={e => handleUpdateField('assignee', e.target.value)}\n//                         placeholder=\"Unassigned\"\n//                       />\n//                     </div>\n//                     <div className=\"modal-field\">\n//                       <label className=\"modal-label\">Reporter</label>\n//                       <input \n//                         className=\"modal-input modal-input-disabled\"\n//                         disabled \n//                         value={editIssue.reporter} \n//                       />\n//                     </div>\n//                     <div className=\"modal-field\">\n//                       <label className=\"modal-label\">Priority</label>\n//                       <select \n//                         className=\"modal-select\"\n//                         value={editIssue.priority} \n//                         onChange={e => handleUpdateField('priority', e.target.value)}\n//                       >\n//                         <option>Low</option>\n//                         <option>Medium</option>\n//                         <option>High</option>\n//                       </select>\n//                     </div>\n//                     <div className=\"modal-field\">\n//                       <label className=\"modal-label\">Story Points</label>\n//                       <input \n//                         className=\"modal-input\"\n//                         type=\"number\" \n//                         value={editIssue.storyPoints} \n//                         onChange={e => handleUpdateField('storyPoints', e.target.value)}\n//                         placeholder=\"0\"\n//                       />\n//                     </div>\n//                     <div className=\"modal-field\">\n//                       <label className=\"modal-label\">Start Date</label>\n//                       <input \n//                         className=\"modal-input\"\n//                         type=\"date\" \n//                         value={editIssue.startDate} \n//                         onChange={e => handleUpdateField('startDate', e.target.value)} \n//                       />\n//                     </div>\n//                     <div className=\"modal-field\">\n//                       <label className=\"modal-label\">Due Date</label>\n//                       <input \n//                         className=\"modal-input\"\n//                         type=\"date\" \n//                         value={editIssue.dueDate} \n//                         onChange={e => handleUpdateField('dueDate', e.target.value)} \n//                       />\n//                     </div>\n//                   </div>\n//                 </div>\n\n//                 <div className=\"modal-section\">\n//                   <h3 className=\"modal-section-title\">Description</h3>\n//                   <div className=\"modal-field-full\">\n//                     <textarea \n//                       className=\"modal-textarea\"\n//                       rows=\"4\" \n//                       value={editIssue.description} \n//                       onChange={e => handleUpdateField('description', e.target.value)}\n//                       placeholder=\"Add a detailed description...\"\n//                     />\n//                   </div>\n//                 </div>\n\n//                 <div className=\"modal-section\">\n//                   <h3 className=\"modal-section-title\">Additional Information</h3>\n//                   <div className=\"modal-grid\">\n//                     <div className=\"modal-field-full\">\n//                       <label className=\"modal-label\">Subtasks</label>\n//                       <input \n//                         className=\"modal-input\"\n//                         value={editIssue.subtasks} \n//                         onChange={e => handleUpdateField('subtasks', e.target.value)}\n//                         placeholder=\"Enter subtasks (comma separated)\"\n//                       />\n//                     </div>\n//                     <div className=\"modal-field-full\">\n//                       <label className=\"modal-label\">Comments</label>\n//                       <textarea \n//                         className=\"modal-textarea\"\n//                         rows=\"3\" \n//                         value={editIssue.comments} \n//                         onChange={e => handleUpdateField('comments', e.target.value)}\n//                         placeholder=\"Add comments...\"\n//                       />\n//                     </div>\n//                   </div>\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className=\"modal-actions\">\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset Changes</button>\n//               <div className=\"modal-actions-right\">\n//                 <button \n//                   className=\"modal-delete-btn\" \n//                   onClick={async () => {\n//                     if (window.confirm('Are you sure you want to delete this issue?')) {\n//                       await deleteIssueAPI(selectedIssue.id);\n//                       const refreshed = await listIssues(projectId);\n//                       setIssues(refreshed);\n//                       setSelectedIssue(null);\n//                     }\n//                   }}\n//                 >\n//                   Delete Issue\n//                 </button>\n//                 <button className=\"btn-save\" onClick={handleSave}>Save Changes</button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Inline CSS styles */}\n// <style>{`\n//   body {\n//     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n//     background-color: #f5f6f8;\n//     margin: 0;\n//     padding: 16px;\n//   }\n//   .board-wrap {\n//     max-width: 100%;\n//     overflow-x: auto;\n//   }\n//   .project-header {\n//     background: white;\n//     border-radius: 8px;\n//     padding: 20px 24px;\n//     margin-bottom: 20px;\n//     box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//     border-left: 4px solid #1976d2;\n//   }\n//   .project-title {\n//     margin: 0 0 12px 0;\n//     font-size: 28px;\n//     font-weight: 700;\n//     color: #172b4d;\n//     line-height: 1.2;\n//   }\n//   .project-stats {\n//     display: flex;\n//     gap: 20px;\n//     flex-wrap: wrap;\n//   }\n//   .project-stat {\n//     background: #f5f6f8;\n//     padding: 6px 12px;\n//     border-radius: 16px;\n//     font-size: 14px;\n//     font-weight: 600;\n//     color: #5e6c84;\n//     display: flex;\n//     align-items: center;\n//     gap: 4px;\n//   }\n//   .project-stat:before {\n//     content: \"•\";\n//     color: #1976d2;\n//     font-weight: bold;\n//   }\n//   @media (min-width: 768px) {\n//     .swimlane {\n//       background: white;\n//       border-radius: 8px;\n//       margin-bottom: 16px;\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//       overflow: hidden;\n//     }\n//     .kanban-row {\n//       display: flex;\n//       padding: 16px;\n//       gap: 12px;\n//       overflow-x: auto;\n//     }\n//     .kanban-column {\n//       flex: 0 0 260px;\n//       background: #f5f6f8;\n//       border-radius: 6px;\n//       padding: 12px;\n//       display: flex;\n//       flex-direction: column;\n//       gap: 12px;\n//       border: 1px solid #dfe5e5;\n//       user-select: none;\n//       min-height: 400px;\n//     }\n//     .modal {\n//       background: white;\n//       border-radius: 12px;\n//       width: 90vw;\n//       max-width: 1000px;\n//       max-height: 85vh;\n//       display: flex;\n//       flex-direction: column;\n//       overflow: hidden;\n//       box-shadow: 0 20px 60px rgba(0,0,0,0.3);\n//     }\n//   }\n//   @media (max-width: 767px) {\n//     body {\n//       padding: 8px;\n//     }\n//     .project-header {\n//       padding: 16px;\n//       margin-bottom: 16px;\n//       border-left-width: 3px;\n//     }\n//     .project-title {\n//       font-size: 22px;\n//       margin-bottom: 10px;\n//     }\n//     .project-stats {\n//       gap: 12px;\n//     }\n//     .project-stat {\n//       font-size: 12px;\n//       padding: 4px 10px;\n//     }\n//     .mobile-swimlane-selector {\n//       margin-bottom: 16px;\n//       position: sticky;\n//       top: 0;\n//       background: white;\n//       padding: 12px;\n//       border-radius: 8px;\n//       box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n//       z-index: 100;\n//     }\n//     .mobile-select {\n//       width: 100%;\n//       padding: 12px;\n//       border: 1px solid #dfe5e5;\n//       border-radius: 6px;\n//       font-size: 16px;\n//       background: white;\n//     }\n//     .swimlane {\n//       background: white;\n//       border-radius: 8px;\n//       margin-bottom: 12px;\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n//       overflow: hidden;\n//     }\n//     .swimlane-header {\n//       display: flex;\n//       align-items: center;\n//       padding: 12px;\n//       background: #fafbfc;\n//       border-bottom: 1px solid #dfe5e5;\n//       font-weight: 600;\n//       font-size: 14px;\n//       color: #172b4d;\n//       position: relative;\n//     }\n//     .mobile-swimlane-toggle {\n//       background: none;\n//       border: none;\n//       font-size: 16px;\n//       color: #5e6c84;\n//       margin-left: auto;\n//       padding: 4px 8px;\n//     }\n//     .kanban-row.mobile-view {\n//       display: block;\n//       padding: 8px;\n//       overflow-x: auto;\n//       white-space: nowrap;\n//     }\n//     .kanban-column.mobile-column {\n//       display: inline-block;\n//       vertical-align: top;\n//       width: 280px;\n//       margin-right: 8px;\n//       background: #f5f6f8;\n//       border-radius: 6px;\n//       padding: 8px;\n//       border: 1px solid #dfe5e5;\n//       user-select: none;\n//       min-height: 300px;\n//     }\n//     .col-header {\n//       display: flex;\n//       align-items: center;\n//       margin-bottom: 8px;\n//       gap: 6px;\n//     }\n//     .col-title {\n//       font-weight: 600;\n//       font-size: 11px;\n//       color: #5e6c84;\n//       text-transform: uppercase;\n//       letter-spacing: 0.5px;\n//       flex-grow: 1;\n//     }\n//     .card-item {\n//       background: white;\n//       border-radius: 6px;\n//       padding: 10px;\n//       box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//       cursor: pointer;\n//       user-select: none;\n//       display: flex;\n//       flex-direction: column;\n//       gap: 6px;\n//       border: 1px solid #dfe5e5;\n//       margin-bottom: 8px;\n//     }\n//     .card-title {\n//       font-weight: 600;\n//       font-size: 13px;\n//       color: #2b3a59;\n//       line-height: 1.3;\n//     }\n//     .card-meta {\n//       display: flex;\n//       gap: 6px;\n//       font-size: 10px;\n//       color: #6b7c93;\n//       align-items: center;\n//       flex-wrap: wrap;\n//     }\n//     .modal.mobile-modal {\n//       width: 95vw;\n//       max-height: 90vh;\n//       margin: 20px;\n//       display: flex;\n//       flex-direction: column;\n//     }\n//     .modal-content.mobile-modal-content {\n//       display: flex;\n//       flex-direction: column;\n//       gap: 16px;\n//       overflow-y: auto;\n//     }\n//   }\n\n//   /* Enhanced Modal Styles */\n//   .modal-overlay {\n//     position: fixed;\n//     top: 0; left: 0; right: 0; bottom: 0;\n//     background: rgba(0,0,0,0.6);\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//     z-index: 1000;\n//     padding: 20px;\n//   }\n\n//   .modal {\n//     background: white;\n//     border-radius: 12px;\n//     width: 90vw;\n//     max-width: 1000px;\n//     max-height: 85vh;\n//     display: flex;\n//     flex-direction: column;\n//     overflow: hidden;\n//     box-shadow: 0 20px 60px rgba(0,0,0,0.3);\n//   }\n\n//   .modal-header {\n//     display: flex;\n//     justify-content: space-between;\n//     align-items: flex-start;\n//     padding: 24px;\n//     background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n//     border-bottom: 1px solid #e1e4e8;\n//   }\n\n//   .modal-header-content {\n//     flex: 1;\n//     min-width: 0;\n//   }\n\n//   .modal-epic-badge {\n//     display: inline-block;\n//     background: #1976d2;\n//     color: white;\n//     padding: 4px 12px;\n//     border-radius: 16px;\n//     font-size: 12px;\n//     font-weight: 600;\n//     margin-bottom: 8px;\n//   }\n\n//   .modal-title {\n//     margin: 0 0 8px 0;\n//     font-size: 24px;\n//     font-weight: 700;\n//     color: #172b4d;\n//     line-height: 1.3;\n//     word-wrap: break-word;\n//   }\n\n//   .modal-id-type {\n//     display: flex;\n//     gap: 12px;\n//     align-items: center;\n//   }\n\n//   .modal-id {\n//     font-size: 14px;\n//     color: #5e6c84;\n//     font-family: 'Monaco', 'Menlo', monospace;\n//   }\n\n//   .modal-type {\n//     padding: 2px 8px;\n//     border-radius: 4px;\n//     font-size: 12px;\n//     font-weight: 600;\n//     text-transform: uppercase;\n//   }\n\n//   .modal-type-task { background: #e3f2fd; color: #1976d2; }\n//   .modal-type-subtask { background: #f3e5f5; color: #7b1fa2; }\n//   .modal-type-bug { background: #ffebee; color: #d32f2f; }\n\n//   .modal-close-btn {\n//     background: none;\n//     border: none;\n//     font-size: 20px;\n//     color: #5e6c84;\n//     cursor: pointer;\n//     padding: 8px;\n//     margin: -8px;\n//     border-radius: 4px;\n//     transition: background-color 0.2s;\n//   }\n\n//   .modal-close-btn:hover {\n//     background: rgba(0,0,0,0.1);\n//   }\n\n//   .modal-content-scroll {\n//     flex: 1;\n//     overflow-y: auto;\n//     padding: 0 24px;\n//   }\n\n//   .modal-content {\n//     padding: 24px 0;\n//     display: flex;\n//     flex-direction: column;\n//     gap: 24px;\n//   }\n\n//   .modal-section {\n//     display: flex;\n//     flex-direction: column;\n//     gap: 16px;\n//   }\n\n//   .modal-section-title {\n//     font-size: 18px;\n//     font-weight: 600;\n//     color: #172b4d;\n//     margin: 0;\n//     padding-bottom: 8px;\n//     border-bottom: 2px solid #f0f0f0;\n//   }\n\n//   .modal-grid {\n//     display: grid;\n//     grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n//     gap: 16px;\n//   }\n\n//   .modal-field {\n//     display: flex;\n//     flex-direction: column;\n//     gap: 6px;\n//   }\n\n//   .modal-field-full {\n//     grid-column: 1 / -1;\n//     display: flex;\n//     flex-direction: column;\n//     gap: 6px;\n//   }\n\n//   .modal-label {\n//     font-size: 14px;\n//     font-weight: 600;\n//     color: #44546f;\n//     margin: 0;\n//   }\n\n//   .modal-input, .modal-select, .modal-textarea {\n//     padding: 12px;\n//     border: 2px solid #dfe1e6;\n//     border-radius: 8px;\n//     font-size: 14px;\n//     font-family: inherit;\n//     transition: border-color 0.2s, box-shadow 0.2s;\n//     background: white;\n//   }\n\n//   .modal-input:focus, .modal-select:focus, .modal-textarea:focus {\n//     outline: none;\n//     border-color: #1976d2;\n//     box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);\n//   }\n\n//   .modal-input-disabled {\n//     background: #f8f9fa;\n//     color: #6b778c;\n//     cursor: not-allowed;\n//   }\n\n//   .modal-textarea {\n//     resize: vertical;\n//     min-height: 80px;\n//     line-height: 1.5;\n//   }\n\n//   .modal-actions {\n//     display: flex;\n//     justify-content: space-between;\n//     align-items: center;\n//     padding: 20px 24px;\n//     background: #f8f9fa;\n//     border-top: 1px solid #e1e4e8;\n//     gap: 16px;\n//   }\n\n//   .modal-actions-right {\n//     display: flex;\n//     gap: 12px;\n//     align-items: center;\n//   }\n\n//   .btn-reset {\n//     padding: 10px 20px;\n//     border: 1px solid #dcdfe4;\n//     background: white;\n//     color: #44546f;\n//     border-radius: 6px;\n//     font-weight: 600;\n//     cursor: pointer;\n//     transition: all 0.2s;\n//   }\n\n//   .btn-reset:hover {\n//     background: #f1f2f4;\n//     border-color: #c1c7d0;\n//   }\n\n//   .btn-save {\n//     padding: 10px 24px;\n//     border: none;\n//     background: #1976d2;\n//     color: white;\n//     border-radius: 6px;\n//     font-weight: 600;\n//     cursor: pointer;\n//     transition: background-color 0.2s;\n//   }\n\n//   .btn-save:hover {\n//     background: #1565c0;\n//   }\n\n//   .modal-delete-btn {\n//     padding: 10px 20px;\n//     border: 1px solid #ffcdd2;\n//     background: white;\n//     color: #d32f2f;\n//     border-radius: 6px;\n//     font-weight: 600;\n//     cursor: pointer;\n//     transition: all 0.2s;\n//   }\n\n//   .modal-delete-btn:hover {\n//     background: #ffebee;\n//     border-color: #ef5350;\n//   }\n\n//   @media (max-width: 767px) {\n//     .modal-overlay {\n//       padding: 10px;\n//     }\n\n//     .modal.mobile-modal {\n//       width: 95vw;\n//       max-height: 90vh;\n//       margin: 0;\n//     }\n\n//     .modal-header {\n//       padding: 16px;\n//       flex-direction: column;\n//       gap: 12px;\n//     }\n\n//     .modal-close-btn {\n//       align-self: flex-end;\n//       margin: 0;\n//     }\n\n//     .modal-content-scroll {\n//       padding: 0 16px;\n//     }\n\n//     .modal-content {\n//       padding: 16px 0;\n//       gap: 20px;\n//     }\n\n//     .modal-grid {\n//       grid-template-columns: 1fr;\n//       gap: 12px;\n//     }\n\n//     .modal-actions {\n//       padding: 16px;\n//       flex-direction: column;\n//       gap: 12px;\n//     }\n\n//     .modal-actions-right {\n//       width: 100%;\n//       justify-content: space-between;\n//     }\n\n//     .btn-reset, .modal-delete-btn, .btn-save {\n//       flex: 1;\n//       text-align: center;\n//     }\n//   }\n\n//   .swimlane-header {\n//     display: flex;\n//     align-items: center;\n//     padding: 12px 16px;\n//     background: #fafbfc;\n//     border-bottom: 1px solid #dfe5e5;\n//     font-weight: 600;\n//     font-size: 14px;\n//     color: #172b4d;\n//   }\n//   .swimlane-toggle, .swimlane-icon {\n//     color: #5e6c84;\n//     margin-right: 8px;\n//     cursor: pointer;\n//   }\n//   .swimlane-toggle {\n//     border: none;\n//     background: transparent;\n//     font-size: 14px;\n//   }\n//   .swimlane-icon {\n//     font-size: 18px;\n//   }\n//   .swimlane-title-input {\n//     border: 1px solid #dfe5e5;\n//     border-radius: 4px;\n//     padding: 4px 8px;\n//     font-size: 14px;\n//     font-weight: 600;\n//     background: white;\n//     margin-right: 8px;\n//     min-width: 150px;\n//     color: #172b4d;\n//   }\n//   .swimlane-title-input:focus {\n//     outline: none;\n//     border-color: #1976d2;\n//   }\n//   .swimlane-count {\n//     color: #5e6c84;\n//     font-size: 12px;\n//     font-weight: normal;\n//   }\n//   .col-header {\n//     display: flex;\n//     align-items: center;\n//     margin-bottom: 4px;\n//     gap: 6px;\n//   }\n//   .col-title {\n//     font-weight: 600;\n//     font-size: 12px;\n//     color: #5e6c84;\n//     text-transform: uppercase;\n//     letter-spacing: 0.5px;\n//     flex-grow: 1;\n//   }\n//   .col-count {\n//     background: #dfe5e5;\n//     color: #5e6c84;\n//     border-radius: 12px;\n//     padding: 2px 8px;\n//     font-size: 11px;\n//     font-weight: 600;\n//     min-width: 20px;\n//     text-align: center;\n//   }\n//   .col-icons {\n//     display: flex;\n//     gap: 6px;\n//   }\n//   .col-icon {\n//     cursor: pointer;\n//     color: #5e6c84;\n//     font-size: 18px;\n//     background: none;\n//     border: none;\n//     padding: 0;\n//   }\n//   .create-card {\n//     background: white;\n//     padding: 10px;\n//     border-radius: 6px;\n//     box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n//     display: flex;\n//     flex-direction: column;\n//     gap: 10px;\n//   }\n//   .card-item {\n//     background: white;\n//     border-radius: 8px;\n//     padding: 12px;\n//     box-shadow: 0 0 2px rgba(0,0,0,0.1);\n//     cursor: pointer;\n//     user-select: none;\n//     display: flex;\n//     flex-direction: column;\n//     gap: 6px;\n//     border: 1px solid #dfe5e5;\n//     transition: box-shadow 0.2s ease, border-color 0.2s ease;\n//   }\n//   .card-item:hover {\n//     box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\n//     border-color: #a2adba;\n//   }\n//   button {\n//     cursor: pointer;\n//     transition: background-color 0.2s;\n//   }\n//   button:hover {\n//     opacity: 0.9;\n//   }\n//   @media (max-width: 767px) {\n//     button, .card-item, .col-icon {\n//       min-height: 44px;\n//       min-width: 44px;\n//     }\n//     .card-item {\n//       touch-action: manipulation;\n//     }\n//   }\n// `}</style>\n\n//     </div>\n//   );\n// }\n\n// const btnStyle = {\n//   cancel: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#5e6c84',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   create: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#1976d2',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   },\n//   delete: {\n//     padding: '10px 18px',\n//     borderRadius: '6px',\n//     border: 'none',\n//     backgroundColor: '#d32f2f',\n//     color: 'white',\n//     fontWeight: '600',\n//     fontSize: '14px',\n//     cursor: 'pointer'\n//   }\n// };","map":{"version":3,"names":[],"sources":["C:/Users/battina srinuvasurao/OneDrive/Desktop/userstool/src/components/boards/KanbanBoard.js"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// this code is ok\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const mockIssues = [\r\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\r\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\r\n// ];\r\n\r\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\r\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\r\n// const mockProjects = [\r\n//   { id: 'p1', name: 'E-Commerce Platform' },\r\n//   { id: 'p2', name: 'API Gateway Service' },\r\n//   { id: 'p3', name: 'Mobile App Development' }\r\n// ];\r\n\r\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\r\n\r\n// const listIssues = async (projectId) => {\r\n//   await simulateApiDelay();\r\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\r\n// };\r\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\r\n// const getProjectName = async (projectId) => {\r\n//   await simulateApiDelay();\r\n//   const project = mockProjects.find(p => p.id === projectId);\r\n//   return project ? project.name : 'Untitled Project';\r\n// };\r\n// const createEpicAPI = async (epicName) => {\r\n//   await simulateApiDelay();\r\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\r\n//   mockEpics.push(newEpic);\r\n//   return newEpic;\r\n// };\r\n// const deleteEpicAPI = async (epicId) => {\r\n//   await simulateApiDelay();\r\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\r\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\r\n//   const issueIndices = [];\r\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\r\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\r\n// };\r\n// const moveIssue = async (issueId, status) => {\r\n//   await simulateApiDelay();\r\n//   const issue = mockIssues.find(i => i.id === issueId);\r\n//   if (!issue) throw new Error('Issue not found');\r\n//   issue.status = status;\r\n// };\r\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\r\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\r\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\r\n\r\n// const getSwimlanes = (issues, epics) =>\r\n//   epics.map(epic => {\r\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\r\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\r\n//   });\r\n\r\n// export default function KanbanBoard() {\r\n//   const { projectId } = useParams();\r\n//   const [issues, setIssues] = useState([]);\r\n//   const [epics, setEpics] = useState([]);\r\n//   const [projectName, setProjectName] = useState('');\r\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\r\n//   const [customTitles, setCustomTitles] = useState({});\r\n//   const [createLaneId, setCreateLaneId] = useState(null);\r\n//   const [newTaskText, setNewTaskText] = useState('');\r\n//   const [newTaskType, setNewTaskType] = useState('Task');\r\n//   const [selectedIssue, setSelectedIssue] = useState(null);\r\n//   const [editIssue, setEditIssue] = useState(null);\r\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\r\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\r\n//   const [newEpicName, setNewEpicName] = useState('');\r\n//   const [epicToDelete, setEpicToDelete] = useState('');\r\n//   const [columnsByLane, setColumnsByLane] = useState({});\r\n//   const [columnModal, setColumnModal] = useState(null);\r\n//   const [columnInput, setColumnInput] = useState('');\r\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\r\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\r\n//   const [isMobile, setIsMobile] = useState(false);\r\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const checkScreenSize = () => {\r\n//       setIsMobile(window.innerWidth < 768);\r\n//     };\r\n//     checkScreenSize();\r\n//     window.addEventListener('resize', checkScreenSize);\r\n//     return () => window.removeEventListener('resize', checkScreenSize);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const projectNameData = projectId ? await getProjectName(projectId) : 'All Projects';\r\n//         const [issuesData, epicsData] = await Promise.all([\r\n//           listIssues(projectId),\r\n//           listEpics()\r\n//         ]);\r\n//         setIssues(issuesData);\r\n//         setEpics(epicsData);\r\n//         setProjectName(projectNameData);\r\n//         const lanes = getSwimlanes(issuesData, epicsData);\r\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\r\n//         lanes.forEach(lane => {\r\n//           initialOpen[lane.id] = true;\r\n//           initialTitles[lane.id] = lane.title;\r\n//           initialCols[lane.id] = defaultStatuses.slice();\r\n//         });\r\n//         setOpenSwimlanes(initialOpen);\r\n//         setCustomTitles(initialTitles);\r\n//         setColumnsByLane(initialCols);\r\n//       } catch (err) {\r\n//         console.error(err);\r\n//       }\r\n//     };\r\n//     fetchData();\r\n//   }, [projectId]);\r\n\r\n//   const openAddColumnModal = (e, laneId, colIndex) => {\r\n//     const rect = e.currentTarget.getBoundingClientRect();\r\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\r\n//     setColumnModal({ laneId, colIndex, type: 'add' });\r\n//     setColumnInput('');\r\n//   };\r\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\r\n//     const rect = e.currentTarget.getBoundingClientRect();\r\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\r\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\r\n//     setColumnInput(status);\r\n//   };\r\n//   const handleAddColumn = () => {\r\n//     const name = columnInput.trim();\r\n//     if (!name) return alert('Column name is required');\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[columnModal.laneId]];\r\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\r\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\r\n//       return { ...prev, [columnModal.laneId]: cols };\r\n//     });\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const handleEditColumn = () => {\r\n//     const name = columnInput.trim();\r\n//     if (!name) return alert('Column name is required');\r\n//     const { laneId, colIndex } = columnModal;\r\n//     const oldCol = columnsByLane[laneId][colIndex];\r\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\r\n//       alert('Column name already exists');\r\n//       return;\r\n//     }\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[laneId]];\r\n//       cols[colIndex] = name.toLowerCase();\r\n//       return { ...prev, [laneId]: cols };\r\n//     });\r\n//     const updatedIssues = issues.map(issue =>\r\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\r\n//     );\r\n//     setIssues(updatedIssues);\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const handleDeleteColumn = () => {\r\n//     const { laneId, colIndex } = columnModal;\r\n//     const removedCol = columnsByLane[laneId][colIndex];\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[laneId]];\r\n//       cols.splice(colIndex, 1);\r\n//       return { ...prev, [laneId]: cols };\r\n//     });\r\n//     const updatedIssues = issues.map(issue =>\r\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\r\n//     );\r\n//     setIssues(updatedIssues);\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\r\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\r\n\r\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\r\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const issueId = e.dataTransfer.getData('text/plain');\r\n//       const issue = issues.find(i => i.id === issueId);\r\n//       const srcLaneId = issue.epic || issue.projectId;\r\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\r\n//         await moveIssue(issueId, targetStatus);\r\n//         const refreshed = await listIssues(projectId);\r\n//         setIssues(refreshed);\r\n//       }\r\n//     } catch (err) { console.error(err); }\r\n//   };\r\n//   const onDragOver = e => e.preventDefault();\r\n\r\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\r\n//   const handleCreateSubmit = async lane => {\r\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\r\n//     const newIssue = {\r\n//       id: Math.random().toString(36).slice(2),\r\n//       epic: lane.id,\r\n//       projectId: lane.id,\r\n//       epicName: lane.title,\r\n//       title: newTaskText,\r\n//       status: 'backlog',\r\n//       assignee: '',\r\n//       type: newTaskType,\r\n//       storyPoints: '',\r\n//       labels: [],\r\n//       dueDate: '',\r\n//       reporter: 'system',\r\n//       priority: 'Medium',\r\n//       startDate: new Date().toISOString().split('T')[0],\r\n//       description: '',\r\n//       subtasks: '',\r\n//       comments: ''\r\n//     };\r\n//     try {\r\n//       await createIssueAPI(newIssue);\r\n//       const refreshed = await listIssues(projectId);\r\n//       setIssues(refreshed);\r\n//       setCreateLaneId(null);\r\n//     } catch (err) { console.error(err); }\r\n//   };\r\n\r\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\r\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\r\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\r\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\r\n\r\n//   const handleCreateEpic = async () => {\r\n//     if (!newEpicName.trim()) {\r\n//       alert('Epic name is required');\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await createEpicAPI(newEpicName);\r\n//       const updatedEpics = await listEpics();\r\n//       setEpics(updatedEpics);\r\n//       setNewEpicName('');\r\n//       setShowCreateEpic(false);\r\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\r\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\r\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\r\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\r\n//     } catch (error) {\r\n//       console.error('Error creating epic:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteEpic = async () => {\r\n//     if (!epicToDelete) {\r\n//       alert('Please select an epic to delete');\r\n//       return;\r\n//     }\r\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await deleteEpicAPI(epicToDelete);\r\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\r\n//         listIssues(projectId),\r\n//         listEpics()\r\n//       ]);\r\n//       setIssues(refreshedIssues);\r\n//       setEpics(refreshedEpics);\r\n//       setEpicToDelete('');\r\n//       setShowDeleteEpic(false);\r\n//       setColumnsByLane(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//       setOpenSwimlanes(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//       setCustomTitles(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error deleting epic:', error);\r\n//     }\r\n//   };\r\n\r\n//   const toggleMobileSwimlane = (laneId) => {\r\n//     if (activeSwimlane === laneId) {\r\n//       setActiveSwimlane(null);\r\n//     } else {\r\n//       setActiveSwimlane(laneId);\r\n//     }\r\n//   };\r\n\r\n//   const swimlanes = getSwimlanes(issues, epics);\r\n\r\n//   return (\r\n//     <div className=\"board-wrap\">\r\n//       {/* Project Name Header */}\r\n//       <div className=\"project-header\">\r\n//         <h1 className=\"project-title\">{projectName}</h1>\r\n//         <div className=\"project-stats\">\r\n//           <span className=\"project-stat\">{epics.length} Epics</span>\r\n//           <span className=\"project-stat\">{issues.length} Issues</span>\r\n//           <span className=\"project-stat\">\r\n//             {issues.filter(issue => issue.status === 'done').length} Completed\r\n//           </span>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {isMobile && (\r\n//         <div className=\"mobile-swimlane-selector\">\r\n//           <select\r\n//             value={activeSwimlane || ''}\r\n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\r\n//             className=\"mobile-select\"\r\n//           >\r\n//             <option value=\"\">All Swimlanes</option>\r\n//             {swimlanes.map(lane => (\r\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\r\n//             ))}\r\n//           </select>\r\n//         </div>\r\n//       )}\r\n\r\n//       {swimlanes.map(lane => {\r\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\r\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\r\n\r\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\r\n//           return null;\r\n//         }\r\n\r\n//         return (\r\n//           <section className=\"swimlane\" key={lane.id}>\r\n//             <header className=\"swimlane-header\">\r\n//               {!isMobile && (\r\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\r\n//                   {isOpen ? '▼' : '▶'}\r\n//                 </button>\r\n//               )}\r\n//               <span className=\"swimlane-icon\">⚡</span>\r\n//               <input\r\n//                 className=\"swimlane-title-input\"\r\n//                 value={customTitles[lane.id] || ''}\r\n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))}\r\n//               />\r\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\r\n//               {isMobile && (\r\n//                 <button\r\n//                   className=\"mobile-swimlane-toggle\"\r\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\r\n//                 >\r\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\r\n//                 </button>\r\n//               )}\r\n//             </header>\r\n//             {isOpen && (\r\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\r\n//                 {statuses.map((status, idx) => {\r\n//                   const issuesForStatus = byStatus(lane.issues, status);\r\n//                   return (\r\n//                     <div\r\n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`}\r\n//                       key={status}\r\n//                       onDragOver={onDragOver}\r\n//                       onDrop={e => onDrop(e, status, lane.id)}\r\n//                     >\r\n//                       <div className=\"col-header\">\r\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\r\n//                         {!isMobile && (\r\n//                           <span className=\"col-icons\">\r\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\r\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\r\n//                           </span>\r\n//                         )}\r\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\r\n//                       </div>\r\n//                       <div className=\"col-create\">\r\n//                         {status === 'backlog' && (\r\n//                           createLaneId === lane.id ? (\r\n//                             <div className=\"create-card\">\r\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\r\n//                               <div className=\"create-actions\">\r\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\r\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\r\n//                                 </select>\r\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\r\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\r\n//                               </div>\r\n//                             </div>\r\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\r\n//                         )}\r\n//                       </div>\r\n//                       {issuesForStatus.map(issue => {\r\n//                         const isHovered = hoveredAssigneeId === issue.id;\r\n//                         return (\r\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\r\n//                             <div className=\"card-top\">\r\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\r\n//                               <span className=\"card-id\">{issue.id}</span>\r\n//                             </div>\r\n//                             <div className=\"card-title\">{issue.title}</div>\r\n//                             <div className=\"card-meta\">\r\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\r\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\r\n//                               {issue.assignee && (\r\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\r\n//                                   👤\r\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\r\n//                                 </span>\r\n//                               )}\r\n//                             </div>\r\n//                           </div>\r\n//                         );\r\n//                       })}\r\n//                     </div>\r\n//                   );\r\n//                 })}\r\n//               </div>\r\n//             )}\r\n//           </section>\r\n//         );\r\n//       })}\r\n//       {/* Column Add/Edit modal */}\r\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\r\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\r\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\r\n//             position: isMobile ? 'fixed' : 'absolute',\r\n//             top: isMobile ? '50%' : modalPosition.top,\r\n//             left: isMobile ? '50%' : modalPosition.left,\r\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\r\n//             minWidth: isMobile ? '90vw' : 280,\r\n//             maxWidth: isMobile ? '95vw' : 320,\r\n//             padding: 20,\r\n//             borderRadius: 10,\r\n//             background: 'white',\r\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\r\n//             zIndex: 1100\r\n//           }}>\r\n//             {columnModal.type === 'add' ? (\r\n//               <>\r\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\r\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\r\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\r\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\r\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\r\n//                 </div>\r\n//               </>\r\n//             ) : (\r\n//               <>\r\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\r\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\r\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\r\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\r\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\r\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\r\n//                 </div>\r\n//               </>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//       {/* Issue modal */}\r\n//       {selectedIssue && editIssue && (\r\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\r\n//           <div className={`modal ${isMobile ? 'mobile-modal' : ''}`} onClick={e => e.stopPropagation()}>\r\n//             <div className=\"modal-header\">\r\n//               <h2>{editIssue.epicName}</h2>\r\n//               <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\r\n//             </div>\r\n//             <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\r\n//               <div className=\"modal-field\"><label>Title</label><input value={editIssue.title} onChange={e => handleUpdateField('title', e.target.value)} /></div>\r\n//               <div className=\"modal-field\"><label>Description</label><textarea value={editIssue.description} onChange={e => handleUpdateField('description', e.target.value)} /></div>\r\n//               <div className=\"modal-field\"><label>Subtasks</label><input value={editIssue.subtasks} onChange={e => handleUpdateField('subtasks', e.target.value)} /></div>\r\n//               <div className=\"modal-field\"><label>Comments</label><textarea value={editIssue.comments} onChange={e => handleUpdateField('comments', e.target.value)} /></div>\r\n//               <div className=\"modal-field\"><label>Status</label>\r\n//                 <select value={editIssue.status} onChange={e => handleUpdateField('status', e.target.value)}>\r\n//                   {columnsByLane[editIssue.epic]?.map(st => <option key={st} value={st}>{st}</option>) || defaultStatuses.map(st => <option key={st} value={st}>{st}</option>)}\r\n//                 </select>\r\n//               </div>\r\n//               <div className=\"modal-field\"><label>Assignee</label><input value={editIssue.assignee} onChange={e => handleUpdateField('assignee', e.target.value)} /></div>\r\n//               <div className=\"modal-field\"><label>Reporter</label><input disabled value={editIssue.reporter} /></div>\r\n//               <div className=\"modal-field\"><label>Priority</label>\r\n//                 <select value={editIssue.priority} onChange={e => handleUpdateField('priority', e.target.value)}>\r\n//                   <option>Low</option><option>Medium</option><option>High</option>\r\n//                 </select>\r\n//               </div>\r\n//               <div className=\"modal-field\"><label>Due Date</label><input type=\"date\" value={editIssue.dueDate} onChange={e => handleUpdateField('dueDate', e.target.value)} /></div>\r\n//               <div className=\"modal-field\"><label>Start Date</label><input type=\"date\" value={editIssue.startDate} onChange={e => handleUpdateField('startDate', e.target.value)} /></div>\r\n//             </div>\r\n//             <div className=\"modal-actions\" style={{ gridColumn: \"span 3\", alignItems: 'center' }}>\r\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset</button>\r\n//               <button className=\"btn-save\" onClick={handleSave}>Save</button>\r\n//               <button className=\"modal-delete-btn\" onClick={async () => {\r\n//                 if (window.confirm('Delete this issue?')) {\r\n//                   await deleteIssueAPI(selectedIssue.id);\r\n//                   const refreshed = await listIssues(projectId);\r\n//                   setIssues(refreshed);\r\n//                   setSelectedIssue(null);\r\n//                 }\r\n//               }}>🗑</button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Inline CSS styles */}\r\n// <style>{`\r\n//   body {\r\n//     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n//     background-color: #f5f6f8;\r\n//     margin: 0;\r\n//     padding: 16px;\r\n//   }\r\n//   .board-wrap {\r\n//     max-width: 100%;\r\n//     overflow-x: auto;\r\n//   }\r\n//   .project-header {\r\n//     background: white;\r\n//     border-radius: 8px;\r\n//     padding: 20px 24px;\r\n//     margin-bottom: 20px;\r\n//     box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//     border-left: 4px solid #1976d2;\r\n//   }\r\n//   .project-title {\r\n//     margin: 0 0 12px 0;\r\n//     font-size: 28px;\r\n//     font-weight: 700;\r\n//     color: #172b4d;\r\n//     line-height: 1.2;\r\n//   }\r\n//   .project-stats {\r\n//     display: flex;\r\n//     gap: 20px;\r\n//     flex-wrap: wrap;\r\n//   }\r\n//   .project-stat {\r\n//     background: #f5f6f8;\r\n//     padding: 6px 12px;\r\n//     border-radius: 16px;\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     color: #5e6c84;\r\n//     display: flex;\r\n//     align-items: center;\r\n//     gap: 4px;\r\n//   }\r\n//   .project-stat:before {\r\n//     content: \"•\";\r\n//     color: #1976d2;\r\n//     font-weight: bold;\r\n//   }\r\n//   @media (min-width: 768px) {\r\n//     .swimlane {\r\n//       background: white;\r\n//       border-radius: 8px;\r\n//       margin-bottom: 16px;\r\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//       overflow: hidden;\r\n//     }\r\n//     .kanban-row {\r\n//       display: flex;\r\n//       padding: 16px;\r\n//       gap: 12px;\r\n//       overflow-x: auto;\r\n//     }\r\n//     .kanban-column {\r\n//       flex: 0 0 260px;\r\n//       background: #f5f6f8;\r\n//       border-radius: 6px;\r\n//       padding: 12px;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//       border: 1px solid #dfe5e5;\r\n//       user-select: none;\r\n//       min-height: 400px;\r\n//     }\r\n//     .modal {\r\n//       background: white;\r\n//       border-radius: 8px;\r\n//       padding: 24px;\r\n//       width: 700px;\r\n//       max-height: 80vh;\r\n//       display: grid;\r\n//       grid-template-columns: 1fr 1fr 1fr;\r\n//       gap: 16px;\r\n//       overflow-y: auto;\r\n//       position: relative;\r\n//     }\r\n//   }\r\n//   @media (max-width: 767px) {\r\n//     body {\r\n//       padding: 8px;\r\n//     }\r\n//     .project-header {\r\n//       padding: 16px;\r\n//       margin-bottom: 16px;\r\n//       border-left-width: 3px;\r\n//     }\r\n//     .project-title {\r\n//       font-size: 22px;\r\n//       margin-bottom: 10px;\r\n//     }\r\n//     .project-stats {\r\n//       gap: 12px;\r\n//     }\r\n//     .project-stat {\r\n//       font-size: 12px;\r\n//       padding: 4px 10px;\r\n//     }\r\n//     .mobile-swimlane-selector {\r\n//       margin-bottom: 16px;\r\n//       position: sticky;\r\n//       top: 0;\r\n//       background: white;\r\n//       padding: 12px;\r\n//       border-radius: 8px;\r\n//       box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n//       z-index: 100;\r\n//     }\r\n//     .mobile-select {\r\n//       width: 100%;\r\n//       padding: 12px;\r\n//       border: 1px solid #dfe5e5;\r\n//       border-radius: 6px;\r\n//       font-size: 16px;\r\n//       background: white;\r\n//     }\r\n//     .swimlane {\r\n//       background: white;\r\n//       border-radius: 8px;\r\n//       margin-bottom: 12px;\r\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//       overflow: hidden;\r\n//     }\r\n//     .swimlane-header {\r\n//       display: flex;\r\n//       align-items: center;\r\n//       padding: 12px;\r\n//       background: #fafbfc;\r\n//       border-bottom: 1px solid #dfe5e5;\r\n//       font-weight: 600;\r\n//       font-size: 14px;\r\n//       color: #172b4d;\r\n//       position: relative;\r\n//     }\r\n//     .mobile-swimlane-toggle {\r\n//       background: none;\r\n//       border: none;\r\n//       font-size: 16px;\r\n//       color: #5e6c84;\r\n//       margin-left: auto;\r\n//       padding: 4px 8px;\r\n//     }\r\n//     .kanban-row.mobile-view {\r\n//       display: block;\r\n//       padding: 8px;\r\n//       overflow-x: auto;\r\n//       white-space: nowrap;\r\n//     }\r\n//     .kanban-column.mobile-column {\r\n//       display: inline-block;\r\n//       vertical-align: top;\r\n//       width: 280px;\r\n//       margin-right: 8px;\r\n//       background: #f5f6f8;\r\n//       border-radius: 6px;\r\n//       padding: 8px;\r\n//       border: 1px solid #dfe5e5;\r\n//       user-select: none;\r\n//       min-height: 300px;\r\n//     }\r\n//     .col-header {\r\n//       display: flex;\r\n//       align-items: center;\r\n//       margin-bottom: 8px;\r\n//       gap: 6px;\r\n//     }\r\n//     .col-title {\r\n//       font-weight: 600;\r\n//       font-size: 11px;\r\n//       color: #5e6c84;\r\n//       text-transform: uppercase;\r\n//       letter-spacing: 0.5px;\r\n//       flex-grow: 1;\r\n//     }\r\n//     .card-item {\r\n//       background: white;\r\n//       border-radius: 6px;\r\n//       padding: 10px;\r\n//       box-shadow: 0 0 2px rgba(0,0,0,0.1);\r\n//       cursor: pointer;\r\n//       user-select: none;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 6px;\r\n//       border: 1px solid #dfe5e5;\r\n//       margin-bottom: 8px;\r\n//     }\r\n//     .card-title {\r\n//       font-weight: 600;\r\n//       font-size: 13px;\r\n//       color: #2b3a59;\r\n//       line-height: 1.3;\r\n//     }\r\n//     .card-meta {\r\n//       display: flex;\r\n//       gap: 6px;\r\n//       font-size: 10px;\r\n//       color: #6b7c93;\r\n//       align-items: center;\r\n//       flex-wrap: wrap;\r\n//     }\r\n//     .modal.mobile-modal {\r\n//       width: 95vw;\r\n//       max-height: 90vh;\r\n//       padding: 16px;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//     }\r\n//     .modal-content.mobile-modal-content {\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//       overflow-y: auto;\r\n//     }\r\n//     .modal-field {\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 4px;\r\n//     }\r\n//     .modal-field input, .modal-field textarea, .modal-field select {\r\n//       padding: 10px;\r\n//       font-size: 16px;\r\n//     }\r\n//     .modal-actions {\r\n//       display: flex;\r\n//       gap: 8px;\r\n//       justify-content: space-between;\r\n//       margin-top: 16px;\r\n//     }\r\n//     .modal-actions button {\r\n//       flex: 1;\r\n//       padding: 12px;\r\n//       font-size: 16px;\r\n//     }\r\n//   }\r\n//   .swimlane-header {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     padding: 12px 16px;\r\n//     background: #fafbfc;\r\n//     border-bottom: 1px solid #dfe5e5;\r\n//     font-weight: 600;\r\n//     font-size: 14px;\r\n//     color: #172b4d;\r\n//   }\r\n//   .swimlane-toggle, .swimlane-icon {\r\n//     color: #5e6c84;\r\n//     margin-right: 8px;\r\n//     cursor: pointer;\r\n//   }\r\n//   .swimlane-toggle {\r\n//     border: none;\r\n//     background: transparent;\r\n//     font-size: 14px;\r\n//   }\r\n//   .swimlane-icon {\r\n//     font-size: 18px;\r\n//   }\r\n//   .swimlane-title-input {\r\n//     border: 1px solid #dfe5e5;\r\n//     border-radius: 4px;\r\n//     padding: 4px 8px;\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     background: white;\r\n//     margin-right: 8px;\r\n//     min-width: 150px;\r\n//     color: #172b4d;\r\n//   }\r\n//   .swimlane-title-input:focus {\r\n//     outline: none;\r\n//     border-color: #1976d2;\r\n//   }\r\n//   .swimlane-count {\r\n//     color: #5e6c84;\r\n//     font-size: 12px;\r\n//     font-weight: normal;\r\n//   }\r\n//   .col-header {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     margin-bottom: 4px;\r\n//     gap: 6px;\r\n//   }\r\n//   .col-title {\r\n//     font-weight: 600;\r\n//     font-size: 12px;\r\n//     color: #5e6c84;\r\n//     text-transform: uppercase;\r\n//     letter-spacing: 0.5px;\r\n//     flex-grow: 1;\r\n//   }\r\n//   .col-count {\r\n//     background: #dfe5e5;\r\n//     color: #5e6c84;\r\n//     border-radius: 12px;\r\n//     padding: 2px 8px;\r\n//     font-size: 11px;\r\n//     font-weight: 600;\r\n//     min-width: 20px;\r\n//     text-align: center;\r\n//   }\r\n//   .col-icons {\r\n//     display: flex;\r\n//     gap: 6px;\r\n//   }\r\n//   .col-icon {\r\n//     cursor: pointer;\r\n//     color: #5e6c84;\r\n//     font-size: 18px;\r\n//     background: none;\r\n//     border: none;\r\n//     padding: 0;\r\n//   }\r\n//   .create-card {\r\n//     background: white;\r\n//     padding: 10px;\r\n//     border-radius: 6px;\r\n//     box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 10px;\r\n//   }\r\n//   .card-item {\r\n//     background: white;\r\n//     border-radius: 8px;\r\n//     padding: 12px;\r\n//     box-shadow: 0 0 2px rgba(0,0,0,0.1);\r\n//     cursor: pointer;\r\n//     user-select: none;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 6px;\r\n//     border: 1px solid #dfe5e5;\r\n//     transition: box-shadow 0.2s ease, border-color 0.2s ease;\r\n//   }\r\n//   .card-item:hover {\r\n//     box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\r\n//     border-color: #a2adba;\r\n//   }\r\n//   .modal-overlay {\r\n//     position: fixed;\r\n//     top: 0; left: 0; right: 0; bottom: 0;\r\n//     background: rgba(0,0,0,0.5);\r\n//     display: flex;\r\n//     align-items: center;\r\n//     justify-content: center;\r\n//     z-index: 1000;\r\n//   }\r\n//   button {\r\n//     cursor: pointer;\r\n//     transition: background-color 0.2s;\r\n//   }\r\n//   button:hover {\r\n//     opacity: 0.9;\r\n//   }\r\n//   @media (max-width: 767px) {\r\n//     button, .card-item, .col-icon {\r\n//       min-height: 44px;\r\n//       min-width: 44px;\r\n//     }\r\n//     .card-item {\r\n//       touch-action: manipulation;\r\n//     }\r\n//   }\r\n// `}</style>\r\n\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// const btnStyle = {\r\n//   cancel: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#5e6c84',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   },\r\n//   create: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#1976d2',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   },\r\n//   delete: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#d32f2f',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   }\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// for model dialog style \r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const mockIssues = [\r\n//   { id: 'i1', epic: 'p1', epicName: 'Frontend', status: 'todo', type: 'Task', title: 'Setup repo', assignee: 'John Doe', storyPoints: 3, labels: [], dueDate: '2025-09-30', reporter: 'admin', priority: 'High', startDate: '2025-09-15', description: '', subtasks: '', comments: '' },\r\n//   { id: 'i3', epic: 'p2', epicName: 'Middleware', status: 'todo', type: 'Subtask', title: 'API integration', assignee: 'Jane Smith', storyPoints: 2, labels: [], dueDate: '', reporter: 'lead-dev', priority: 'Low', startDate: '2025-09-18', description: '', subtasks: '', comments: '' }\r\n// ];\r\n\r\n// const defaultStatuses = ['backlog', 'todo', 'analysis', 'inprogress', 'blocked', 'code review', 'qa', 'milestone', 'done'];\r\n// const mockEpics = [{ id: 'p1', name: 'Frontend' }, { id: 'p2', name: 'Middleware' }];\r\n// const mockProjects = [\r\n//   { id: 'p1', name: 'E-Commerce Platform' },\r\n//   { id: 'p2', name: 'API Gateway Service' },\r\n//   { id: 'p3', name: 'Mobile App Development' }\r\n// ];\r\n\r\n// const simulateApiDelay = () => new Promise(resolve => setTimeout(resolve, 200));\r\n\r\n// const listIssues = async (projectId) => {\r\n//   await simulateApiDelay();\r\n//   return mockIssues.filter(i => !projectId || i.epic === projectId || i.projectId === projectId);\r\n// };\r\n// const listEpics = async () => { await simulateApiDelay(); return mockEpics; };\r\n// const getProjectName = async (projectId) => {\r\n//   await simulateApiDelay();\r\n//   const project = mockProjects.find(p => p.id === projectId);\r\n//   return project ? project.name : 'Untitled Project';\r\n// };\r\n// const createEpicAPI = async (epicName) => {\r\n//   await simulateApiDelay();\r\n//   const newEpic = { id: 'p' + (mockEpics.length + 1), name: epicName };\r\n//   mockEpics.push(newEpic);\r\n//   return newEpic;\r\n// };\r\n// const deleteEpicAPI = async (epicId) => {\r\n//   await simulateApiDelay();\r\n//   const epicIndex = mockEpics.findIndex(epic => epic.id === epicId);\r\n//   if (epicIndex > -1) mockEpics.splice(epicIndex, 1);\r\n//   const issueIndices = [];\r\n//   mockIssues.forEach((issue, index) => { if (issue.epic === epicId) issueIndices.push(index); });\r\n//   issueIndices.sort((a, b) => b - a).forEach(index => { mockIssues.splice(index, 1); });\r\n// };\r\n// const moveIssue = async (issueId, status) => {\r\n//   await simulateApiDelay();\r\n//   const issue = mockIssues.find(i => i.id === issueId);\r\n//   if (!issue) throw new Error('Issue not found');\r\n//   issue.status = status;\r\n// };\r\n// const createIssueAPI = async (issue) => { await simulateApiDelay(); mockIssues.push(issue); };\r\n// const deleteIssueAPI = async (issueId) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === issueId); if (idx > -1) mockIssues.splice(idx, 1); };\r\n// const updateIssueAPI = async (updatedIssue) => { await simulateApiDelay(); const idx = mockIssues.findIndex(i => i.id === updatedIssue.id); if (idx > -1) mockIssues[idx] = { ...mockIssues[idx], ...updatedIssue }; };\r\n\r\n// const getSwimlanes = (issues, epics) =>\r\n//   epics.map(epic => {\r\n//     const epicIssues = issues.filter(i => (i.epic || i.projectId) === epic.id);\r\n//     return { id: epic.id, title: epic.name, issues: epicIssues };\r\n//   });\r\n\r\n// export default function KanbanBoard() {\r\n//   const { projectId } = useParams();\r\n//   const [issues, setIssues] = useState([]);\r\n//   const [epics, setEpics] = useState([]);\r\n//   const [projectName, setProjectName] = useState('');\r\n//   const [openSwimlanes, setOpenSwimlanes] = useState({});\r\n//   const [customTitles, setCustomTitles] = useState({});\r\n//   const [createLaneId, setCreateLaneId] = useState(null);\r\n//   const [newTaskText, setNewTaskText] = useState('');\r\n//   const [newTaskType, setNewTaskType] = useState('Task');\r\n//   const [selectedIssue, setSelectedIssue] = useState(null);\r\n//   const [editIssue, setEditIssue] = useState(null);\r\n//   const [showCreateEpic, setShowCreateEpic] = useState(false);\r\n//   const [showDeleteEpic, setShowDeleteEpic] = useState(false);\r\n//   const [newEpicName, setNewEpicName] = useState('');\r\n//   const [epicToDelete, setEpicToDelete] = useState('');\r\n//   const [columnsByLane, setColumnsByLane] = useState({});\r\n//   const [columnModal, setColumnModal] = useState(null);\r\n//   const [columnInput, setColumnInput] = useState('');\r\n//   const [hoveredAssigneeId, setHoveredAssigneeId] = useState(null);\r\n//   const [modalPosition, setModalPosition] = useState({ top: 0, left: 0 });\r\n//   const [isMobile, setIsMobile] = useState(false);\r\n//   const [activeSwimlane, setActiveSwimlane] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const checkScreenSize = () => {\r\n//       setIsMobile(window.innerWidth < 768);\r\n//     };\r\n//     checkScreenSize();\r\n//     window.addEventListener('resize', checkScreenSize);\r\n//     return () => window.removeEventListener('resize', checkScreenSize);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const projectNameData = projectId ? await getProjectName(projectId) : 'All Projects';\r\n//         const [issuesData, epicsData] = await Promise.all([\r\n//           listIssues(projectId),\r\n//           listEpics()\r\n//         ]);\r\n//         setIssues(issuesData);\r\n//         setEpics(epicsData);\r\n//         setProjectName(projectNameData);\r\n//         const lanes = getSwimlanes(issuesData, epicsData);\r\n//         const initialOpen = {}, initialTitles = {}, initialCols = {};\r\n//         lanes.forEach(lane => {\r\n//           initialOpen[lane.id] = true;\r\n//           initialTitles[lane.id] = lane.title;\r\n//           initialCols[lane.id] = defaultStatuses.slice();\r\n//         });\r\n//         setOpenSwimlanes(initialOpen);\r\n//         setCustomTitles(initialTitles);\r\n//         setColumnsByLane(initialCols);\r\n//       } catch (err) {\r\n//         console.error(err);\r\n//       }\r\n//     };\r\n//     fetchData();\r\n//   }, [projectId]);\r\n\r\n//   const openAddColumnModal = (e, laneId, colIndex) => {\r\n//     const rect = e.currentTarget.getBoundingClientRect();\r\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\r\n//     setColumnModal({ laneId, colIndex, type: 'add' });\r\n//     setColumnInput('');\r\n//   };\r\n//   const openEditColumnModal = (e, laneId, colIndex, status) => {\r\n//     const rect = e.currentTarget.getBoundingClientRect();\r\n//     setModalPosition({ top: rect.bottom + window.scrollY + 8, left: rect.left + window.scrollX });\r\n//     setColumnModal({ laneId, colIndex, type: 'menu' });\r\n//     setColumnInput(status);\r\n//   };\r\n//   const handleAddColumn = () => {\r\n//     const name = columnInput.trim();\r\n//     if (!name) return alert('Column name is required');\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[columnModal.laneId]];\r\n//       if (cols.includes(name.toLowerCase())) alert('Column name already exists');\r\n//       else cols.splice(columnModal.colIndex + 1, 0, name.toLowerCase());\r\n//       return { ...prev, [columnModal.laneId]: cols };\r\n//     });\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const handleEditColumn = () => {\r\n//     const name = columnInput.trim();\r\n//     if (!name) return alert('Column name is required');\r\n//     const { laneId, colIndex } = columnModal;\r\n//     const oldCol = columnsByLane[laneId][colIndex];\r\n//     if (columnsByLane[laneId].includes(name.toLowerCase()) && name.toLowerCase() !== oldCol) {\r\n//       alert('Column name already exists');\r\n//       return;\r\n//     }\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[laneId]];\r\n//       cols[colIndex] = name.toLowerCase();\r\n//       return { ...prev, [laneId]: cols };\r\n//     });\r\n//     const updatedIssues = issues.map(issue =>\r\n//       (issue.epic || issue.projectId) === laneId && issue.status === oldCol ? { ...issue, status: name.toLowerCase() } : issue\r\n//     );\r\n//     setIssues(updatedIssues);\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const handleDeleteColumn = () => {\r\n//     const { laneId, colIndex } = columnModal;\r\n//     const removedCol = columnsByLane[laneId][colIndex];\r\n//     setColumnsByLane(prev => {\r\n//       const cols = [...prev[laneId]];\r\n//       cols.splice(colIndex, 1);\r\n//       return { ...prev, [laneId]: cols };\r\n//     });\r\n//     const updatedIssues = issues.map(issue =>\r\n//       (issue.epic || issue.projectId) === laneId && issue.status === removedCol ? { ...issue, status: 'backlog' } : issue\r\n//     );\r\n//     setIssues(updatedIssues);\r\n//     setColumnModal(null);\r\n//     setColumnInput('');\r\n//   };\r\n//   const toggleSwimlane = (id) => setOpenSwimlanes(prev => ({ ...prev, [id]: !prev[id] }));\r\n//   const byStatus = (collection, status) => collection.filter(i => i.status === status);\r\n\r\n//   const onDragStart = (e, issueId) => e.dataTransfer.setData('text/plain', issueId);\r\n//   const onDrop = async (e, targetStatus, swimlaneId) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const issueId = e.dataTransfer.getData('text/plain');\r\n//       const issue = issues.find(i => i.id === issueId);\r\n//       const srcLaneId = issue.epic || issue.projectId;\r\n//       if (srcLaneId === swimlaneId && issue.status !== targetStatus) {\r\n//         await moveIssue(issueId, targetStatus);\r\n//         const refreshed = await listIssues(projectId);\r\n//         setIssues(refreshed);\r\n//       }\r\n//     } catch (err) { console.error(err); }\r\n//   };\r\n//   const onDragOver = e => e.preventDefault();\r\n\r\n//   const handleCreateClick = laneId => { setCreateLaneId(laneId); setNewTaskText(''); setNewTaskType('Task'); };\r\n//   const handleCreateSubmit = async lane => {\r\n//     if (!newTaskText.trim()) { alert('Task title is required'); return; }\r\n//     const newIssue = {\r\n//       id: Math.random().toString(36).slice(2),\r\n//       epic: lane.id,\r\n//       projectId: lane.id,\r\n//       epicName: lane.title,\r\n//       title: newTaskText,\r\n//       status: 'backlog',\r\n//       assignee: '',\r\n//       type: newTaskType,\r\n//       storyPoints: '',\r\n//       labels: [],\r\n//       dueDate: '',\r\n//       reporter: 'system',\r\n//       priority: 'Medium',\r\n//       startDate: new Date().toISOString().split('T')[0],\r\n//       description: '',\r\n//       subtasks: '',\r\n//       comments: ''\r\n//     };\r\n//     try {\r\n//       await createIssueAPI(newIssue);\r\n//       const refreshed = await listIssues(projectId);\r\n//       setIssues(refreshed);\r\n//       setCreateLaneId(null);\r\n//     } catch (err) { console.error(err); }\r\n//   };\r\n\r\n//   const handleOpenModal = (issue) => { setSelectedIssue(issue); setEditIssue({ ...issue }); };\r\n//   const handleUpdateField = (field, value) => { setEditIssue(prev => ({ ...prev, [field]: value })); };\r\n//   const handleSave = async () => { await updateIssueAPI(editIssue); const refreshed = await listIssues(projectId); setIssues(refreshed); setSelectedIssue(null); setEditIssue(null); };\r\n//   const handleReset = () => { setEditIssue({ ...selectedIssue }); };\r\n\r\n//   const handleCreateEpic = async () => {\r\n//     if (!newEpicName.trim()) {\r\n//       alert('Epic name is required');\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await createEpicAPI(newEpicName);\r\n//       const updatedEpics = await listEpics();\r\n//       setEpics(updatedEpics);\r\n//       setNewEpicName('');\r\n//       setShowCreateEpic(false);\r\n//       const newEpic = updatedEpics[updatedEpics.length - 1];\r\n//       setOpenSwimlanes(prev => ({ ...prev, [newEpic.id]: true }));\r\n//       setCustomTitles(prev => ({ ...prev, [newEpic.id]: newEpic.name }));\r\n//       setColumnsByLane(prev => ({ ...prev, [newEpic.id]: defaultStatuses.slice() }));\r\n//     } catch (error) {\r\n//       console.error('Error creating epic:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteEpic = async () => {\r\n//     if (!epicToDelete) {\r\n//       alert('Please select an epic to delete');\r\n//       return;\r\n//     }\r\n//     if (!window.confirm(`Are you sure you want to delete the epic \"${epics.find(e => e.id === epicToDelete)?.name}\"? This will also delete all issues in this epic.`)) {\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await deleteEpicAPI(epicToDelete);\r\n//       const [refreshedIssues, refreshedEpics] = await Promise.all([\r\n//         listIssues(projectId),\r\n//         listEpics()\r\n//       ]);\r\n//       setIssues(refreshedIssues);\r\n//       setEpics(refreshedEpics);\r\n//       setEpicToDelete('');\r\n//       setShowDeleteEpic(false);\r\n//       setColumnsByLane(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//       setOpenSwimlanes(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//       setCustomTitles(prev => {\r\n//         const copy = { ...prev };\r\n//         delete copy[epicToDelete];\r\n//         return copy;\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error deleting epic:', error);\r\n//     }\r\n//   };\r\n\r\n//   const toggleMobileSwimlane = (laneId) => {\r\n//     if (activeSwimlane === laneId) {\r\n//       setActiveSwimlane(null);\r\n//     } else {\r\n//       setActiveSwimlane(laneId);\r\n//     }\r\n//   };\r\n\r\n//   const swimlanes = getSwimlanes(issues, epics);\r\n\r\n//   return (\r\n//     <div className=\"board-wrap\">\r\n//       {/* Project Name Header */}\r\n//       <div className=\"project-header\">\r\n//         <h1 className=\"project-title\">{projectName}</h1>\r\n//         <div className=\"project-stats\">\r\n//           <span className=\"project-stat\">{epics.length} Epics</span>\r\n//           <span className=\"project-stat\">{issues.length} Issues</span>\r\n//           <span className=\"project-stat\">\r\n//             {issues.filter(issue => issue.status === 'done').length} Completed\r\n//           </span>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {isMobile && (\r\n//         <div className=\"mobile-swimlane-selector\">\r\n//           <select\r\n//             value={activeSwimlane || ''}\r\n//             onChange={(e) => setActiveSwimlane(e.target.value || null)}\r\n//             className=\"mobile-select\"\r\n//           >\r\n//             <option value=\"\">All Swimlanes</option>\r\n//             {swimlanes.map(lane => (\r\n//               <option key={lane.id} value={lane.id}>{customTitles[lane.id] || lane.title}</option>\r\n//             ))}\r\n//           </select>\r\n//         </div>\r\n//       )}\r\n\r\n//       {swimlanes.map(lane => {\r\n//         const isOpen = isMobile ? (activeSwimlane === null || activeSwimlane === lane.id) : openSwimlanes[lane.id];\r\n//         const statuses = columnsByLane[lane.id] || defaultStatuses;\r\n\r\n//         if (isMobile && activeSwimlane && activeSwimlane !== lane.id) {\r\n//           return null;\r\n//         }\r\n\r\n//         return (\r\n//           <section className=\"swimlane\" key={lane.id}>\r\n//             <header className=\"swimlane-header\">\r\n//               {!isMobile && (\r\n//                 <button className=\"swimlane-toggle\" onClick={() => toggleSwimlane(lane.id)}>\r\n//                   {isOpen ? '▼' : '▶'}\r\n//                 </button>\r\n//               )}\r\n//               <span className=\"swimlane-icon\">⚡</span>\r\n//               <input\r\n//                 className=\"swimlane-title-input\"\r\n//                 value={customTitles[lane.id] || ''}\r\n//                 onChange={e => setCustomTitles(prev => ({ ...prev, [lane.id]: e.target.value }))}\r\n//               />\r\n//               <span className=\"swimlane-count\">{lane.issues.length} work items</span>\r\n//               {isMobile && (\r\n//                 <button\r\n//                   className=\"mobile-swimlane-toggle\"\r\n//                   onClick={() => toggleMobileSwimlane(lane.id)}\r\n//                 >\r\n//                   {activeSwimlane === lane.id ? '▲' : '▼'}\r\n//                 </button>\r\n//               )}\r\n//             </header>\r\n//             {isOpen && (\r\n//               <div className={`kanban-row ${isMobile ? 'mobile-view' : ''}`}>\r\n//                 {statuses.map((status, idx) => {\r\n//                   const issuesForStatus = byStatus(lane.issues, status);\r\n//                   return (\r\n//                     <div\r\n//                       className={`kanban-column ${isMobile ? 'mobile-column' : ''}`}\r\n//                       key={status}\r\n//                       onDragOver={onDragOver}\r\n//                       onDrop={e => onDrop(e, status, lane.id)}\r\n//                     >\r\n//                       <div className=\"col-header\">\r\n//                         <span className=\"col-title\">{status.toUpperCase()}</span>\r\n//                         {!isMobile && (\r\n//                           <span className=\"col-icons\">\r\n//                             <button className=\"col-icon\" title=\"Add Column\" onClick={e => openAddColumnModal(e, lane.id, idx)}>＋</button>\r\n//                             <button className=\"col-icon\" title=\"Edit/Delete Column\" onClick={e => openEditColumnModal(e, lane.id, idx, status)}>⋮</button>\r\n//                           </span>\r\n//                         )}\r\n//                         {issuesForStatus.length > 0 && <span className=\"col-count\">{issuesForStatus.length}</span>}\r\n//                       </div>\r\n//                       <div className=\"col-create\">\r\n//                         {status === 'backlog' && (\r\n//                           createLaneId === lane.id ? (\r\n//                             <div className=\"create-card\">\r\n//                               <textarea rows={2} className=\"create-input\" placeholder=\"What needs to be done?\" value={newTaskText} onChange={e => setNewTaskText(e.target.value)} />\r\n//                               <div className=\"create-actions\">\r\n//                                 <select value={newTaskType} onChange={e => setNewTaskType(e.target.value)} className=\"create-select\">\r\n//                                   <option>Task</option><option>Subtask</option><option>Bug</option>\r\n//                                 </select>\r\n//                                 <button className=\"create-btn\" onClick={() => handleCreateSubmit(lane)}>✔</button>\r\n//                                 <button className=\"create-btn\" onClick={() => setCreateLaneId(null)}>✖</button>\r\n//                               </div>\r\n//                             </div>\r\n//                           ) : (<span className=\"create-link\" onClick={() => handleCreateClick(lane.id)}>+ Create</span>)\r\n//                         )}\r\n//                       </div>\r\n//                       {issuesForStatus.map(issue => {\r\n//                         const isHovered = hoveredAssigneeId === issue.id;\r\n//                         return (\r\n//                           <div className=\"card-item\" key={issue.id} draggable onDragStart={e => onDragStart(e, issue.id)} onClick={() => handleOpenModal(issue)}>\r\n//                             <div className=\"card-top\">\r\n//                               <span className={`card-tag card-tag-${issue.type.toLowerCase()}`}>{issue.type}</span>\r\n//                               <span className=\"card-id\">{issue.id}</span>\r\n//                             </div>\r\n//                             <div className=\"card-title\">{issue.title}</div>\r\n//                             <div className=\"card-meta\">\r\n//                               {issue.dueDate && <span className=\"card-due\">📅 {issue.dueDate}</span>}\r\n//                               <span className={`card-priority ${issue.priority.toLowerCase()}`}>⚑ {issue.priority}</span>\r\n//                               {issue.assignee && (\r\n//                                 <span className=\"card-assignee\" onMouseEnter={() => setHoveredAssigneeId(issue.id)} onMouseLeave={() => setHoveredAssigneeId(null)} style={{ position: 'relative', cursor: 'default', userSelect: 'none' }}>\r\n//                                   👤\r\n//                                   {isHovered && <div className=\"assignee-tooltip\">{issue.assignee}</div>}\r\n//                                 </span>\r\n//                               )}\r\n//                             </div>\r\n//                           </div>\r\n//                         );\r\n//                       })}\r\n//                     </div>\r\n//                   );\r\n//                 })}\r\n//               </div>\r\n//             )}\r\n//           </section>\r\n//         );\r\n//       })}\r\n//       {/* Column Add/Edit modal */}\r\n//       {columnModal && (columnModal.type === 'add' || columnModal.type === 'menu') && (\r\n//         <div className=\"epic-modal-overlay\" onClick={() => setColumnModal(null)} style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, zIndex: 1000 }}>\r\n//           <div className=\"epic-modal\" onClick={e => e.stopPropagation()} style={{\r\n//             position: isMobile ? 'fixed' : 'absolute',\r\n//             top: isMobile ? '50%' : modalPosition.top,\r\n//             left: isMobile ? '50%' : modalPosition.left,\r\n//             transform: isMobile ? 'translate(-50%, -50%)' : 'translateX(-50%)',\r\n//             minWidth: isMobile ? '90vw' : 280,\r\n//             maxWidth: isMobile ? '95vw' : 320,\r\n//             padding: 20,\r\n//             borderRadius: 10,\r\n//             background: 'white',\r\n//             boxShadow: '0 10px 40px rgba(0,0,0,0.3)',\r\n//             zIndex: 1100\r\n//           }}>\r\n//             {columnModal.type === 'add' ? (\r\n//               <>\r\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Add Column</h3>\r\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\r\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\r\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\r\n//                   <button className=\"btn-create\" onClick={handleAddColumn} style={btnStyle.create}>Add</button>\r\n//                 </div>\r\n//               </>\r\n//             ) : (\r\n//               <>\r\n//                 <h3 style={{ marginBottom: 15, fontWeight: 600, fontSize: 20, color: '#172b4d' }}>Edit/Delete Column</h3>\r\n//                 <input value={columnInput} onChange={e => setColumnInput(e.target.value)} placeholder=\"Column name\" autoFocus className=\"epic-modal-input\" style={{ width: '100%', padding: 12, fontSize: 16, borderRadius: 6, border: '1px solid #dfe1e5', marginBottom: 20, boxSizing: 'border-box' }} />\r\n//                 <div className=\"epic-modal-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: 12, flexWrap: isMobile ? 'wrap' : 'nowrap' }}>\r\n//                   <button className=\"btn-save\" onClick={handleEditColumn} style={btnStyle.create}>Rename</button>\r\n//                   <button className=\"btn-delete\" onClick={handleDeleteColumn} style={btnStyle.delete}>Delete</button>\r\n//                   <button className=\"btn-cancel\" onClick={() => setColumnModal(null)} style={btnStyle.cancel}>Cancel</button>\r\n//                 </div>\r\n//               </>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//       {/* Issue modal */}\r\n//       {selectedIssue && editIssue && (\r\n//         <div className=\"modal-overlay\" onClick={() => setSelectedIssue(null)}>\r\n//           <div className={`modal ${isMobile ? 'mobile-modal' : ''}`} onClick={e => e.stopPropagation()}>\r\n//             <div className=\"modal-header\">\r\n//               <div className=\"modal-header-content\">\r\n//                 <span className=\"modal-epic-badge\">{editIssue.epicName}</span>\r\n//                 <h2 className=\"modal-title\">{editIssue.title || 'Untitled Issue'}</h2>\r\n//                 <div className=\"modal-id-type\">\r\n//                   <span className=\"modal-id\">{editIssue.id}</span>\r\n//                   <span className={`modal-type modal-type-${editIssue.type.toLowerCase()}`}>{editIssue.type}</span>\r\n//                 </div>\r\n//               </div>\r\n//               <button className=\"modal-close-btn\" onClick={() => setSelectedIssue(null)}>✖</button>\r\n//             </div>\r\n            \r\n//             <div className=\"modal-content-scroll\">\r\n//               <div className={`modal-content ${isMobile ? 'mobile-modal-content' : ''}`}>\r\n//                 <div className=\"modal-section\">\r\n//                   <h3 className=\"modal-section-title\">Details</h3>\r\n//                   <div className=\"modal-grid\">\r\n//                     <div className=\"modal-field\">\r\n//                       <label className=\"modal-label\">Title</label>\r\n//                       <input \r\n//                         className=\"modal-input\" \r\n//                         value={editIssue.title} \r\n//                         onChange={e => handleUpdateField('title', e.target.value)} \r\n//                         placeholder=\"Enter issue title\"\r\n//                       />\r\n//                     </div>\r\n//                     <div className=\"modal-field\">\r\n//                       <label className=\"modal-label\">Status</label>\r\n//                       <select \r\n//                         className=\"modal-select\"\r\n//                         value={editIssue.status} \r\n//                         onChange={e => handleUpdateField('status', e.target.value)}\r\n//                       >\r\n//                         {columnsByLane[editIssue.epic]?.map(st => (\r\n//                           <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\r\n//                         )) || defaultStatuses.map(st => (\r\n//                           <option key={st} value={st}>{st.charAt(0).toUpperCase() + st.slice(1)}</option>\r\n//                         ))}\r\n//                       </select>\r\n//                     </div>\r\n//                     <div className=\"modal-field\">\r\n//                       <label className=\"modal-label\">Assignee</label>\r\n//                       <input \r\n//                         className=\"modal-input\"\r\n//                         value={editIssue.assignee} \r\n//                         onChange={e => handleUpdateField('assignee', e.target.value)}\r\n//                         placeholder=\"Unassigned\"\r\n//                       />\r\n//                     </div>\r\n//                     <div className=\"modal-field\">\r\n//                       <label className=\"modal-label\">Reporter</label>\r\n//                       <input \r\n//                         className=\"modal-input modal-input-disabled\"\r\n//                         disabled \r\n//                         value={editIssue.reporter} \r\n//                       />\r\n//                     </div>\r\n//                     <div className=\"modal-field\">\r\n//                       <label className=\"modal-label\">Priority</label>\r\n//                       <select \r\n//                         className=\"modal-select\"\r\n//                         value={editIssue.priority} \r\n//                         onChange={e => handleUpdateField('priority', e.target.value)}\r\n//                       >\r\n//                         <option>Low</option>\r\n//                         <option>Medium</option>\r\n//                         <option>High</option>\r\n//                       </select>\r\n//                     </div>\r\n//                     <div className=\"modal-field\">\r\n//                       <label className=\"modal-label\">Story Points</label>\r\n//                       <input \r\n//                         className=\"modal-input\"\r\n//                         type=\"number\" \r\n//                         value={editIssue.storyPoints} \r\n//                         onChange={e => handleUpdateField('storyPoints', e.target.value)}\r\n//                         placeholder=\"0\"\r\n//                       />\r\n//                     </div>\r\n//                     <div className=\"modal-field\">\r\n//                       <label className=\"modal-label\">Start Date</label>\r\n//                       <input \r\n//                         className=\"modal-input\"\r\n//                         type=\"date\" \r\n//                         value={editIssue.startDate} \r\n//                         onChange={e => handleUpdateField('startDate', e.target.value)} \r\n//                       />\r\n//                     </div>\r\n//                     <div className=\"modal-field\">\r\n//                       <label className=\"modal-label\">Due Date</label>\r\n//                       <input \r\n//                         className=\"modal-input\"\r\n//                         type=\"date\" \r\n//                         value={editIssue.dueDate} \r\n//                         onChange={e => handleUpdateField('dueDate', e.target.value)} \r\n//                       />\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n\r\n//                 <div className=\"modal-section\">\r\n//                   <h3 className=\"modal-section-title\">Description</h3>\r\n//                   <div className=\"modal-field-full\">\r\n//                     <textarea \r\n//                       className=\"modal-textarea\"\r\n//                       rows=\"4\" \r\n//                       value={editIssue.description} \r\n//                       onChange={e => handleUpdateField('description', e.target.value)}\r\n//                       placeholder=\"Add a detailed description...\"\r\n//                     />\r\n//                   </div>\r\n//                 </div>\r\n\r\n//                 <div className=\"modal-section\">\r\n//                   <h3 className=\"modal-section-title\">Additional Information</h3>\r\n//                   <div className=\"modal-grid\">\r\n//                     <div className=\"modal-field-full\">\r\n//                       <label className=\"modal-label\">Subtasks</label>\r\n//                       <input \r\n//                         className=\"modal-input\"\r\n//                         value={editIssue.subtasks} \r\n//                         onChange={e => handleUpdateField('subtasks', e.target.value)}\r\n//                         placeholder=\"Enter subtasks (comma separated)\"\r\n//                       />\r\n//                     </div>\r\n//                     <div className=\"modal-field-full\">\r\n//                       <label className=\"modal-label\">Comments</label>\r\n//                       <textarea \r\n//                         className=\"modal-textarea\"\r\n//                         rows=\"3\" \r\n//                         value={editIssue.comments} \r\n//                         onChange={e => handleUpdateField('comments', e.target.value)}\r\n//                         placeholder=\"Add comments...\"\r\n//                       />\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             <div className=\"modal-actions\">\r\n//               <button className=\"btn-reset\" onClick={handleReset}>Reset Changes</button>\r\n//               <div className=\"modal-actions-right\">\r\n//                 <button \r\n//                   className=\"modal-delete-btn\" \r\n//                   onClick={async () => {\r\n//                     if (window.confirm('Are you sure you want to delete this issue?')) {\r\n//                       await deleteIssueAPI(selectedIssue.id);\r\n//                       const refreshed = await listIssues(projectId);\r\n//                       setIssues(refreshed);\r\n//                       setSelectedIssue(null);\r\n//                     }\r\n//                   }}\r\n//                 >\r\n//                   Delete Issue\r\n//                 </button>\r\n//                 <button className=\"btn-save\" onClick={handleSave}>Save Changes</button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Inline CSS styles */}\r\n// <style>{`\r\n//   body {\r\n//     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n//     background-color: #f5f6f8;\r\n//     margin: 0;\r\n//     padding: 16px;\r\n//   }\r\n//   .board-wrap {\r\n//     max-width: 100%;\r\n//     overflow-x: auto;\r\n//   }\r\n//   .project-header {\r\n//     background: white;\r\n//     border-radius: 8px;\r\n//     padding: 20px 24px;\r\n//     margin-bottom: 20px;\r\n//     box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//     border-left: 4px solid #1976d2;\r\n//   }\r\n//   .project-title {\r\n//     margin: 0 0 12px 0;\r\n//     font-size: 28px;\r\n//     font-weight: 700;\r\n//     color: #172b4d;\r\n//     line-height: 1.2;\r\n//   }\r\n//   .project-stats {\r\n//     display: flex;\r\n//     gap: 20px;\r\n//     flex-wrap: wrap;\r\n//   }\r\n//   .project-stat {\r\n//     background: #f5f6f8;\r\n//     padding: 6px 12px;\r\n//     border-radius: 16px;\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     color: #5e6c84;\r\n//     display: flex;\r\n//     align-items: center;\r\n//     gap: 4px;\r\n//   }\r\n//   .project-stat:before {\r\n//     content: \"•\";\r\n//     color: #1976d2;\r\n//     font-weight: bold;\r\n//   }\r\n//   @media (min-width: 768px) {\r\n//     .swimlane {\r\n//       background: white;\r\n//       border-radius: 8px;\r\n//       margin-bottom: 16px;\r\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//       overflow: hidden;\r\n//     }\r\n//     .kanban-row {\r\n//       display: flex;\r\n//       padding: 16px;\r\n//       gap: 12px;\r\n//       overflow-x: auto;\r\n//     }\r\n//     .kanban-column {\r\n//       flex: 0 0 260px;\r\n//       background: #f5f6f8;\r\n//       border-radius: 6px;\r\n//       padding: 12px;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//       border: 1px solid #dfe5e5;\r\n//       user-select: none;\r\n//       min-height: 400px;\r\n//     }\r\n//     .modal {\r\n//       background: white;\r\n//       border-radius: 12px;\r\n//       width: 90vw;\r\n//       max-width: 1000px;\r\n//       max-height: 85vh;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       overflow: hidden;\r\n//       box-shadow: 0 20px 60px rgba(0,0,0,0.3);\r\n//     }\r\n//   }\r\n//   @media (max-width: 767px) {\r\n//     body {\r\n//       padding: 8px;\r\n//     }\r\n//     .project-header {\r\n//       padding: 16px;\r\n//       margin-bottom: 16px;\r\n//       border-left-width: 3px;\r\n//     }\r\n//     .project-title {\r\n//       font-size: 22px;\r\n//       margin-bottom: 10px;\r\n//     }\r\n//     .project-stats {\r\n//       gap: 12px;\r\n//     }\r\n//     .project-stat {\r\n//       font-size: 12px;\r\n//       padding: 4px 10px;\r\n//     }\r\n//     .mobile-swimlane-selector {\r\n//       margin-bottom: 16px;\r\n//       position: sticky;\r\n//       top: 0;\r\n//       background: white;\r\n//       padding: 12px;\r\n//       border-radius: 8px;\r\n//       box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n//       z-index: 100;\r\n//     }\r\n//     .mobile-select {\r\n//       width: 100%;\r\n//       padding: 12px;\r\n//       border: 1px solid #dfe5e5;\r\n//       border-radius: 6px;\r\n//       font-size: 16px;\r\n//       background: white;\r\n//     }\r\n//     .swimlane {\r\n//       background: white;\r\n//       border-radius: 8px;\r\n//       margin-bottom: 12px;\r\n//       box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n//       overflow: hidden;\r\n//     }\r\n//     .swimlane-header {\r\n//       display: flex;\r\n//       align-items: center;\r\n//       padding: 12px;\r\n//       background: #fafbfc;\r\n//       border-bottom: 1px solid #dfe5e5;\r\n//       font-weight: 600;\r\n//       font-size: 14px;\r\n//       color: #172b4d;\r\n//       position: relative;\r\n//     }\r\n//     .mobile-swimlane-toggle {\r\n//       background: none;\r\n//       border: none;\r\n//       font-size: 16px;\r\n//       color: #5e6c84;\r\n//       margin-left: auto;\r\n//       padding: 4px 8px;\r\n//     }\r\n//     .kanban-row.mobile-view {\r\n//       display: block;\r\n//       padding: 8px;\r\n//       overflow-x: auto;\r\n//       white-space: nowrap;\r\n//     }\r\n//     .kanban-column.mobile-column {\r\n//       display: inline-block;\r\n//       vertical-align: top;\r\n//       width: 280px;\r\n//       margin-right: 8px;\r\n//       background: #f5f6f8;\r\n//       border-radius: 6px;\r\n//       padding: 8px;\r\n//       border: 1px solid #dfe5e5;\r\n//       user-select: none;\r\n//       min-height: 300px;\r\n//     }\r\n//     .col-header {\r\n//       display: flex;\r\n//       align-items: center;\r\n//       margin-bottom: 8px;\r\n//       gap: 6px;\r\n//     }\r\n//     .col-title {\r\n//       font-weight: 600;\r\n//       font-size: 11px;\r\n//       color: #5e6c84;\r\n//       text-transform: uppercase;\r\n//       letter-spacing: 0.5px;\r\n//       flex-grow: 1;\r\n//     }\r\n//     .card-item {\r\n//       background: white;\r\n//       border-radius: 6px;\r\n//       padding: 10px;\r\n//       box-shadow: 0 0 2px rgba(0,0,0,0.1);\r\n//       cursor: pointer;\r\n//       user-select: none;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 6px;\r\n//       border: 1px solid #dfe5e5;\r\n//       margin-bottom: 8px;\r\n//     }\r\n//     .card-title {\r\n//       font-weight: 600;\r\n//       font-size: 13px;\r\n//       color: #2b3a59;\r\n//       line-height: 1.3;\r\n//     }\r\n//     .card-meta {\r\n//       display: flex;\r\n//       gap: 6px;\r\n//       font-size: 10px;\r\n//       color: #6b7c93;\r\n//       align-items: center;\r\n//       flex-wrap: wrap;\r\n//     }\r\n//     .modal.mobile-modal {\r\n//       width: 95vw;\r\n//       max-height: 90vh;\r\n//       margin: 20px;\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//     }\r\n//     .modal-content.mobile-modal-content {\r\n//       display: flex;\r\n//       flex-direction: column;\r\n//       gap: 16px;\r\n//       overflow-y: auto;\r\n//     }\r\n//   }\r\n\r\n//   /* Enhanced Modal Styles */\r\n//   .modal-overlay {\r\n//     position: fixed;\r\n//     top: 0; left: 0; right: 0; bottom: 0;\r\n//     background: rgba(0,0,0,0.6);\r\n//     display: flex;\r\n//     align-items: center;\r\n//     justify-content: center;\r\n//     z-index: 1000;\r\n//     padding: 20px;\r\n//   }\r\n\r\n//   .modal {\r\n//     background: white;\r\n//     border-radius: 12px;\r\n//     width: 90vw;\r\n//     max-width: 1000px;\r\n//     max-height: 85vh;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     overflow: hidden;\r\n//     box-shadow: 0 20px 60px rgba(0,0,0,0.3);\r\n//   }\r\n\r\n//   .modal-header {\r\n//     display: flex;\r\n//     justify-content: space-between;\r\n//     align-items: flex-start;\r\n//     padding: 24px;\r\n//     background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\r\n//     border-bottom: 1px solid #e1e4e8;\r\n//   }\r\n\r\n//   .modal-header-content {\r\n//     flex: 1;\r\n//     min-width: 0;\r\n//   }\r\n\r\n//   .modal-epic-badge {\r\n//     display: inline-block;\r\n//     background: #1976d2;\r\n//     color: white;\r\n//     padding: 4px 12px;\r\n//     border-radius: 16px;\r\n//     font-size: 12px;\r\n//     font-weight: 600;\r\n//     margin-bottom: 8px;\r\n//   }\r\n\r\n//   .modal-title {\r\n//     margin: 0 0 8px 0;\r\n//     font-size: 24px;\r\n//     font-weight: 700;\r\n//     color: #172b4d;\r\n//     line-height: 1.3;\r\n//     word-wrap: break-word;\r\n//   }\r\n\r\n//   .modal-id-type {\r\n//     display: flex;\r\n//     gap: 12px;\r\n//     align-items: center;\r\n//   }\r\n\r\n//   .modal-id {\r\n//     font-size: 14px;\r\n//     color: #5e6c84;\r\n//     font-family: 'Monaco', 'Menlo', monospace;\r\n//   }\r\n\r\n//   .modal-type {\r\n//     padding: 2px 8px;\r\n//     border-radius: 4px;\r\n//     font-size: 12px;\r\n//     font-weight: 600;\r\n//     text-transform: uppercase;\r\n//   }\r\n\r\n//   .modal-type-task { background: #e3f2fd; color: #1976d2; }\r\n//   .modal-type-subtask { background: #f3e5f5; color: #7b1fa2; }\r\n//   .modal-type-bug { background: #ffebee; color: #d32f2f; }\r\n\r\n//   .modal-close-btn {\r\n//     background: none;\r\n//     border: none;\r\n//     font-size: 20px;\r\n//     color: #5e6c84;\r\n//     cursor: pointer;\r\n//     padding: 8px;\r\n//     margin: -8px;\r\n//     border-radius: 4px;\r\n//     transition: background-color 0.2s;\r\n//   }\r\n\r\n//   .modal-close-btn:hover {\r\n//     background: rgba(0,0,0,0.1);\r\n//   }\r\n\r\n//   .modal-content-scroll {\r\n//     flex: 1;\r\n//     overflow-y: auto;\r\n//     padding: 0 24px;\r\n//   }\r\n\r\n//   .modal-content {\r\n//     padding: 24px 0;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 24px;\r\n//   }\r\n\r\n//   .modal-section {\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 16px;\r\n//   }\r\n\r\n//   .modal-section-title {\r\n//     font-size: 18px;\r\n//     font-weight: 600;\r\n//     color: #172b4d;\r\n//     margin: 0;\r\n//     padding-bottom: 8px;\r\n//     border-bottom: 2px solid #f0f0f0;\r\n//   }\r\n\r\n//   .modal-grid {\r\n//     display: grid;\r\n//     grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n//     gap: 16px;\r\n//   }\r\n\r\n//   .modal-field {\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 6px;\r\n//   }\r\n\r\n//   .modal-field-full {\r\n//     grid-column: 1 / -1;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 6px;\r\n//   }\r\n\r\n//   .modal-label {\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     color: #44546f;\r\n//     margin: 0;\r\n//   }\r\n\r\n//   .modal-input, .modal-select, .modal-textarea {\r\n//     padding: 12px;\r\n//     border: 2px solid #dfe1e6;\r\n//     border-radius: 8px;\r\n//     font-size: 14px;\r\n//     font-family: inherit;\r\n//     transition: border-color 0.2s, box-shadow 0.2s;\r\n//     background: white;\r\n//   }\r\n\r\n//   .modal-input:focus, .modal-select:focus, .modal-textarea:focus {\r\n//     outline: none;\r\n//     border-color: #1976d2;\r\n//     box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.1);\r\n//   }\r\n\r\n//   .modal-input-disabled {\r\n//     background: #f8f9fa;\r\n//     color: #6b778c;\r\n//     cursor: not-allowed;\r\n//   }\r\n\r\n//   .modal-textarea {\r\n//     resize: vertical;\r\n//     min-height: 80px;\r\n//     line-height: 1.5;\r\n//   }\r\n\r\n//   .modal-actions {\r\n//     display: flex;\r\n//     justify-content: space-between;\r\n//     align-items: center;\r\n//     padding: 20px 24px;\r\n//     background: #f8f9fa;\r\n//     border-top: 1px solid #e1e4e8;\r\n//     gap: 16px;\r\n//   }\r\n\r\n//   .modal-actions-right {\r\n//     display: flex;\r\n//     gap: 12px;\r\n//     align-items: center;\r\n//   }\r\n\r\n//   .btn-reset {\r\n//     padding: 10px 20px;\r\n//     border: 1px solid #dcdfe4;\r\n//     background: white;\r\n//     color: #44546f;\r\n//     border-radius: 6px;\r\n//     font-weight: 600;\r\n//     cursor: pointer;\r\n//     transition: all 0.2s;\r\n//   }\r\n\r\n//   .btn-reset:hover {\r\n//     background: #f1f2f4;\r\n//     border-color: #c1c7d0;\r\n//   }\r\n\r\n//   .btn-save {\r\n//     padding: 10px 24px;\r\n//     border: none;\r\n//     background: #1976d2;\r\n//     color: white;\r\n//     border-radius: 6px;\r\n//     font-weight: 600;\r\n//     cursor: pointer;\r\n//     transition: background-color 0.2s;\r\n//   }\r\n\r\n//   .btn-save:hover {\r\n//     background: #1565c0;\r\n//   }\r\n\r\n//   .modal-delete-btn {\r\n//     padding: 10px 20px;\r\n//     border: 1px solid #ffcdd2;\r\n//     background: white;\r\n//     color: #d32f2f;\r\n//     border-radius: 6px;\r\n//     font-weight: 600;\r\n//     cursor: pointer;\r\n//     transition: all 0.2s;\r\n//   }\r\n\r\n//   .modal-delete-btn:hover {\r\n//     background: #ffebee;\r\n//     border-color: #ef5350;\r\n//   }\r\n\r\n//   @media (max-width: 767px) {\r\n//     .modal-overlay {\r\n//       padding: 10px;\r\n//     }\r\n    \r\n//     .modal.mobile-modal {\r\n//       width: 95vw;\r\n//       max-height: 90vh;\r\n//       margin: 0;\r\n//     }\r\n\r\n//     .modal-header {\r\n//       padding: 16px;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//     }\r\n\r\n//     .modal-close-btn {\r\n//       align-self: flex-end;\r\n//       margin: 0;\r\n//     }\r\n\r\n//     .modal-content-scroll {\r\n//       padding: 0 16px;\r\n//     }\r\n\r\n//     .modal-content {\r\n//       padding: 16px 0;\r\n//       gap: 20px;\r\n//     }\r\n\r\n//     .modal-grid {\r\n//       grid-template-columns: 1fr;\r\n//       gap: 12px;\r\n//     }\r\n\r\n//     .modal-actions {\r\n//       padding: 16px;\r\n//       flex-direction: column;\r\n//       gap: 12px;\r\n//     }\r\n\r\n//     .modal-actions-right {\r\n//       width: 100%;\r\n//       justify-content: space-between;\r\n//     }\r\n\r\n//     .btn-reset, .modal-delete-btn, .btn-save {\r\n//       flex: 1;\r\n//       text-align: center;\r\n//     }\r\n//   }\r\n\r\n//   .swimlane-header {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     padding: 12px 16px;\r\n//     background: #fafbfc;\r\n//     border-bottom: 1px solid #dfe5e5;\r\n//     font-weight: 600;\r\n//     font-size: 14px;\r\n//     color: #172b4d;\r\n//   }\r\n//   .swimlane-toggle, .swimlane-icon {\r\n//     color: #5e6c84;\r\n//     margin-right: 8px;\r\n//     cursor: pointer;\r\n//   }\r\n//   .swimlane-toggle {\r\n//     border: none;\r\n//     background: transparent;\r\n//     font-size: 14px;\r\n//   }\r\n//   .swimlane-icon {\r\n//     font-size: 18px;\r\n//   }\r\n//   .swimlane-title-input {\r\n//     border: 1px solid #dfe5e5;\r\n//     border-radius: 4px;\r\n//     padding: 4px 8px;\r\n//     font-size: 14px;\r\n//     font-weight: 600;\r\n//     background: white;\r\n//     margin-right: 8px;\r\n//     min-width: 150px;\r\n//     color: #172b4d;\r\n//   }\r\n//   .swimlane-title-input:focus {\r\n//     outline: none;\r\n//     border-color: #1976d2;\r\n//   }\r\n//   .swimlane-count {\r\n//     color: #5e6c84;\r\n//     font-size: 12px;\r\n//     font-weight: normal;\r\n//   }\r\n//   .col-header {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     margin-bottom: 4px;\r\n//     gap: 6px;\r\n//   }\r\n//   .col-title {\r\n//     font-weight: 600;\r\n//     font-size: 12px;\r\n//     color: #5e6c84;\r\n//     text-transform: uppercase;\r\n//     letter-spacing: 0.5px;\r\n//     flex-grow: 1;\r\n//   }\r\n//   .col-count {\r\n//     background: #dfe5e5;\r\n//     color: #5e6c84;\r\n//     border-radius: 12px;\r\n//     padding: 2px 8px;\r\n//     font-size: 11px;\r\n//     font-weight: 600;\r\n//     min-width: 20px;\r\n//     text-align: center;\r\n//   }\r\n//   .col-icons {\r\n//     display: flex;\r\n//     gap: 6px;\r\n//   }\r\n//   .col-icon {\r\n//     cursor: pointer;\r\n//     color: #5e6c84;\r\n//     font-size: 18px;\r\n//     background: none;\r\n//     border: none;\r\n//     padding: 0;\r\n//   }\r\n//   .create-card {\r\n//     background: white;\r\n//     padding: 10px;\r\n//     border-radius: 6px;\r\n//     box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 10px;\r\n//   }\r\n//   .card-item {\r\n//     background: white;\r\n//     border-radius: 8px;\r\n//     padding: 12px;\r\n//     box-shadow: 0 0 2px rgba(0,0,0,0.1);\r\n//     cursor: pointer;\r\n//     user-select: none;\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 6px;\r\n//     border: 1px solid #dfe5e5;\r\n//     transition: box-shadow 0.2s ease, border-color 0.2s ease;\r\n//   }\r\n//   .card-item:hover {\r\n//     box-shadow: 0px 2px 10px rgba(0,0,0,0.15);\r\n//     border-color: #a2adba;\r\n//   }\r\n//   button {\r\n//     cursor: pointer;\r\n//     transition: background-color 0.2s;\r\n//   }\r\n//   button:hover {\r\n//     opacity: 0.9;\r\n//   }\r\n//   @media (max-width: 767px) {\r\n//     button, .card-item, .col-icon {\r\n//       min-height: 44px;\r\n//       min-width: 44px;\r\n//     }\r\n//     .card-item {\r\n//       touch-action: manipulation;\r\n//     }\r\n//   }\r\n// `}</style>\r\n\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// const btnStyle = {\r\n//   cancel: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#5e6c84',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   },\r\n//   create: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#1976d2',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   },\r\n//   delete: {\r\n//     padding: '10px 18px',\r\n//     borderRadius: '6px',\r\n//     border: 'none',\r\n//     backgroundColor: '#d32f2f',\r\n//     color: 'white',\r\n//     fontWeight: '600',\r\n//     fontSize: '14px',\r\n//     cursor: 'pointer'\r\n//   }\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAgignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\n// // import React, { useEffect, useState } from 'react';\n// // import { listProjects, addProject } from '../../services/mockApi';\n// // import { Link } from 'react-router-dom';\n// // import { v4 as uuidv4 } from 'uuid';\n// // import { FiPlus } from 'react-icons/fi';\n\n// // export default function ProjectList() {\n// //   const [projects, setProjects] = useState([]);\n// //   const [name, setName] = useState('');\n// //   const [key, setKey] = useState('');\n\n// //   useEffect(()=>{ listProjects().then(setProjects); },[]);\n\n// //   const create = async () => {\n// //     const p = { id: uuidv4(), key: key.toUpperCase()||'PRJ', name, description:'', leads:[] };\n// //     await addProject(p);\n// //     setProjects(await listProjects());\n// //     setName(''); setKey('');\n// //   };\n\n// //   return (\n// //     <div className=\"grid\">\n// //       <div className=\"card\" aria-labelledby=\"proj-create\">\n// //         <h2 id=\"proj-create\">Create Project</h2>\n// //         <div className=\"form-row\"><label>Project Name<input value={name} onChange={e=>setName(e.target.value)} /></label></div>\n// //         <div className=\"form-row\"><label>Project Key<input value={key} onChange={e=>setKey(e.target.value)} /></label></div>\n// //         <button className=\"btn\" onClick={create}><FiPlus /> Create</button>\n// //       </div>\n// //       <div className=\"card\" aria-labelledby=\"proj-list\">\n// //         <h2 id=\"proj-list\">Projects</h2>\n// //         <ul>{projects.map(p=>(<li key={p.id}><Link to={'/projects/'+p.id}><strong>{p.name}</strong> <span className=\"small\">({p.key})</span></Link></li>))}</ul>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // import React, { useEffect, useState } from 'react';\n// // import { listProjects, addProject } from '../../services/mockApi';\n// // import { Link } from 'react-router-dom';\n// // import { v4 as uuidv4 } from 'uuid';\n// // import { FiPlus } from 'react-icons/fi';\n\n// // export default function ProjectList() {\n// //   const [projects, setProjects] = useState([]);\n// //   const [name, setName] = useState('');\n// //   const [key, setKey] = useState('');\n\n// //   useEffect(() => {\n// //     listProjects().then(setProjects);\n// //   }, []);\n\n// //   const create = async () => {\n// //     const p = { id: uuidv4(), key: key.toUpperCase() || 'PRJ', name, description: '', leads: [] };\n// //     await addProject(p);\n// //     setProjects(await listProjects());\n// //     setName('');\n// //     setKey('');\n// //   };\n\n// //   return (\n// //     <div className=\"grid\">\n// //       <div className=\"card\" aria-labelledby=\"proj-create\">\n// //         <h2 id=\"proj-create\">Create Project</h2>\n// //         <div className=\"form-row\">\n// //           <label>\n// //             Project Name\n// //             <input value={name} onChange={e => setName(e.target.value)} />\n// //           </label>\n// //         </div>\n// //         <div className=\"form-row\">\n// //           <label>\n// //             Project Key\n// //             <input value={key} onChange={e => setKey(e.target.value)} />\n// //           </label>\n// //         </div>\n// //         <button className=\"btn\" onClick={create}>\n// //           <FiPlus /> Create\n// //         </button>\n// //       </div>\n// //       <div className=\"card\" aria-labelledby=\"proj-list\">\n// //         <h2 id=\"proj-list\">Projects</h2>\n// //         <ul>\n// //           {projects.map(p => (\n// //             <li key={p.id}>\n// //               <Link to={'/projects/' + p.id}>\n// //                 <strong>{p.name}</strong> <span className=\"small\">({p.key})</span>\n// //               </Link>\n// //             </li>\n// //           ))}\n// //         </ul>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n//  //////////////////////\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject } from '../../services/mockApi';\n// import { Link } from 'react-router-dom';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus } from 'react-icons/fi';\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n\n//   useEffect(() => {\n//     listProjects().then(setProjects);\n//   }, []);\n\n//   const create = async () => {\n//     const p = { id: uuidv4(), key: key.toUpperCase() || 'PRJ', name, description: '', leads: [] };\n//     await addProject(p);\n//     setProjects(await listProjects());\n//     setName('');\n//     setKey('');\n//   };\n\n//   return (\n//     <div className=\"grid\">\n//       <div className=\"card\" aria-labelledby=\"proj-create\">\n//         <h2 id=\"proj-create\">Create Project</h2>\n//         <div className=\"form-row\">\n//           <label>\n//             Project Name\n//             <input value={name} onChange={e => setName(e.target.value)} />\n//           </label>\n//         </div>\n//         <div className=\"form-row\">\n//           <label>\n//             Project Key\n//             <input value={key} onChange={e => setKey(e.target.value)} />\n//           </label>\n//         </div>\n//         <button className=\"btn\" onClick={create}>\n//           <FiPlus /> Create\n//         </button>\n//       </div>\n//       <div className=\"card\" aria-labelledby=\"proj-list\">\n//         <h2 id=\"proj-list\">Projects</h2>\n//         <ul>\n//           {projects.map(p => (\n//             <li key={p.id}>\n//               <Link to={'/projects/' + p.id}>\n//                 <strong>{p.name}</strong> <span className=\"small\">({p.key})</span>\n//               </Link>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject, deleteProject, updateProject } from '../../services/mockApi';\n// import { Link } from 'react-router-dom';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus, FiTrash2, FiEdit2, FiCheck, FiX, FiChevronUp, FiChevronDown } from 'react-icons/fi';\n// import { formatDistanceToNow } from 'date-fns';\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n//   const [lead, setLead] = useState('');\n//   const [type, setType] = useState('Software');\n//   const [editingId, setEditingId] = useState(null);\n//   const [editName, setEditName] = useState('');\n//   const [editKey, setEditKey] = useState('');\n//   const [editLead, setEditLead] = useState('');\n//   const [editType, setEditType] = useState('');\n//   const [search, setSearch] = useState('');\n//   const [sortConfig, setSortConfig] = useState({ key: 'name', direction: 'asc' });\n\n//   useEffect(() => {\n//     loadProjects();\n//   }, []);\n\n//   const loadProjects = async () => {\n//     setProjects(await listProjects());\n//   };\n\n//   const create = async () => {\n//     if (!name.trim()) return;\n//     const now = new Date().toISOString();\n//     const p = {\n//       id: uuidv4(),\n//       key: key.toUpperCase() || 'PRJ',\n//       name,\n//       type,\n//       lead: lead || 'Unassigned',\n//       description: '',\n//       leads: [],\n//       lastUpdated: now\n//     };\n//     await addProject(p);\n//     await loadProjects();\n//     setName('');\n//     setKey('');\n//     setLead('');\n//     setType('Software');\n//   };\n\n//   const remove = async (id) => {\n//     if (window.confirm(\"Are you sure you want to delete this project?\")) {\n//       await deleteProject(id);\n//       await loadProjects();\n//     }\n//   };\n\n//   const startEdit = (p) => {\n//     setEditingId(p.id);\n//     setEditName(p.name);\n//     setEditKey(p.key);\n//     setEditLead(p.lead || '');\n//     setEditType(p.type || 'Software');\n//   };\n\n//   const cancelEdit = () => {\n//     setEditingId(null);\n//     setEditName('');\n//     setEditKey('');\n//     setEditLead('');\n//     setEditType('');\n//   };\n\n//   const saveEdit = async (id) => {\n//     const now = new Date().toISOString();\n//     await updateProject(id, {\n//       name: editName,\n//       key: editKey.toUpperCase(),\n//       lead: editLead,\n//       type: editType,\n//       lastUpdated: now\n//     });\n//     setEditingId(null);\n//     await loadProjects();\n//   };\n\n//   const avatarStyle = {\n//     width: '28px',\n//     height: '28px',\n//     borderRadius: '50%',\n//     background: '#0052cc',\n//     color: 'white',\n//     display: 'inline-flex',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     fontWeight: '600',\n//     marginRight: '8px',\n//     fontSize: '12px'\n//   };\n\n//   const typeBadgeStyle = (t) => {\n//     const colors = {\n//       Software: { bg: '#e3fcef', color: '#006644' },\n//       Business: { bg: '#deebff', color: '#0747a6' },\n//       Service: { bg: '#ffebe6', color: '#de350b' }\n//     };\n//     const c = colors[t] || { bg: '#f4f5f7', color: '#172b4d' };\n//     return {\n//       background: c.bg,\n//       color: c.color,\n//       padding: '0.25rem 0.6rem',\n//       borderRadius: '4px',\n//       fontSize: '12px',\n//       fontWeight: 600\n//     };\n//   };\n\n//   const getProjectColor = (id) => {\n//     const colors = ['#0052cc', '#2684ff', '#00a3bf', '#36b37e', '#ff991f', '#de350b', '#6554c0'];\n//     const index = id.charCodeAt(0) % colors.length;\n//     return colors[index];\n//   };\n\n//   const projectIconStyle = (id) => ({\n//     width: '28px',\n//     height: '28px',\n//     borderRadius: '4px',\n//     background: getProjectColor(id),\n//     color: 'white',\n//     display: 'inline-flex',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     fontWeight: 600,\n//     marginRight: '8px',\n//     fontSize: '12px',\n//     textTransform: 'uppercase'\n//   });\n\n//   // Filtering\n//   const filteredProjects = projects.filter(p =>\n//     p.name.toLowerCase().includes(search.toLowerCase()) ||\n//     p.key.toLowerCase().includes(search.toLowerCase()) ||\n//     (p.lead && p.lead.toLowerCase().includes(search.toLowerCase())) ||\n//     (p.type && p.type.toLowerCase().includes(search.toLowerCase()))\n//   );\n\n//   // Sorting\n//   const sortedProjects = [...filteredProjects].sort((a, b) => {\n//     const aVal = a[sortConfig.key]?.toString().toLowerCase() || '';\n//     const bVal = b[sortConfig.key]?.toString().toLowerCase() || '';\n//     if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1;\n//     if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1;\n//     return 0;\n//   });\n\n//   const toggleSort = (key) => {\n//     setSortConfig((prev) =>\n//       prev.key === key\n//         ? { key, direction: prev.direction === 'asc' ? 'desc' : 'asc' }\n//         : { key, direction: 'asc' }\n//     );\n//   };\n\n//   const sortIcon = (col) => {\n//     if (sortConfig.key !== col) return null;\n//     return sortConfig.direction === 'asc' ? <FiChevronUp /> : <FiChevronDown />;\n//   };\n\n//   return (\n//     <div style={{ display: 'grid', gridTemplateColumns: '1fr 3fr', gap: '2rem' }}>\n//       {/* Create Project */}\n//       {/* ... (same as before, keeping form part unchanged) ... */}\n\n//       {/* Project Table */}\n//       <div style={{ background: '#fff', borderRadius: '6px', padding: '1.5rem', boxShadow: '0 1px 4px rgba(0,0,0,0.1)' }}>\n//         <h2 style={{ marginBottom: '1rem' }}>Projects</h2>\n\n//         <input\n//           type=\"text\"\n//           value={search}\n//           onChange={e => setSearch(e.target.value)}\n//           placeholder=\"Search projects...\"\n//           style={{\n//             width: '100%',\n//             padding: '0.6rem',\n//             marginBottom: '1rem',\n//             border: '1px solid #dfe1e6',\n//             borderRadius: '4px'\n//           }}\n//         />\n\n//         {sortedProjects.length === 0 ? (\n//           <p>No projects found.</p>\n//         ) : (\n//           <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n//             <thead>\n//               <tr>\n//                 <th onClick={() => toggleSort('key')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Key {sortIcon('key')}\n//                 </th>\n//                 <th onClick={() => toggleSort('name')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Name {sortIcon('name')}\n//                 </th>\n//                 <th onClick={() => toggleSort('type')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Type {sortIcon('type')}\n//                 </th>\n//                 <th onClick={() => toggleSort('lead')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Lead {sortIcon('lead')}\n//                 </th>\n//                 <th onClick={() => toggleSort('lastUpdated')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Last Updated {sortIcon('lastUpdated')}\n//                 </th>\n//                 <th style={{ padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7', textAlign: 'right' }}>\n//                   Actions\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {sortedProjects.map(p => (\n//                 <tr key={p.id} style={{ borderBottom: '1px solid #f0f0f0' }}>\n//                   <td style={{ padding: '0.75rem 1rem' }}>{p.key}</td>\n//                   <td style={{ padding: '0.75rem 1rem', display: 'flex', alignItems: 'center' }}>\n//                     <span style={projectIconStyle(p.id)}>{p.key.slice(0, 2)}</span>\n//                     {editingId === p.id ? (\n//                       <input value={editName} onChange={e => setEditName(e.target.value)} />\n//                     ) : (\n//                       <Link to={'/projects/' + p.id} style={{ fontWeight: 600, color: '#0052cc', textDecoration: 'none' }}>\n//                         {p.name}\n//                       </Link>\n//                     )}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem' }}>\n//                     {editingId === p.id ? (\n//                       <select value={editType} onChange={e => setEditType(e.target.value)}>\n//                         <option value=\"Software\">Software</option>\n//                         <option value=\"Business\">Business</option>\n//                         <option value=\"Service\">Service</option>\n//                       </select>\n//                     ) : (\n//                       <span style={typeBadgeStyle(p.type)}>{p.type}</span>\n//                     )}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem' }}>\n//                     {editingId === p.id ? (\n//                       <input value={editLead} onChange={e => setEditLead(e.target.value)} />\n//                     ) : (\n//                       <div style={{ display: 'flex', alignItems: 'center' }}>\n//                         <span style={avatarStyle}>{p.lead ? p.lead.charAt(0).toUpperCase() : '?'}</span>\n//                         {p.lead || 'Unassigned'}\n//                       </div>\n//                     )}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem', color: '#6b778c' }}>\n//                     {p.lastUpdated ? formatDistanceToNow(new Date(p.lastUpdated), { addSuffix: true }) : '—'}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem', textAlign: 'right' }}>\n//                     {editingId === p.id ? (\n//                       <>\n//                         <button onClick={() => saveEdit(p.id)}><FiCheck /></button>\n//                         <button onClick={cancelEdit}><FiX /></button>\n//                       </>\n//                     ) : (\n//                       <>\n//                         <button onClick={() => startEdit(p)}><FiEdit2 /></button>\n//                         <button onClick={() => remove(p.id)}><FiTrash2 /></button>\n//                       </>\n//                     )}\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/vmoun/OneDrive/Desktop/newtieckettool/src/components/projects/ProjectList.js"],"sourcesContent":["\n// // import React, { useEffect, useState } from 'react';\n// // import { listProjects, addProject } from '../../services/mockApi';\n// // import { Link } from 'react-router-dom';\n// // import { v4 as uuidv4 } from 'uuid';\n// // import { FiPlus } from 'react-icons/fi';\n\n// // export default function ProjectList() {\n// //   const [projects, setProjects] = useState([]);\n// //   const [name, setName] = useState('');\n// //   const [key, setKey] = useState('');\n\n// //   useEffect(()=>{ listProjects().then(setProjects); },[]);\n\n// //   const create = async () => {\n// //     const p = { id: uuidv4(), key: key.toUpperCase()||'PRJ', name, description:'', leads:[] };\n// //     await addProject(p);\n// //     setProjects(await listProjects());\n// //     setName(''); setKey('');\n// //   };\n\n// //   return (\n// //     <div className=\"grid\">\n// //       <div className=\"card\" aria-labelledby=\"proj-create\">\n// //         <h2 id=\"proj-create\">Create Project</h2>\n// //         <div className=\"form-row\"><label>Project Name<input value={name} onChange={e=>setName(e.target.value)} /></label></div>\n// //         <div className=\"form-row\"><label>Project Key<input value={key} onChange={e=>setKey(e.target.value)} /></label></div>\n// //         <button className=\"btn\" onClick={create}><FiPlus /> Create</button>\n// //       </div>\n// //       <div className=\"card\" aria-labelledby=\"proj-list\">\n// //         <h2 id=\"proj-list\">Projects</h2>\n// //         <ul>{projects.map(p=>(<li key={p.id}><Link to={'/projects/'+p.id}><strong>{p.name}</strong> <span className=\"small\">({p.key})</span></Link></li>))}</ul>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n\n// // import React, { useEffect, useState } from 'react';\n// // import { listProjects, addProject } from '../../services/mockApi';\n// // import { Link } from 'react-router-dom';\n// // import { v4 as uuidv4 } from 'uuid';\n// // import { FiPlus } from 'react-icons/fi';\n \n// // export default function ProjectList() {\n// //   const [projects, setProjects] = useState([]);\n// //   const [name, setName] = useState('');\n// //   const [key, setKey] = useState('');\n \n// //   useEffect(() => {\n// //     listProjects().then(setProjects);\n// //   }, []);\n \n// //   const create = async () => {\n// //     const p = { id: uuidv4(), key: key.toUpperCase() || 'PRJ', name, description: '', leads: [] };\n// //     await addProject(p);\n// //     setProjects(await listProjects());\n// //     setName('');\n// //     setKey('');\n// //   };\n \n// //   return (\n// //     <div className=\"grid\">\n// //       <div className=\"card\" aria-labelledby=\"proj-create\">\n// //         <h2 id=\"proj-create\">Create Project</h2>\n// //         <div className=\"form-row\">\n// //           <label>\n// //             Project Name\n// //             <input value={name} onChange={e => setName(e.target.value)} />\n// //           </label>\n// //         </div>\n// //         <div className=\"form-row\">\n// //           <label>\n// //             Project Key\n// //             <input value={key} onChange={e => setKey(e.target.value)} />\n// //           </label>\n// //         </div>\n// //         <button className=\"btn\" onClick={create}>\n// //           <FiPlus /> Create\n// //         </button>\n// //       </div>\n// //       <div className=\"card\" aria-labelledby=\"proj-list\">\n// //         <h2 id=\"proj-list\">Projects</h2>\n// //         <ul>\n// //           {projects.map(p => (\n// //             <li key={p.id}>\n// //               <Link to={'/projects/' + p.id}>\n// //                 <strong>{p.name}</strong> <span className=\"small\">({p.key})</span>\n// //               </Link>\n// //             </li>\n// //           ))}\n// //         </ul>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n \n//  //////////////////////\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject } from '../../services/mockApi';\n// import { Link } from 'react-router-dom';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus } from 'react-icons/fi';\n \n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n \n//   useEffect(() => {\n//     listProjects().then(setProjects);\n//   }, []);\n \n//   const create = async () => {\n//     const p = { id: uuidv4(), key: key.toUpperCase() || 'PRJ', name, description: '', leads: [] };\n//     await addProject(p);\n//     setProjects(await listProjects());\n//     setName('');\n//     setKey('');\n//   };\n \n//   return (\n//     <div className=\"grid\">\n//       <div className=\"card\" aria-labelledby=\"proj-create\">\n//         <h2 id=\"proj-create\">Create Project</h2>\n//         <div className=\"form-row\">\n//           <label>\n//             Project Name\n//             <input value={name} onChange={e => setName(e.target.value)} />\n//           </label>\n//         </div>\n//         <div className=\"form-row\">\n//           <label>\n//             Project Key\n//             <input value={key} onChange={e => setKey(e.target.value)} />\n//           </label>\n//         </div>\n//         <button className=\"btn\" onClick={create}>\n//           <FiPlus /> Create\n//         </button>\n//       </div>\n//       <div className=\"card\" aria-labelledby=\"proj-list\">\n//         <h2 id=\"proj-list\">Projects</h2>\n//         <ul>\n//           {projects.map(p => (\n//             <li key={p.id}>\n//               <Link to={'/projects/' + p.id}>\n//                 <strong>{p.name}</strong> <span className=\"small\">({p.key})</span>\n//               </Link>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { listProjects, addProject, deleteProject, updateProject } from '../../services/mockApi';\n// import { Link } from 'react-router-dom';\n// import { v4 as uuidv4 } from 'uuid';\n// import { FiPlus, FiTrash2, FiEdit2, FiCheck, FiX, FiChevronUp, FiChevronDown } from 'react-icons/fi';\n// import { formatDistanceToNow } from 'date-fns';\n\n// export default function ProjectList() {\n//   const [projects, setProjects] = useState([]);\n//   const [name, setName] = useState('');\n//   const [key, setKey] = useState('');\n//   const [lead, setLead] = useState('');\n//   const [type, setType] = useState('Software');\n//   const [editingId, setEditingId] = useState(null);\n//   const [editName, setEditName] = useState('');\n//   const [editKey, setEditKey] = useState('');\n//   const [editLead, setEditLead] = useState('');\n//   const [editType, setEditType] = useState('');\n//   const [search, setSearch] = useState('');\n//   const [sortConfig, setSortConfig] = useState({ key: 'name', direction: 'asc' });\n\n//   useEffect(() => {\n//     loadProjects();\n//   }, []);\n\n//   const loadProjects = async () => {\n//     setProjects(await listProjects());\n//   };\n\n//   const create = async () => {\n//     if (!name.trim()) return;\n//     const now = new Date().toISOString();\n//     const p = {\n//       id: uuidv4(),\n//       key: key.toUpperCase() || 'PRJ',\n//       name,\n//       type,\n//       lead: lead || 'Unassigned',\n//       description: '',\n//       leads: [],\n//       lastUpdated: now\n//     };\n//     await addProject(p);\n//     await loadProjects();\n//     setName('');\n//     setKey('');\n//     setLead('');\n//     setType('Software');\n//   };\n\n//   const remove = async (id) => {\n//     if (window.confirm(\"Are you sure you want to delete this project?\")) {\n//       await deleteProject(id);\n//       await loadProjects();\n//     }\n//   };\n\n//   const startEdit = (p) => {\n//     setEditingId(p.id);\n//     setEditName(p.name);\n//     setEditKey(p.key);\n//     setEditLead(p.lead || '');\n//     setEditType(p.type || 'Software');\n//   };\n\n//   const cancelEdit = () => {\n//     setEditingId(null);\n//     setEditName('');\n//     setEditKey('');\n//     setEditLead('');\n//     setEditType('');\n//   };\n\n//   const saveEdit = async (id) => {\n//     const now = new Date().toISOString();\n//     await updateProject(id, {\n//       name: editName,\n//       key: editKey.toUpperCase(),\n//       lead: editLead,\n//       type: editType,\n//       lastUpdated: now\n//     });\n//     setEditingId(null);\n//     await loadProjects();\n//   };\n\n//   const avatarStyle = {\n//     width: '28px',\n//     height: '28px',\n//     borderRadius: '50%',\n//     background: '#0052cc',\n//     color: 'white',\n//     display: 'inline-flex',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     fontWeight: '600',\n//     marginRight: '8px',\n//     fontSize: '12px'\n//   };\n\n//   const typeBadgeStyle = (t) => {\n//     const colors = {\n//       Software: { bg: '#e3fcef', color: '#006644' },\n//       Business: { bg: '#deebff', color: '#0747a6' },\n//       Service: { bg: '#ffebe6', color: '#de350b' }\n//     };\n//     const c = colors[t] || { bg: '#f4f5f7', color: '#172b4d' };\n//     return {\n//       background: c.bg,\n//       color: c.color,\n//       padding: '0.25rem 0.6rem',\n//       borderRadius: '4px',\n//       fontSize: '12px',\n//       fontWeight: 600\n//     };\n//   };\n\n//   const getProjectColor = (id) => {\n//     const colors = ['#0052cc', '#2684ff', '#00a3bf', '#36b37e', '#ff991f', '#de350b', '#6554c0'];\n//     const index = id.charCodeAt(0) % colors.length;\n//     return colors[index];\n//   };\n\n//   const projectIconStyle = (id) => ({\n//     width: '28px',\n//     height: '28px',\n//     borderRadius: '4px',\n//     background: getProjectColor(id),\n//     color: 'white',\n//     display: 'inline-flex',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     fontWeight: 600,\n//     marginRight: '8px',\n//     fontSize: '12px',\n//     textTransform: 'uppercase'\n//   });\n\n//   // Filtering\n//   const filteredProjects = projects.filter(p =>\n//     p.name.toLowerCase().includes(search.toLowerCase()) ||\n//     p.key.toLowerCase().includes(search.toLowerCase()) ||\n//     (p.lead && p.lead.toLowerCase().includes(search.toLowerCase())) ||\n//     (p.type && p.type.toLowerCase().includes(search.toLowerCase()))\n//   );\n\n//   // Sorting\n//   const sortedProjects = [...filteredProjects].sort((a, b) => {\n//     const aVal = a[sortConfig.key]?.toString().toLowerCase() || '';\n//     const bVal = b[sortConfig.key]?.toString().toLowerCase() || '';\n//     if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1;\n//     if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1;\n//     return 0;\n//   });\n\n//   const toggleSort = (key) => {\n//     setSortConfig((prev) =>\n//       prev.key === key\n//         ? { key, direction: prev.direction === 'asc' ? 'desc' : 'asc' }\n//         : { key, direction: 'asc' }\n//     );\n//   };\n\n//   const sortIcon = (col) => {\n//     if (sortConfig.key !== col) return null;\n//     return sortConfig.direction === 'asc' ? <FiChevronUp /> : <FiChevronDown />;\n//   };\n\n//   return (\n//     <div style={{ display: 'grid', gridTemplateColumns: '1fr 3fr', gap: '2rem' }}>\n//       {/* Create Project */}\n//       {/* ... (same as before, keeping form part unchanged) ... */}\n\n//       {/* Project Table */}\n//       <div style={{ background: '#fff', borderRadius: '6px', padding: '1.5rem', boxShadow: '0 1px 4px rgba(0,0,0,0.1)' }}>\n//         <h2 style={{ marginBottom: '1rem' }}>Projects</h2>\n\n//         <input\n//           type=\"text\"\n//           value={search}\n//           onChange={e => setSearch(e.target.value)}\n//           placeholder=\"Search projects...\"\n//           style={{\n//             width: '100%',\n//             padding: '0.6rem',\n//             marginBottom: '1rem',\n//             border: '1px solid #dfe1e6',\n//             borderRadius: '4px'\n//           }}\n//         />\n\n//         {sortedProjects.length === 0 ? (\n//           <p>No projects found.</p>\n//         ) : (\n//           <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n//             <thead>\n//               <tr>\n//                 <th onClick={() => toggleSort('key')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Key {sortIcon('key')}\n//                 </th>\n//                 <th onClick={() => toggleSort('name')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Name {sortIcon('name')}\n//                 </th>\n//                 <th onClick={() => toggleSort('type')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Type {sortIcon('type')}\n//                 </th>\n//                 <th onClick={() => toggleSort('lead')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Lead {sortIcon('lead')}\n//                 </th>\n//                 <th onClick={() => toggleSort('lastUpdated')} style={{ cursor: 'pointer', padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7' }}>\n//                   Last Updated {sortIcon('lastUpdated')}\n//                 </th>\n//                 <th style={{ padding: '0.75rem 1rem', borderBottom: '1px solid #f0f0f0', background: '#f4f5f7', textAlign: 'right' }}>\n//                   Actions\n//                 </th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {sortedProjects.map(p => (\n//                 <tr key={p.id} style={{ borderBottom: '1px solid #f0f0f0' }}>\n//                   <td style={{ padding: '0.75rem 1rem' }}>{p.key}</td>\n//                   <td style={{ padding: '0.75rem 1rem', display: 'flex', alignItems: 'center' }}>\n//                     <span style={projectIconStyle(p.id)}>{p.key.slice(0, 2)}</span>\n//                     {editingId === p.id ? (\n//                       <input value={editName} onChange={e => setEditName(e.target.value)} />\n//                     ) : (\n//                       <Link to={'/projects/' + p.id} style={{ fontWeight: 600, color: '#0052cc', textDecoration: 'none' }}>\n//                         {p.name}\n//                       </Link>\n//                     )}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem' }}>\n//                     {editingId === p.id ? (\n//                       <select value={editType} onChange={e => setEditType(e.target.value)}>\n//                         <option value=\"Software\">Software</option>\n//                         <option value=\"Business\">Business</option>\n//                         <option value=\"Service\">Service</option>\n//                       </select>\n//                     ) : (\n//                       <span style={typeBadgeStyle(p.type)}>{p.type}</span>\n//                     )}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem' }}>\n//                     {editingId === p.id ? (\n//                       <input value={editLead} onChange={e => setEditLead(e.target.value)} />\n//                     ) : (\n//                       <div style={{ display: 'flex', alignItems: 'center' }}>\n//                         <span style={avatarStyle}>{p.lead ? p.lead.charAt(0).toUpperCase() : '?'}</span>\n//                         {p.lead || 'Unassigned'}\n//                       </div>\n//                     )}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem', color: '#6b778c' }}>\n//                     {p.lastUpdated ? formatDistanceToNow(new Date(p.lastUpdated), { addSuffix: true }) : '—'}\n//                   </td>\n//                   <td style={{ padding: '0.75rem 1rem', textAlign: 'right' }}>\n//                     {editingId === p.id ? (\n//                       <>\n//                         <button onClick={() => saveEdit(p.id)}><FiCheck /></button>\n//                         <button onClick={cancelEdit}><FiX /></button>\n//                       </>\n//                     ) : (\n//                       <>\n//                         <button onClick={() => startEdit(p)}><FiEdit2 /></button>\n//                         <button onClick={() => remove(p.id)}><FiTrash2 /></button>\n//                       </>\n//                     )}\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAWA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}